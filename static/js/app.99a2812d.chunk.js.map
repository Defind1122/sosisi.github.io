{"version":3,"sources":["src/components/FlexView.tsx","src/hooks/useEthereum.tsx","src/constants/tokens.ts","src/constants/dimension.ts","src/components/Button.tsx","src/hooks/useAllCommonPairs.tsx","src/hooks/useSDK.tsx","src/components/Container.tsx","src/utils/index.ts","src/components/Content.tsx","src/components/app/AppHeader.tsx","src/components/web/ConnectToWallet.tsx","src/screens/Screen.tsx","src/components/Title.tsx","src/components/web/WebSubMenu.tsx","src/hooks/useDelayedEffect.tsx","src/utils/fetch-utils.ts","src/constants/Fraction.ts","src/constants/colors.ts","src/hooks/useColors.tsx","src/constants/contracts.ts","src/context/index.tsx","src/components/DarkModeSwitch.tsx","src/components/web/MobileWebMenu.tsx","src/components/web/WebHeader.tsx","src/screens/EmptyScreen.tsx","src/screens/index.tsx","App.tsx","globals.js","src/utils/analytics-utils.ts","src/context/GlobalContext.tsx","src/components/Text.tsx","assets/metamask-dark.png","assets/metamask.png","assets/sushiswap.jpg","src/context/EthersContext.tsx"],"names":["FlexView","props","flexDirection","direction","style","useEthereum","useState","window","ethereum","setEthereum","useDelayedEffect","ETH","name","address","ethers","constants","AddressZero","decimals","symbol","logoURI","balance","BigNumber","from","SCREEN_WIDTH","Math","round","Dimensions","get","width","SCREEN_HEIGHT","height","HEADER_HEIGHT","HEADER_WIDTH","DESKTOP_CONTENT_WIDTH","SUB_MENU_HEIGHT","IS_DESKTOP","Spacing","tiny","small","normal","large","huge","Button","useColors","primary","textMedium","placeholder","backgroundLight","type","size","fontSize","fontFamily","fontWeight","disabled","loading","onPress","undefined","loadingProps","color","buttonStyle","paddingHorizontal","backgroundColor","titleStyle","disabledTitleStyle","disabledStyle","DAI","Token","ChainId","MAINNET","USDC","USDT","SUSHI","YAM","AMPL","BASES_TO_CHECK_TRADES_AGAINST","WETH","CUSTOM_BASES","wrappedCurrency","currency","ETHER","useAllCommonPairs","loadAllCommonPairs","useCallback","currencyA","currencyB","provider","a","async","bases","tokenA","tokenB","basePairs","flatMap","base","map","otherBase","filter","t0","t1","allPairCombinations","tokens","Boolean","b","customBases","customBasesA","customBasesB","find","equals","Promise","all","pair","Fetcher","fetchPairData","pairs","minAmount","amount","percent","sub","mul","numerator","toString","div","denominator","Order","maker","fromToken","toToken","amountIn","amountOutMin","recipient","deadline","floor","Date","now","v","r","s","filledAmountIn","canceled","this","eq","toNumber","getContract","SETTLEMENT","settlement","getAddress","hashOfOrder","hash","signMessage","utils","arrayify","signature","splitSignature","sign","useSDK","getTotalSupply","useContext","EthersContext","allowedSlippage","Percent","getTrade","fromAmount","isETH","convertToken","to","CurrencyAmount","ether","TokenAmount","Trade","bestTradeExactIn","maxHops","maxNumResults","swap","trade","signer","Router","feeOnTransfer","ttl","params","swapCallParameters","router","ROUTER","estimateGas","methodName","args","value","gasLimit","functions","tx","logTransaction","arg","createOrder","kovanSigner","order","toArgs","orderBook","ORDER_BOOK","cancelOrder","slice","queryOrderFilledEvents","filters","OrderFilled","queryFilter","wrapETH","weth","deposit","unwrapETH","withdraw","getPair","addLiquidity","toAmount","getTime","removeLiquidityETH","token","liquidity","amountETH","removeLiquidity","addLiquidityETH","getExpectedSushiRewardPerBlock","masterChef","MASTER_CHEF","totalAllocPoint","sushiPerBlock","poolInfo","id","allocPoint","lpTokenId","enterSushiBar","sushiBar","SUSHI_BAR","enter","leaveSushiBar","leave","migrate","lpToken","sushiRoll","SUSHI_ROLL","Zero","migrateWithPermit","signERC2612Permit","permit","calculateSwapFee","calculateLimitOrderFee","calculateLimitOrderReturn","price","limitOrderFeeDeducted","swapFeeDeducted","Fraction","parse","apply","pow10","calculateAmountOfLPTokenMinted","liquidityToken","totalSupply","getLiquidityMinted","Container","Platform","select","web","contentContainerStyle","flex","default","CONTRACTS","ERC20","IUniswapV2Factory","IUniswapV2Pair","IUniswapV2Router02","IWETH","MasterChef","SushiBar","SushiRoll","OrderBook","Settlement","LPTokenScanner","abi","formatBalance","maxFraction","formatted","formatUnits","split","length","substr","parseBalance","parseUnits","isEmptyValue","text","isBigNumber","isZero","replace","SDKToken","convertAmount","parseCurrencyAmount","toExact","contract","ContractFactory","exp","pow","Content","marginLeft","marginRight","paddingVertical","AppHeader","background","View","StatusBar","translucent","ConnectWallet","darkMode","GlobalContext","metaMask","isMetaMask","source","require","alignItems","justifyContent","Image","request","method","alert","title","containerStyle","marginTop","marginHorizontal","WebScreen","chainId","Text","light","textAlign","position","top","right","bottom","left","ConnectToWallet","AppScreen","Screen","Title","marginBottom","SwapSubMenu","WebSubMenu","items","path","LiquiditySubMenu","MigrateSubMenu","StakingSubMenu","borderDark","submenu","borderBottomWidth","borderColor","alignSelf","item","MenuItem","key","accent","textLight","match","useRouteMatch","active","isExact","paddingTop","paddingBottom","textDecoration","handles","effect","timeout","inputs","useAsyncEffect","handle","setTimeout","clearTimeout","fetchTokens","customTokens","fetch","response","json","fetchTokenBalances","balances","getBalance","i","sort","t2","fetchPools","pools","pool","poolToken","balanceOf","totalDeposited","userInfo","amountDeposited","pendingSushi","fetchMyLPTokens","fetchLPTokens","SUSHISWAP_FACTORY","fetchMyUniswapLPTokens","UNISWAP_FACTORY","factory","factoryContract","allPairsLength","scanner","LP_TOKEN_SCANNER","account","pages","push","page","findPairs","min","flat","index","erc20","Number","findOrFetchToken","token0","token1","t","toLowerCase","send","meta","logo","addresses","fetchMyLimitOrders","canceledHashes","numberOfHashesOfMaker","hashesOfMaker","hashes","HashZero","orderOfHash","filledAmountInOfHash","includes","myOrders","compareOrders","o0","o1","status","compared","fetchMyCanceledLimitOrderHashes","numberOfCanceledHashesOfMaker","allCanceledHashes","sdk","numeratorToken","denominatorToken","NAN","ZERO","BASE","isNaN","fraction","gt","lt","maxFractions","str","endsWith","substring","One","Colors","common","white","transparent","secondary","green","red","twitter","facebook","header","border","textDark","shadow","overlay","dark","ContextProvider","children","DarkModeSwitch","setDarkMode","onChange","transform","scale","CloseButton","MobileWebMenuItem","startsWith","Status","ensName","connected","borderRadius","MobileWebMenu","expanded","onCollapse","animationType","visible","TouchableWithoutFeedback","paddingRight","Menu","padding","MenuIcon","onExpand","borderWidth","WebHeader","zIndex","onExpandMenu","EmptyScreen","FarmingScreen","lazy","LiquidityScreen","MigrateScreen","MyLimitOrdersScreen","RemoveLiquidityScreen","StakeScreen","UnstakeScreen","SwapScreen","Screens","load","OS","WebScreens","menuExpanded","setMenuExpanded","fallback","Tab","createBottomTabNavigator","AppScreens","theme","DefaultTheme","colors","card","notification","NavigationContainer","Navigator","tabBarOptions","activeTintColor","inactiveTintColor","labelStyle","component","options","tabOptions","iconName","tabBarIcon","App","useFonts","OpenSans_300Light","regular","OpenSans_400Regular","bold","OpenSans_600SemiBold","AppLoading","global","Buffer","Analytics","gasPrice","React","createContext","clear","_darkMode","mnemonic","setMnemonic","_mnemonic","GlobalContextProvider","colorScheme","useColorScheme","Provider","AsyncStorage","getItem","mode","mne","removeItem","setItem","String","GlobalContextConsumer","Consumer","medium","note","h1Style","h2Style","h3Style","h4Style","caption","module","exports","kovanProvider","addOnBlockListener","_name","_listener","removeOnBlockListener","updateTokens","loadingTokens","addCustomToken","_token","removeCustomToken","approveToken","_spender","_amount","getTokenAllowance","getTokenBalance","_who","EthersContextProvider","setProvider","setKovanProvider","setSigner","setKovanSigner","setChainId","setAddress","setENSName","onBlockListeners","setOnBlockListeners","setTokens","setCustomTokens","setLoadingTokens","useEffect","kovan","providers","AlchemyProvider","wallet","Wallet","web3","Web3Provider","alchemy","network","getSigner","onAccountsChanged","accounts","onChainChanged","on","off","lookupAddress","ens","data","findIndex","custom","JSON","stringify","spender","MaxUint256","approve","owner","who","listener","old","onBlock","block","Object","entries","EthersContextConsumer"],"mappings":"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","file":"static/js/app.99a2812d.chunk.js","sourcesContent":["import React, { FunctionComponent } from \"react\";\nimport { View, ViewProps } from \"react-native\";\n\ninterface FlexViewProps extends ViewProps {\n    direction?: \"row\" | \"column\";\n}\n\nconst FlexView: FunctionComponent<FlexViewProps> = props => {\n    const flexDirection = props.direction || \"row\";\n    return <View {...props} style={[{ flexDirection }, props.style]} />;\n};\nexport default FlexView;\n","import { useState } from \"react\";\n\nimport { EventType, Listener } from \"@ethersproject/abstract-provider\";\nimport useDelayedEffect from \"./useDelayedEffect\";\n\nconst useEthereum = () => {\n    const [ethereum, setEthereum] = useState(window.ethereum);\n    useDelayedEffect(\n        () => {\n            if (window.ethereum) {\n                setEthereum(window.ethereum);\n            }\n        },\n        2000,\n        []\n    );\n    return ethereum;\n};\n\ninterface JsonRPCRequest {\n    jsonrpc: string;\n    method: string;\n    params: any[];\n    id: number;\n}\n\ninterface JsonRPCResponse {\n    jsonrpc: string;\n    id: number;\n    result?: any;\n    error?: string;\n}\n\ninterface Callback<ResultType> {\n    (error: Error): void;\n    (error: null, val: ResultType): void;\n}\n\ninterface RequestArguments {\n    method: string;\n    params?: unknown[] | object;\n}\n\ninterface Ethereum {\n    chainId: string;\n    isMetaMask: boolean;\n    send(payload: any, callback: any): any;\n    send(payload: JsonRPCRequest, callback: Callback<JsonRPCResponse>): any;\n    request(args: RequestArguments): Promise<any>;\n    on(eventName: EventType, listener: Listener);\n    off(eventName: EventType, listener: Listener);\n}\n\ndeclare global {\n    interface Window {\n        ethereum?: Ethereum;\n        web3?: {\n            currentProvider?: Ethereum;\n        };\n    }\n}\n\nexport default useEthereum;\n","import { ethers } from \"ethers\";\nimport Token from \"../types/Token\";\n\nexport const ETH: Token = {\n    name: \"Ethereum\",\n    address: ethers.constants.AddressZero,\n    decimals: 18,\n    symbol: \"ETH\",\n    logoURI: \"https://lite.sushiswap.fi/images/tokens/ETH.png\",\n    balance: ethers.BigNumber.from(0)\n};\n","import { Dimensions } from \"react-native\";\n\nexport const SCREEN_WIDTH = Math.round(Dimensions.get(\"window\").width);\nexport const SCREEN_HEIGHT = Math.round(Dimensions.get(\"window\").height);\nexport const IS_HIGH_RESOLUTION = SCREEN_HEIGHT > 667;\nexport const HEADER_HEIGHT = 64;\nexport const HEADER_WIDTH = 980;\nexport const DESKTOP_CONTENT_WIDTH = 540;\nexport const SUB_MENU_HEIGHT = 40;\nexport const IS_DESKTOP = SCREEN_WIDTH > DESKTOP_CONTENT_WIDTH;\n\nexport const Spacing = IS_HIGH_RESOLUTION\n    ? {\n          tiny: 8,\n          small: 16,\n          normal: 32,\n          large: 48,\n          huge: 64\n      }\n    : {\n          tiny: 6,\n          small: 12,\n          normal: 24,\n          large: 32,\n          huge: 48\n      };\n","import React, { FC } from \"react\";\nimport { Button as NativeButton, ButtonProps as NativeButtonProps } from \"react-native-elements\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\n\nexport interface ButtonProps extends NativeButtonProps {\n    color?: string;\n    size?: \"small\" | \"normal\" | \"large\";\n    fontWeight?: \"light\" | \"regular\" | \"bold\";\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst Button: FC<ButtonProps> = props => {\n    const { primary, textMedium, placeholder, backgroundLight } = useColors();\n    const type = props.type || \"solid\";\n    const size = props.size || \"normal\";\n    const height = props.size === \"small\" ? 36 : size === \"normal\" ? 45 : 54;\n    const fontSize = props.size === \"small\" ? 13 : size === \"normal\" ? 15 : 18;\n    const fontFamily = props.fontWeight || \"regular\";\n    return (\n        <NativeButton\n            {...props}\n            disabled={props.loading || props.disabled}\n            onPress={props.loading ? undefined : props.onPress}\n            type={type}\n            loadingProps={{ color: textMedium }}\n            buttonStyle={[\n                {\n                    height,\n                    paddingHorizontal: Spacing.small,\n                    backgroundColor: \"transparent\"\n                },\n                props.buttonStyle\n            ]}\n            titleStyle={[\n                { fontSize, fontFamily, color: type === \"solid\" ? \"white\" : props.color || textMedium },\n                props.titleStyle\n            ]}\n            disabledTitleStyle={[{ fontSize, fontFamily, color: placeholder }, props.titleStyle]}\n            style={[{ backgroundColor: type === \"solid\" ? props.color || primary : \"transparent\" }, props.style]}\n            disabledStyle={[\n                { backgroundColor: type === \"solid\" ? backgroundLight : \"transparent\" },\n                props.disabledStyle\n            ]}\n        />\n    );\n};\nexport default Button;\n","import { useCallback } from \"react\";\n\nimport { ChainId, Currency, ETHER, Fetcher, Pair, Token, WETH } from \"@sushiswap/sdk\";\nimport { ethers } from \"ethers\";\n\nconst DAI = new Token(ChainId.MAINNET, \"0x6B175474E89094C44Da98b954EedeAC495271d0F\", 18, \"DAI\", \"Dai Stablecoin\");\nconst USDC = new Token(ChainId.MAINNET, \"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\", 6, \"USDC\", \"USD//C\");\nconst USDT = new Token(ChainId.MAINNET, \"0xdAC17F958D2ee523a2206206994597C13D831ec7\", 6, \"USDT\", \"Tether USD\");\nconst SUSHI = new Token(ChainId.MAINNET, \"0x6B3595068778DD592e39A122f4f5a5cF09C90fE2\", 18, \"SUSHI\", \"SushiToken\");\nconst YAM = new Token(ChainId.MAINNET, \"0x0e2298E3B3390e3b945a5456fBf59eCc3f55DA16\", 18, \"YAM\", \"YAM\");\nconst AMPL = new Token(ChainId.MAINNET, \"0xD46bA6D942050d489DBd938a2C909A5d5039A161\", 9, \"AMPL\", \"Ampleforth\");\n\nconst BASES_TO_CHECK_TRADES_AGAINST = [WETH[ChainId.MAINNET], DAI, USDC, USDT, SUSHI, YAM];\nconst CUSTOM_BASES = {\n    [AMPL.address]: [DAI, WETH[ChainId.MAINNET]]\n};\n\nfunction wrappedCurrency(currency: Currency | undefined): Token | undefined {\n    return currency === ETHER ? WETH[ChainId.MAINNET] : currency instanceof Token ? currency : undefined;\n}\n\n// Source: https://github.com/Uniswap/uniswap-interface/blob/master/src/hooks/Trades.ts\nconst useAllCommonPairs = () => {\n    const loadAllCommonPairs = useCallback(\n        // tslint:disable-next-line:max-func-body-length\n        async (currencyA?: Currency, currencyB?: Currency, provider?: ethers.providers.BaseProvider) => {\n            const bases: Token[] = BASES_TO_CHECK_TRADES_AGAINST;\n            const [tokenA, tokenB] = [wrappedCurrency(currencyA), wrappedCurrency(currencyB)];\n            const basePairs: [Token, Token][] = bases\n                .flatMap((base): [Token, Token][] => bases.map(otherBase => [base, otherBase]))\n                .filter(([t0, t1]) => t0.address !== t1.address);\n\n            const allPairCombinations =\n                tokenA && tokenB\n                    ? [\n                          // the direct pair\n                          [tokenA, tokenB],\n                          // token A against all bases\n                          ...bases.map((base): [Token, Token] => [tokenA, base]),\n                          // token B against all bases\n                          ...bases.map((base): [Token, Token] => [tokenB, base]),\n                          // each base against all bases\n                          ...basePairs\n                      ]\n                          .filter((tokens): tokens is [Token, Token] => Boolean(tokens[0] && tokens[1]))\n                          .filter(([t0, t1]) => t0.address !== t1.address)\n                          .filter(([a, b]) => {\n                              const customBases = CUSTOM_BASES;\n                              if (!customBases) return true;\n\n                              const customBasesA: Token[] | undefined = customBases[a.address];\n                              const customBasesB: Token[] | undefined = customBases[b.address];\n\n                              if (!customBasesA && !customBasesB) return true;\n\n                              if (customBasesA && !customBasesA.find(base => tokenB.equals(base))) return false;\n                              return !(customBasesB && !customBasesB.find(base => tokenA.equals(base)));\n                          })\n                    : [];\n\n            const pairs = await Promise.all(\n                allPairCombinations.map(async pair => {\n                    try {\n                        return await Fetcher.fetchPairData(pair[0], pair[1], provider);\n                    } catch (e) {\n                        return null;\n                    }\n                })\n            );\n            return pairs.filter(pair => pair !== null) as Pair[];\n        },\n        []\n    );\n\n    return { loadAllCommonPairs };\n};\n\nexport default useAllCommonPairs;\n","import { useCallback, useContext } from \"react\";\n\nimport { CurrencyAmount, Fetcher, Pair, Percent, Router, TokenAmount, Trade, WETH } from \"@sushiswap/sdk\";\nimport { signERC2612Permit } from \"eth-permit\";\nimport { ethers } from \"ethers\";\nimport { MASTER_CHEF, ORDER_BOOK, ROUTER, SETTLEMENT, SUSHI_BAR, SUSHI_ROLL } from \"../constants/contracts\";\nimport Fraction from \"../constants/Fraction\";\nimport { ETH } from \"../constants/tokens\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport LPToken from \"../types/LPToken\";\nimport Token from \"../types/Token\";\nimport { convertToken, getContract, pow10 } from \"../utils\";\nimport { logTransaction } from \"../utils/analytics-utils\";\nimport useAllCommonPairs from \"./useAllCommonPairs\";\nimport useEthereum from \"./useEthereum\";\n\n// tslint:disable-next-line:max-func-body-length\nconst useSDK = () => {\n    const { getTotalSupply } = useContext(EthersContext);\n    const ethereum = useEthereum();\n    const { loadAllCommonPairs } = useAllCommonPairs();\n    const allowedSlippage = new Percent(\"50\", \"10000\"); // 0.05%\n    const ttl = 60 * 20;\n\n    const getTrade = useCallback(\n        async (\n            fromToken: Token,\n            toToken: Token,\n            fromAmount: ethers.BigNumber,\n            provider: ethers.providers.BaseProvider\n        ) => {\n            if (provider) {\n                const isETH = fromToken.symbol === \"ETH\";\n                const from = convertToken(fromToken);\n                const to = convertToken(toToken);\n                const pairs = await loadAllCommonPairs(from, to, provider);\n                const amount = isETH\n                    ? CurrencyAmount.ether(fromAmount.toString())\n                    : new TokenAmount(from, fromAmount.toString());\n                return Trade.bestTradeExactIn(pairs, amount, to, { maxHops: 3, maxNumResults: 1 })[0];\n            }\n        },\n        []\n    );\n\n    const swap = useCallback(async (trade: Trade, signer: ethers.Signer) => {\n        if (trade) {\n            const params = Router.swapCallParameters(trade, {\n                feeOnTransfer: false,\n                allowedSlippage,\n                recipient: await signer.getAddress(),\n                ttl\n            });\n            const router = getContract(\"IUniswapV2Router02\", ROUTER, signer);\n            const gasLimit = await router.estimateGas[params.methodName](...params.args, {\n                value: params.value\n            });\n            const tx = await router.functions[params.methodName](...params.args, {\n                value: params.value,\n                gasLimit: gasLimit.mul(120).div(100)\n            });\n            await logTransaction(\n                tx,\n                \"UniswapV2Router02.\" + params.methodName + \"()\",\n                ...params.args.map(arg => arg.toString())\n            );\n            return {\n                trade,\n                tx\n            };\n        }\n    }, []);\n\n    const createOrder = useCallback(\n        async (\n            fromToken: Token,\n            toToken: Token,\n            amountIn: ethers.BigNumber,\n            amountOutMin: ethers.BigNumber,\n            signer: ethers.Signer,\n            kovanSigner: ethers.Signer\n        ) => {\n            const order = new Order(signer, fromToken, toToken, amountIn, amountOutMin, await signer.getAddress());\n            const args = await order.toArgs();\n\n            const orderBook = getContract(\"OrderBook\", ORDER_BOOK, kovanSigner);\n            const gasLimit = await orderBook.estimateGas.createOrder(args);\n            const tx = await orderBook.createOrder(args, {\n                gasLimit: gasLimit.mul(120).div(100)\n            });\n            return await logTransaction(tx, \"OrderBook.createOrder()\", ...args.map(arg => arg.toString()));\n        },\n        []\n    );\n\n    const cancelOrder = useCallback(async (order: Order, signer: ethers.Signer) => {\n        const settlement = getContract(\"Settlement\", SETTLEMENT, signer);\n        const args = (await order.toArgs()).slice(0, 7);\n        const gasLimit = await settlement.estimateGas.cancelOrder(...args);\n        const tx = await settlement.cancelOrder(...args, {\n            gasLimit: gasLimit.mul(120).div(100)\n        });\n        return await logTransaction(tx, \"Settlement.cancelOrder()\", ...args.map(arg => arg.toString()));\n    }, []);\n\n    const queryOrderFilledEvents = useCallback(async (hash: string, signer: ethers.Signer) => {\n        const settlement = getContract(\"Settlement\", SETTLEMENT, signer);\n        const filter = settlement.filters.OrderFilled(hash);\n        return await settlement.queryFilter(filter);\n    }, []);\n\n    const wrapETH = useCallback(async (amount: ethers.BigNumber, signer: ethers.Signer) => {\n        const weth = getContract(\"IWETH\", WETH[1].address, signer);\n        const gasLimit = await weth.estimateGas.deposit({\n            value: amount\n        });\n        const tx = await weth.deposit({\n            value: amount,\n            gasLimit\n        });\n        return await logTransaction(tx, \"WETH.deposit()\");\n    }, []);\n\n    const unwrapETH = useCallback(async (amount: ethers.BigNumber, signer: ethers.Signer) => {\n        const weth = getContract(\"IWETH\", WETH[1].address, signer);\n        const gasLimit = await weth.estimateGas.withdraw(amount);\n        const tx = await weth.withdraw(amount, {\n            gasLimit\n        });\n        return await logTransaction(tx, \"WETH.withdraw()\");\n    }, []);\n\n    const getPair = useCallback(async (fromToken: Token, toToken: Token, provider: ethers.providers.BaseProvider) => {\n        const from = convertToken(fromToken);\n        const to = convertToken(toToken);\n        return await Fetcher.fetchPairData(from, to, provider);\n    }, []);\n\n    const addLiquidity = useCallback(\n        async (\n            fromToken: Token,\n            toToken: Token,\n            fromAmount: ethers.BigNumber,\n            toAmount: ethers.BigNumber,\n            signer: ethers.Signer\n        ) => {\n            const router = getContract(\"IUniswapV2Router02\", ROUTER, signer);\n            const deadline = `0x${(Math.floor(new Date().getTime() / 1000) + ttl).toString(16)}`;\n            const args = [\n                fromToken.address,\n                toToken.address,\n                fromAmount,\n                toAmount,\n                minAmount(fromAmount, allowedSlippage),\n                minAmount(toAmount, allowedSlippage),\n                await signer.getAddress(),\n                deadline\n            ];\n            const gasLimit = await router.estimateGas.addLiquidity(...args);\n            const tx = await router.functions.addLiquidity(...args, {\n                gasLimit: gasLimit.mul(120).div(100)\n            });\n            return logTransaction(tx, \"UniswapV2Router02.addLiquidity()\", ...args.map(arg => arg.toString()));\n        },\n        []\n    );\n\n    const removeLiquidityETH = useCallback(\n        async (\n            token: Token,\n            liquidity: ethers.BigNumber,\n            amount: ethers.BigNumber,\n            amountETH: ethers.BigNumber,\n            signer: ethers.Signer\n        ) => {\n            const router = getContract(\"IUniswapV2Router02\", ROUTER, signer);\n            const deadline = `0x${(Math.floor(new Date().getTime() / 1000) + ttl).toString(16)}`;\n            const args = [\n                token.address,\n                liquidity,\n                minAmount(amount, allowedSlippage),\n                minAmount(amountETH, allowedSlippage),\n                await signer.getAddress(),\n                deadline\n            ];\n            const gasLimit = await router.estimateGas.removeLiquidityETH(...args);\n            const tx = await router.functions.removeLiquidityETH(...args, {\n                gasLimit: gasLimit.mul(120).div(100)\n            });\n            return logTransaction(tx, \"UniswapV2Router02.removeLiquidityETH()\", ...args.map(arg => arg.toString()));\n        },\n        []\n    );\n\n    const removeLiquidity = useCallback(\n        async (\n            fromToken: Token,\n            toToken: Token,\n            liquidity: ethers.BigNumber,\n            fromAmount: ethers.BigNumber,\n            toAmount: ethers.BigNumber,\n            signer: ethers.Signer\n        ) => {\n            const router = getContract(\"IUniswapV2Router02\", ROUTER, signer);\n            const deadline = `0x${(Math.floor(new Date().getTime() / 1000) + ttl).toString(16)}`;\n            const args = [\n                fromToken.address,\n                toToken.address,\n                liquidity,\n                minAmount(fromAmount, allowedSlippage),\n                minAmount(toAmount, allowedSlippage),\n                await signer.getAddress(),\n                deadline\n            ];\n            const gasLimit = await router.estimateGas.removeLiquidity(...args);\n            const tx = await router.functions.removeLiquidity(...args, {\n                gasLimit: gasLimit.mul(120).div(100)\n            });\n            return logTransaction(tx, \"UniswapV2Router02.removeLiquidity()\", ...args.map(arg => arg.toString()));\n        },\n        []\n    );\n\n    const addLiquidityETH = useCallback(\n        async (token: Token, amount: ethers.BigNumber, amountETH: ethers.BigNumber, signer: ethers.Signer) => {\n            const router = getContract(\"IUniswapV2Router02\", ROUTER, signer);\n            const deadline = `0x${(Math.floor(new Date().getTime() / 1000) + ttl).toString(16)}`;\n            const args = [\n                token.address,\n                amount,\n                minAmount(amount, allowedSlippage),\n                minAmount(amountETH, allowedSlippage),\n                await signer.getAddress(),\n                deadline\n            ];\n            const gasLimit = await router.estimateGas.addLiquidityETH(...args, {\n                value: amountETH\n            });\n            const tx = await router.functions.addLiquidityETH(...args, {\n                gasLimit: gasLimit.mul(120).div(100),\n                value: amountETH\n            });\n            return logTransaction(tx, \"UniswapV2Router02.addLiquidityETH()\", ...args.map(arg => arg.toString()));\n        },\n        []\n    );\n\n    const getExpectedSushiRewardPerBlock = useCallback(async (token: LPToken, signer: ethers.Signer) => {\n        const masterChef = getContract(\"MasterChef\", MASTER_CHEF, signer);\n        const totalAllocPoint = await masterChef.totalAllocPoint();\n        const sushiPerBlock = await masterChef.sushiPerBlock();\n        const { allocPoint } = await masterChef.poolInfo(token.id);\n        return ethers.BigNumber.from(sushiPerBlock)\n            .mul(allocPoint)\n            .div(totalAllocPoint);\n    }, []);\n\n    const deposit = useCallback(async (lpTokenId: number, amount: ethers.BigNumber, signer: ethers.Signer) => {\n        const masterChef = getContract(\"MasterChef\", MASTER_CHEF, signer);\n        const gasLimit = await masterChef.estimateGas.deposit(lpTokenId, amount);\n        const tx = await masterChef.deposit(lpTokenId, amount, {\n            gasLimit: gasLimit.mul(120).div(100)\n        });\n        return logTransaction(tx, \"MasterChef.deposit()\", lpTokenId, amount.toString());\n    }, []);\n\n    const withdraw = useCallback(async (lpTokenId: number, amount: ethers.BigNumber, signer: ethers.Signer) => {\n        const masterChef = getContract(\"MasterChef\", MASTER_CHEF, signer);\n        const gasLimit = await masterChef.estimateGas.withdraw(lpTokenId, amount);\n        const tx = await masterChef.withdraw(lpTokenId, amount, {\n            gasLimit: gasLimit.mul(120).div(100)\n        });\n        return logTransaction(tx, \"MasterChef.withdraw()\", lpTokenId, amount.toString());\n    }, []);\n\n    const enterSushiBar = useCallback(async (amount: ethers.BigNumber, signer: ethers.Signer) => {\n        const sushiBar = getContract(\"SushiBar\", SUSHI_BAR, signer);\n        const gasLimit = await sushiBar.estimateGas.enter(amount);\n        const tx = await sushiBar.enter(amount, {\n            gasLimit: gasLimit.mul(120).div(100)\n        });\n        return logTransaction(tx, \"SushiBar.enter()\", amount.toString());\n    }, []);\n\n    const leaveSushiBar = useCallback(async (amount: ethers.BigNumber, signer: ethers.Signer) => {\n        const sushiBar = getContract(\"SushiBar\", SUSHI_BAR, signer);\n        const gasLimit = await sushiBar.estimateGas.leave(amount);\n        const tx = await sushiBar.leave(amount, {\n            gasLimit: gasLimit.mul(120).div(100)\n        });\n        return logTransaction(tx, \"SushiBar.leave()\", amount.toString());\n    }, []);\n\n    const migrate = useCallback(\n        async (lpToken: LPToken, amount: ethers.BigNumber, signer: ethers.Signer) => {\n            const sushiRoll = getContract(\"SushiRoll\", SUSHI_ROLL, signer);\n            const deadline = Math.floor(new Date().getTime() / 1000) + ttl;\n            const args = [\n                lpToken.tokenA.address,\n                lpToken.tokenB.address,\n                amount,\n                ethers.constants.Zero,\n                ethers.constants.Zero,\n                deadline\n            ];\n            const gasLimit = await sushiRoll.estimateGas.migrate(...args);\n            const tx = await sushiRoll.migrate(...args, {\n                gasLimit: gasLimit.mul(120).div(100)\n            });\n            return logTransaction(tx, \"SushiRoll.migrate()\", ...args.map(arg => arg.toString()));\n        },\n        [ethereum]\n    );\n\n    const migrateWithPermit = useCallback(\n        async (lpToken: LPToken, amount: ethers.BigNumber, signer: ethers.Signer) => {\n            const sushiRoll = getContract(\"SushiRoll\", SUSHI_ROLL, signer);\n            const deadline = Math.floor(new Date().getTime() / 1000) + ttl;\n            const permit = await signERC2612Permit(\n                ethereum,\n                lpToken.address,\n                await signer.getAddress(),\n                SUSHI_ROLL,\n                amount.toString(),\n                deadline\n            );\n            const args = [\n                lpToken.tokenA.address,\n                lpToken.tokenB.address,\n                amount,\n                ethers.constants.Zero,\n                ethers.constants.Zero,\n                deadline,\n                permit.v,\n                permit.r,\n                permit.s\n            ];\n            const gasLimit = await sushiRoll.estimateGas.migrateWithPermit(...args);\n            const tx = await sushiRoll.migrateWithPermit(...args, {\n                gasLimit: gasLimit.mul(120).div(100)\n            });\n            return logTransaction(tx, \"SushiRoll.migrateWithPermit()\", ...args.map(arg => arg.toString()));\n        },\n        [ethereum]\n    );\n\n    const calculateSwapFee = (fromAmount: ethers.BigNumber) => {\n        return fromAmount.mul(3).div(1000);\n    };\n\n    const calculateLimitOrderFee = (fromAmount: ethers.BigNumber) => {\n        return fromAmount.mul(2).div(1000);\n    };\n\n    const calculateLimitOrderReturn = (\n        fromToken: Token,\n        toToken: Token,\n        fromAmount: ethers.BigNumber,\n        price: string\n    ) => {\n        const limitOrderFeeDeducted = fromAmount.sub(calculateLimitOrderFee(fromAmount));\n        const swapFeeDeducted = limitOrderFeeDeducted.sub(calculateSwapFee(limitOrderFeeDeducted));\n        return Fraction.parse(price).apply(swapFeeDeducted.mul(pow10(toToken.decimals)).div(pow10(fromToken.decimals)));\n    };\n\n    const calculateAmountOfLPTokenMinted = async (pair: Pair, fromAmount: TokenAmount, toAmount: TokenAmount) => {\n        const totalSupply = await getTotalSupply(pair.liquidityToken.address);\n        if (totalSupply) {\n            return pair.getLiquidityMinted(\n                new TokenAmount(pair.liquidityToken, totalSupply.toString()),\n                fromAmount,\n                toAmount\n            );\n        }\n    };\n\n    return {\n        allowedSlippage,\n        getTrade,\n        swap,\n        createOrder,\n        cancelOrder,\n        queryOrderFilledEvents,\n        wrapETH,\n        unwrapETH,\n        getPair,\n        addLiquidity,\n        addLiquidityETH,\n        removeLiquidity,\n        removeLiquidityETH,\n        getExpectedSushiRewardPerBlock,\n        deposit,\n        withdraw,\n        enterSushiBar,\n        leaveSushiBar,\n        migrate,\n        migrateWithPermit,\n        calculateSwapFee,\n        calculateLimitOrderFee,\n        calculateLimitOrderReturn,\n        calculateAmountOfLPTokenMinted\n    };\n};\n\nconst minAmount = (amount: ethers.BigNumber, percent: Percent) => {\n    return amount.sub(amount.mul(percent.numerator.toString()).div(percent.denominator.toString()));\n};\n\nexport type OrderStatus = \"Open\" | \"Expired\" | \"Filled\" | \"Canceled\";\n\nexport class Order {\n    maker: ethers.Signer;\n    fromToken: Token;\n    toToken: Token;\n    amountIn: ethers.BigNumber;\n    amountOutMin: ethers.BigNumber;\n    recipient: string;\n    deadline: ethers.BigNumber;\n    v?: number;\n    r?: string;\n    s?: string;\n    filledAmountIn?: ethers.BigNumber;\n    canceled?: boolean;\n\n    constructor(\n        maker: ethers.Signer,\n        fromToken: Token,\n        toToken: Token,\n        amountIn: ethers.BigNumber,\n        amountOutMin: ethers.BigNumber,\n        recipient: string,\n        deadline = ethers.BigNumber.from(Math.floor(Date.now() / 1000 + 24 * 3600)),\n        v?: number,\n        r?: string,\n        s?: string,\n        filledAmountIn?: ethers.BigNumber,\n        canceled?: boolean\n    ) {\n        this.maker = maker;\n        this.fromToken = fromToken;\n        this.toToken = toToken;\n        this.amountIn = amountIn;\n        this.amountOutMin = amountOutMin;\n        this.recipient = recipient;\n        this.deadline = deadline;\n        this.v = v;\n        this.r = r;\n        this.s = s;\n        this.filledAmountIn = filledAmountIn;\n        this.canceled = canceled;\n    }\n\n    status(): OrderStatus {\n        return this.canceled\n            ? \"Canceled\"\n            : this.filledAmountIn?.eq(this.amountIn)\n            ? \"Filled\"\n            : this.deadline.toNumber() * 1000 < Date.now()\n            ? \"Expired\"\n            : \"Open\";\n    }\n\n    async hash() {\n        const settlement = await getContract(\"Settlement\", SETTLEMENT, this.maker);\n        return await settlement.hashOfOrder(\n            await this.maker.getAddress(),\n            this.fromToken.address,\n            this.toToken.address,\n            this.amountIn,\n            this.amountOutMin,\n            this.recipient,\n            this.deadline\n        );\n    }\n\n    async sign() {\n        const hash = await this.hash();\n        const signature = await this.maker.signMessage(ethers.utils.arrayify(hash));\n        return ethers.utils.splitSignature(signature);\n    }\n\n    async toArgs() {\n        const { v, r, s } = this.v && this.r && this.s ? { v: this.v, r: this.r, s: this.s } : await this.sign();\n        return [\n            await this.maker.getAddress(),\n            this.fromToken.address,\n            this.toToken.address,\n            this.amountIn,\n            this.amountOutMin,\n            this.recipient,\n            this.deadline,\n            v,\n            r,\n            s\n        ];\n    }\n}\n\nexport default useSDK;\n","import React, { FC } from \"react\";\nimport { Platform, SafeAreaView, ScrollView, ViewProps } from \"react-native\";\n\nexport type ContainerProps = ViewProps;\n\nconst Container: FC<ContainerProps> = props => {\n    return Platform.select({\n        web: (\n            <ScrollView\n                contentContainerStyle={{ flex: 1 }}\n                style={[\n                    {\n                        flex: 1\n                    },\n                    props.style\n                ]}\n                {...props}\n            />\n        ),\n        default: (\n            <SafeAreaView style={{ flex: 1 }}>\n                <ScrollView {...props} />\n            </SafeAreaView>\n        )\n    });\n};\n\nexport default Container;\n","import ERC20 from \"@sushiswap/core/build/contracts/ERC20.json\";\nimport IUniswapV2Factory from \"@sushiswap/core/build/contracts/IUniswapV2Factory.json\";\nimport IUniswapV2Pair from \"@sushiswap/core/build/contracts/IUniswapV2Pair.json\";\nimport IUniswapV2Router02 from \"@sushiswap/core/build/contracts/IUniswapV2Router02.json\";\nimport IWETH from \"@sushiswap/core/build/contracts/IWETH.json\";\nimport MasterChef from \"@sushiswap/core/build/contracts/MasterChef.json\";\nimport SushiBar from \"@sushiswap/core/build/contracts/SushiBar.json\";\nimport SushiRoll from \"@sushiswap/core/build/contracts/SushiRoll.json\";\nimport { ChainId, CurrencyAmount, Token as SDKToken, TokenAmount, WETH } from \"@sushiswap/sdk\";\nimport OrderBook from \"@sushiswap/settlement/deployments/kovan/OrderBook.json\";\nimport Settlement from \"@sushiswap/settlement/deployments/mainnet/Settlement.json\";\nimport { ethers } from \"ethers\";\nimport LPTokenScanner from \"../constants/abi/LPTokenScanner.json\";\nimport Token from \"../types/Token\";\n\nconst CONTRACTS = {\n    ERC20,\n    IUniswapV2Factory,\n    IUniswapV2Pair,\n    IUniswapV2Router02,\n    IWETH,\n    MasterChef,\n    SushiBar,\n    SushiRoll,\n    OrderBook,\n    Settlement,\n    LPTokenScanner: { abi: LPTokenScanner }\n};\n\nexport const formatBalance = (value: ethers.BigNumberish, decimals = 18, maxFraction = 0) => {\n    const formatted = ethers.utils.formatUnits(value, decimals);\n    if (maxFraction > 0) {\n        const split = formatted.split(\".\");\n        if (split.length > 1) {\n            return split[0] + \".\" + split[1].substr(0, maxFraction);\n        }\n    }\n    return formatted;\n};\n\nexport const parseBalance = (value: string, decimals = 18) => {\n    return ethers.utils.parseUnits(value || \"0\", decimals);\n};\n\nexport const isEmptyValue = (text: string) =>\n    ethers.BigNumber.isBigNumber(text)\n        ? ethers.BigNumber.from(text).isZero()\n        : text === \"\" || text.replace(/0/g, \"\").replace(/\\./, \"\") === \"\";\n\nexport const convertToken = (token: Token) => {\n    return token.symbol === \"ETH\" ? WETH[\"1\"] : new SDKToken(ChainId.MAINNET, token.address, token.decimals);\n};\n\nexport const convertAmount = (token: Token, amount: string) => {\n    return new TokenAmount(convertToken(token), parseBalance(amount, token.decimals).toString());\n};\n\nexport const parseCurrencyAmount = (value: CurrencyAmount, decimals = 18) => {\n    return ethers.BigNumber.from(parseBalance(value.toExact(), decimals));\n};\n\nexport const getContract = (name: string, address: string, signer: ethers.Signer) => {\n    const contract = CONTRACTS[name];\n    return ethers.ContractFactory.getContract(address, contract.abi, signer);\n};\n\nexport const pow10 = (exp: ethers.BigNumberish) => {\n    return ethers.BigNumber.from(10).pow(exp);\n};\n\nexport const formatDate = (date: Date) => {\n    return date.toLocaleDateString(\"en-US\") + \" \" + date.toLocaleTimeString(\"en-US\");\n};\n","import React from \"react\";\nimport { View, ViewProps } from \"react-native\";\n\nimport { DESKTOP_CONTENT_WIDTH, IS_DESKTOP, Spacing } from \"../constants/dimension\";\n\nconst Content: React.FunctionComponent<ViewProps> = props => {\n    return (\n        <View\n            {...props}\n            style={[\n                {\n                    width: IS_DESKTOP ? DESKTOP_CONTENT_WIDTH : \"100%\",\n                    marginLeft: \"auto\",\n                    marginRight: \"auto\",\n                    paddingHorizontal: Spacing.normal,\n                    paddingVertical: Spacing.huge\n                },\n                props.style\n            ]}\n        />\n    );\n};\nexport default Content;\n","import React from \"react\";\nimport { View } from \"react-native\";\n\nimport { StatusBar } from \"expo-status-bar\";\n\nimport { HEADER_HEIGHT } from \"../../constants/dimension\";\nimport useColors from \"../../hooks/useColors\";\n\nconst AppHeader = () => {\n    const { background } = useColors();\n    return (\n        <View\n            style={{\n                width: \"100%\",\n                height: HEADER_HEIGHT,\n                backgroundColor: background\n            }}>\n            <StatusBar translucent={false} backgroundColor={background} />\n        </View>\n    );\n};\n\nexport default AppHeader;\n","import React, { useContext } from \"react\";\nimport { Image, View } from \"react-native\";\n\nimport { IS_DESKTOP, Spacing } from \"../../constants/dimension\";\nimport { GlobalContext } from \"../../context/GlobalContext\";\nimport useColors from \"../../hooks/useColors\";\nimport useEthereum from \"../../hooks/useEthereum\";\nimport Button from \"../Button\";\n\nconst ConnectWallet = () => {\n    const { primary } = useColors();\n    const { darkMode } = useContext(GlobalContext);\n    const ethereum = useEthereum();\n    const onPress = async () => {\n        if (ethereum) {\n            await ethereum.request({ method: \"eth_requestAccounts\" });\n        } else {\n            alert(\"No ethereum provider found.\");\n        }\n    };\n    const metaMask = ethereum?.isMetaMask || false;\n    const source = metaMask\n        ? darkMode\n            ? require(\"../../../assets/metamask-dark.png\")\n            : require(\"../../../assets/metamask.png\")\n        : require(\"../../../assets/sushiswap.jpg\");\n    return (\n        <View style={{ flex: 1, alignItems: \"center\", justifyContent: \"center\" }}>\n            <Image source={source} style={{ width: metaMask ? 223 : 200, height: metaMask ? 183 : 200 }} />\n            <Button\n                size={\"large\"}\n                color={metaMask ? \"#e2761b\" : primary}\n                onPress={onPress}\n                title={\"Connect\"}\n                containerStyle={{ width: IS_DESKTOP ? 440 : \"100%\" }}\n                style={{ marginTop: Spacing.large, marginHorizontal: Spacing.normal }}\n            />\n        </View>\n    );\n};\nexport default ConnectWallet;\n","import React, { useContext } from \"react\";\nimport { Platform, View } from \"react-native\";\n\nimport AppHeader from \"../components/app/AppHeader\";\nimport Text from \"../components/Text\";\nimport ConnectToWallet from \"../components/web/ConnectToWallet\";\nimport { HEADER_HEIGHT } from \"../constants/dimension\";\nimport { EthersContext } from \"../context/EthersContext\";\n\nconst Screen = props => {\n    return Platform.select({\n        web: <WebScreen {...props} />,\n        default: <AppScreen {...props} />\n    });\n};\n\nconst WebScreen = props => {\n    const { address, chainId } = useContext(EthersContext);\n    if (!address) return <ConnectToWallet />;\n    if (chainId !== 1)\n        return (\n            <View style={{ flex: 1, alignItems: \"center\", justifyContent: \"center\" }}>\n                <Text light={true} style={{ textAlign: \"center\" }}>\n                    {\"Please switch network to\\n'Ethereum Mainnet'\"}\n                </Text>\n            </View>\n        );\n    return (\n        <View\n            {...props}\n            style={[{ position: \"absolute\", top: HEADER_HEIGHT, right: 0, bottom: 0, left: 0 }, props.style]}\n        />\n    );\n};\n\nconst AppScreen = props => (\n    <View style={{ width: \"100%\", height: \"100%\" }}>\n        <AppHeader />\n        <View {...props} style={[{ flex: 1 }, props.style]} />\n    </View>\n);\n\nexport default Screen;\n","import React, { FC } from \"react\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport Text from \"./Text\";\n\ninterface TitleProps {\n    text: string;\n}\n\nconst Title: FC<TitleProps> = props => {\n    return (\n        <Text fontWeight={\"bold\"} style={{ marginBottom: Spacing.tiny, fontSize: 40 }}>\n            {props.text}\n        </Text>\n    );\n};\n\nexport default Title;\n","import React, { FC } from \"react\";\nimport { View } from \"react-native\";\nimport { Link, useRouteMatch } from \"react-router-dom\";\n\nimport { HEADER_WIDTH, IS_DESKTOP, Spacing, SUB_MENU_HEIGHT } from \"../../constants/dimension\";\nimport useColors from \"../../hooks/useColors\";\nimport FlexView from \"../FlexView\";\nimport Text from \"../Text\";\n\nexport interface WebSubMenuItem {\n    title: string;\n    path: string;\n}\n\nexport interface WebSubMenuProps {\n    items: WebSubMenuItem[];\n}\n\nexport const SwapSubMenu = () => (\n    <WebSubMenu\n        items={[\n            {\n                title: \"New Order\",\n                path: \"/swap\"\n            },\n            {\n                title: \"My Orders\",\n                path: \"/swap/my-orders\"\n            }\n        ]}\n    />\n);\n\nexport const LiquiditySubMenu = () => (\n    <WebSubMenu\n        items={[\n            {\n                title: \"Add Liquidity\",\n                path: \"/liquidity\"\n            },\n            {\n                title: \"Remove Liquidity\",\n                path: \"/liquidity/remove\"\n            }\n        ]}\n    />\n);\n\nexport const MigrateSubMenu = () => (\n    <WebSubMenu\n        items={[\n            {\n                title: \"Migrate Liquidity\",\n                path: \"/migrate\"\n            }\n        ]}\n    />\n);\n\nexport const StakingSubMenu = () => (\n    <WebSubMenu\n        items={[\n            {\n                title: \"Stake\",\n                path: \"/staking\"\n            },\n            {\n                title: \"Unstake\",\n                path: \"/staking/unstake\"\n            }\n        ]}\n    />\n);\n\nconst WebSubMenu: FC<WebSubMenuProps> = props => {\n    const { borderDark, submenu } = useColors();\n    return (\n        <View\n            style={{\n                height: SUB_MENU_HEIGHT,\n                width: \"100%\",\n                borderBottomWidth: 1,\n                borderColor: borderDark + \"40\",\n                backgroundColor: submenu\n            }}>\n            <FlexView\n                style={{\n                    width: IS_DESKTOP ? HEADER_WIDTH : \"100%\",\n                    marginTop: 2,\n                    paddingHorizontal: Spacing.normal,\n                    alignSelf: \"center\",\n                    justifyContent: \"flex-end\",\n                    alignItems: \"center\"\n                }}>\n                {props.items.map(item => (\n                    <MenuItem key={item.path} {...item} />\n                ))}\n            </FlexView>\n        </View>\n    );\n};\n\nconst MenuItem = ({ title, path }) => {\n    const { accent, textLight } = useColors();\n    const match = useRouteMatch(path);\n    const active = match?.isExact;\n    return (\n        <Link\n            to={path}\n            style={{\n                marginLeft: Spacing.small,\n                paddingTop: Spacing.tiny,\n                paddingBottom: Spacing.tiny,\n                textDecoration: \"none\"\n            }}>\n            <Text\n                fontWeight={active ? \"regular\" : \"light\"}\n                style={{\n                    fontSize: 13,\n                    color: active ? accent : textLight\n                }}>\n                {title}\n            </Text>\n        </Link>\n    );\n};\n\nexport default WebSubMenu;\n","import useAsyncEffect from \"use-async-effect\";\n\nconst handles = {};\n\nconst useDelayedEffect = (\n    effect: (isMounted: () => boolean) => unknown | Promise<unknown>,\n    timeout: number,\n    inputs?: any[]\n) => {\n    const key = effect.toString();\n    useAsyncEffect<number>(\n        () => {\n            const handle = setTimeout(effect, timeout);\n            handles[key] = handle;\n            return handle;\n        },\n        handle => {\n            clearTimeout(handle);\n        },\n        inputs\n    );\n};\nexport default useDelayedEffect;\n","import { FACTORY_ADDRESS as SUSHISWAP_FACTORY } from \"@sushiswap/sdk\";\nimport { FACTORY_ADDRESS as UNISWAP_FACTORY } from \"@uniswap/sdk\";\nimport { ethers } from \"ethers\";\nimport { LP_TOKEN_SCANNER, MASTER_CHEF, ORDER_BOOK, SETTLEMENT } from \"../constants/contracts\";\nimport { ETH } from \"../constants/tokens\";\nimport { Order, OrderStatus } from \"../hooks/useSDK\";\nimport LPToken from \"../types/LPToken\";\nimport Token from \"../types/Token\";\nimport { getContract } from \"./index\";\n\nexport const fetchTokens = async (\n    address: string,\n    provider: ethers.providers.BaseProvider,\n    signer: ethers.Signer,\n    customTokens?: Token[]\n) => {\n    const response = await fetch(\"https://lite.sushiswap.fi/tokens.json\");\n    const json = await response.json();\n    const tokens = [...json.tokens, ...(customTokens || [])];\n\n    const balances = await fetchTokenBalances(\n        tokens.map(token => token.address),\n        signer\n    );\n    return [\n        {\n            ...ETH,\n            balance: await provider.getBalance(address)\n        },\n        ...tokens.map((token, i) => ({\n            ...token,\n            balance: ethers.BigNumber.from(balances[i] || 0)\n        }))\n    ].sort((t1, t2) => {\n        return t2.balance\n            .sub(t1.balance)\n            .div(ethers.BigNumber.from(10).pow(10))\n            .toNumber();\n    });\n};\n\nexport const fetchPools = async (provider: ethers.providers.JsonRpcProvider, signer: ethers.Signer) => {\n    const response = await fetch(\"https://lite.sushiswap.fi/pools.json\");\n    const pools = await response.json();\n    const address = await signer.getAddress();\n    const balances = await fetchTokenBalances(\n        pools.map(pool => pool.address),\n        signer\n    );\n    return (await Promise.all(\n        pools.map(async (pool, i) => {\n            const poolToken = getContract(\"ERC20\", pool.address, signer);\n            const totalDeposited = await poolToken.balanceOf(MASTER_CHEF);\n            const masterChef = getContract(\"MasterChef\", MASTER_CHEF, signer);\n            const { amount: amountDeposited } = await masterChef.userInfo(i, address);\n            const pendingSushi = await masterChef.pendingSushi(i, address);\n            return {\n                ...pool,\n                id: i,\n                symbol: pool.tokenA.symbol + \"-\" + pool.tokenB.symbol + \" LP\",\n                balance: ethers.BigNumber.from(balances[i] || 0),\n                totalDeposited,\n                amountDeposited,\n                pendingSushi\n            };\n        })\n    )) as LPToken[];\n};\n\nexport const fetchMyLPTokens = async (\n    tokens: Token[],\n    provider: ethers.providers.JsonRpcProvider,\n    signer: ethers.Signer\n) => {\n    return await fetchLPTokens(SUSHISWAP_FACTORY, tokens, provider, signer);\n};\n\nexport const fetchMyUniswapLPTokens = async (\n    tokens: Token[],\n    provider: ethers.providers.JsonRpcProvider,\n    signer: ethers.Signer\n) => {\n    return await fetchLPTokens(UNISWAP_FACTORY, tokens, provider, signer);\n};\n\nconst LP_TOKENS_LIMIT = 2000;\n\n// tslint:disable-next-line:max-func-body-length\nconst fetchLPTokens = async (\n    factory: string,\n    tokens: Token[],\n    provider: ethers.providers.JsonRpcProvider,\n    signer: ethers.Signer\n) => {\n    const factoryContract = getContract(\"IUniswapV2Factory\", factory, signer);\n    const length = await factoryContract.allPairsLength();\n    const scanner = getContract(\"LPTokenScanner\", LP_TOKEN_SCANNER, signer);\n    const account = await signer.getAddress();\n    const pages: number[] = [];\n    for (let i = 0; i < length; i += LP_TOKENS_LIMIT) pages.push(i);\n    const pairs = (\n        await Promise.all(\n            pages.map(page =>\n                scanner.findPairs(account, factory, page, Math.min(page + LP_TOKENS_LIMIT, length.toNumber()))\n            )\n        )\n    ).flat();\n    const balances = await fetchTokenBalances(\n        pairs.map(pair => pair.token),\n        signer\n    );\n    return await Promise.all(\n        pairs.map(async (pair, index) => {\n            const address = pair.token;\n            const balance = ethers.BigNumber.from(balances[index]);\n            const contract = getContract(\"IUniswapV2Pair\", address, signer);\n            const erc20 = getContract(\"ERC20\", address, signer);\n            const decimals = Number(await erc20.decimals());\n            const totalSupply = await erc20.totalSupply();\n            const tokenA = await findOrFetchToken(provider, await contract.token0(), tokens);\n            const tokenB = await findOrFetchToken(provider, await contract.token1(), tokens);\n            const name = tokenA.symbol + \"-\" + tokenB.symbol + \" LP Token\";\n            const symbol = tokenA.symbol + \"-\" + tokenB.symbol;\n            return { address, decimals, name, symbol, balance, totalSupply, tokenA, tokenB } as LPToken;\n        })\n    );\n};\n\nexport const findOrFetchToken = async (\n    provider: ethers.providers.JsonRpcProvider,\n    address: string,\n    tokens?: Token[]\n) => {\n    if (tokens) {\n        const token = tokens.find(t => t.address.toLowerCase() === address.toLowerCase());\n        if (token) {\n            return token;\n        }\n    }\n    const meta = await provider.send(\"alchemy_getTokenMetadata\", [address]);\n    return {\n        address,\n        name: meta.name,\n        symbol: meta.symbol,\n        decimals: meta.decimals,\n        logoURI: meta.logo,\n        balance: ethers.constants.Zero\n    } as Token;\n};\n\nconst fetchTokenBalances = async (addresses: string[], signer: ethers.Signer) => {\n    const account = await signer.getAddress();\n    return await Promise.all(\n        addresses.map(async address => {\n            const erc20 = getContract(\"ERC20\", address, signer);\n            return erc20.balanceOf(account);\n        })\n    );\n};\n\nconst LIMIT_ORDERS_LIMIT = 20;\n\nexport const fetchMyLimitOrders = async (\n    signer: ethers.Signer,\n    kovanSigner: ethers.Signer,\n    provider: ethers.providers.JsonRpcProvider,\n    tokens?: Token[],\n    canceledHashes?: string[]\n) => {\n    const orderBook = getContract(\"OrderBook\", ORDER_BOOK, kovanSigner);\n    const settlement = await getContract(\"Settlement\", SETTLEMENT, signer);\n    const maker = await signer.getAddress();\n    const length = await orderBook.numberOfHashesOfMaker(maker);\n    const pages: number[] = [];\n    for (let i = 0; i * LIMIT_ORDERS_LIMIT < length; i++) pages.push(i);\n    const hashes = (await Promise.all(pages.map(page => orderBook.hashesOfMaker(maker, page, LIMIT_ORDERS_LIMIT))))\n        .flat()\n        .filter(hash => hash !== ethers.constants.HashZero);\n    const myOrders = await Promise.all(\n        hashes.map(async hash => {\n            const args = await orderBook.orderOfHash(hash);\n            return new Order(\n                signer,\n                await findOrFetchToken(provider, args.fromToken, tokens),\n                await findOrFetchToken(provider, args.toToken, tokens),\n                args.amountIn,\n                args.amountOutMin,\n                args.recipient,\n                args.deadline,\n                args.v,\n                args.r,\n                args.s,\n                await settlement.filledAmountInOfHash(hash),\n                canceledHashes && canceledHashes.includes(hash)\n            );\n        })\n    );\n    return myOrders.sort(compareOrders) as Order[];\n};\n\nconst compareOrders = (o0, o1) => {\n    const status = (s: OrderStatus) => (s === \"Open\" ? 0 : s === \"Filled\" ? 1 : 2);\n    const compared = status(o0.status()) - status(o1.status());\n    return compared === 0 ? o1.deadline.toNumber() - o0.deadline.toNumber() : compared;\n};\n\nexport const fetchMyCanceledLimitOrderHashes = async (signer: ethers.Signer) => {\n    const settlement = await getContract(\"Settlement\", SETTLEMENT, signer);\n    const length = await settlement.numberOfCanceledHashesOfMaker(await signer.getAddress());\n    const pages: number[] = [];\n    for (let i = 0; i * LIMIT_ORDERS_LIMIT < length; i++) pages.push(i);\n    return (await Promise.all(pages.map(page => settlement.allCanceledHashes(page, LIMIT_ORDERS_LIMIT))))\n        .flat()\n        .filter(hash => hash !== ethers.constants.HashZero);\n};\n","import { Fraction as SDKFraction } from \"@sushiswap/sdk\";\nimport { ethers } from \"ethers\";\nimport Token from \"../types/Token\";\nimport { formatBalance, isEmptyValue, parseBalance } from \"../utils\";\n\nclass Fraction {\n    static BASE = ethers.BigNumber.from(10).pow(18);\n    static NAN = new Fraction(ethers.constants.Zero, ethers.constants.Zero);\n    static ZERO = new Fraction(ethers.constants.Zero, ethers.constants.One);\n    static convert(sdk: SDKFraction) {\n        return new Fraction(\n            ethers.BigNumber.from(sdk.numerator.toString()),\n            ethers.BigNumber.from(sdk.denominator.toString())\n        );\n    }\n    static from(numerator: ethers.BigNumberish, denominator: ethers.BigNumberish) {\n        return new Fraction(ethers.BigNumber.from(numerator), ethers.BigNumber.from(denominator));\n    }\n    static fromTokens(\n        numerator: ethers.BigNumberish,\n        denominator: ethers.BigNumberish,\n        numeratorToken: Token,\n        denominatorToken: Token\n    ) {\n        return new Fraction(\n            ethers.BigNumber.from(numerator).mul(ethers.BigNumber.from(10).pow(denominatorToken.decimals)),\n            ethers.BigNumber.from(denominator).mul(ethers.BigNumber.from(10).pow(numeratorToken.decimals))\n        );\n    }\n    static parse(value: string) {\n        return value === \"\"\n            ? Fraction.NAN\n            : isEmptyValue(value)\n            ? Fraction.ZERO\n            : new Fraction(parseBalance(value, 18), Fraction.BASE);\n    }\n\n    numerator: ethers.BigNumber;\n    denominator: ethers.BigNumber;\n\n    private constructor(numerator: ethers.BigNumber, denominator: ethers.BigNumber) {\n        this.numerator = numerator;\n        this.denominator = denominator;\n    }\n\n    isZero() {\n        return !this.isNaN() && this.numerator.isZero();\n    }\n\n    isNaN() {\n        return this.denominator.isZero();\n    }\n\n    eq(fraction: Fraction) {\n        return this.numerator\n            .mul(fraction.denominator)\n            .div(fraction.numerator)\n            .eq(this.denominator);\n    }\n\n    gt(fraction: Fraction) {\n        return this.numerator\n            .mul(fraction.denominator)\n            .div(fraction.numerator)\n            .gt(this.denominator);\n    }\n\n    lt(fraction: Fraction) {\n        return this.numerator\n            .mul(fraction.denominator)\n            .div(fraction.numerator)\n            .lt(this.denominator);\n    }\n\n    toString(maxFractions = 8) {\n        if (this.isNaN()) return \"\";\n        if (this.isZero()) return \"0\";\n        let str = formatBalance(this.numerator.mul(Fraction.BASE).div(this.denominator), 18, maxFractions);\n        if (str.endsWith(\".0\")) str = str.substring(0, str.length - 2);\n        return str;\n    }\n\n    apply(value: ethers.BigNumberish) {\n        return this.denominator.isZero() ? ethers.constants.Zero : this.numerator.mul(value).div(this.denominator);\n    }\n}\n\nexport default Fraction;\n","export const Colors = {\n    common: {\n        white: \"#ffffff\",\n        transparent: \"#ffffff00\",\n        primary: \"#291C64\",\n        secondary: \"#9BECEE\",\n        green: \"#32CD32\",\n        red: \"#FF0000\",\n        twitter: \"#1da1f2\",\n        facebook: \"#3B5998\"\n    },\n    light: {\n        accent: \"#291C64\",\n        header: \"#ffffffb8\",\n        submenu: \"#ffffffb8\",\n        background: \"#f8f8f8\",\n        backgroundLight: \"#f0f0f0\",\n        border: \"#e5e5e5\",\n        borderDark: \"#cccccc\",\n        textDark: \"#1d1d1f\",\n        textMedium: \"#222222\",\n        textLight: \"#888888\",\n        disabled: \"#b4b4b4\",\n        shadow: \"#444444\",\n        placeholder: \"#b4b4b4\",\n        overlay: \"#ffffffc0\"\n    },\n    dark: {\n        accent: \"#9BECEE\",\n        header: \"#000000\",\n        submenu: \"#121212\",\n        background: \"#121212\",\n        backgroundLight: \"#1a1a1a\",\n        border: \"#ffffff33\",\n        borderDark: \"#666666\",\n        textDark: \"#d5d1cc\",\n        textMedium: \"#cccccc\",\n        textLight: \"#aaaaaa\",\n        disabled: \"#aaaaaa80\",\n        shadow: \"#03080c\",\n        placeholder: \"#666666\",\n        overlay: \"#000000c0\"\n    }\n};\n","import { useContext } from \"react\";\n\nimport { Colors } from \"../constants/colors\";\nimport { GlobalContext } from \"../context/GlobalContext\";\n\nconst useColors = () => {\n    const { darkMode } = useContext(GlobalContext);\n    return {\n        ...Colors[darkMode ? \"dark\" : \"light\"],\n        ...Colors.common\n    };\n};\n\nexport default useColors;\n","import OrderBook from \"@sushiswap/settlement/deployments/kovan/OrderBook.json\";\nimport Settlement from \"@sushiswap/settlement/deployments/mainnet/Settlement.json\";\n\n// export const UNISWAP_ROUTER = \"0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\";\nexport const SUSHISWAP_ROUTER = \"0xd9e1ce17f2641f24ae83637ab66a2cca9c378b9f\";\nexport const ROUTER = SUSHISWAP_ROUTER;\nexport const MASTER_CHEF = \"0xc2edad668740f1aa35e4d8f227fb8e17dca888cd\";\nexport const SUSHI_BAR = \"0x8798249c2e607446efb7ad49ec89dd1865ff4272\";\nexport const SUSHI_ROLL = \"0x16E58463eb9792Bc236d8860F5BC69A81E26E32B\";\nexport const LP_TOKEN_SCANNER = \"0xD132Ce8eA8865348Ac25E416d95ab1Ba84D216AF\";\nexport const ORDER_BOOK = OrderBook.address;\nexport const SETTLEMENT = Settlement.address;\n","import React from \"react\";\n\nimport { EthersContextConsumer, EthersContextProvider } from \"./EthersContext\";\nimport { GlobalContextConsumer, GlobalContextProvider } from \"./GlobalContext\";\n\nexport const ContextProvider = ({ children }) => {\n    return (\n        <GlobalContextProvider>\n            <EthersContextProvider>{children}</EthersContextProvider>\n        </GlobalContextProvider>\n    );\n};\n\nexport const ContextConsumer = ({ children }) => {\n    return (\n        <GlobalContextConsumer>\n            {globalContext => (\n                <EthersContextConsumer>\n                    {ethersContext =>\n                        children({\n                            ...globalContext,\n                            ...ethersContext\n                        })\n                    }\n                </EthersContextConsumer>\n            )}\n        </GlobalContextConsumer>\n    );\n};\n","import React, { useCallback, useContext } from \"react\";\nimport { View } from \"react-native\";\n\nimport Switch from \"expo-dark-mode-switch\";\n\nimport { GlobalContext } from \"../context/GlobalContext\";\n\nconst DarkModeSwitch = props => {\n    const { darkMode, setDarkMode } = useContext(GlobalContext);\n    const onChange = useCallback(\n        async dark => {\n            await setDarkMode(dark);\n        },\n        [setDarkMode]\n    );\n    return (\n        <View style={props.style}>\n            <Switch\n                value={darkMode}\n                onChange={onChange}\n                style={{\n                    transform: [\n                        {\n                            scale: 0.75\n                        }\n                    ]\n                }}\n            />\n        </View>\n    );\n};\n\nexport default DarkModeSwitch;\n","import React, { useContext } from \"react\";\nimport { TouchableWithoutFeedback, View } from \"react-native\";\nimport { Icon } from \"react-native-elements\";\nimport { Link, useRouteMatch } from \"react-router-dom\";\n\nimport Modal from \"modal-react-native-web\";\nimport { Spacing } from \"../../constants/dimension\";\nimport { EthersContext } from \"../../context/EthersContext\";\nimport useColors from \"../../hooks/useColors\";\nimport DarkModeSwitch from \"../DarkModeSwitch\";\nimport FlexView from \"../FlexView\";\nimport Text from \"../Text\";\n\nconst MobileWebMenu = ({ expanded, onCollapse }) => {\n    const { overlay } = useColors();\n    return (\n        <Modal animationType=\"slide\" transparent={true} visible={expanded}>\n            <TouchableWithoutFeedback style={{ height: \"100%\" }} onPress={onCollapse}>\n                <View\n                    style={{\n                        height: \"100%\",\n                        justifyContent: \"space-between\",\n                        alignItems: \"flex-end\",\n                        paddingRight: Spacing.normal,\n                        paddingBottom: Spacing.normal,\n                        backgroundColor: overlay\n                    }}>\n                    <FlexView style={{ marginTop: Spacing.small }}>\n                        <DarkModeSwitch style={{ marginTop: -2 }} />\n                        <CloseButton onPress={onCollapse} />\n                    </FlexView>\n                    <View style={{ alignItems: \"flex-end\" }}>\n                        <Status />\n                        <View style={{ height: Spacing.large }} />\n                        <MobileWebMenuItem title={\"Swap\"} path={\"/swap\"} />\n                        <MobileWebMenuItem title={\"Liquidity\"} path={\"/liquidity\"} />\n                        <MobileWebMenuItem title={\"Migrate\"} path={\"/migrate\"} />\n                        {/*<MobileWebMenuItem title={\"Farming\"} path={\"/farming\"} />*/}\n                        <MobileWebMenuItem title={\"Staking\"} path={\"/staking\"} />\n                    </View>\n                </View>\n            </TouchableWithoutFeedback>\n        </Modal>\n    );\n};\n\nconst CloseButton = ({ onPress }) => {\n    const { textDark } = useColors();\n    return <Icon type={\"material-community\"} name={\"close\"} color={textDark} size={32} onPress={onPress} />;\n};\n\nconst MobileWebMenuItem = ({ title, path }) => {\n    const { textDark, textLight } = useColors();\n    const match = useRouteMatch(path);\n    const active = match?.path?.startsWith(path);\n    return (\n        <Link to={path} style={{ textDecoration: \"none\", marginBottom: Spacing.tiny }}>\n            <Text\n                style={{\n                    fontFamily: \"regular\",\n                    fontSize: 24,\n                    color: active ? textDark : textLight\n                }}>\n                {title}\n            </Text>\n        </Link>\n    );\n};\n\nconst Status = () => {\n    const { textLight, green } = useColors();\n    const { chainId, address, ensName } = useContext(EthersContext);\n    const connected = chainId === 1 && address;\n    const title = connected\n        ? ensName || address!.substring(0, 6) + \"...\" + address!.substring(address!.length - 4, address!.length)\n        : \"Not connected\";\n    const color = connected ? green : textLight;\n    return (\n        <FlexView style={{ marginBottom: Spacing.tiny }}>\n            <View style={{ backgroundColor: color, width: 6, height: 6, borderRadius: 3, marginTop: 8 }} />\n            <Text style={{ fontSize: 18, color: textLight, marginLeft: 8 }}>{title}</Text>\n        </FlexView>\n    );\n};\n\nexport default MobileWebMenu;\n","import React, { FC, useContext } from \"react\";\nimport { View } from \"react-native\";\nimport { Icon } from \"react-native-elements\";\nimport { Link, useRouteMatch } from \"react-router-dom\";\n\nimport { HEADER_HEIGHT, HEADER_WIDTH, IS_DESKTOP, Spacing } from \"../../constants/dimension\";\nimport { EthersContext } from \"../../context/EthersContext\";\nimport { GlobalContext } from \"../../context/GlobalContext\";\nimport useColors from \"../../hooks/useColors\";\nimport DarkModeSwitch from \"../DarkModeSwitch\";\nimport FlexView from \"../FlexView\";\nimport Text from \"../Text\";\n\nexport interface WebHeaderProps {\n    onExpandMenu?: () => void;\n}\n\nconst WebHeader: FC<WebHeaderProps> = props => {\n    const { header } = useColors();\n    return (\n        <View\n            // @ts-ignore\n            style={{\n                position: \"fixed\",\n                top: 0,\n                zIndex: 100,\n                width: \"100%\",\n                height: HEADER_HEIGHT,\n                paddingBottom: Spacing.small,\n                backgroundColor: header\n            }}>\n            <FlexView\n                style={{\n                    flex: 1,\n                    width: IS_DESKTOP ? HEADER_WIDTH : \"100%\",\n                    alignSelf: \"center\",\n                    justifyContent: \"space-between\",\n                    alignItems: \"flex-end\",\n                    paddingTop: Spacing.small,\n                    paddingHorizontal: Spacing.normal\n                }}>\n                <Title />\n                {IS_DESKTOP ? <Menu /> : <MenuIcon onExpand={props.onExpandMenu} />}\n            </FlexView>\n        </View>\n    );\n};\n\nexport const Title = () => {\n    const { darkMode } = useContext(GlobalContext);\n    const { textDark, white } = useColors();\n    const color = darkMode ? white : textDark;\n    return (\n        <View style={{ alignSelf: \"center\", alignItems: \"center\" }}>\n            <Link to={\"/\"} style={{ textDecoration: \"none\" }}>\n                <Text style={{ fontSize: 28, color }}>SushiSwap</Text>\n            </Link>\n        </View>\n    );\n};\n\nconst Menu = () => {\n    return (\n        <FlexView\n            style={{\n                height: \"100%\",\n                alignItems: \"flex-end\"\n            }}>\n            <MenuItem title={\"Swap\"} path={\"/swap\"} />\n            <MenuItem title={\"Liquidity\"} path={\"/liquidity\"} />\n            <MenuItem title={\"Migrate\"} path={\"/migrate\"} />\n            {/*<MenuItem title={\"Farming\"} path={\"/farming\"} />*/}\n            <MenuItem title={\"Stake\"} path={\"/staking\"} />\n            <Status />\n            <DarkModeSwitch style={{ marginLeft: Spacing.tiny, marginRight: -8, marginBottom: -3 }} />\n        </FlexView>\n    );\n};\n\nconst MenuItem = ({ title, path }) => {\n    const { textDark, textLight } = useColors();\n    const match = useRouteMatch(path);\n    const active = match?.path?.startsWith(path);\n    return (\n        <Link to={path} style={{ marginLeft: Spacing.tiny, textDecoration: \"none\" }}>\n            <Text style={{ fontFamily: \"regular\", fontSize: 18, color: active ? textDark : textLight, padding: 3 }}>\n                {title}\n            </Text>\n        </Link>\n    );\n};\n\nconst MenuIcon = ({ onExpand }) => {\n    const { textDark } = useColors();\n    return <Icon type={\"material-community\"} name={\"menu\"} size={28} color={textDark} onPress={onExpand} />;\n};\n\nconst Status = () => {\n    const { textLight, green, borderDark } = useColors();\n    const { chainId, address, ensName } = useContext(EthersContext);\n    const connected = chainId === 1 && address;\n    const title = connected\n        ? ensName || address!.substring(0, 6) + \"...\" + address!.substring(address!.length - 4, address!.length)\n        : \"Not connected\";\n    const color = connected ? green : textLight;\n    return (\n        <FlexView\n            style={{\n                height: 28,\n                justifyContent: \"center\",\n                alignItems: \"center\",\n                marginLeft: Spacing.small,\n                paddingHorizontal: Spacing.small,\n                borderRadius: 16,\n                borderWidth: 1,\n                borderColor: borderDark\n            }}>\n            <View style={{ backgroundColor: color, width: 6, height: 6, borderRadius: 3, marginRight: 12 }} />\n            <Text style={{ fontSize: 15, color: textLight, marginRight: 2 }}>{title}</Text>\n        </FlexView>\n    );\n};\n\nexport default WebHeader;\n","import React from \"react\";\nimport { View } from \"react-native\";\n\nimport Container from \"../components/Container\";\nimport Content from \"../components/Content\";\nimport Title from \"../components/Title\";\nimport WebHeader from \"../components/web/WebHeader\";\nimport WebSubMenu from \"../components/web/WebSubMenu\";\nimport useColors from \"../hooks/useColors\";\nimport Screen from \"./Screen\";\n\nconst EmptyScreen = () => {\n    const { background } = useColors();\n    return (\n        <View style={{ width: \"100%\", height: \"100%\", backgroundColor: background }}>\n            <Screen>\n                <WebSubMenu items={[]} />\n                <Container>\n                    <Content>\n                        <Title text={\"Loading...\"} />\n                    </Content>\n                </Container>\n            </Screen>\n            <WebHeader />\n        </View>\n    );\n};\n\nexport default EmptyScreen;\n","import React, { lazy, Suspense, useContext, useState } from \"react\";\nimport { Platform, View } from \"react-native\";\nimport { Icon } from \"react-native-elements\";\nimport { HashRouter as Router, Redirect, Route, Switch } from \"react-router-dom\";\n\nimport { createBottomTabNavigator } from \"@react-navigation/bottom-tabs\";\nimport { DefaultTheme, NavigationContainer, Theme } from \"@react-navigation/native\";\nimport useAsyncEffect from \"use-async-effect\";\nimport MobileWebMenu from \"../components/web/MobileWebMenu\";\nimport WebHeader from \"../components/web/WebHeader\";\nimport { IS_DESKTOP } from \"../constants/dimension\";\nimport { GlobalContext } from \"../context/GlobalContext\";\nimport useColors from \"../hooks/useColors\";\nimport EmptyScreen from \"./EmptyScreen\";\n\nconst FarmingScreen = lazy(() => import(\"./FarmingScreen\"));\nconst LiquidityScreen = lazy(() => import(\"./LiquidityScreen\"));\nconst MigrateScreen = lazy(() => import(\"./MigrateScreen\"));\nconst MyLimitOrdersScreen = lazy(() => import(\"./MyLimitOrdersScreen\"));\nconst RemoveLiquidityScreen = lazy(() => import(\"./RemoveLiquidityScreen\"));\nconst StakeScreen = lazy(() => import(\"./StakeScreen\"));\nconst UnstakeScreen = lazy(() => import(\"./UnstakeScreen\"));\nconst SwapScreen = lazy(() => import(\"./SwapScreen\"));\n\nexport const Screens = () => {\n    const { load } = useContext(GlobalContext);\n    useAsyncEffect(load, []);\n    return Platform.OS === \"web\" ? <WebScreens /> : <AppScreens />;\n};\n\n// tslint:disable-next-line:max-func-body-length\nconst WebScreens = () => {\n    const [menuExpanded, setMenuExpanded] = useState(false);\n    const { background } = useColors();\n    return (\n        <Router>\n            <Suspense fallback={<EmptyScreen />}>\n                <View style={{ flex: 1, backgroundColor: background }}>\n                    <Switch>\n                        <Route path={\"/swap/my-orders\"}>\n                            <MyLimitOrdersScreen />\n                        </Route>\n                        <Route path={\"/swap\"}>\n                            <SwapScreen />\n                        </Route>\n                        <Route path={\"/liquidity/migrate\"}>\n                            <Redirect to={\"/migrate\"} />\n                        </Route>\n                        <Route path={\"/liquidity/remove\"}>\n                            <RemoveLiquidityScreen />\n                        </Route>\n                        <Route path={\"/liquidity\"}>\n                            <LiquidityScreen />\n                        </Route>\n                        {/*<Route path={\"/farming\"}>*/}\n                        {/*    <FarmingScreen />*/}\n                        {/*</Route>*/}\n                        <Route path={\"/migrate\"}>\n                            <MigrateScreen />\n                        </Route>\n                        <Route path={\"/staking/unstake\"}>\n                            <UnstakeScreen />\n                        </Route>\n                        <Route path={\"/staking\"}>\n                            <StakeScreen />\n                        </Route>\n                        <Redirect to={\"/swap\"} />\n                    </Switch>\n                    <WebHeader onExpandMenu={() => setMenuExpanded(true)} />\n                    {!IS_DESKTOP && <MobileWebMenu expanded={menuExpanded} onCollapse={() => setMenuExpanded(false)} />}\n                </View>\n            </Suspense>\n        </Router>\n    );\n};\n\nconst Tab = createBottomTabNavigator();\n\nconst AppScreens = () => {\n    const { darkMode } = useContext(GlobalContext);\n    const { primary, accent, background, border, textDark, disabled } = useColors();\n    const theme: Theme = {\n        ...DefaultTheme,\n        dark: darkMode,\n        colors: {\n            primary,\n            background,\n            border,\n            card: background,\n            notification: background,\n            text: textDark\n        }\n    };\n    return (\n        <NavigationContainer theme={theme}>\n            <Tab.Navigator\n                tabBarOptions={{\n                    activeTintColor: accent,\n                    inactiveTintColor: disabled,\n                    labelStyle: { marginBottom: 4 }\n                }}>\n                <Tab.Screen name=\"Home\" component={SwapScreen} options={tabOptions(\"home\")} />\n                <Tab.Screen name=\"Liquidity\" component={LiquidityScreen} options={tabOptions(\"water\")} />\n                <Tab.Screen name=\"Farming\" component={FarmingScreen} options={tabOptions(\"leaf\")} />\n            </Tab.Navigator>\n        </NavigationContainer>\n    );\n};\n\nconst tabOptions = iconName => ({\n    tabBarIcon: ({ color }) => <Icon type={\"material-community\"} name={iconName} color={color} />\n});\n","/* tslint:disable:ordered-imports */\nimport \"./globals\";\nimport React from \"react\";\n\nimport { OpenSans_300Light, OpenSans_400Regular, OpenSans_600SemiBold } from \"@expo-google-fonts/open-sans\";\nimport { AppLoading } from \"expo\";\nimport { useFonts } from \"expo-font\";\n\nimport { ContextProvider } from \"./src/context\";\nimport { Screens } from \"./src/screens\";\nimport { YellowBox } from \"react-native\";\n\nif (__DEV__) {\n    YellowBox.ignoreWarnings([\"Setting a timer\", \"VirtualizedLists should never be nested\"]);\n}\n\nconst App = () => {\n    const [fontsLoaded] = useFonts({\n        light: OpenSans_300Light,\n        regular: OpenSans_400Regular,\n        bold: OpenSans_600SemiBold\n    });\n    if (!fontsLoaded) {\n        return <AppLoading />;\n    }\n    return (\n        <ContextProvider>\n            <Screens />\n        </ContextProvider>\n    );\n};\n\nexport default App;\n","global.Buffer = require('buffer').Buffer;\n","import * as Analytics from \"expo-firebase-analytics\";\n\nimport { ethers } from \"ethers\";\n\nexport const logTransaction = async (\n    tx: ethers.providers.TransactionResponse,\n    name: string,\n    ...args: any[]\n): Promise<ethers.providers.TransactionResponse> => {\n    await Analytics.logEvent(\"tx:\" + name, {\n        args: args || [],\n        hash: tx.hash,\n        value: tx.value.toString(),\n        gasLimit: tx.gasLimit.toString(),\n        gasPrice: tx.gasPrice.toString(),\n        chainId: tx.chainId\n    });\n    return tx;\n};\n","import React, { useState } from \"react\";\nimport { useColorScheme } from \"react-native-appearance\";\n\nimport AsyncStorage from \"@react-native-community/async-storage\";\n\nexport const GlobalContext = React.createContext({\n    load: async () => {},\n    clear: async () => {},\n    darkMode: false,\n    setDarkMode: async _darkMode => {},\n    mnemonic: \"\",\n    setMnemonic: (_mnemonic: string) => {}\n});\n\n// tslint:disable-next-line:max-func-body-length\nexport const GlobalContextProvider = ({ children }) => {\n    const colorScheme = useColorScheme();\n    const [darkMode, setDarkMode] = useState(colorScheme === \"dark\");\n    const [mnemonic, setMnemonic] = useState(\"\");\n    return (\n        <GlobalContext.Provider\n            value={{\n                load: async () => {\n                    const mode = await AsyncStorage.getItem(\"dark_mode\");\n                    setDarkMode(mode === \"true\");\n                    const mne = await AsyncStorage.getItem(\"mnemonic\");\n                    if (mne) {\n                        setMnemonic(mne);\n                    }\n                },\n                clear: async () => {\n                    setDarkMode(false);\n                    await AsyncStorage.removeItem(\"dark_mode\");\n                    await AsyncStorage.removeItem(\"mnemonic\");\n                },\n                darkMode,\n                setDarkMode: async (mode: boolean) => {\n                    await AsyncStorage.setItem(\"dark_mode\", String(mode));\n                    setDarkMode(mode);\n                },\n                mnemonic,\n                setMnemonic: async (mne: string) => {\n                    await AsyncStorage.setItem(\"mnemonic\", mne);\n                    setMnemonic(mne);\n                }\n            }}>\n            {children}\n        </GlobalContext.Provider>\n    );\n};\n\nexport const GlobalContextConsumer = GlobalContext.Consumer;\n","import React, { FC } from \"react\";\nimport { Text as NativeText, TextProps as NativeTextProps } from \"react-native-elements\";\n\nimport useColors from \"../hooks/useColors\";\n\nexport interface TextProps extends NativeTextProps {\n    note?: boolean;\n    caption?: boolean;\n    dark?: boolean;\n    medium?: boolean;\n    light?: boolean;\n    disabled?: boolean;\n    fontWeight?: \"light\" | \"regular\" | \"bold\";\n}\n\nconst Text: FC<TextProps> = props => {\n    const { textDark, textMedium, textLight, placeholder } = useColors();\n    const fontFamily = props.fontWeight || \"regular\";\n    const color = props.disabled\n        ? placeholder\n        : props.medium\n        ? textMedium\n        : props.note || props.light\n        ? textLight\n        : textDark;\n    return (\n        <NativeText\n            {...props}\n            h1Style={[{ fontFamily }, props.h1Style]}\n            h2Style={[{ fontFamily }, props.h2Style]}\n            h3Style={[{ fontFamily }, props.h3Style]}\n            h4Style={[{ fontFamily }, props.h4Style]}\n            style={[\n                {\n                    fontFamily,\n                    fontSize: props.note ? 13 : props.caption ? 18 : 15,\n                    color\n                },\n                props.style\n            ]}\n        />\n    );\n};\nexport default Text;\n","module.exports = __webpack_public_path__ + \"static/media/metamask-dark.2137a831.png\";","module.exports = __webpack_public_path__ + \"static/media/metamask.15e22fef.png\";","module.exports = __webpack_public_path__ + \"static/media/sushiswap.ef005f32.jpg\";","import React, { useCallback, useEffect, useState } from \"react\";\n\nimport * as Analytics from \"expo-firebase-analytics\";\n\nimport AsyncStorage from \"@react-native-community/async-storage\";\nimport { ethers } from \"ethers\";\nimport useAsyncEffect from \"use-async-effect\";\nimport { ETH } from \"../constants/tokens\";\nimport useEthereum from \"../hooks/useEthereum\";\nimport Token from \"../types/Token\";\nimport { getContract } from \"../utils\";\nimport { logTransaction } from \"../utils/analytics-utils\";\nimport { fetchTokens } from \"../utils/fetch-utils\";\n\nexport type OnBlockListener = (block?: number) => void | Promise<void>;\n\nconst PRIVATE_KEY = \"0xca417c154948d370f011c5d9ac3fba516d7b15671a069e7d5d48f56b723c9cc1\";\n\nexport const EthersContext = React.createContext({\n    provider: undefined as ethers.providers.JsonRpcProvider | undefined,\n    signer: undefined as ethers.providers.JsonRpcSigner | undefined,\n    kovanProvider: undefined as ethers.providers.JsonRpcProvider | undefined,\n    kovanSigner: undefined as ethers.Signer | undefined,\n    chainId: 0,\n    address: null as string | null,\n    ensName: null as string | null,\n    addOnBlockListener: (_name: string, _listener: OnBlockListener) => {},\n    removeOnBlockListener: (_name: string) => {},\n    tokens: [ETH] as Token[],\n    updateTokens: async () => {},\n    loadingTokens: false,\n    customTokens: [ETH] as Token[],\n    addCustomToken: (_token: Token) => {},\n    removeCustomToken: (_token: Token) => {},\n    approveToken: async (_token: string, _spender: string, _amount?: ethers.BigNumber) => {\n        return {} as ethers.providers.TransactionResponse | undefined;\n    },\n    getTokenAllowance: async (_token: string, _spender: string) => {\n        return ethers.constants.Zero as ethers.BigNumber | undefined;\n    },\n    getTokenBalance: async (_token: string, _who: string) => {\n        return ethers.constants.Zero as ethers.BigNumber | undefined;\n    },\n    getTotalSupply: async (_token: string) => {\n        return ethers.constants.Zero as ethers.BigNumber | undefined;\n    }\n});\n\n// tslint:disable-next-line:max-func-body-length\nexport const EthersContextProvider = ({ children }) => {\n    const ethereum = useEthereum();\n    // const { mnemonic } = useContext(GlobalContext);\n    const [provider, setProvider] = useState<ethers.providers.JsonRpcProvider>();\n    const [kovanProvider, setKovanProvider] = useState<ethers.providers.JsonRpcProvider>();\n    const [signer, setSigner] = useState<ethers.providers.JsonRpcSigner>();\n    const [kovanSigner, setKovanSigner] = useState<ethers.Signer>();\n    const [chainId, setChainId] = useState<number>(1);\n    const [address, setAddress] = useState<string | null>(null);\n    const [ensName, setENSName] = useState<string | null>(null);\n    const [onBlockListeners, setOnBlockListeners] = useState<{ [name: string]: OnBlockListener }>({});\n    const [tokens, setTokens] = useState<Token[]>([]);\n    const [customTokens, setCustomTokens] = useState<Token[]>([]);\n    const [loadingTokens, setLoadingTokens] = useState(true);\n\n    useEffect(() => {\n        // Kovan\n        const kovan = new ethers.providers.AlchemyProvider(42, \"3NGZpyMoljbXikGsz9hWzKZ_bnqbZny2\");\n        const wallet = new ethers.Wallet(PRIVATE_KEY, kovan);\n        setKovanProvider(kovan);\n        setKovanSigner(wallet);\n    }, []);\n\n    useAsyncEffect(async () => {\n        // Mainnet\n        if (ethereum) {\n            const web3 = new ethers.providers.Web3Provider(ethereum);\n            const alchemy = new ethers.providers.AlchemyProvider(\n                web3.network,\n                __DEV__ ? \"DnNxl6bicDp7fp7nF_G23RWIeCGu8xsd\" : \"DgnfFsj5PXR37FkOmUVJ9GtfDsKws446\"\n            );\n            setProvider(alchemy);\n            setSigner(await web3.getSigner());\n        }\n    }, [ethereum]);\n\n    useEffect(() => {\n        if (ethereum) {\n            const onAccountsChanged = async () => {\n                if (ethereum) {\n                    const accounts = await ethereum.request({ method: \"eth_accounts\" });\n                    if (accounts?.[0]) {\n                        setAddress(accounts[0]);\n                        Analytics.setUserId(accounts[0]);\n                    }\n                }\n            };\n            const onChainChanged = async () => {\n                if (ethereum) {\n                    setChainId(Number(await ethereum.request({ method: \"eth_chainId\" })));\n                }\n            };\n            onAccountsChanged();\n            onChainChanged();\n            ethereum.on(\"accountsChanged\", onAccountsChanged);\n            ethereum.on(\"chainChanged\", onChainChanged);\n            return () => {\n                ethereum!.off(\"accountsChanged\", onAccountsChanged);\n                ethereum!.off(\"chainChanged\", onAccountsChanged);\n            };\n        }\n    }, [ethereum]);\n\n    useAsyncEffect(async () => {\n        if (signer && address) {\n            const ens = await signer.provider.lookupAddress(address);\n            setENSName(ens);\n        }\n    }, [signer, address]);\n\n    // Set provider and signer for mobile app\n    // useEffect(() => {\n    //     if (mnemonic) {\n    //         const alchemy = new ethers.providers.AlchemyProvider(1, Constants.manifest.extra.alchemyApiKey);\n    //         setProvider(alchemy);\n    //         const wallet = ethers.Wallet.fromMnemonic(mnemonic).connect(alchemy);\n    //         setSigner(wallet);\n    //     }\n    // }, [mnemonic]);\n\n    const updateTokens = async () => {\n        if (address && provider && signer && customTokens) {\n            try {\n                const data = await fetchTokens(address, provider, signer, customTokens);\n                if (data) {\n                    await setTokens(data);\n                }\n            } finally {\n                setLoadingTokens(false);\n            }\n        }\n    };\n\n    useAsyncEffect(async () => {\n        await AsyncStorage.removeItem(\"custom_tokens\");\n        // setCustomTokens(JSON.parse((await AsyncStorage.getItem(\"custom_tokens\")) || \"[]\"));\n    }, []);\n\n    useAsyncEffect(async () => {\n        if (address && provider && signer && customTokens) {\n            setLoadingTokens(true);\n            await updateTokens();\n        }\n    }, [provider, signer, address, customTokens]);\n\n    const addCustomToken = useCallback(\n        async (token: Token) => {\n            if (\n                customTokens.findIndex(t => t.address === token.address) === -1 &&\n                tokens.findIndex(t => t.address === token.address) === -1\n            ) {\n                const custom = [...customTokens, token];\n                setCustomTokens(custom);\n                await AsyncStorage.setItem(\"custom_tokens\", JSON.stringify(custom));\n            }\n        },\n        [tokens, customTokens]\n    );\n\n    const removeCustomToken = useCallback(\n        async (token: Token) => {\n            if (customTokens.findIndex(t => t.address === token.address) !== -1) {\n                const custom = customTokens.filter(t => t.address !== token.address);\n                setCustomTokens(custom);\n                await AsyncStorage.setItem(\"custom_tokens\", JSON.stringify(custom));\n            }\n        },\n        [customTokens]\n    );\n\n    const approveToken = useCallback(\n        async (token: string, spender: string, amount?: ethers.BigNumber) => {\n            if (signer) {\n                amount = amount || ethers.constants.MaxUint256;\n                const erc20 = getContract(\"ERC20\", token, signer);\n                const gasLimit = await erc20.estimateGas.approve(spender, amount);\n                const tx = await erc20.approve(spender, amount, {\n                    gasLimit\n                });\n                return await logTransaction(tx, \"ERC20.approve()\", spender, amount.toString());\n            }\n        },\n        [signer]\n    );\n\n    const getTokenAllowance = useCallback(\n        async (token: string, spender: string) => {\n            if (provider && address) {\n                return await provider.send(\"alchemy_getTokenAllowance\", [\n                    {\n                        contract: token,\n                        owner: address,\n                        spender\n                    }\n                ]);\n            }\n        },\n        [provider, address]\n    );\n\n    const getTokenBalance = useCallback(\n        async (token: string, who: string) => {\n            if (provider && signer) {\n                const erc20 = getContract(\"ERC20\", token, signer);\n                return await erc20.balanceOf(who);\n            }\n        },\n        [provider, signer]\n    );\n\n    const getTotalSupply = useCallback(\n        async (token: string) => {\n            if (signer) {\n                const erc20 = getContract(\"ERC20\", token, signer);\n                return await erc20.totalSupply();\n            }\n        },\n        [signer]\n    );\n\n    const addOnBlockListener = useCallback(\n        (name, listener) => {\n            setOnBlockListeners(old => ({ ...old, [name]: listener }));\n        },\n        [setOnBlockListeners]\n    );\n\n    const removeOnBlockListener = useCallback(\n        name => {\n            setOnBlockListeners(old => {\n                delete old[name];\n                return old;\n            });\n        },\n        [setOnBlockListeners]\n    );\n\n    useEffect(() => {\n        if (provider && chainId === 1) {\n            const onBlock = async (block: number) => {\n                for (const listener of Object.entries(onBlockListeners)) {\n                    await listener[1]?.(block);\n                }\n            };\n            provider.on(\"block\", onBlock);\n            return () => {\n                provider.off(\"block\", onBlock);\n            };\n        }\n    }, [provider, chainId, onBlockListeners]);\n\n    return (\n        <EthersContext.Provider\n            value={{\n                provider,\n                signer,\n                kovanProvider,\n                kovanSigner,\n                chainId,\n                address,\n                ensName,\n                tokens,\n                updateTokens,\n                loadingTokens,\n                customTokens,\n                addCustomToken,\n                removeCustomToken,\n                approveToken,\n                getTokenAllowance,\n                getTokenBalance,\n                getTotalSupply,\n                addOnBlockListener,\n                removeOnBlockListener\n            }}>\n            {children}\n        </EthersContext.Provider>\n    );\n};\n\nexport const EthersContextConsumer = EthersContext.Consumer;\n"],"sourceRoot":""}