{"version":3,"sources":["src/components/Heading.tsx","src/hooks/useLinker.tsx","src/components/Column.tsx","src/components/SocialIcons.tsx","src/components/web/WebFooter.tsx","src/components/AmountMeta.tsx","src/components/InsufficientBalanceButton.tsx","src/components/Border.tsx","src/components/ErrorMessage.tsx","src/components/InfoBox.tsx","src/components/ApproveButton.tsx","src/components/FetchingButton.tsx","src/components/Meta.tsx","src/components/Notice.tsx","src/components/TokenInput.tsx","src/components/Input.tsx","src/hooks/useSushiBar.tsx","src/hooks/useStakingState.tsx","src/screens/StakeScreen.tsx"],"names":["Heading","props","accent","useColors","style","alignItems","height","marginBottom","disabled","Spacing","small","medium","fontWeight","flex","fontSize","IS_DESKTOP","paddingBottom","tiny","text","buttonText","type","size","title","onPress","onPressButton","color","buttonStyle","paddingHorizontal","Platform","OS","path","route","target","history","useHistory","useCallback","window","open","push","_target","navigate","useNavigation","Column","View","width","marginTop","noTopMargin","large","normal","SocialIcon","darkMode","useContext","GlobalContext","background","textLight","light","iconColor","undefined","backgroundColor","borderWidth","borderColor","SocialIcons","onPressTwitter","useLinker","onPressGithub","onPressDiscord","FlexView","justifyContent","name","raised","reverse","reverseColor","containerStyle","WebFooter","padding","Text","note","textAlign","AmountMeta","textDark","placeholder","amount","suffix","InsufficientBalanceButton","symbol","Border","border","ErrorMessage","error","code","message","InfoBox","backgroundLight","borderDark","useStyles","ApproveButton","approveToken","EthersContext","useState","loading","setLoading","a","async","token","onError","address","spender","tx","wait","onSuccess","hidden","FetchingButton","Meta","textMedium","url","label","textDecorationLine","Notice","borderStyle","clear","titleStyle","paddingVertical","alignSelf","MaxButton","onPressMax","balance","isETH","fee","pow10","gt","sub","ethers","constants","Zero","updateAmount","formatBalance","decimals","position","right","bottom","maxButtonText","TokenInput","onChangeText","onAmountChanged","parseBalance","e","endsWith","indexOf","length","value","keyboardType","autoFocus","inputStyle","marginHorizontal","inputContainerStyle","borderBottomWidth","labelStyle","fontFamily","paddingTop","hideMaxButton","Input","errors","forbidden","forEach","validation","match","regexp","allowed","join","minHeight","outline","placeholderTextColor","errorStyle","useSushiBar","enter","signer","sushiBar","getContract","SUSHI_BAR","estimateGas","gasLimit","mul","div","logTransaction","toString","leave","useStakingState","getTokenAllowance","tokens","updateTokens","sushiStaked","setSushiStaked","sushiSupply","setSushiSupply","xSushiSupply","setXSushiSupply","setAmount","sushiAllowed","setSushiAllowed","xSushiAllowed","setXSushiAllowed","entering","setEntering","leaving","setLeaving","sushi","useMemo","find","xSushi","useEffect","useAsyncEffect","minAllowance","BigNumber","from","pow","sushiAllowance","gte","xSushiAllowance","sushiContract","balanceOf","totalSupply","xSushiContract","onEnter","parsed","onLeave","Staking","state","SushiBalance","AmountInput","isZero","StakeInfo","isEmptyValue","xSushiAmount","xSushiTotal","xSushiBalance","add","share","Fraction","Controls","setError","StakeButton","StakeScreen"],"mappings":"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","file":"static/js/7.2f60da8a.chunk.js","sourcesContent":["import React, { FC } from \"react\";\nimport { TextStyle } from \"react-native\";\n\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport Button from \"./Button\";\nimport FlexView from \"./FlexView\";\nimport Text from \"./Text\";\n\ninterface HeadingProps {\n    text: string;\n    fontWeight?: \"light\" | \"regular\" | \"bold\";\n    disabled?: boolean;\n    buttonText?: string;\n    onPressButton?: () => void | Promise<void>;\n    style?: TextStyle;\n}\n\nconst Heading: FC<HeadingProps> = props => {\n    const { accent } = useColors();\n    return (\n        <FlexView style={{ alignItems: \"flex-end\", height: 32, marginBottom: props.disabled ? 0 : Spacing.small }}>\n            <Text\n                medium={true}\n                fontWeight={props.fontWeight || \"bold\"}\n                disabled={props.disabled}\n                style={[{ flex: 1, fontSize: IS_DESKTOP ? 24 : 18, paddingBottom: Spacing.tiny }, props.style]}>\n                {props.text}\n            </Text>\n            {props.buttonText && (\n                <Button\n                    type={\"clear\"}\n                    size={\"small\"}\n                    title={props.buttonText}\n                    onPress={props.onPressButton}\n                    color={accent}\n                    buttonStyle={{ paddingHorizontal: Spacing.tiny }}\n                />\n            )}\n        </FlexView>\n    );\n};\n\nexport default Heading;\n","import { useCallback } from \"react\";\nimport { Platform } from \"react-native\";\nimport { useHistory } from \"react-router-dom\";\n\nimport { useNavigation } from \"@react-navigation/native\";\n\nconst useWebLinker = (path: string, route: string, target?: string) => {\n    const history = useHistory();\n    return useCallback(() => {\n        if (target) {\n            window.open(path, target);\n        } else {\n            history.push(path);\n        }\n    }, [path, target]);\n};\n\nconst useAppLinker = (path: string, route: string, _target?: string) => {\n    const { navigate } = useNavigation();\n    return useCallback(() => {\n        navigate(route);\n    }, [route]);\n};\n\nexport default Platform.OS === \"web\" ? useWebLinker : useAppLinker;\n","import React, { FC } from \"react\";\nimport { Platform, View, ViewProps, ViewStyle } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\n\ninterface ColumnProps extends ViewProps {\n    noTopMargin?: boolean;\n    style?: ViewStyle;\n}\n\nconst Column: FC<ColumnProps> = props => (\n    <View\n        {...props}\n        style={[\n            {\n                width: \"100%\",\n                marginTop: props.noTopMargin ? 0 : Platform.OS === \"web\" ? Spacing.large : Spacing.normal\n            },\n            props.style\n        ]}\n    />\n);\n\nexport default Column;\n","import React, { useContext } from \"react\";\nimport { Icon, SocialIcon as NativeSocialIcon, SocialIconProps } from \"react-native-elements\";\n\nimport { GlobalContext } from \"../context/GlobalContext\";\nimport useColors from \"../hooks/useColors\";\nimport useLinker from \"../hooks/useLinker\";\nimport FlexView from \"./FlexView\";\n\nconst SocialIcons = () => {\n    const { darkMode } = useContext(GlobalContext);\n    const { background, textLight } = useColors();\n    const onPressTwitter = useLinker(\"https://twitter.com/sushiswap\", \"\", \"_blank\");\n    const onPressGithub = useLinker(\"https://github.com/sushiswap\", \"\", \"_blank\");\n    const onPressDiscord = useLinker(\"https://discord.gg/YS8xH7E\", \"\", \"_blank\");\n    return (\n        <FlexView style={{ width: \"100%\", justifyContent: \"center\" }}>\n            <SocialIcon type=\"github-alt\" onPress={onPressGithub} />\n            <SocialIcon type=\"twitter\" onPress={onPressTwitter} />\n            <Icon\n                type={\"material-community\"}\n                name={\"discord\"}\n                raised={true}\n                reverse={true}\n                color={background}\n                reverseColor={darkMode ? \"white\" : \"#7289da\"}\n                style={{ backgroundColor: background }}\n                containerStyle={{\n                    borderWidth: 1,\n                    borderColor: darkMode ? \"white\" : textLight\n                }}\n                onPress={onPressDiscord}\n            />\n        </FlexView>\n    );\n};\n\nconst SocialIcon = (props: SocialIconProps) => {\n    const { darkMode } = useContext(GlobalContext);\n    const { background, textLight } = useColors();\n    return (\n        <NativeSocialIcon\n            {...props}\n            light={!darkMode}\n            iconColor={darkMode ? \"white\" : undefined}\n            style={{\n                backgroundColor: background,\n                borderWidth: 1,\n                borderColor: darkMode ? \"white\" : textLight\n            }}\n        />\n    );\n};\n\nexport default SocialIcons;\n","import React from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../../constants/dimension\";\nimport Column from \"../Column\";\nimport SocialIcons from \"../SocialIcons\";\nimport Text from \"../Text\";\n\nconst WebFooter = () => (\n    <Column noTopMargin={true}>\n        <View\n            style={{\n                width: \"100%\",\n                padding: Spacing.normal\n            }}>\n            <SocialIcons />\n            <Text note={true} style={{ marginTop: Spacing.tiny, textAlign: \"center\", width: \"100%\" }}>\n                Built with ❤️ by SushiSwap\n            </Text>\n        </View>\n    </Column>\n);\n\nexport default WebFooter;\n","import React, { FC } from \"react\";\n\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport Text from \"./Text\";\n\nexport interface AmountMetaProps {\n    amount?: string;\n    suffix?: string;\n    disabled?: boolean;\n}\n\nconst AmountMeta: FC<AmountMetaProps> = props => {\n    const { textDark, textLight, placeholder } = useColors();\n    return (\n        <Text\n            style={{\n                fontSize: IS_DESKTOP ? 28 : 20,\n                marginBottom: Spacing.normal,\n                color: props.disabled ? placeholder : props.amount ? textDark : textLight\n            }}>\n            {props.disabled ? \"N/A\" : props.amount ? props.amount + \" \" + (props.suffix || \"\") : \"Fetching…\"}\n        </Text>\n    );\n};\n\nexport default AmountMeta;\n","import React from \"react\";\n\nimport Button from \"./Button\";\n\nconst InsufficientBalanceButton = ({ symbol }: { symbol: string }) => {\n    return <Button title={\"Insufficient \" + (symbol ? symbol : \"Balance\")} disabled={true} />;\n};\nexport default InsufficientBalanceButton;\n","import React from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\n\nconst Border = props => {\n    const { border } = useColors();\n    return (\n        <View\n            style={{\n                height: 1,\n                width: \"100%\",\n                backgroundColor: border,\n                marginTop: props.small ? Spacing.tiny : Spacing.small,\n                marginBottom: props.small ? Spacing.tiny : Spacing.small + Spacing.tiny\n            }}\n        />\n    );\n};\n\nexport default Border;\n","import React from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport MetamaskError from \"../types/MetamaskError\";\nimport Text from \"./Text\";\n\nconst ErrorMessage = ({ error }: { error: MetamaskError }) => (\n    <View\n        style={{\n            borderColor: \"red\",\n            borderWidth: 1,\n            width: \"100%\",\n            padding: Spacing.tiny,\n            marginTop: Spacing.small\n        }}>\n        {error.code && (\n            <Text fontWeight={\"bold\"} style={{ color: \"red\", fontSize: 14 }}>\n                Error Code {error.code}\n            </Text>\n        )}\n        <Text note={true} style={{ color: \"red\", fontSize: 14 }}>\n            {error.message}\n        </Text>\n    </View>\n);\n\nexport default ErrorMessage;\n","import React, { PropsWithChildren, useContext } from \"react\";\nimport { View, ViewProps } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport { GlobalContext } from \"../context/GlobalContext\";\nimport useColors from \"../hooks/useColors\";\nimport useStyles from \"../hooks/useStyles\";\n\nconst InfoBox = (props: PropsWithChildren<ViewProps>) => {\n    const { darkMode } = useContext(GlobalContext);\n    const { backgroundLight, borderDark } = useColors();\n    const { border } = useStyles();\n    return (\n        <View\n            {...props}\n            style={[\n                {\n                    ...border({ color: darkMode ? borderDark : backgroundLight }),\n                    backgroundColor: backgroundLight,\n                    marginTop: Spacing.normal + Spacing.small,\n                    padding: Spacing.small + Spacing.tiny\n                },\n                props.style\n            ]}\n        />\n    );\n};\n\nexport default InfoBox;\n","import React, { FC, useCallback, useContext, useState } from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport Token from \"../types/Token\";\nimport Button from \"./Button\";\n\nexport interface ApproveButtonProps {\n    token: Token;\n    spender: string;\n    onSuccess: () => void;\n    onError: (e) => void;\n    hidden?: boolean;\n}\n\nconst ApproveButton: FC<ApproveButtonProps> = props => {\n    const { approveToken } = useContext(EthersContext);\n    const [loading, setLoading] = useState(false);\n    const onPress = useCallback(async () => {\n        if (props.token) {\n            props.onError({});\n            setLoading(true);\n            try {\n                const tx = await approveToken(props.token.address, props.spender);\n                if (tx) {\n                    await tx.wait();\n                    props.onSuccess();\n                }\n            } catch (e) {\n                props.onError(e);\n            } finally {\n                setLoading(false);\n            }\n        }\n    }, [props.token]);\n    if (props.hidden) return <View />;\n    return (\n        <Button\n            title={\"Approve \" + (props.token?.symbol || \"\")}\n            onPress={onPress}\n            loading={loading}\n            containerStyle={{ marginBottom: Spacing.tiny }}\n        />\n    );\n};\n\nexport default ApproveButton;\n","import React from \"react\";\n\nimport Button from \"./Button\";\n\nconst FetchingButton = () => {\n    return <Button title={\"Fetching…\"} disabled={true} />;\n};\nexport default FetchingButton;\n","import React, { FC } from \"react\";\n\nimport { IS_DESKTOP } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport useLinker from \"../hooks/useLinker\";\nimport FlexView from \"./FlexView\";\nimport Text from \"./Text\";\n\nexport interface MetaProps {\n    label: string;\n    text?: string;\n    suffix?: string;\n    url?: string;\n    disabled?: boolean;\n}\n\nconst Meta: FC<MetaProps> = props => {\n    const { textMedium, textLight, placeholder } = useColors();\n    const onPress = useLinker(props.url || \"\", \"\", \"_blank\");\n    const text = props.disabled\n        ? \"N/A\"\n        : props.text\n        ? props.text + (props.suffix ? \" \" + props.suffix : \"\")\n        : \"Fetching…\";\n    return (\n        <FlexView style={{ justifyContent: \"space-between\", marginTop: 4 }}>\n            <Text note={!IS_DESKTOP} fontWeight={\"bold\"} style={{ color: props.disabled ? placeholder : textMedium }}>\n                {props.label}\n            </Text>\n            <Text\n                note={!IS_DESKTOP}\n                onPress={props.url ? onPress : undefined}\n                style={{\n                    color: props.disabled ? placeholder : props.text ? textMedium : textLight,\n                    textDecorationLine: props.url ? \"underline\" : \"none\"\n                }}>\n                {text}\n            </Text>\n        </FlexView>\n    );\n};\n\nexport default Meta;\n","import React from \"react\";\nimport { View, ViewStyle } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport useStyles from \"../hooks/useStyles\";\nimport Button from \"./Button\";\nimport Text from \"./Text\";\n\nexport interface NoticeProps {\n    text: string;\n    clear?: boolean;\n    color?: string;\n    buttonText?: string;\n    onPressButton?: () => void;\n    style?: ViewStyle;\n}\n\nconst Notice = (props: NoticeProps) => {\n    const { textLight } = useColors();\n    const { border } = useStyles();\n    const borderStyle = border({ color: props.color });\n    const color = props.color || textLight;\n    return (\n        <View style={[props.clear ? {} : borderStyle, props.style]}>\n            <Text note={true} style={{ color }}>\n                {props.text}\n            </Text>\n            {props.buttonText && props.onPressButton && (\n                <Button\n                    title={props.buttonText}\n                    type={\"clear\"}\n                    size={\"small\"}\n                    fontWeight={\"bold\"}\n                    onPress={props.onPressButton}\n                    titleStyle={{ color }}\n                    buttonStyle={{ paddingHorizontal: 0, paddingVertical: 0 }}\n                    style={{ alignSelf: \"flex-end\", marginTop: Spacing.tiny }}\n                />\n            )}\n        </View>\n    );\n};\n\nexport default Notice;\n","import React, { FC, useCallback } from \"react\";\nimport { Platform, View } from \"react-native\";\n\nimport { ethers } from \"ethers\";\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport useStyles from \"../hooks/useStyles\";\nimport Token from \"../types/Token\";\nimport { formatBalance, isETH, parseBalance, pow10 } from \"../utils\";\nimport Button from \"./Button\";\nimport Heading from \"./Heading\";\nimport Input from \"./Input\";\n\nexport interface TokenInputProps {\n    title?: string;\n    token?: Token;\n    amount: string;\n    onAmountChanged: (amount: string) => void;\n    label?: string;\n    hideMaxButton?: boolean;\n    maxButtonText?: string;\n    autoFocus?: boolean;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst TokenInput: FC<TokenInputProps> = props => {\n    const { border } = useStyles();\n    const onChangeText = useCallback(\n        (text: string) => {\n            if (props.token && props.onAmountChanged) {\n                try {\n                    parseBalance(text, props.token.decimals);\n                    props.onAmountChanged(text);\n                } catch (e) {\n                    if (text.endsWith(\".\") && text.indexOf(\".\") === text.length - 1) {\n                        props.onAmountChanged(text);\n                    }\n                }\n            }\n        },\n        [props.token, props.onAmountChanged]\n    );\n    return (\n        <View>\n            {props.title && <Heading text={props.title} />}\n            <View>\n                <Input\n                    label={props.label}\n                    value={props.amount}\n                    onChangeText={onChangeText}\n                    placeholder={\"0.0\"}\n                    keyboardType={\"numeric\"}\n                    autoFocus={props.autoFocus || false}\n                    inputStyle={{ marginHorizontal: Spacing.tiny }}\n                    inputContainerStyle={{ borderBottomWidth: 0 }}\n                    labelStyle={{ fontFamily: \"light\", height: props.label ? \"auto\" : 0 }}\n                    containerStyle={{\n                        ...border(),\n                        paddingHorizontal: Spacing.tiny,\n                        paddingTop: 15,\n                        paddingBottom: 2\n                    }}\n                />\n                {props.token?.balance?.gt(0) && !props.hideMaxButton && (\n                    <MaxButton\n                        token={props.token}\n                        maxButtonText={props.maxButtonText}\n                        updateAmount={props.onAmountChanged}\n                    />\n                )}\n            </View>\n        </View>\n    );\n};\n\nconst MaxButton = (props: { token: Token; updateAmount; maxButtonText?: string }) => {\n    const { accent } = useColors();\n    const onPressMax = useCallback(() => {\n        if (props.token) {\n            let balance = props.token.balance;\n            if (isETH(props.token)) {\n                // Subtract 0.01 ETH for gas fee\n                const fee = pow10(16);\n                balance = balance.gt(fee) ? balance.sub(fee) : ethers.constants.Zero;\n            }\n            props.updateAmount(formatBalance(balance, props.token.decimals));\n        }\n    }, [props.token, props.updateAmount]);\n    return (\n        <View style={{ position: \"absolute\", right: 12, bottom: Platform.OS === \"web\" ? 12 : 24 }}>\n            <Button\n                type={\"clear\"}\n                size={\"small\"}\n                color={accent}\n                title={props.maxButtonText || (IS_DESKTOP ? \"MAX \" + props.token.symbol : \"MAX\")}\n                fontWeight={\"bold\"}\n                onPress={onPressMax}\n                buttonStyle={{ paddingHorizontal: Spacing.tiny }}\n            />\n        </View>\n    );\n};\n\nexport default TokenInput;\n","import React, { FC, useCallback } from \"react\";\nimport { Platform } from \"react-native\";\nimport { Input as NativeInput, InputProps as NativeInputProps } from \"react-native-elements\";\n\nimport useColors from \"../hooks/useColors\";\n\nexport interface Validation {\n    regexp: RegExp;\n    error: string;\n}\n\nexport interface InputProps extends NativeInputProps {\n    color?: string;\n    size?: \"small\" | \"normal\" | \"large\";\n    allowed?: Validation[];\n    forbidden?: Validation[];\n    onError?: (error: string) => void;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst Input: FC<InputProps> = props => {\n    const { textDark, textMedium, textLight } = useColors();\n    const size = props.size || \"normal\";\n    const color = props.color || textDark;\n    const fontSize = size === \"small\" ? 16 : size === \"large\" ? 24 : 20;\n    const onChangeText = useCallback(\n        (text: string) => {\n            props.onChangeText?.(text);\n            props.onError?.(\"\");\n            const errors = [] as string[];\n            if (text !== \"\" && props.forbidden) {\n                props.forbidden.forEach(validation => {\n                    if (text.match(validation.regexp)) {\n                        errors.push(validation.error);\n                    }\n                });\n            }\n            if (text !== \"\" && props.allowed) {\n                props.allowed.forEach(validation => {\n                    if (!text.match(validation.regexp)) {\n                        errors.push(validation.error);\n                    }\n                });\n            }\n            if (errors.length > 0) {\n                props.onError?.(errors.join(\"\\n\"));\n            }\n        },\n        [props.onChangeText, props.onError, props.forbidden, props.allowed]\n    );\n    return (\n        <NativeInput\n            {...props}\n            inputStyle={[\n                { fontSize, fontFamily: \"regular\", paddingBottom: 4, color, marginTop: 0, minHeight: 32 },\n                // @ts-ignore\n                Platform.OS === \"web\" ? { outline: \"none\" } : {},\n                props.inputStyle\n            ]}\n            labelStyle={[{ color: textMedium }, props.labelStyle]}\n            placeholderTextColor={props.placeholderTextColor || textLight}\n            errorStyle={props.onError ? { height: 0 } : props.errorStyle}\n            containerStyle={[{ paddingHorizontal: 0 }, props.containerStyle]}\n            onChangeText={onChangeText}\n        />\n    );\n};\n\nexport default Input;\n","import { useCallback } from \"react\";\n\nimport { ethers } from \"ethers\";\nimport { SUSHI_BAR } from \"../constants/contracts\";\nimport { getContract } from \"../utils\";\nimport { logTransaction } from \"../utils/analytics-utils\";\n\nconst useSushiBar = () => {\n    const enter = useCallback(async (amount: ethers.BigNumber, signer: ethers.Signer) => {\n        const sushiBar = getContract(\"SushiBar\", SUSHI_BAR, signer);\n        const gasLimit = await sushiBar.estimateGas.enter(amount);\n        const tx = await sushiBar.enter(amount, {\n            gasLimit: gasLimit.mul(120).div(100)\n        });\n        return logTransaction(tx, \"SushiBar.enter()\", amount.toString());\n    }, []);\n\n    const leave = useCallback(async (amount: ethers.BigNumber, signer: ethers.Signer) => {\n        const sushiBar = getContract(\"SushiBar\", SUSHI_BAR, signer);\n        const gasLimit = await sushiBar.estimateGas.leave(amount);\n        const tx = await sushiBar.leave(amount, {\n            gasLimit: gasLimit.mul(120).div(100)\n        });\n        return logTransaction(tx, \"SushiBar.leave()\", amount.toString());\n    }, []);\n\n    return {\n        enter,\n        leave\n    };\n};\n\nexport default useSushiBar;\n","import { useCallback, useContext, useEffect, useMemo, useState } from \"react\";\n\nimport { ethers } from \"ethers\";\nimport useAsyncEffect from \"use-async-effect\";\nimport { SUSHI_BAR } from \"../constants/contracts\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport Token from \"../types/Token\";\nimport { getContract, parseBalance } from \"../utils\";\nimport useSushiBar from \"./useSushiBar\";\n\nexport type StakeAction = \"sushi-balance\" | \"stake\";\nexport type UnstakeAction = \"xsushi-balance\" | \"unstake\";\n\nexport interface StakingState {\n    sushi?: Token;\n    xSushi?: Token;\n    sushiStaked?: ethers.BigNumber;\n    sushiSupply?: ethers.BigNumber;\n    xSushiSupply?: ethers.BigNumber;\n    amount: string;\n    setAmount: (amount: string) => void;\n    sushiAllowed: boolean;\n    setSushiAllowed: (allowed: boolean) => void;\n    xSushiAllowed: boolean;\n    setXSushiAllowed: (allowed: boolean) => void;\n    loading: boolean;\n    onEnter: () => Promise<void>;\n    entering: boolean;\n    onLeave: () => Promise<void>;\n    leaving: boolean;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst useStakingState: () => StakingState = () => {\n    const { signer, address, getTokenAllowance, tokens, updateTokens } = useContext(EthersContext);\n    const { enter, leave } = useSushiBar();\n    const [sushiStaked, setSushiStaked] = useState<ethers.BigNumber>();\n    const [sushiSupply, setSushiSupply] = useState<ethers.BigNumber>();\n    const [xSushiSupply, setXSushiSupply] = useState<ethers.BigNumber>();\n    const [amount, setAmount] = useState(\"\");\n    const [sushiAllowed, setSushiAllowed] = useState(false);\n    const [xSushiAllowed, setXSushiAllowed] = useState(false);\n    const [loading, setLoading] = useState(false);\n    const [entering, setEntering] = useState(false);\n    const [leaving, setLeaving] = useState(false);\n\n    const sushi = useMemo(() => tokens.find(token => token.symbol === \"SUSHI\"), [tokens]);\n    const xSushi = useMemo(() => tokens.find(token => token.symbol === \"xSUSHI\"), [tokens]);\n\n    useEffect(() => {\n        setAmount(\"\");\n    }, [address]);\n\n    useAsyncEffect(async () => {\n        if (sushi && xSushi && signer) {\n            setSushiAllowed(false);\n            setXSushiAllowed(false);\n            setLoading(true);\n            try {\n                const minAllowance = ethers.BigNumber.from(2)\n                    .pow(96)\n                    .sub(1);\n                const sushiAllowance = await getTokenAllowance(sushi.address, SUSHI_BAR);\n                setSushiAllowed(ethers.BigNumber.from(sushiAllowance).gte(minAllowance));\n                const xSushiAllowance = await getTokenAllowance(xSushi.address, SUSHI_BAR);\n                setXSushiAllowed(ethers.BigNumber.from(xSushiAllowance).gte(minAllowance));\n\n                const sushiContract = getContract(\"ERC20\", sushi.address, signer);\n                setSushiStaked(await sushiContract.balanceOf(SUSHI_BAR));\n                setSushiSupply(await sushiContract.totalSupply());\n                const xSushiContract = getContract(\"ERC20\", xSushi.address, signer);\n                setXSushiSupply(await xSushiContract.totalSupply());\n            } finally {\n                setLoading(false);\n            }\n        }\n    }, [sushi, xSushi, signer]);\n\n    const onEnter = useCallback(async () => {\n        if (amount && sushi && signer) {\n            setEntering(true);\n            try {\n                const parsed = parseBalance(amount, sushi.decimals);\n                const tx = await enter(parsed, signer);\n                if (tx) {\n                    await tx.wait();\n                    await updateTokens();\n                    setAmount(\"\");\n                }\n            } finally {\n                setEntering(false);\n            }\n        }\n    }, [amount, sushi, signer]);\n\n    const onLeave = useCallback(async () => {\n        if (amount && xSushi && signer) {\n            setLeaving(true);\n            try {\n                const parsed = parseBalance(amount, xSushi.decimals);\n                const tx = await leave(parsed, signer);\n                if (tx) {\n                    await tx.wait();\n                    await updateTokens();\n                    setAmount(\"\");\n                }\n            } finally {\n                setLeaving(false);\n            }\n        }\n    }, [amount, xSushi, signer]);\n\n    return {\n        sushi,\n        xSushi,\n        sushiStaked,\n        sushiSupply,\n        xSushiSupply,\n        amount,\n        setAmount,\n        sushiAllowed,\n        setSushiAllowed,\n        xSushiAllowed,\n        setXSushiAllowed,\n        loading,\n        onEnter,\n        entering,\n        onLeave,\n        leaving\n    };\n};\n\nexport default useStakingState;\n","import React, { useState } from \"react\";\nimport { Platform, View } from \"react-native\";\n\nimport AmountMeta from \"../components/AmountMeta\";\nimport ApproveButton from \"../components/ApproveButton\";\nimport BackgroundImage from \"../components/BackgroundImage\";\nimport Border from \"../components/Border\";\nimport Button from \"../components/Button\";\nimport Container from \"../components/Container\";\nimport Content from \"../components/Content\";\nimport ErrorMessage from \"../components/ErrorMessage\";\nimport FetchingButton from \"../components/FetchingButton\";\nimport Heading from \"../components/Heading\";\nimport InfoBox from \"../components/InfoBox\";\nimport InsufficientBalanceButton from \"../components/InsufficientBalanceButton\";\nimport Meta from \"../components/Meta\";\nimport Notice from \"../components/Notice\";\nimport Text from \"../components/Text\";\nimport Title from \"../components/Title\";\nimport TokenInput from \"../components/TokenInput\";\nimport WebFooter from \"../components/web/WebFooter\";\nimport { StakingSubMenu } from \"../components/web/WebSubMenu\";\nimport { SUSHI_BAR } from \"../constants/contracts\";\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport Fraction from \"../constants/Fraction\";\nimport useStakingState, { StakingState } from \"../hooks/useStakingState\";\nimport MetamaskError from \"../types/MetamaskError\";\nimport { formatBalance, isEmptyValue, parseBalance } from \"../utils\";\nimport Screen from \"./Screen\";\n\nconst StakeScreen = () => {\n    return (\n        <Screen>\n            <Container>\n                <BackgroundImage />\n                <Content>\n                    <Title text={\"Stake\"} />\n                    <Text light={true}>Earn recurring income by staking your SUSHI.</Text>\n                    <Staking />\n                </Content>\n                {Platform.OS === \"web\" && <WebFooter />}\n            </Container>\n            <StakingSubMenu />\n        </Screen>\n    );\n};\n\nconst Staking = () => {\n    const state = useStakingState();\n    return (\n        <View style={{ marginTop: Spacing.large }}>\n            <SushiBalance state={state} />\n            <Border />\n            <AmountInput state={state} />\n            {state.sushi && state.sushi.balance.isZero() && (\n                <Notice text={\"You don't have any SUSHI.\"} color={\"orange\"} style={{ marginTop: Spacing.small }} />\n            )}\n            <StakeInfo state={state} />\n        </View>\n    );\n};\n\nconst SushiBalance = ({ state }: { state: StakingState }) => {\n    return (\n        <View>\n            <Heading text={\"Your SUSHI\"} />\n            <AmountMeta\n                amount={state.sushi ? formatBalance(state.sushi.balance, state.sushi.decimals) : \"\"}\n                suffix={\"SUSHI\"}\n                disabled={!state.sushi}\n            />\n        </View>\n    );\n};\n\nconst AmountInput = ({ state }: { state: StakingState }) => {\n    if (!state.sushi || state.sushi.balance.isZero()) {\n        return <Heading text={\"Amount To Stake\"} disabled={true} />;\n    }\n    return (\n        <View>\n            <Heading text={\"Amount To Stake\"} />\n            <TokenInput\n                token={state.sushi}\n                amount={state.amount}\n                onAmountChanged={state.setAmount}\n                autoFocus={IS_DESKTOP}\n            />\n        </View>\n    );\n};\n\n// tslint:disable-next-line:max-func-body-length\nconst StakeInfo = ({ state }: { state: StakingState }) => {\n    const disabled =\n        !state.sushi ||\n        state.sushi.balance.isZero() ||\n        !state.xSushi ||\n        !state.sushiStaked ||\n        !state.xSushiSupply ||\n        isEmptyValue(state.amount);\n    const xSushiAmount = disabled\n        ? undefined\n        : parseBalance(state.amount, state.sushi!.decimals)\n              .mul(state.xSushiSupply!)\n              .div(state.sushiStaked!);\n    const xSushiTotal = disabled ? undefined : formatBalance(state.xSushiSupply!, state.xSushi!.decimals, 8);\n    const xSushiBalance = disabled ? undefined : state.xSushi!.balance.add(xSushiAmount!);\n    const share = disabled\n        ? undefined\n        : Fraction.from(xSushiAmount!.add(xSushiBalance!), state.xSushiSupply!).toString();\n    return (\n        <InfoBox>\n            <AmountMeta\n                amount={xSushiAmount ? formatBalance(xSushiAmount, state.xSushi!.decimals, 8) : \"\"}\n                suffix={\"xSUSHI\"}\n                disabled={disabled}\n            />\n            <Meta label={\"xSUSHI Share\"} text={share} suffix={\"%\"} disabled={disabled} />\n            <Meta label={\"Total xSUSHI\"} text={xSushiTotal} disabled={disabled} />\n            <Controls state={state} />\n        </InfoBox>\n    );\n};\n\nconst Controls = ({ state }: { state: StakingState }) => {\n    const [error, setError] = useState<MetamaskError>({});\n    return (\n        <View style={{ marginTop: Spacing.normal }}>\n            {!state.sushi || state.sushi.balance.isZero() || isEmptyValue(state.amount) ? (\n                <StakeButton state={state} onError={setError} disabled={true} />\n            ) : parseBalance(state.amount, state.sushi.decimals).gt(state.sushi.balance) ? (\n                <InsufficientBalanceButton symbol={state.sushi.symbol} />\n            ) : state.loading ? (\n                <FetchingButton />\n            ) : (\n                <>\n                    <ApproveButton\n                        token={state.sushi}\n                        spender={SUSHI_BAR}\n                        onSuccess={() => state.setSushiAllowed(true)}\n                        onError={setError}\n                        hidden={state.sushiAllowed}\n                    />\n                    <StakeButton state={state} onError={setError} disabled={!state.sushiAllowed} />\n                </>\n            )}\n            {error.message && error.code !== 4001 && <ErrorMessage error={error} />}\n        </View>\n    );\n};\n\nconst StakeButton = ({\n    state,\n    onError,\n    disabled\n}: {\n    state: StakingState;\n    onError: (e) => void;\n    disabled: boolean;\n}) => {\n    const onPress = async () => {\n        onError({});\n        try {\n            await state.onEnter();\n            state.setAmount(\"\");\n        } catch (e) {\n            onError(e);\n        }\n    };\n    return <Button title={\"Stake\"} loading={state.entering} onPress={onPress} disabled={disabled} />;\n};\n\nexport default StakeScreen;\n"],"sourceRoot":""}