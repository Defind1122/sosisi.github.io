{"version":3,"sources":["src/components/Heading.tsx","src/hooks/useLinker.tsx","src/components/Column.tsx","src/components/SocialIcons.tsx","src/components/web/WebFooter.tsx","src/components/AmountMeta.tsx","src/components/InsufficientBalanceButton.tsx","src/components/Border.tsx","src/components/ErrorMessage.tsx","src/components/InfoBox.tsx","src/components/FetchingButton.tsx","src/components/Notice.tsx","src/components/TokenInput.tsx","src/components/Input.tsx","src/hooks/useSushiBar.tsx","src/hooks/useStakingState.tsx","src/screens/UnstakeScreen.tsx"],"names":["Heading","props","accent","useColors","style","alignItems","height","marginBottom","disabled","Spacing","small","medium","fontWeight","flex","fontSize","IS_DESKTOP","paddingBottom","tiny","text","buttonText","type","size","title","onPress","onPressButton","color","buttonStyle","paddingHorizontal","Platform","OS","path","route","target","history","useHistory","useCallback","window","open","push","_target","navigate","useNavigation","Column","View","width","marginTop","noTopMargin","large","normal","SocialIcon","darkMode","useContext","GlobalContext","background","textLight","light","iconColor","undefined","backgroundColor","borderWidth","borderColor","SocialIcons","onPressTwitter","useLinker","onPressGithub","onPressDiscord","FlexView","justifyContent","name","raised","reverse","reverseColor","containerStyle","WebFooter","padding","Text","note","textAlign","AmountMeta","textDark","placeholder","amount","suffix","InsufficientBalanceButton","symbol","Border","border","ErrorMessage","error","code","message","InfoBox","backgroundLight","borderDark","useStyles","FetchingButton","Notice","borderStyle","clear","titleStyle","paddingVertical","alignSelf","MaxButton","onPressMax","token","balance","isETH","fee","pow10","gt","sub","ethers","constants","Zero","updateAmount","formatBalance","decimals","position","right","bottom","maxButtonText","TokenInput","onChangeText","onAmountChanged","parseBalance","e","endsWith","indexOf","length","label","value","keyboardType","autoFocus","inputStyle","marginHorizontal","inputContainerStyle","borderBottomWidth","labelStyle","fontFamily","paddingTop","hideMaxButton","Input","textMedium","onError","errors","forbidden","forEach","validation","match","regexp","allowed","join","minHeight","outline","placeholderTextColor","errorStyle","useSushiBar","enter","signer","a","async","sushiBar","getContract","SUSHI_BAR","estimateGas","gasLimit","mul","div","tx","logTransaction","toString","leave","useStakingState","EthersContext","address","getTokenAllowance","tokens","updateTokens","useState","sushiStaked","setSushiStaked","sushiSupply","setSushiSupply","xSushiSupply","setXSushiSupply","setAmount","sushiAllowed","setSushiAllowed","xSushiAllowed","setXSushiAllowed","loading","setLoading","entering","setEntering","leaving","setLeaving","sushi","useMemo","find","xSushi","useEffect","useAsyncEffect","minAllowance","BigNumber","from","pow","sushiAllowance","gte","xSushiAllowance","sushiContract","balanceOf","totalSupply","xSushiContract","onEnter","parsed","wait","onLeave","Staking","state","XSushiBalance","AmountInput","isZero","UnstakeInfo","isEmptyValue","sushiAmount","Controls","setError","UnstakeButton","UnstakeScreen"],"mappings":"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","file":"static/js/9.21f6a7e6.chunk.js","sourcesContent":["import React, { FC } from \"react\";\nimport { TextStyle } from \"react-native\";\n\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport Button from \"./Button\";\nimport FlexView from \"./FlexView\";\nimport Text from \"./Text\";\n\ninterface HeadingProps {\n    text: string;\n    fontWeight?: \"light\" | \"regular\" | \"bold\";\n    disabled?: boolean;\n    buttonText?: string;\n    onPressButton?: () => void | Promise<void>;\n    style?: TextStyle;\n}\n\nconst Heading: FC<HeadingProps> = props => {\n    const { accent } = useColors();\n    return (\n        <FlexView style={{ alignItems: \"flex-end\", height: 32, marginBottom: props.disabled ? 0 : Spacing.small }}>\n            <Text\n                medium={true}\n                fontWeight={props.fontWeight || \"bold\"}\n                disabled={props.disabled}\n                style={[{ flex: 1, fontSize: IS_DESKTOP ? 24 : 18, paddingBottom: Spacing.tiny }, props.style]}>\n                {props.text}\n            </Text>\n            {props.buttonText && (\n                <Button\n                    type={\"clear\"}\n                    size={\"small\"}\n                    title={props.buttonText}\n                    onPress={props.onPressButton}\n                    color={accent}\n                    buttonStyle={{ paddingHorizontal: Spacing.tiny }}\n                />\n            )}\n        </FlexView>\n    );\n};\n\nexport default Heading;\n","import { useCallback } from \"react\";\nimport { Platform } from \"react-native\";\nimport { useHistory } from \"react-router-dom\";\n\nimport { useNavigation } from \"@react-navigation/native\";\n\nconst useWebLinker = (path: string, route: string, target?: string) => {\n    const history = useHistory();\n    return useCallback(() => {\n        if (target) {\n            window.open(path, target);\n        } else {\n            history.push(path);\n        }\n    }, [path, target]);\n};\n\nconst useAppLinker = (path: string, route: string, _target?: string) => {\n    const { navigate } = useNavigation();\n    return useCallback(() => {\n        navigate(route);\n    }, [route]);\n};\n\nexport default Platform.OS === \"web\" ? useWebLinker : useAppLinker;\n","import React, { FC } from \"react\";\nimport { Platform, View, ViewProps, ViewStyle } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\n\ninterface ColumnProps extends ViewProps {\n    noTopMargin?: boolean;\n    style?: ViewStyle;\n}\n\nconst Column: FC<ColumnProps> = props => (\n    <View\n        {...props}\n        style={[\n            {\n                width: \"100%\",\n                marginTop: props.noTopMargin ? 0 : Platform.OS === \"web\" ? Spacing.large : Spacing.normal\n            },\n            props.style\n        ]}\n    />\n);\n\nexport default Column;\n","import React, { useContext } from \"react\";\nimport { Icon, SocialIcon as NativeSocialIcon, SocialIconProps } from \"react-native-elements\";\n\nimport { GlobalContext } from \"../context/GlobalContext\";\nimport useColors from \"../hooks/useColors\";\nimport useLinker from \"../hooks/useLinker\";\nimport FlexView from \"./FlexView\";\n\nconst SocialIcons = () => {\n    const { darkMode } = useContext(GlobalContext);\n    const { background, textLight } = useColors();\n    const onPressTwitter = useLinker(\"https://twitter.com/sushiswap\", \"\", \"_blank\");\n    const onPressGithub = useLinker(\"https://github.com/sushiswap\", \"\", \"_blank\");\n    const onPressDiscord = useLinker(\"https://discord.gg/YS8xH7E\", \"\", \"_blank\");\n    return (\n        <FlexView style={{ width: \"100%\", justifyContent: \"center\" }}>\n            <SocialIcon type=\"github-alt\" onPress={onPressGithub} />\n            <SocialIcon type=\"twitter\" onPress={onPressTwitter} />\n            <Icon\n                type={\"material-community\"}\n                name={\"discord\"}\n                raised={true}\n                reverse={true}\n                color={background}\n                reverseColor={darkMode ? \"white\" : \"#7289da\"}\n                style={{ backgroundColor: background }}\n                containerStyle={{\n                    borderWidth: 1,\n                    borderColor: darkMode ? \"white\" : textLight\n                }}\n                onPress={onPressDiscord}\n            />\n        </FlexView>\n    );\n};\n\nconst SocialIcon = (props: SocialIconProps) => {\n    const { darkMode } = useContext(GlobalContext);\n    const { background, textLight } = useColors();\n    return (\n        <NativeSocialIcon\n            {...props}\n            light={!darkMode}\n            iconColor={darkMode ? \"white\" : undefined}\n            style={{\n                backgroundColor: background,\n                borderWidth: 1,\n                borderColor: darkMode ? \"white\" : textLight\n            }}\n        />\n    );\n};\n\nexport default SocialIcons;\n","import React from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../../constants/dimension\";\nimport Column from \"../Column\";\nimport SocialIcons from \"../SocialIcons\";\nimport Text from \"../Text\";\n\nconst WebFooter = () => (\n    <Column noTopMargin={true}>\n        <View\n            style={{\n                width: \"100%\",\n                padding: Spacing.normal\n            }}>\n            <SocialIcons />\n            <Text note={true} style={{ marginTop: Spacing.tiny, textAlign: \"center\", width: \"100%\" }}>\n                Built with ❤️ by SushiSwap\n            </Text>\n        </View>\n    </Column>\n);\n\nexport default WebFooter;\n","import React, { FC } from \"react\";\n\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport Text from \"./Text\";\n\nexport interface AmountMetaProps {\n    amount?: string;\n    suffix?: string;\n    disabled?: boolean;\n}\n\nconst AmountMeta: FC<AmountMetaProps> = props => {\n    const { textDark, textLight, placeholder } = useColors();\n    return (\n        <Text\n            style={{\n                fontSize: IS_DESKTOP ? 28 : 20,\n                marginBottom: Spacing.normal,\n                color: props.disabled ? placeholder : props.amount ? textDark : textLight\n            }}>\n            {props.disabled ? \"N/A\" : props.amount ? props.amount + \" \" + (props.suffix || \"\") : \"Fetching…\"}\n        </Text>\n    );\n};\n\nexport default AmountMeta;\n","import React from \"react\";\n\nimport Button from \"./Button\";\n\nconst InsufficientBalanceButton = ({ symbol }: { symbol: string }) => {\n    return <Button title={\"Insufficient \" + (symbol ? symbol : \"Balance\")} disabled={true} />;\n};\nexport default InsufficientBalanceButton;\n","import React from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\n\nconst Border = props => {\n    const { border } = useColors();\n    return (\n        <View\n            style={{\n                height: 1,\n                width: \"100%\",\n                backgroundColor: border,\n                marginTop: props.small ? Spacing.tiny : Spacing.small,\n                marginBottom: props.small ? Spacing.tiny : Spacing.small + Spacing.tiny\n            }}\n        />\n    );\n};\n\nexport default Border;\n","import React from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport MetamaskError from \"../types/MetamaskError\";\nimport Text from \"./Text\";\n\nconst ErrorMessage = ({ error }: { error: MetamaskError }) => (\n    <View\n        style={{\n            borderColor: \"red\",\n            borderWidth: 1,\n            width: \"100%\",\n            padding: Spacing.tiny,\n            marginTop: Spacing.small\n        }}>\n        {error.code && (\n            <Text fontWeight={\"bold\"} style={{ color: \"red\", fontSize: 14 }}>\n                Error Code {error.code}\n            </Text>\n        )}\n        <Text note={true} style={{ color: \"red\", fontSize: 14 }}>\n            {error.message}\n        </Text>\n    </View>\n);\n\nexport default ErrorMessage;\n","import React, { PropsWithChildren, useContext } from \"react\";\nimport { View, ViewProps } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport { GlobalContext } from \"../context/GlobalContext\";\nimport useColors from \"../hooks/useColors\";\nimport useStyles from \"../hooks/useStyles\";\n\nconst InfoBox = (props: PropsWithChildren<ViewProps>) => {\n    const { darkMode } = useContext(GlobalContext);\n    const { backgroundLight, borderDark } = useColors();\n    const { border } = useStyles();\n    return (\n        <View\n            {...props}\n            style={[\n                {\n                    ...border({ color: darkMode ? borderDark : backgroundLight }),\n                    backgroundColor: backgroundLight,\n                    marginTop: Spacing.normal + Spacing.small,\n                    padding: Spacing.small + Spacing.tiny\n                },\n                props.style\n            ]}\n        />\n    );\n};\n\nexport default InfoBox;\n","import React from \"react\";\n\nimport Button from \"./Button\";\n\nconst FetchingButton = () => {\n    return <Button title={\"Fetching…\"} disabled={true} />;\n};\nexport default FetchingButton;\n","import React from \"react\";\nimport { View, ViewStyle } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport useStyles from \"../hooks/useStyles\";\nimport Button from \"./Button\";\nimport Text from \"./Text\";\n\nexport interface NoticeProps {\n    text: string;\n    clear?: boolean;\n    color?: string;\n    buttonText?: string;\n    onPressButton?: () => void;\n    style?: ViewStyle;\n}\n\nconst Notice = (props: NoticeProps) => {\n    const { textLight } = useColors();\n    const { border } = useStyles();\n    const borderStyle = border({ color: props.color });\n    const color = props.color || textLight;\n    return (\n        <View style={[props.clear ? {} : borderStyle, props.style]}>\n            <Text note={true} style={{ color }}>\n                {props.text}\n            </Text>\n            {props.buttonText && props.onPressButton && (\n                <Button\n                    title={props.buttonText}\n                    type={\"clear\"}\n                    size={\"small\"}\n                    fontWeight={\"bold\"}\n                    onPress={props.onPressButton}\n                    titleStyle={{ color }}\n                    buttonStyle={{ paddingHorizontal: 0, paddingVertical: 0 }}\n                    style={{ alignSelf: \"flex-end\", marginTop: Spacing.tiny }}\n                />\n            )}\n        </View>\n    );\n};\n\nexport default Notice;\n","import React, { FC, useCallback } from \"react\";\nimport { Platform, View } from \"react-native\";\n\nimport { ethers } from \"ethers\";\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport useStyles from \"../hooks/useStyles\";\nimport Token from \"../types/Token\";\nimport { formatBalance, isETH, parseBalance, pow10 } from \"../utils\";\nimport Button from \"./Button\";\nimport Heading from \"./Heading\";\nimport Input from \"./Input\";\n\nexport interface TokenInputProps {\n    title?: string;\n    token?: Token;\n    amount: string;\n    onAmountChanged: (amount: string) => void;\n    label?: string;\n    hideMaxButton?: boolean;\n    maxButtonText?: string;\n    autoFocus?: boolean;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst TokenInput: FC<TokenInputProps> = props => {\n    const { border } = useStyles();\n    const onChangeText = useCallback(\n        (text: string) => {\n            if (props.token && props.onAmountChanged) {\n                try {\n                    parseBalance(text, props.token.decimals);\n                    props.onAmountChanged(text);\n                } catch (e) {\n                    if (text.endsWith(\".\") && text.indexOf(\".\") === text.length - 1) {\n                        props.onAmountChanged(text);\n                    }\n                }\n            }\n        },\n        [props.token, props.onAmountChanged]\n    );\n    return (\n        <View>\n            {props.title && <Heading text={props.title} />}\n            <View>\n                <Input\n                    label={props.label}\n                    value={props.amount}\n                    onChangeText={onChangeText}\n                    placeholder={\"0.0\"}\n                    keyboardType={\"numeric\"}\n                    autoFocus={props.autoFocus || false}\n                    inputStyle={{ marginHorizontal: Spacing.tiny }}\n                    inputContainerStyle={{ borderBottomWidth: 0 }}\n                    labelStyle={{ fontFamily: \"light\", height: props.label ? \"auto\" : 0 }}\n                    containerStyle={{\n                        ...border(),\n                        paddingHorizontal: Spacing.tiny,\n                        paddingTop: 15,\n                        paddingBottom: 2\n                    }}\n                />\n                {props.token?.balance?.gt(0) && !props.hideMaxButton && (\n                    <MaxButton\n                        token={props.token}\n                        maxButtonText={props.maxButtonText}\n                        updateAmount={props.onAmountChanged}\n                    />\n                )}\n            </View>\n        </View>\n    );\n};\n\nconst MaxButton = (props: { token: Token; updateAmount; maxButtonText?: string }) => {\n    const { accent } = useColors();\n    const onPressMax = useCallback(() => {\n        if (props.token) {\n            let balance = props.token.balance;\n            if (isETH(props.token)) {\n                // Subtract 0.01 ETH for gas fee\n                const fee = pow10(16);\n                balance = balance.gt(fee) ? balance.sub(fee) : ethers.constants.Zero;\n            }\n            props.updateAmount(formatBalance(balance, props.token.decimals));\n        }\n    }, [props.token, props.updateAmount]);\n    return (\n        <View style={{ position: \"absolute\", right: 12, bottom: Platform.OS === \"web\" ? 12 : 24 }}>\n            <Button\n                type={\"clear\"}\n                size={\"small\"}\n                color={accent}\n                title={props.maxButtonText || (IS_DESKTOP ? \"MAX \" + props.token.symbol : \"MAX\")}\n                fontWeight={\"bold\"}\n                onPress={onPressMax}\n                buttonStyle={{ paddingHorizontal: Spacing.tiny }}\n            />\n        </View>\n    );\n};\n\nexport default TokenInput;\n","import React, { FC, useCallback } from \"react\";\nimport { Platform } from \"react-native\";\nimport { Input as NativeInput, InputProps as NativeInputProps } from \"react-native-elements\";\n\nimport useColors from \"../hooks/useColors\";\n\nexport interface Validation {\n    regexp: RegExp;\n    error: string;\n}\n\nexport interface InputProps extends NativeInputProps {\n    color?: string;\n    size?: \"small\" | \"normal\" | \"large\";\n    allowed?: Validation[];\n    forbidden?: Validation[];\n    onError?: (error: string) => void;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst Input: FC<InputProps> = props => {\n    const { textDark, textMedium, textLight } = useColors();\n    const size = props.size || \"normal\";\n    const color = props.color || textDark;\n    const fontSize = size === \"small\" ? 16 : size === \"large\" ? 24 : 20;\n    const onChangeText = useCallback(\n        (text: string) => {\n            props.onChangeText?.(text);\n            props.onError?.(\"\");\n            const errors = [] as string[];\n            if (text !== \"\" && props.forbidden) {\n                props.forbidden.forEach(validation => {\n                    if (text.match(validation.regexp)) {\n                        errors.push(validation.error);\n                    }\n                });\n            }\n            if (text !== \"\" && props.allowed) {\n                props.allowed.forEach(validation => {\n                    if (!text.match(validation.regexp)) {\n                        errors.push(validation.error);\n                    }\n                });\n            }\n            if (errors.length > 0) {\n                props.onError?.(errors.join(\"\\n\"));\n            }\n        },\n        [props.onChangeText, props.onError, props.forbidden, props.allowed]\n    );\n    return (\n        <NativeInput\n            {...props}\n            inputStyle={[\n                { fontSize, fontFamily: \"regular\", paddingBottom: 4, color, marginTop: 0, minHeight: 32 },\n                // @ts-ignore\n                Platform.OS === \"web\" ? { outline: \"none\" } : {},\n                props.inputStyle\n            ]}\n            labelStyle={[{ color: textMedium }, props.labelStyle]}\n            placeholderTextColor={props.placeholderTextColor || textLight}\n            errorStyle={props.onError ? { height: 0 } : props.errorStyle}\n            containerStyle={[{ paddingHorizontal: 0 }, props.containerStyle]}\n            onChangeText={onChangeText}\n        />\n    );\n};\n\nexport default Input;\n","import { useCallback } from \"react\";\n\nimport { ethers } from \"ethers\";\nimport { SUSHI_BAR } from \"../constants/contracts\";\nimport { getContract } from \"../utils\";\nimport { logTransaction } from \"../utils/analytics-utils\";\n\nconst useSushiBar = () => {\n    const enter = useCallback(async (amount: ethers.BigNumber, signer: ethers.Signer) => {\n        const sushiBar = getContract(\"SushiBar\", SUSHI_BAR, signer);\n        const gasLimit = await sushiBar.estimateGas.enter(amount);\n        const tx = await sushiBar.enter(amount, {\n            gasLimit: gasLimit.mul(120).div(100)\n        });\n        return logTransaction(tx, \"SushiBar.enter()\", amount.toString());\n    }, []);\n\n    const leave = useCallback(async (amount: ethers.BigNumber, signer: ethers.Signer) => {\n        const sushiBar = getContract(\"SushiBar\", SUSHI_BAR, signer);\n        const gasLimit = await sushiBar.estimateGas.leave(amount);\n        const tx = await sushiBar.leave(amount, {\n            gasLimit: gasLimit.mul(120).div(100)\n        });\n        return logTransaction(tx, \"SushiBar.leave()\", amount.toString());\n    }, []);\n\n    return {\n        enter,\n        leave\n    };\n};\n\nexport default useSushiBar;\n","import { useCallback, useContext, useEffect, useMemo, useState } from \"react\";\n\nimport { ethers } from \"ethers\";\nimport useAsyncEffect from \"use-async-effect\";\nimport { SUSHI_BAR } from \"../constants/contracts\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport Token from \"../types/Token\";\nimport { getContract, parseBalance } from \"../utils\";\nimport useSushiBar from \"./useSushiBar\";\n\nexport type StakeAction = \"sushi-balance\" | \"stake\";\nexport type UnstakeAction = \"xsushi-balance\" | \"unstake\";\n\nexport interface StakingState {\n    sushi?: Token;\n    xSushi?: Token;\n    sushiStaked?: ethers.BigNumber;\n    sushiSupply?: ethers.BigNumber;\n    xSushiSupply?: ethers.BigNumber;\n    amount: string;\n    setAmount: (amount: string) => void;\n    sushiAllowed: boolean;\n    setSushiAllowed: (allowed: boolean) => void;\n    xSushiAllowed: boolean;\n    setXSushiAllowed: (allowed: boolean) => void;\n    loading: boolean;\n    onEnter: () => Promise<void>;\n    entering: boolean;\n    onLeave: () => Promise<void>;\n    leaving: boolean;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst useStakingState: () => StakingState = () => {\n    const { signer, address, getTokenAllowance, tokens, updateTokens } = useContext(EthersContext);\n    const { enter, leave } = useSushiBar();\n    const [sushiStaked, setSushiStaked] = useState<ethers.BigNumber>();\n    const [sushiSupply, setSushiSupply] = useState<ethers.BigNumber>();\n    const [xSushiSupply, setXSushiSupply] = useState<ethers.BigNumber>();\n    const [amount, setAmount] = useState(\"\");\n    const [sushiAllowed, setSushiAllowed] = useState(false);\n    const [xSushiAllowed, setXSushiAllowed] = useState(false);\n    const [loading, setLoading] = useState(false);\n    const [entering, setEntering] = useState(false);\n    const [leaving, setLeaving] = useState(false);\n\n    const sushi = useMemo(() => tokens.find(token => token.symbol === \"SUSHI\"), [tokens]);\n    const xSushi = useMemo(() => tokens.find(token => token.symbol === \"xSUSHI\"), [tokens]);\n\n    useEffect(() => {\n        setAmount(\"\");\n    }, [address]);\n\n    useAsyncEffect(async () => {\n        if (sushi && xSushi && signer) {\n            setSushiAllowed(false);\n            setXSushiAllowed(false);\n            setLoading(true);\n            try {\n                const minAllowance = ethers.BigNumber.from(2)\n                    .pow(96)\n                    .sub(1);\n                const sushiAllowance = await getTokenAllowance(sushi.address, SUSHI_BAR);\n                setSushiAllowed(ethers.BigNumber.from(sushiAllowance).gte(minAllowance));\n                const xSushiAllowance = await getTokenAllowance(xSushi.address, SUSHI_BAR);\n                setXSushiAllowed(ethers.BigNumber.from(xSushiAllowance).gte(minAllowance));\n\n                const sushiContract = getContract(\"ERC20\", sushi.address, signer);\n                setSushiStaked(await sushiContract.balanceOf(SUSHI_BAR));\n                setSushiSupply(await sushiContract.totalSupply());\n                const xSushiContract = getContract(\"ERC20\", xSushi.address, signer);\n                setXSushiSupply(await xSushiContract.totalSupply());\n            } finally {\n                setLoading(false);\n            }\n        }\n    }, [sushi, xSushi, signer]);\n\n    const onEnter = useCallback(async () => {\n        if (amount && sushi && signer) {\n            setEntering(true);\n            try {\n                const parsed = parseBalance(amount, sushi.decimals);\n                const tx = await enter(parsed, signer);\n                if (tx) {\n                    await tx.wait();\n                    await updateTokens();\n                    setAmount(\"\");\n                }\n            } finally {\n                setEntering(false);\n            }\n        }\n    }, [amount, sushi, signer]);\n\n    const onLeave = useCallback(async () => {\n        if (amount && xSushi && signer) {\n            setLeaving(true);\n            try {\n                const parsed = parseBalance(amount, xSushi.decimals);\n                const tx = await leave(parsed, signer);\n                if (tx) {\n                    await tx.wait();\n                    await updateTokens();\n                    setAmount(\"\");\n                }\n            } finally {\n                setLeaving(false);\n            }\n        }\n    }, [amount, xSushi, signer]);\n\n    return {\n        sushi,\n        xSushi,\n        sushiStaked,\n        sushiSupply,\n        xSushiSupply,\n        amount,\n        setAmount,\n        sushiAllowed,\n        setSushiAllowed,\n        xSushiAllowed,\n        setXSushiAllowed,\n        loading,\n        onEnter,\n        entering,\n        onLeave,\n        leaving\n    };\n};\n\nexport default useStakingState;\n","import React, { useState } from \"react\";\nimport { Platform, View } from \"react-native\";\n\nimport AmountMeta from \"../components/AmountMeta\";\nimport BackgroundImage from \"../components/BackgroundImage\";\nimport Border from \"../components/Border\";\nimport Button from \"../components/Button\";\nimport Container from \"../components/Container\";\nimport Content from \"../components/Content\";\nimport ErrorMessage from \"../components/ErrorMessage\";\nimport FetchingButton from \"../components/FetchingButton\";\nimport Heading from \"../components/Heading\";\nimport InfoBox from \"../components/InfoBox\";\nimport InsufficientBalanceButton from \"../components/InsufficientBalanceButton\";\nimport Notice from \"../components/Notice\";\nimport Text from \"../components/Text\";\nimport Title from \"../components/Title\";\nimport TokenInput from \"../components/TokenInput\";\nimport WebFooter from \"../components/web/WebFooter\";\nimport { StakingSubMenu } from \"../components/web/WebSubMenu\";\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport useStakingState, { StakingState } from \"../hooks/useStakingState\";\nimport MetamaskError from \"../types/MetamaskError\";\nimport { formatBalance, isEmptyValue, parseBalance } from \"../utils\";\nimport Screen from \"./Screen\";\n\nconst UnstakeScreen = () => {\n    return (\n        <Screen>\n            <Container>\n                <BackgroundImage />\n                <Content>\n                    <Title text={\"Unstake\"} />\n                    <Text light={true}>Convert your xSUSHI to SUSHI.</Text>\n                    <Staking />\n                </Content>\n                {Platform.OS === \"web\" && <WebFooter />}\n            </Container>\n            <StakingSubMenu />\n        </Screen>\n    );\n};\n\nconst Staking = () => {\n    const state = useStakingState();\n    return (\n        <View style={{ marginTop: Spacing.large }}>\n            <XSushiBalance state={state} />\n            <Border />\n            <AmountInput state={state} />\n            {state.xSushi && state.xSushi.balance.isZero() && (\n                <Notice text={\"You don't have any xSUSHI.\"} color={\"orange\"} style={{ marginTop: Spacing.small }} />\n            )}\n            <UnstakeInfo state={state} />\n        </View>\n    );\n};\n\nconst XSushiBalance = ({ state }: { state: StakingState }) => {\n    return (\n        <View>\n            <Heading text={\"Your xSUSHI\"} />\n            <AmountMeta\n                amount={state.xSushi ? formatBalance(state.xSushi.balance, state.xSushi.decimals) : \"\"}\n                suffix={\"xSUSHI\"}\n                disabled={!state.xSushi}\n            />\n        </View>\n    );\n};\n\nconst AmountInput = ({ state }: { state: StakingState }) => {\n    if (!state.xSushi || state.xSushi.balance.isZero()) {\n        return <Heading text={\"Amount To Unstake\"} disabled={true} />;\n    }\n    return (\n        <View>\n            <Heading text={\"Amount To Unstake\"} />\n            <TokenInput\n                token={state.xSushi}\n                amount={state.amount}\n                onAmountChanged={state.setAmount}\n                autoFocus={IS_DESKTOP}\n            />\n        </View>\n    );\n};\n\nconst UnstakeInfo = ({ state }: { state: StakingState }) => {\n    const disabled =\n        !state.sushi || !state.xSushi || !state.sushiStaked || !state.xSushiSupply || isEmptyValue(state.amount);\n    const sushiAmount = disabled\n        ? undefined\n        : parseBalance(state.amount, state.xSushi!.decimals)\n              .mul(state.sushiStaked!)\n              .div(state.xSushiSupply!);\n    return (\n        <InfoBox>\n            <Text disabled={disabled} style={{ fontSize: IS_DESKTOP ? 28 : 20 }}>\n                {!sushiAmount ? \"N/A\" : formatBalance(sushiAmount, state.sushi!.decimals, 8) + \" SUSHI\"}\n            </Text>\n            <Controls state={state} />\n        </InfoBox>\n    );\n};\n\nconst Controls = ({ state }: { state: StakingState }) => {\n    const [error, setError] = useState<MetamaskError>({});\n    return (\n        <View style={{ marginTop: Spacing.normal }}>\n            {!state.xSushi || state.xSushi.balance.isZero() || isEmptyValue(state.amount) ? (\n                <UnstakeButton state={state} onError={setError} disabled={true} />\n            ) : parseBalance(state.amount, state.xSushi.decimals).gt(state.xSushi.balance) ? (\n                <InsufficientBalanceButton symbol={state.xSushi.symbol} />\n            ) : state.loading ? (\n                <FetchingButton />\n            ) : (\n                <UnstakeButton state={state} onError={setError} disabled={false} />\n            )}\n            {error.message && error.code !== 4001 && <ErrorMessage error={error} />}\n        </View>\n    );\n};\n\nconst UnstakeButton = ({\n    state,\n    onError,\n    disabled\n}: {\n    state: StakingState;\n    onError: (e) => void;\n    disabled: boolean;\n}) => {\n    const onPress = async () => {\n        onError({});\n        try {\n            await state.onLeave();\n            state.setAmount(\"\");\n        } catch (e) {\n            onError(e);\n        }\n    };\n    return <Button title={\"Unstake\"} loading={state.leaving} onPress={onPress} disabled={disabled} />;\n};\n\nexport default UnstakeScreen;\n"],"sourceRoot":""}