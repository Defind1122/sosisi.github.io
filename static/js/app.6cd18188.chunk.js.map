{"version":3,"sources":["src/constants/dimension.ts","src/constants/tokens.ts","src/utils/index.ts","src/context/EthersContext.tsx","src/hooks/useAllCommonPairs.tsx","src/hooks/useSDK.tsx","src/context/GlobalContext.tsx","src/constants/colors.ts","src/hooks/useColors.tsx","src/components/FlexView.tsx","src/components/Text.tsx","src/components/Header.tsx","src/components/MobileNotSupported.tsx","src/context/index.tsx","src/hooks/useStyles.tsx","src/components/Button.tsx","src/components/ApproveButton.tsx","src/components/ButtonGroup.tsx","src/components/CloseIcon.tsx","src/components/Column.tsx","src/components/Container.tsx","src/components/Content.tsx","src/components/ErrorMessage.tsx","src/components/FetchingButton.tsx","src/components/InsufficientBalanceButton.tsx","src/components/Border.tsx","src/components/LPTokenSelect.tsx","src/components/Meta.tsx","src/components/Notice.tsx","src/components/SelectIcon.tsx","src/components/Subtitle.tsx","src/components/Input.tsx","src/components/TokenInput.tsx","src/hooks/useTokenPairState.tsx","src/hooks/useLiquidityState.tsx","src/hooks/useLPTokensState.tsx","src/hooks/useFarmingState.tsx","src/components/ConnectToWallet.tsx","src/components/Footer.tsx","src/components/Status.tsx","src/screens/Screen.tsx","src/screens/FarmingScreen.tsx","src/components/TokenSelect.tsx","src/components/UnsupportedButton.tsx","src/components/AddLiquidity.tsx","src/components/RemoveLiquidity.tsx","src/hooks/useAddLiquidityState.tsx","src/hooks/useRemoveLiquidityState.tsx","src/screens/LiquidityScreen.tsx","src/hooks/useSushiBarState.tsx","src/screens/SushiBarScreen.tsx","src/hooks/useSwapState.tsx","src/screens/SwapScreen.tsx","App.tsx","web-build/register-service-worker.js","node_modules/@levx/sushiswap-core/build/contracts sync /^/.//.*/.json$","assets/levx-typography-dark.png","assets/levx-typography.png","assets/sushiswap.jpg","assets/metamask-dark.png","assets/metamask.png"],"names":["SCREEN_HEIGHT","Math","round","Dimensions","get","width","height","Spacing","tiny","small","normal","large","huge","content","ETH","address","ethers","constants","AddressZero","decimals","symbol","logoURI","balance","BigNumber","from","formatBalance","value","maxFraction","formatted","utils","formatUnits","split","length","substr","parseBalance","parseUnits","isEmptyValue","text","isBigNumber","isZero","replaceAll","convertToken","token","WETH","SDKToken","ChainId","MAINNET","convertAmount","amount","TokenAmount","toString","parseCurrencyAmount","toExact","getContract","name","signer","abi","require","ContractFactory","EthersContext","React","createContext","provider","undefined","chainId","addOnBlockListener","listener","removeOnBlockListener","getToken","a","async","approveToken","spender","getTokenAllowance","Zero","EthersContextProvider","children","useState","setProvider","setSigner","setChainId","setAddress","onBlockListeners","setOnBlockListeners","useAsyncEffect","window","ethereum","web3","providers","Web3Provider","alchemy","AlchemyProvider","network","process","API_KEY","getSigner","useEffect","onAccountsChanged","selectedAddress","onChainChanged","getNetwork","on","off","useCallback","send","meta","logo","MaxUint256","erc20","estimateGas","approve","gasLimit","getAddress","contract","owner","old","onBlock","block","Object","entries","Provider","DAI","Consumer","Token","USDC","USDT","SUSHI","YAM","AMPL","BASES_TO_CHECK_TRADES_AGAINST","CUSTOM_BASES","wrappedCurrency","currency","ETHER","useAllCommonPairs","loadAllCommonPairs","currencyA","currencyB","bases","tokenA","tokenB","basePairs","flatMap","base","map","otherBase","filter","t0","t1","allPairCombinations","tokens","Boolean","b","customBases","customBasesA","customBasesB","find","equals","Promise","all","pair","Fetcher","fetchPairData","pairs","ROUTER","MASTER_CHEF","SUSHI_BAR","findOrGetToken","t","toLowerCase","minAmount","percent","sub","mul","numerator","div","denominator","useSDK","useContext","GlobalContext","allowedSlippage","Percent","getTrade","fromToken","toToken","fromAmount","isETH","to","CurrencyAmount","ether","Trade","bestTradeExactIn","maxHops","maxNumResults","swap","trade","Router","feeOnTransfer","recipient","ttl","params","swapCallParameters","router","methodName","args","functions","tx","wrapETH","weth","deposit","unwrapETH","withdraw","getPair","addLiquidity","toAmount","deadline","floor","Date","getTime","removeLiquidityETH","liquidity","amountETH","removeLiquidity","addLiquidityETH","getExpectedSushiRewardPerBlock","masterChef","totalAllocPoint","sushiPerBlock","poolInfo","id","allocPoint","lpTokenId","enterSushiBar","sushiBar","enter","leaveSushiBar","leave","getTokens","fetch","response","json","account","balances","getBalance","i","tokenBalances","tokenBalance","sort","t2","pow","toNumber","getMyLPTokens","factory","FACTORY_ADDRESS","allPairsLength","Array","_","allPairs","Number","totalSupply","token0","token1","result","getPools","pools","pool","poolToken","balanceOf","totalDeposited","userInfo","amountDeposited","pendingSushi","calculateFee","load","clear","deviceType","darkMode","setDarkMode","updateTokens","loadingTokens","tradeHistory","addToTradeHistory","GlobalContextProvider","colorScheme","useColorScheme","setDeviceType","setTokens","setLoadingTokens","setTradeHistory","data","getDeviceTypeAsync","AsyncStorage","getItem","mode","JSON","parse","removeItem","setItem","String","list","push","newHistory","stringify","Colors","common","white","transparent","primary","secondary","green","twitter","facebook","light","background","backgroundHovered","border","borderDark","textDark","textMedium","textLight","disabled","shadow","placeholder","underlay","dark","useColors","FlexView","props","flexDirection","direction","View","style","Text","fontFamily","fontWeight","h1Style","h2Style","h3Style","h4Style","fontSize","note","caption","color","medium","Title","alignSelf","alignItems","textDecoration","Image","source","Menu","title","path","MenuItem","match","useRouteMatch","marginLeft","marginBottom","padding","isExact","position","left","right","bottom","backgroundColor","Stats","onPress","open","type","size","marginTop","DarkModeSwitch","onChange","transform","scale","Header","top","zIndex","paddingBottom","flex","justifyContent","paddingTop","paddingHorizontal","Social","onPressTwitter","Linking","onPressGithub","onPressDiscord","reverseColor","reverse","raised","MobileNotSupported","ContextProvider","useStyles","shadowColor","borderRadius","elevation","shadowOffset","shadowOpacity","shadowRadius","overflow","Button","buttonStyle","borderColor","titleStyle","containerStyle","ApproveButton","loading","setLoading","onError","wait","onSuccess","hidden","ButtonGroup","index","setIndex","selectedIndex","textStyle","borderTopLeftRadius","borderBottomLeftRadius","borderTopRightRadius","buttons","borderBottomRightRadius","selectedButtonStyle","marginHorizontal","marginVertical","CloseIcon","Column","noTopMargin","Container","ScrollView","nestedScrollEnabled","contentContainerStyle","Content","multiplier","contentPadding","paddingVertical","ErrorMessage","error","borderWidth","code","message","FetchingButton","InsufficientBalanceButton","Border","Filter","onFilterChanged","handler","f","checked","CheckBox","marginRight","iconRight","iconType","checkedIcon","uncheckedIcon","checkedColor","LPTokenList","state","emptyText","Item","renderItem","item","key","selected","onSelectToken","setSelectedLPToken","lpTokens","gt","ActivityIndicator","FlatList","keyExtractor","ItemSeparatorComponent","EmptyList","margin","textAlign","LPTokenSelect","onUnselectToken","showFilter","selectedLPToken","Meta","label","Notice","SelectIcon","Subtitle","Input","onChangeText","errors","forbidden","forEach","validation","regexp","allowed","join","inputStyle","outline","labelStyle","placeholderTextColor","errorStyle","MaxButton","onPressMax","fee","updateAmount","TokenInput","onAmountChanged","e","endsWith","indexOf","useTokenPairState","fromSymbol","setFromSymbol","toSymbol","setToSymbol","setFromAmount","setToAmount","fromTokenAllowed","setFromTokenAllowed","toTokenAllowed","setToTokenAllowed","wrapping","setWrapping","unwrapping","setUnwrapping","minAllowance","fromAllowance","gte","toAllowance","onWrap","onUnwrap","useLiquidityState","setPair","updatePair","useLPTokensState","loadPools","lastTimeRefreshed","setLastTimeRefreshed","setLPTokens","selectedLPTokenAllowed","setSelectedLPTokenAllowed","setAmount","updateLPTokens","method","updateLastTimeRefreshed","now","useFarmingState","filteredBy","setFilteredBy","action","setAction","expectedSushiRewardPerBlock","setExpectedSushiRewardPerBlock","depositing","setDepositing","withdrawing","setWithdrawing","allowance","onDeposit","onWithdraw","ConnectWallet","enable","Link","textDecorationLine","Footer","Status","connected","Screen","ConnectToWallet","Actions","Farming","h4","TokenItem","field","hovered","TouchableHighlight","LogoSymbol","uri","ActionSelect","element","DepositText","WithdrawText","Deposit","AddLiquidityNotice","DepositInfo","sushiReward","DepositControls","setError","approveRequired","AddLiquidityButton","DepositButton","catch","Withdraw","NoLPTokenNotice","WithdrawInfo","WithdrawControls","WithdrawButton","FarmingScreen","TokenList","useMemo","filterTokens","localeCompare","TokenSelect","onChangeSymbol","UnsupportedButton","FromTokenInput","newAmount","fromPrice","priceOf","quote","ToTokenInput","toPrice","PriceInfo","initialPrice","price","toSignificant","Price","Controls","insufficientFromToken","insufficientToToken","fromApproveRequired","toApproveRequired","SupplyButton","onAdd","adding","AddLiquidity","AmountInfo","ArrowDown","Amount","RemoveButton","onRemove","removing","RemoveLiquidity","useAddLiquidityState","setAdding","useRemoveLiquidityState","setRemoving","liquidityToken","fromReserve","reserveOf","toReserve","amountToRemove","amountToRemoveETH","OR","Line","LiquidityScreen","addLiquidityState","removeLiquidityState","useSushiBarState","sushiStaked","setSushiStaked","sushiSupply","setSushiSupply","xSushiSupply","setXSushiSupply","sushiAllowed","setSushiAllowed","xSushiAllowed","setXSushiAllowed","entering","setEntering","leaving","setLeaving","sushi","xSushi","sushiAllowance","xSushiAllowance","sushiContract","xSushiContract","onEnter","onLeave","Staking","StakeText","UnstakeText","NoSushiNotice","NoXSushiNotice","StakeInfo","xSushiAmount","share","StakeButton","UnstakeButton","SushiBarScreen","useSwapState","setTrade","unsupported","setUnsupported","swapping","setSwapping","updateTrade","onSwap","Swap","TradeInfo","WrapInfo","SwapInfo","outputAmount","executionPrice","impact","priceImpact","SwapButton","WrapButton","UnwrapButton","SwapScreen","Main","DeviceType","PHONE","AppLoading","Navigation","App","useFonts","UnicaOne_400Regular","OpenSans_300Light","regular","OpenSans_400Regular","bold","OpenSans_700Bold","navigator","addEventListener","serviceWorker","register","scope","then","info","console","webpackContext","req","webpackContextResolve","__webpack_require__","o","Error","keys","resolve","module","exports"],"mappings":"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","file":"static/js/app.6cd18188.chunk.js","sourcesContent":["import { Dimensions } from \"react-native\";\n\nexport const SCREEN_WIDTH = Math.round(Dimensions.get(\"window\").width);\nexport const SCREEN_HEIGHT = Math.round(Dimensions.get(\"window\").height);\nexport const IS_HIGH_RESOLUTION = SCREEN_HEIGHT > 667;\nexport const HEADER_HEIGHT = 96;\n\nexport const Spacing = IS_HIGH_RESOLUTION\n    ? {\n          tiny: 8,\n          small: 16,\n          normal: 32,\n          large: 48,\n          huge: 64,\n          content: 40\n      }\n    : {\n          tiny: 6,\n          small: 12,\n          normal: 24,\n          large: 32,\n          huge: 48,\n          content: 30\n      };\n","import { ethers } from \"ethers\";\nimport Token from \"../types/Token\";\n\nexport const ETH: Token = {\n    address: ethers.constants.AddressZero,\n    decimals: 18,\n    symbol: \"ETH\",\n    logoURI: \"/images/tokens/ETH.png\",\n    balance: ethers.BigNumber.from(0)\n};\n","import { ChainId, CurrencyAmount, Token as SDKToken, TokenAmount, WETH } from \"@levx/sushiswap-sdk\";\nimport { ethers } from \"ethers\";\nimport Token from \"../types/Token\";\n\nexport const formatBalance = (value: ethers.BigNumberish, decimals = 18, maxFraction = 0) => {\n    const formatted = ethers.utils.formatUnits(value, decimals);\n    if (maxFraction > 0) {\n        const split = formatted.split(\".\");\n        if (split.length > 1) {\n            return split[0] + \".\" + split[1].substr(0, maxFraction);\n        }\n    }\n    return formatted;\n};\n\nexport const parseBalance = (value: string, decimals = 18) => {\n    return ethers.utils.parseUnits(value || \"0\", decimals);\n};\n\nexport const isEmptyValue = (text: string) =>\n    ethers.BigNumber.isBigNumber(text)\n        ? ethers.BigNumber.from(text).isZero()\n        : text === \"\" || text.replaceAll(\"0\", \"\").replaceAll(\".\", \"\") === \"\";\n\nexport const convertToken = (token: Token) => {\n    return token.symbol === \"ETH\" ? WETH[\"1\"] : new SDKToken(ChainId.MAINNET, token.address, token.decimals);\n};\n\nexport const convertAmount = (token: Token, amount: string) => {\n    return new TokenAmount(convertToken(token), parseBalance(amount, token.decimals).toString());\n};\n\nexport const parseCurrencyAmount = (value: CurrencyAmount, decimals = 18) => {\n    return ethers.BigNumber.from(parseBalance(value.toExact(), decimals));\n};\n\nexport const getContract = (name: string, address: string, signer: ethers.Signer) => {\n    const { abi } = require(\"@levx/sushiswap-core/build/contracts/\" + name + \".json\");\n    return ethers.ContractFactory.getContract(address, abi, signer);\n};\n","import React, { useCallback, useEffect, useState } from \"react\";\n\nimport { EventType, Listener } from \"@ethersproject/abstract-provider\";\nimport { ethers } from \"ethers\";\nimport useAsyncEffect from \"use-async-effect\";\nimport Token from \"../types/Token\";\nimport { getContract } from \"../utils\";\n\nexport type OnBlockListener = (block: number) => Promise<void>;\n\nexport const EthersContext = React.createContext({\n    provider: undefined as ethers.providers.JsonRpcProvider | undefined,\n    signer: undefined as ethers.providers.JsonRpcSigner | undefined,\n    chainId: 0,\n    address: null as string | null,\n    addOnBlockListener: (name: string, listener: OnBlockListener) => {},\n    removeOnBlockListener: (name: string) => {},\n    getToken: async (token: string) => {\n        return {} as Token | undefined;\n    },\n    approveToken: async (token: string, spender: string, amount?: ethers.BigNumber) => {\n        return {} as ethers.providers.TransactionResponse;\n    },\n    getTokenAllowance: async (token: string, spender: string) => {\n        return ethers.constants.Zero as ethers.BigNumber | undefined;\n    }\n});\n\n// tslint:disable-next-line:max-func-body-length\nexport const EthersContextProvider = ({ children }) => {\n    const [provider, setProvider] = useState<ethers.providers.JsonRpcProvider>();\n    const [signer, setSigner] = useState<ethers.providers.JsonRpcSigner>();\n    const [chainId, setChainId] = useState<number>(1);\n    const [address, setAddress] = useState<string | null>(ethers.constants.AddressZero);\n    const [onBlockListeners, setOnBlockListeners] = useState<{ [name: string]: OnBlockListener }>({});\n\n    useAsyncEffect(async () => {\n        if (window.ethereum) {\n            const web3 = new ethers.providers.Web3Provider(window.ethereum);\n            const alchemy = new ethers.providers.AlchemyProvider(web3.network, process.env.API_KEY);\n            setProvider(alchemy);\n            setSigner(await web3.getSigner());\n        }\n    }, [window.ethereum]);\n\n    useEffect(() => {\n        if (window.ethereum) {\n            const onAccountsChanged = () => {\n                setAddress(window.ethereum.selectedAddress);\n            };\n            const onChainChanged = async () => {\n                const network = await signer?.provider?.getNetwork();\n                if (network) {\n                    setChainId(network.chainId);\n                }\n            };\n            onAccountsChanged();\n            onChainChanged();\n            window.ethereum.on(\"accountsChanged\", onAccountsChanged);\n            window.ethereum.on(\"chainChanged\", onChainChanged);\n            return () => {\n                window.ethereum.off(\"accountsChanged\", onAccountsChanged);\n                window.ethereum.off(\"chainChanged\", onAccountsChanged);\n            };\n        }\n    }, [window.ethereum, signer]);\n\n    const getToken = useCallback(\n        async (token: string) => {\n            if (provider && signer) {\n                const meta = await provider.send(\"alchemy_getTokenMetadata\", [token]);\n                return {\n                    address: token,\n                    symbol: meta.symbol,\n                    decimals: meta.decimals,\n                    logoURI: meta.logo,\n                    balance: ethers.constants.Zero\n                } as Token;\n            }\n        },\n        [provider, signer]\n    );\n\n    const approveToken = useCallback(\n        async (token: string, spender: string, amount?: ethers.BigNumber) => {\n            if (signer) {\n                amount = amount || ethers.constants.MaxUint256;\n                const erc20 = getContract(\"ERC20\", token, signer);\n                const gasLimit = await erc20.estimateGas.approve(spender, amount);\n                return await erc20.approve(spender, amount, {\n                    gasLimit\n                });\n            }\n        },\n        [signer]\n    );\n\n    const getTokenAllowance = useCallback(\n        async (token: string, spender: string) => {\n            if (provider && signer) {\n                return await provider.send(\"alchemy_getTokenAllowance\", [\n                    {\n                        contract: token,\n                        owner: await signer.getAddress(),\n                        spender\n                    }\n                ]);\n            }\n        },\n        [provider, signer]\n    );\n\n    const addOnBlockListener = useCallback(\n        (name, listener) => {\n            setOnBlockListeners(old => ({ ...old, [name]: listener }));\n        },\n        [setOnBlockListeners]\n    );\n\n    const removeOnBlockListener = useCallback(\n        name => {\n            setOnBlockListeners(old => {\n                delete old[name];\n                return old;\n            });\n        },\n        [setOnBlockListeners]\n    );\n\n    useEffect(() => {\n        if (provider && signer && chainId === 1) {\n            const onBlock = async (block: number) => {\n                for (const listener of Object.entries(onBlockListeners)) {\n                    await listener[1]?.(block);\n                }\n            };\n            provider.on(\"block\", onBlock);\n            return () => {\n                provider.off(\"block\", onBlock);\n            };\n        }\n    }, [provider, signer, chainId, onBlockListeners]);\n\n    return (\n        <EthersContext.Provider\n            value={{\n                provider,\n                signer,\n                chainId,\n                address,\n                getToken,\n                approveToken,\n                getTokenAllowance,\n                addOnBlockListener,\n                removeOnBlockListener\n            }}>\n            {children}\n        </EthersContext.Provider>\n    );\n};\n\ninterface JsonRPCRequest {\n    jsonrpc: string;\n    method: string;\n    params: any[];\n    id: number;\n}\n\ninterface JsonRPCResponse {\n    jsonrpc: string;\n    id: number;\n    result?: any;\n    error?: string;\n}\n\ninterface Callback<ResultType> {\n    (error: Error): void;\n    (error: null, val: ResultType): void;\n}\n\ndeclare global {\n    interface Window {\n        ethereum: {\n            enable(): void;\n            send(payload: any, callback: any): any;\n            send(payload: JsonRPCRequest, callback: Callback<JsonRPCResponse>): any;\n            selectedAddress: string;\n            on(eventName: EventType, listener: Listener);\n            off(eventName: EventType, listener: Listener);\n        };\n    }\n}\n\nexport const EthersContextConsumer = EthersContext.Consumer;\n","import { useCallback } from \"react\";\n\nimport { ChainId, Currency, ETHER, Fetcher, Pair, Token, WETH } from \"@levx/sushiswap-sdk\";\nimport { ethers } from \"ethers\";\n\nconst DAI = new Token(ChainId.MAINNET, \"0x6B175474E89094C44Da98b954EedeAC495271d0F\", 18, \"DAI\", \"Dai Stablecoin\");\nconst USDC = new Token(ChainId.MAINNET, \"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\", 6, \"USDC\", \"USD//C\");\nconst USDT = new Token(ChainId.MAINNET, \"0xdAC17F958D2ee523a2206206994597C13D831ec7\", 6, \"USDT\", \"Tether USD\");\nconst SUSHI = new Token(ChainId.MAINNET, \"0x6B3595068778DD592e39A122f4f5a5cF09C90fE2\", 18, \"SUSHI\", \"SushiSwap\");\nconst YAM = new Token(ChainId.MAINNET, \"0x0e2298E3B3390e3b945a5456fBf59eCc3f55DA16\", 18, \"YAM\", \"YAM\");\nconst AMPL = new Token(ChainId.MAINNET, \"0xD46bA6D942050d489DBd938a2C909A5d5039A161\", 9, \"AMPL\", \"Ampleforth\");\n\nconst BASES_TO_CHECK_TRADES_AGAINST = [WETH[ChainId.MAINNET], DAI, USDC, USDT, SUSHI, YAM];\nconst CUSTOM_BASES = {\n    [AMPL.address]: [DAI, WETH[ChainId.MAINNET]]\n};\n\nfunction wrappedCurrency(currency: Currency | undefined): Token | undefined {\n    return currency === ETHER ? WETH[ChainId.MAINNET] : currency instanceof Token ? currency : undefined;\n}\n\n// Source: https://github.com/Uniswap/uniswap-interface/blob/master/src/hooks/Trades.ts\nconst useAllCommonPairs = () => {\n    const loadAllCommonPairs = useCallback(\n        // tslint:disable-next-line:max-func-body-length\n        async (currencyA?: Currency, currencyB?: Currency, provider?: ethers.providers.BaseProvider) => {\n            const bases: Token[] = BASES_TO_CHECK_TRADES_AGAINST;\n            const [tokenA, tokenB] = [wrappedCurrency(currencyA), wrappedCurrency(currencyB)];\n            const basePairs: [Token, Token][] = bases\n                .flatMap((base): [Token, Token][] => bases.map(otherBase => [base, otherBase]))\n                .filter(([t0, t1]) => t0.address !== t1.address);\n\n            const allPairCombinations =\n                tokenA && tokenB\n                    ? [\n                          // the direct pair\n                          [tokenA, tokenB],\n                          // token A against all bases\n                          ...bases.map((base): [Token, Token] => [tokenA, base]),\n                          // token B against all bases\n                          ...bases.map((base): [Token, Token] => [tokenB, base]),\n                          // each base against all bases\n                          ...basePairs\n                      ]\n                          .filter((tokens): tokens is [Token, Token] => Boolean(tokens[0] && tokens[1]))\n                          .filter(([t0, t1]) => t0.address !== t1.address)\n                          .filter(([a, b]) => {\n                              const customBases = CUSTOM_BASES;\n                              if (!customBases) return true;\n\n                              const customBasesA: Token[] | undefined = customBases[a.address];\n                              const customBasesB: Token[] | undefined = customBases[b.address];\n\n                              if (!customBasesA && !customBasesB) return true;\n\n                              if (customBasesA && !customBasesA.find(base => tokenB.equals(base))) return false;\n                              return !(customBasesB && !customBasesB.find(base => tokenA.equals(base)));\n                          })\n                    : [];\n\n            const pairs = await Promise.all(\n                allPairCombinations.map(async pair => {\n                    try {\n                        return await Fetcher.fetchPairData(pair[0], pair[1], provider);\n                    } catch (e) {\n                        return null;\n                    }\n                })\n            );\n            return pairs.filter(pair => pair !== null) as Pair[];\n        },\n        []\n    );\n\n    return { loadAllCommonPairs };\n};\n\nexport default useAllCommonPairs;\n","import { useCallback, useContext } from \"react\";\n\nimport {\n    CurrencyAmount,\n    FACTORY_ADDRESS,\n    Fetcher,\n    Percent,\n    Router,\n    TokenAmount,\n    Trade,\n    WETH\n} from \"@levx/sushiswap-sdk\";\nimport { ethers } from \"ethers\";\nimport { ETH } from \"../constants/tokens\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport { GlobalContext } from \"../context/GlobalContext\";\nimport LPToken from \"../types/LPToken\";\nimport Token from \"../types/Token\";\nimport { convertToken, getContract } from \"../utils\";\nimport useAllCommonPairs from \"./useAllCommonPairs\";\n\n// export const UNISWAP_ROUTER = \"0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\";\nexport const SUSHISWAP_ROUTER = \"0xd9e1ce17f2641f24ae83637ab66a2cca9c378b9f\";\nexport const ROUTER = SUSHISWAP_ROUTER;\nexport const MASTER_CHEF = \"0xc2edad668740f1aa35e4d8f227fb8e17dca888cd\";\nexport const SUSHI_BAR = \"0x8798249c2e607446efb7ad49ec89dd1865ff4272\";\n\n// tslint:disable-next-line:max-func-body-length\nconst useSDK = () => {\n    const { provider, signer, getToken } = useContext(EthersContext);\n    const { tokens } = useContext(GlobalContext);\n    const { loadAllCommonPairs } = useAllCommonPairs();\n    const allowedSlippage = new Percent(\"50\", \"10000\"); // 0.05%\n    const ttl = 60 * 20;\n\n    const getTokens = async () => {\n        if (provider && signer) {\n            const response = await fetch(\"/tokens.json\");\n            const json = await response.json();\n\n            const account = await signer.getAddress();\n            const balances = await provider.send(\"alchemy_getTokenBalances\", [\n                account,\n                json.tokens.map(token => token.address)\n            ]);\n            return [\n                {\n                    ...ETH,\n                    balance: await provider.getBalance(account)\n                },\n                ...json.tokens.map((token, i) => ({\n                    ...token,\n                    balance: ethers.BigNumber.from(balances.tokenBalances[i].tokenBalance || 0)\n                }))\n            ].sort((t1, t2) => {\n                return t2.balance\n                    .sub(t1.balance)\n                    .div(ethers.BigNumber.from(10).pow(10))\n                    .toNumber();\n            });\n        }\n    };\n\n    const getMyLPTokens = async () => {\n        if (provider && signer && tokens) {\n            const factory = getContract(\"IUniswapV2Factory\", FACTORY_ADDRESS, signer);\n            const length = await factory.allPairsLength();\n            const pairs = await Promise.all(\n                Array.from({ length }).map((_, i) => {\n                    return factory.allPairs(i);\n                })\n            );\n            const balances = await provider.send(\"alchemy_getTokenBalances\", [await signer.getAddress(), pairs]);\n            const result = await Promise.all(\n                pairs.map(async (address, i) => {\n                    const balance = ethers.BigNumber.from(balances.tokenBalances[i].tokenBalance);\n                    if (balance.isZero()) {\n                        return null;\n                    }\n                    const pair = getContract(\"IUniswapV2Pair\", address, signer);\n                    const erc20 = getContract(\"ERC20\", address, signer);\n                    const decimals = Number(await erc20.decimals());\n                    const totalSupply = await erc20.totalSupply();\n                    const tokenA = await findOrGetToken(await pair.token0(), tokens, getToken);\n                    const tokenB = await findOrGetToken(await pair.token1(), tokens, getToken);\n                    return { address, decimals, balance, totalSupply, tokenA, tokenB } as LPToken;\n                })\n            );\n            return result.filter(token => !!token) as LPToken[];\n        }\n    };\n\n    const getPools = async () => {\n        if (provider && signer) {\n            const response = await fetch(\"/pools.json\");\n            const pools = await response.json();\n            const address = await signer.getAddress();\n            const balances = await provider.send(\"alchemy_getTokenBalances\", [\n                address,\n                pools.map(pool => pool.address)\n            ]);\n            return (await Promise.all(\n                pools.map(async (pool, i) => {\n                    const poolToken = getContract(\"ERC20\", pool.address, signer);\n                    const totalDeposited = await poolToken.balanceOf(MASTER_CHEF);\n                    const masterChef = getContract(\"MasterChef\", MASTER_CHEF, signer);\n                    const { amount: amountDeposited } = await masterChef.userInfo(i, address);\n                    const pendingSushi = await masterChef.pendingSushi(i, address);\n                    return {\n                        ...pool,\n                        id: i,\n                        symbol: pool.tokenA.symbol + \"-\" + pool.tokenB.symbol + \" LP\",\n                        balance: ethers.BigNumber.from(balances.tokenBalances[i].tokenBalance || 0),\n                        totalDeposited,\n                        amountDeposited,\n                        pendingSushi\n                    };\n                })\n            )) as LPToken[];\n        }\n    };\n\n    const getTrade = useCallback(\n        async (fromToken: Token, toToken: Token, fromAmount: ethers.BigNumber) => {\n            if (provider) {\n                const isETH = fromToken.symbol === \"ETH\";\n                const from = convertToken(fromToken);\n                const to = convertToken(toToken);\n                const pairs = await loadAllCommonPairs(from, to, provider);\n                const amount = isETH\n                    ? CurrencyAmount.ether(fromAmount.toString())\n                    : new TokenAmount(from, fromAmount.toString());\n                return Trade.bestTradeExactIn(pairs, amount, to, { maxHops: 3, maxNumResults: 1 })[0];\n            }\n        },\n        [provider]\n    );\n\n    const swap = useCallback(\n        async (trade: Trade) => {\n            if (signer) {\n                if (trade) {\n                    const params = Router.swapCallParameters(trade, {\n                        feeOnTransfer: false,\n                        allowedSlippage,\n                        recipient: await signer.getAddress(),\n                        ttl\n                    });\n                    const router = getContract(\"IUniswapV2Router02\", ROUTER, signer);\n                    const gasLimit = await router.estimateGas[params.methodName](...params.args, {\n                        value: params.value\n                    });\n                    const tx = await router.functions[params.methodName](...params.args, {\n                        value: params.value,\n                        gasLimit: gasLimit.mul(120).div(100)\n                    });\n                    return {\n                        trade,\n                        tx\n                    };\n                }\n            }\n        },\n        [signer]\n    );\n\n    const wrapETH = useCallback(\n        async (amount: ethers.BigNumber) => {\n            if (signer) {\n                const weth = getContract(\"IWETH\", WETH[1].address, signer);\n                const gasLimit = await weth.estimateGas.deposit({\n                    value: amount\n                });\n                return await weth.deposit({\n                    value: amount,\n                    gasLimit\n                });\n            }\n        },\n        [signer]\n    );\n\n    const unwrapETH = useCallback(\n        async (amount: ethers.BigNumber) => {\n            if (signer) {\n                const weth = getContract(\"IWETH\", WETH[1].address, signer);\n                const gasLimit = await weth.estimateGas.withdraw(amount);\n                return await weth.withdraw(amount, {\n                    gasLimit\n                });\n            }\n        },\n        [signer]\n    );\n\n    const getPair = useCallback(\n        async (fromToken: Token, toToken: Token) => {\n            if (provider) {\n                const from = convertToken(fromToken);\n                const to = convertToken(toToken);\n                return await Fetcher.fetchPairData(from, to, provider);\n            }\n        },\n        [provider]\n    );\n\n    const addLiquidity = useCallback(\n        async (fromToken: Token, toToken: Token, fromAmount: ethers.BigNumber, toAmount: ethers.BigNumber) => {\n            if (signer) {\n                const router = getContract(\"IUniswapV2Router02\", ROUTER, signer);\n                const deadline = `0x${(Math.floor(new Date().getTime() / 1000) + ttl).toString(16)}`;\n                const args = [\n                    fromToken.address,\n                    toToken.address,\n                    fromAmount,\n                    toAmount,\n                    minAmount(fromAmount, allowedSlippage),\n                    minAmount(toAmount, allowedSlippage),\n                    await signer.getAddress(),\n                    deadline\n                ];\n                const gasLimit = await router.estimateGas.addLiquidity(...args);\n                return await router.functions.addLiquidity(...args, {\n                    gasLimit: gasLimit.mul(120).div(100)\n                });\n            }\n        },\n        [signer]\n    );\n\n    const removeLiquidityETH = useCallback(\n        async (token: Token, liquidity: ethers.BigNumber, amount: ethers.BigNumber, amountETH: ethers.BigNumber) => {\n            if (signer) {\n                const router = getContract(\"IUniswapV2Router02\", ROUTER, signer);\n                const deadline = `0x${(Math.floor(new Date().getTime() / 1000) + ttl).toString(16)}`;\n                const args = [\n                    token.address,\n                    liquidity,\n                    minAmount(amount, allowedSlippage),\n                    minAmount(amountETH, allowedSlippage),\n                    await signer.getAddress(),\n                    deadline\n                ];\n                const gasLimit = await router.estimateGas.removeLiquidityETH(...args);\n                return await router.functions.removeLiquidityETH(...args, {\n                    gasLimit: gasLimit.mul(120).div(100)\n                });\n            }\n        },\n        [signer]\n    );\n\n    const removeLiquidity = useCallback(\n        async (\n            fromToken: Token,\n            toToken: Token,\n            liquidity: ethers.BigNumber,\n            fromAmount: ethers.BigNumber,\n            toAmount: ethers.BigNumber\n        ) => {\n            if (signer) {\n                const router = getContract(\"IUniswapV2Router02\", ROUTER, signer);\n                const deadline = `0x${(Math.floor(new Date().getTime() / 1000) + ttl).toString(16)}`;\n                const args = [\n                    fromToken.address,\n                    toToken.address,\n                    liquidity,\n                    minAmount(fromAmount, allowedSlippage),\n                    minAmount(toAmount, allowedSlippage),\n                    await signer.getAddress(),\n                    deadline\n                ];\n                const gasLimit = await router.estimateGas.removeLiquidity(...args);\n                return await router.functions.removeLiquidity(...args, {\n                    gasLimit: gasLimit.mul(120).div(100)\n                });\n            }\n        },\n        [signer]\n    );\n\n    const addLiquidityETH = useCallback(\n        async (token: Token, amount: ethers.BigNumber, amountETH: ethers.BigNumber) => {\n            if (signer) {\n                const router = getContract(\"IUniswapV2Router02\", ROUTER, signer);\n                const deadline = `0x${(Math.floor(new Date().getTime() / 1000) + ttl).toString(16)}`;\n                const args = [\n                    token.address,\n                    amount,\n                    minAmount(amount, allowedSlippage),\n                    minAmount(amountETH, allowedSlippage),\n                    await signer.getAddress(),\n                    deadline\n                ];\n                const gasLimit = await router.estimateGas.addLiquidityETH(...args, {\n                    value: amountETH\n                });\n                return await router.functions.addLiquidityETH(...args, {\n                    gasLimit: gasLimit.mul(120).div(100),\n                    value: amountETH\n                });\n            }\n        },\n        [signer]\n    );\n\n    const getExpectedSushiRewardPerBlock = useCallback(\n        async (token: LPToken) => {\n            if (signer) {\n                const masterChef = getContract(\"MasterChef\", MASTER_CHEF, signer);\n                const totalAllocPoint = await masterChef.totalAllocPoint();\n                const sushiPerBlock = await masterChef.sushiPerBlock();\n                const { allocPoint } = await masterChef.poolInfo(token.id);\n                return ethers.BigNumber.from(sushiPerBlock)\n                    .mul(allocPoint)\n                    .div(totalAllocPoint);\n            }\n        },\n        [signer]\n    );\n\n    const deposit = useCallback(\n        async (lpTokenId: number, amount: ethers.BigNumber) => {\n            if (signer) {\n                const masterChef = getContract(\"MasterChef\", MASTER_CHEF, signer);\n                const gasLimit = await masterChef.estimateGas.deposit(lpTokenId, amount);\n                return await masterChef.deposit(lpTokenId, amount, {\n                    gasLimit: gasLimit.mul(120).div(100)\n                });\n            }\n        },\n        [signer]\n    );\n\n    const withdraw = useCallback(\n        async (lpTokenId: number, amount: ethers.BigNumber) => {\n            if (signer) {\n                const masterChef = getContract(\"MasterChef\", MASTER_CHEF, signer);\n                const gasLimit = await masterChef.estimateGas.withdraw(lpTokenId, amount);\n                return await masterChef.withdraw(lpTokenId, amount, {\n                    gasLimit: gasLimit.mul(120).div(100)\n                });\n            }\n        },\n        [signer]\n    );\n\n    const enterSushiBar = useCallback(\n        async (amount: ethers.BigNumber) => {\n            if (signer) {\n                const sushiBar = getContract(\"SushiBar\", SUSHI_BAR, signer);\n                const gasLimit = await sushiBar.estimateGas.enter(amount);\n                return await sushiBar.enter(amount, {\n                    gasLimit: gasLimit.mul(120).div(100)\n                });\n            }\n        },\n        [signer]\n    );\n\n    const leaveSushiBar = useCallback(\n        async (amount: ethers.BigNumber) => {\n            if (signer) {\n                const sushiBar = getContract(\"SushiBar\", SUSHI_BAR, signer);\n                const gasLimit = await sushiBar.estimateGas.leave(amount);\n                return await sushiBar.leave(amount, {\n                    gasLimit: gasLimit.mul(120).div(100)\n                });\n            }\n        },\n        [signer]\n    );\n\n    const calculateFee = (fromAmount: ethers.BigNumber) => {\n        return fromAmount.mul(3).div(1000);\n    };\n\n    return {\n        allowedSlippage,\n        getTokens,\n        getMyLPTokens,\n        getPools,\n        getTrade,\n        swap,\n        wrapETH,\n        unwrapETH,\n        getPair,\n        addLiquidity,\n        addLiquidityETH,\n        removeLiquidity,\n        removeLiquidityETH,\n        getExpectedSushiRewardPerBlock,\n        deposit,\n        withdraw,\n        enterSushiBar,\n        leaveSushiBar,\n        calculateFee\n    };\n};\n\nconst findOrGetToken = async (\n    address: string,\n    tokens: Token[],\n    getToken: (address: string) => Promise<Token | undefined>\n) => {\n    const token = tokens.find(t => t.address.toLowerCase() === address.toLowerCase());\n    return token || (await getToken(address));\n};\n\nconst minAmount = (amount: ethers.BigNumber, percent: Percent) => {\n    return amount.sub(amount.mul(percent.numerator.toString()).div(percent.denominator.toString()));\n};\nexport default useSDK;\n","import React, { useContext, useState } from \"react\";\nimport { useColorScheme } from \"react-native-appearance\";\n\nimport { DeviceType, getDeviceTypeAsync } from \"expo-device\";\n\nimport { Trade } from \"@levx/sushiswap-sdk\";\nimport AsyncStorage from \"@react-native-community/async-storage\";\nimport useAsyncEffect from \"use-async-effect\";\nimport { ETH } from \"../constants/tokens\";\nimport useSDK from \"../hooks/useSDK\";\nimport Token from \"../types/Token\";\nimport { EthersContext } from \"./EthersContext\";\n\nexport const GlobalContext = React.createContext({\n    load: async () => {},\n    clear: async () => {},\n    deviceType: undefined as DeviceType | undefined,\n    darkMode: false as boolean,\n    setDarkMode: async darkMode => {},\n    tokens: [ETH] as Token[],\n    updateTokens: async () => {},\n    loadingTokens: false,\n    tradeHistory: {},\n    addToTradeHistory: async trade => {}\n});\n\n// tslint:disable-next-line:max-func-body-length\nexport const GlobalContextProvider = ({ children }) => {\n    const { provider, signer, address, addOnBlockListener, removeOnBlockListener } = useContext(EthersContext);\n    const { getTokens } = useSDK();\n    const colorScheme = useColorScheme();\n    const [deviceType, setDeviceType] = useState<DeviceType>();\n    const [darkMode, setDarkMode] = useState(colorScheme === \"dark\");\n    const [tokens, setTokens] = useState<Token[]>([]);\n    const [loadingTokens, setLoadingTokens] = useState(true);\n    const [tradeHistory, setTradeHistory] = useState([] as Trade[]);\n    const updateTokens = async () => {\n        try {\n            const data = await getTokens();\n            if (data) {\n                await setTokens(data);\n            }\n        } finally {\n            setLoadingTokens(false);\n        }\n    };\n    useAsyncEffect(async () => {\n        setDeviceType(await getDeviceTypeAsync());\n    }, []);\n    // useEffect(() => {\n    //     updateTokens();\n    //     addOnBlockListener(\"updateTokens()\", updateTokens);\n    //     return () => {\n    //         removeOnBlockListener(\"updateTokens()\");\n    //     };\n    // }, [updateTokens]);\n    useAsyncEffect(async () => {\n        if (provider && signer) {\n            setLoadingTokens(true);\n            await updateTokens();\n        }\n    }, [provider, signer, address]);\n    return (\n        <GlobalContext.Provider\n            value={{\n                load: async () => {\n                    const mode = await AsyncStorage.getItem(\"dark_mode\");\n                    setDarkMode(mode === \"true\");\n                    setTradeHistory(JSON.parse((await AsyncStorage.getItem(\"trade_history\")) || \"[]\"));\n                },\n                clear: async () => {\n                    setDarkMode(false);\n                    await AsyncStorage.removeItem(\"dark_mode\");\n                    await AsyncStorage.removeItem(\"trade_history\");\n                },\n                deviceType,\n                darkMode,\n                setDarkMode: async (mode: boolean) => {\n                    await AsyncStorage.setItem(\"dark_mode\", String(mode));\n                    setDarkMode(mode);\n                },\n                tokens,\n                updateTokens,\n                loadingTokens,\n                tradeHistory,\n                addToTradeHistory: async (trade: Trade) => {\n                    if (address) {\n                        const list = tradeHistory[address] || [];\n                        list.push(trade);\n                        const newHistory = {\n                            ...tradeHistory,\n                            [address]: list\n                        };\n                        await AsyncStorage.setItem(\"trade_history\", JSON.stringify(newHistory));\n                        setTradeHistory(newHistory);\n                    }\n                }\n            }}>\n            {children}\n        </GlobalContext.Provider>\n    );\n};\n\nexport const GlobalContextConsumer = GlobalContext.Consumer;\n","export const Colors = {\n    common: {\n        white: \"#ffffff\",\n        transparent: \"#ffffff00\",\n        primary: \"#291C64\",\n        secondary: \"#9BECEE\",\n        green: \"#32CD32\",\n        twitter: \"#1da1f2\",\n        facebook: \"#3B5998\"\n    },\n    light: {\n        background: \"#ffffff\",\n        backgroundHovered: \"#f0f0f0\",\n        border: \"#e5e5e5\",\n        borderDark: \"#cccccc\",\n        textDark: \"#000000\",\n        textMedium: \"#121212\",\n        textLight: \"#888888\",\n        disabled: \"#b4b4b4\",\n        shadow: \"#444444\",\n        placeholder: \"#d8d8d8\",\n        underlay: \"#b4b4b4\"\n    },\n    dark: {\n        background: \"#121212\",\n        backgroundHovered: \"#202020\",\n        border: \"#ffffff33\",\n        borderDark: \"#666666\",\n        textDark: \"#ffffff\",\n        textMedium: \"#ededed\",\n        textLight: \"#aaaaaa\",\n        disabled: \"#aaaaaa80\",\n        shadow: \"#03080c\",\n        placeholder: \"#666666\",\n        underlay: \"#aaaaaa80\"\n    }\n};\n","import { useContext } from \"react\";\n\nimport { Colors } from \"../constants/colors\";\nimport { GlobalContext } from \"../context/GlobalContext\";\n\nconst useColors = () => {\n    const { darkMode } = useContext(GlobalContext);\n    return {\n        ...Colors[darkMode ? \"dark\" : \"light\"],\n        ...Colors.common\n    };\n};\n\nexport default useColors;\n","import React, { FunctionComponent } from \"react\";\nimport { View, ViewProps } from \"react-native\";\n\ninterface FlexViewProps extends ViewProps {\n    direction?: \"row\" | \"column\";\n}\n\nconst FlexView: FunctionComponent<FlexViewProps> = props => {\n    const flexDirection = props.direction || \"row\";\n    return <View {...props} style={[{ flexDirection }, props.style]} />;\n};\nexport default FlexView;\n","import React, { FC } from \"react\";\nimport { Text as NativeText, TextProps as NativeTextProps } from \"react-native-elements\";\n\nimport useColors from \"../hooks/useColors\";\n\nexport interface TextProps extends NativeTextProps {\n    note?: boolean;\n    caption?: boolean;\n    dark?: boolean;\n    medium?: boolean;\n    light?: boolean;\n    fontWeight?: \"light\" | \"regular\" | \"bold\";\n}\n\nconst Text: FC<TextProps> = props => {\n    const { textDark, textMedium, textLight } = useColors();\n    const fontFamily = props.fontWeight || \"regular\";\n    return (\n        <NativeText\n            {...props}\n            h1Style={[{ fontFamily }, props.h1Style]}\n            h2Style={[{ fontFamily }, props.h2Style]}\n            h3Style={[{ fontFamily }, props.h3Style]}\n            h4Style={[{ fontFamily }, props.h4Style]}\n            style={[\n                {\n                    fontFamily,\n                    fontSize: props.note ? 15 : props.caption ? 22 : 18,\n                    color: props.note || props.light ? textLight : props.medium ? textMedium : textDark\n                },\n                props.style\n            ]}\n        />\n    );\n};\nexport default Text;\n","import React, { useCallback, useContext } from \"react\";\nimport { Image, View } from \"react-native\";\nimport { Icon } from \"react-native-elements\";\nimport { Link, useRouteMatch } from \"react-router-dom\";\n\nimport Switch from \"expo-dark-mode-switch\";\n\nimport { HEADER_HEIGHT, Spacing } from \"../constants/dimension\";\nimport { GlobalContext } from \"../context/GlobalContext\";\nimport useColors from \"../hooks/useColors\";\nimport FlexView from \"./FlexView\";\nimport Text from \"./Text\";\n\nconst Header = () => {\n    const { background } = useColors();\n    return (\n        <View\n            // @ts-ignore\n            style={{\n                position: \"fixed\",\n                top: 0,\n                zIndex: 100,\n                width: \"100%\",\n                height: HEADER_HEIGHT,\n                paddingBottom: 16,\n                backgroundColor: background\n            }}>\n            <FlexView\n                style={{\n                    flex: 1,\n                    justifyContent: \"space-between\",\n                    alignItems: \"flex-end\",\n                    paddingTop: Spacing.small,\n                    paddingHorizontal: Spacing.content\n                }}>\n                <Title />\n                <Menu />\n            </FlexView>\n        </View>\n    );\n};\n\nexport const Title = () => {\n    const { darkMode } = useContext(GlobalContext);\n    const { primary, white } = useColors();\n    return (\n        <View style={{ alignSelf: \"center\", alignItems: \"center\" }}>\n            <Link to={\"/\"} style={{ textDecoration: \"none\" }}>\n                <Text style={{ fontFamily: \"title\", fontSize: 40, color: darkMode ? white : primary }}>SushiSwap</Text>\n            </Link>\n            <Image\n                source={\n                    darkMode\n                        ? require(\"../../assets/levx-typography-dark.png\")\n                        : require(\"../../assets/levx-typography.png\")\n                }\n                style={{ width: 76, height: 13 }}\n            />\n        </View>\n    );\n};\n\nconst Menu = () => {\n    return (\n        <FlexView\n            style={{\n                height: \"100%\",\n                alignItems: \"flex-end\"\n            }}>\n            <MenuItem title={\"SWAP\"} path={\"/\"} />\n            <MenuItem title={\"LIQUIDITY\"} path={\"/liquidity\"} />\n            <MenuItem title={\"FARMING\"} path={\"/farming\"} />\n            <MenuItem title={\"SUSHIBAR\"} path={\"/sushibar\"} />\n            <Stats />\n            <DarkModeSwitch />\n        </FlexView>\n    );\n};\n\nconst MenuItem = ({ title, path }) => {\n    const { textDark } = useColors();\n    const match = useRouteMatch(path);\n    return (\n        <Link to={path} style={{ marginLeft: Spacing.small, marginBottom: 4, textDecoration: \"none\" }}>\n            <View>\n                <Text style={{ fontFamily: \"regular\", fontSize: 20, color: textDark, padding: 4 }}>{title}</Text>\n                {match?.isExact && (\n                    <View\n                        style={{\n                            position: \"absolute\",\n                            height: 2,\n                            left: 0,\n                            right: 0,\n                            bottom: 0,\n                            backgroundColor: textDark\n                        }}\n                    />\n                )}\n            </View>\n        </Link>\n    );\n};\n\nconst Stats = () => {\n    const { textDark } = useColors();\n    const onPress = useCallback(() => {\n        window.open(\"https://sushiswap.vision\", \"_blank\");\n    }, []);\n    return (\n        <FlexView style={{ alignItems: \"flex-start\", marginLeft: Spacing.small, marginBottom: 4 }}>\n            <Text style={{ fontFamily: \"regular\", fontSize: 20, color: textDark, padding: 4 }} onPress={onPress}>\n                {\"STATS\"}\n            </Text>\n            <Icon\n                name={\"arrow-top-right\"}\n                type={\"material-community\"}\n                size={18}\n                color={textDark}\n                style={{ marginTop: 6 }}\n            />\n        </FlexView>\n    );\n};\n\nconst DarkModeSwitch = () => {\n    const { darkMode, setDarkMode } = useContext(GlobalContext);\n    const onChange = useCallback(\n        async dark => {\n            await setDarkMode(dark);\n        },\n        [setDarkMode]\n    );\n    return (\n        <View style={{ marginLeft: Spacing.small, marginBottom: 4 }}>\n            <Switch\n                value={darkMode}\n                onChange={onChange}\n                style={{\n                    transform: [\n                        {\n                            scale: 0.7\n                        }\n                    ]\n                }}\n            />\n        </View>\n    );\n};\n\nexport default Header;\n","import React, { useCallback } from \"react\";\nimport { Image, View } from \"react-native\";\nimport { Icon, SocialIcon } from \"react-native-elements\";\n\nimport * as Linking from \"expo-linking\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport FlexView from \"./FlexView\";\nimport { Title } from \"./Header\";\nimport Text from \"./Text\";\n\nconst MobileNotSupported = () => {\n    const { background } = useColors();\n    return (\n        <View\n            style={{\n                justifyContent: \"center\",\n                alignItems: \"center\",\n                backgroundColor: background,\n                height: \"100%\",\n                padding: Spacing.normal\n            }}>\n            <Image\n                source={require(\"../../assets/sushiswap.jpg\")}\n                style={{ width: 192, height: 192, marginBottom: Spacing.normal }}\n            />\n            <Title />\n            <Text style={{ marginTop: Spacing.normal }}>Mobile devices not supported yet.</Text>\n            <Social />\n        </View>\n    );\n};\n\nconst Social = () => {\n    const onPressTwitter = useCallback(() => Linking.openURL(\"https://twitter.com/LevxApp\"), []);\n    const onPressGithub = useCallback(() => Linking.openURL(\"https://github.com/lev-x\"), []);\n    const onPressDiscord = useCallback(() => Linking.openURL(\"https://discord.gg/3QKsgf\"), []);\n    return (\n        <FlexView style={{ marginTop: Spacing.large, marginBottom: Spacing.huge, justifyContent: \"center\" }}>\n            <Icon\n                type={\"material-community\"}\n                name={\"github-face\"}\n                color={\"white\"}\n                reverseColor={\"black\"}\n                reverse={true}\n                raised={true}\n                onPress={onPressGithub}\n            />\n            <SocialIcon type=\"twitter\" onPress={onPressTwitter} />\n            <Icon\n                type={\"material-community\"}\n                name={\"discord\"}\n                color={\"#7289da\"}\n                reverse={true}\n                raised={true}\n                onPress={onPressDiscord}\n            />\n        </FlexView>\n    );\n};\n\nexport default MobileNotSupported;\n","import React from \"react\";\n\nimport { EthersContextConsumer, EthersContextProvider } from \"./EthersContext\";\nimport { GlobalContextConsumer, GlobalContextProvider } from \"./GlobalContext\";\n\nexport const ContextProvider = ({ children }) => {\n    return (\n        <EthersContextProvider>\n            <GlobalContextProvider>{children}</GlobalContextProvider>\n        </EthersContextProvider>\n    );\n};\n\nexport const ContextConsumer = ({ children }) => {\n    return (\n        <EthersContextConsumer>\n            {ethersContext => (\n                <GlobalContextConsumer>\n                    {globalContext =>\n                        children({\n                            ...globalContext,\n                            ...ethersContext\n                        })\n                    }\n                </GlobalContextConsumer>\n            )}\n        </EthersContextConsumer>\n    );\n};\n","import { ViewStyle } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"./useColors\";\n\nconst useStyles = () => {\n    const { shadow: shadowColor } = useColors();\n    const shadow: ViewStyle = {\n        borderRadius: Spacing.tiny,\n        elevation: Spacing.small,\n        shadowColor,\n        shadowOffset: { width: 0, height: 2 },\n        shadowOpacity: 0.5,\n        shadowRadius: 4,\n        overflow: \"visible\"\n    };\n    return { shadow };\n};\n\nexport default useStyles;\n","import React, { FC } from \"react\";\nimport { Button as NativeButton, ButtonProps as NativeButtonProps } from \"react-native-elements\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport useStyles from \"../hooks/useStyles\";\n\nexport interface ButtonProps extends NativeButtonProps {\n    color?: string;\n    size?: \"small\" | \"normal\" | \"large\";\n    fontWeight?: \"light\" | \"regular\" | \"bold\";\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst Button: FC<ButtonProps> = props => {\n    const { primary, borderDark, textMedium } = useColors();\n    const { shadow } = useStyles();\n    const type = props.type || \"solid\";\n    const size = props.size || \"normal\";\n    const height = props.size === \"small\" ? 40 : size === \"normal\" ? 48 : 56;\n    const fontSize = props.size === \"small\" ? 14 : size === \"normal\" ? 16 : 18;\n    const fontFamily = props.fontWeight || \"regular\";\n    const color = type === \"solid\" ? \"white\" : props.color || textMedium;\n    return (\n        <NativeButton\n            {...props}\n            type={type}\n            buttonStyle={[\n                {\n                    height,\n                    paddingHorizontal: Spacing.small,\n                    backgroundColor: type === \"solid\" ? props.color || primary : \"transparent\",\n                    borderColor: borderDark\n                },\n                props.buttonStyle\n            ]}\n            titleStyle={[{ fontSize, fontFamily, color }, props.titleStyle]}\n            containerStyle={[type === \"solid\" || type === \"outline\" ? shadow : {}, props.containerStyle]}\n        />\n    );\n};\nexport default Button;\n","import React, { FC, useCallback, useContext, useState } from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport Token from \"../types/Token\";\nimport Button from \"./Button\";\n\nexport interface ApproveButtonProps {\n    token: Token;\n    spender: string;\n    onSuccess: () => void;\n    onError: (e) => void;\n    hidden?: boolean;\n}\n\nconst ApproveButton: FC<ApproveButtonProps> = props => {\n    const { approveToken } = useContext(EthersContext);\n    const [loading, setLoading] = useState(false);\n    const onPress = useCallback(async () => {\n        if (props.token) {\n            props.onError({});\n            setLoading(true);\n            try {\n                const tx = await approveToken(props.token.address, props.spender);\n                await tx.wait();\n                props.onSuccess();\n            } catch (e) {\n                props.onError(e);\n            } finally {\n                setLoading(false);\n            }\n        }\n    }, [props.token]);\n    if (props.hidden) {\n        return <View />;\n    }\n    return (\n        <Button\n            size={\"large\"}\n            title={\"Approve \" + (props.token?.symbol || \"\")}\n            onPress={onPress}\n            loading={loading}\n            containerStyle={{ marginBottom: Spacing.small }}\n        />\n    );\n};\n\nexport default ApproveButton;\n","import React, { FC, useCallback, useState } from \"react\";\nimport { ButtonGroup as NativeButtonGroup, ButtonGroupProps } from \"react-native-elements\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport useStyles from \"../hooks/useStyles\";\n\n// tslint:disable-next-line:max-func-body-length\nconst ButtonGroup: FC<ButtonGroupProps> = props => {\n    const { borderDark } = useColors();\n    const { shadow } = useStyles();\n    const [index, setIndex] = useState<number>();\n    const onPress = useCallback(i => {\n        setIndex(i);\n        props.onPress(i);\n    }, []);\n    return (\n        <NativeButtonGroup\n            {...props}\n            selectedIndex={props.selectedIndex || index}\n            onPress={onPress}\n            textStyle={[\n                {\n                    fontFamily: \"regular\"\n                },\n                props.textStyle\n            ]}\n            buttonStyle={[\n                {\n                    borderTopLeftRadius: index === 0 ? Spacing.tiny : 0,\n                    borderBottomLeftRadius: index === 0 ? Spacing.tiny : 0,\n                    borderTopRightRadius:\n                        props.buttons.length > 0 && index === props.buttons.length - 1 ? Spacing.tiny : 0,\n                    borderBottomRightRadius:\n                        props.buttons.length > 0 && index === props.buttons.length - 1 ? Spacing.tiny : 0\n                },\n                props.buttonStyle\n            ]}\n            selectedButtonStyle={[\n                {\n                    backgroundColor: borderDark\n                },\n                props.selectedButtonStyle\n            ]}\n            containerStyle={[\n                {\n                    marginHorizontal: 0,\n                    marginVertical: 0,\n                    height: 56,\n                    ...shadow\n                },\n                props.containerStyle\n            ]}\n        />\n    );\n};\n\nexport default ButtonGroup;\n","import React from \"react\";\nimport { Icon } from \"react-native-elements\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\n\nconst CloseIcon = () => {\n    const { textLight } = useColors();\n    return <Icon type={\"material-community\"} name={\"close\"} color={textLight} style={{ marginLeft: Spacing.tiny }} />;\n};\n\nexport default CloseIcon;\n","import React, { FC } from \"react\";\nimport { View, ViewProps, ViewStyle } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\n\ninterface ColumnProps extends ViewProps {\n    noTopMargin?: boolean;\n    style?: ViewStyle;\n}\n\nconst Column: FC<ColumnProps> = props => (\n    <View {...props} style={[{ width: 440, marginTop: props.noTopMargin ? 0 : Spacing.large }, props.style]} />\n);\n\nexport default Column;\n","import React, { FC } from \"react\";\nimport { ScrollView, ViewProps } from \"react-native\";\n\nimport { HEADER_HEIGHT } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\n\nexport interface ContainerProps extends ViewProps {\n    scrollToBottomLength?: number;\n    showScrollToBottomButton?: boolean;\n}\n\nconst Container: FC<ContainerProps> = props => {\n    const { background } = useColors();\n    return (\n        <ScrollView\n            nestedScrollEnabled={true}\n            contentContainerStyle={{ flex: 1 }}\n            style={[{ backgroundColor: background, marginTop: HEADER_HEIGHT }, props.style]}\n            {...props}\n        />\n    );\n};\n\nexport default Container;\n","import React from \"react\";\nimport { View, ViewProps } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\n\ninterface ContentProps extends ViewProps {\n    contentPadding?: \"small\" | \"normal\" | \"large\";\n}\n\nconst Content: React.FunctionComponent<ContentProps> = props => {\n    const { background } = useColors();\n    const multiplier = {\n        small: 0.75,\n        normal: 1,\n        large: 1.5\n    }[props.contentPadding || \"normal\"];\n    return (\n        <View style={{ alignItems: \"center\", flex: 1, backgroundColor: background }}>\n            <View style={{ width: 1280, flex: 1 }}>\n                <View\n                    {...props}\n                    style={[\n                        {\n                            paddingHorizontal: Spacing.content * multiplier,\n                            paddingVertical: Spacing.normal * multiplier,\n                            backgroundColor: background\n                        },\n                        props.style\n                    ]}\n                />\n            </View>\n        </View>\n    );\n};\nexport default Content;\n","import React from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport MetamaskError from \"../types/MetamaskError\";\nimport Text from \"./Text\";\n\nconst ErrorMessage = ({ error }: { error: MetamaskError }) => (\n    <View\n        style={{\n            borderColor: \"red\",\n            borderWidth: 1,\n            width: \"100%\",\n            padding: Spacing.tiny,\n            marginTop: Spacing.small\n        }}>\n        {error.code && (\n            <Text fontWeight={\"bold\"} style={{ color: \"red\", fontSize: 14 }}>\n                Error Code {error.code}\n            </Text>\n        )}\n        <Text note={true} style={{ color: \"red\", fontSize: 14 }}>\n            {error.message}\n        </Text>\n    </View>\n);\n\nexport default ErrorMessage;\n","import React from \"react\";\n\nimport Button from \"./Button\";\n\nconst FetchingButton = () => {\n    return <Button size={\"large\"} title={\"Fetching…\"} disabled={true} />;\n};\nexport default FetchingButton;\n","import React from \"react\";\n\nimport Button from \"./Button\";\n\nconst InsufficientBalanceButton = ({ symbol }: { symbol: string }) => {\n    return <Button size={\"large\"} title={\"Insufficient \" + symbol + \" Balance\"} disabled={true} />;\n};\nexport default InsufficientBalanceButton;\n","import React from \"react\";\nimport { View } from \"react-native\";\n\nimport useColors from \"../hooks/useColors\";\n\nconst Border = () => {\n    const { border } = useColors();\n    return <View style={{ height: 1, width: \"100%\", backgroundColor: border }} />;\n};\n\nexport default Border;\n","import React, { FC, useCallback, useContext } from \"react\";\nimport { ActivityIndicator, FlatList, View } from \"react-native\";\nimport { CheckBox as NativeCheckBox, CheckBoxProps } from \"react-native-elements\";\n\nimport { ethers } from \"ethers\";\nimport { Spacing } from \"../constants/dimension\";\nimport { GlobalContext } from \"../context/GlobalContext\";\nimport useColors from \"../hooks/useColors\";\nimport { LPTokensState } from \"../hooks/useLPTokensState\";\nimport LPToken from \"../types/LPToken\";\nimport Border from \"./Border\";\nimport Column from \"./Column\";\nimport FlexView from \"./FlexView\";\nimport Text from \"./Text\";\n\nexport type LPTokenSelectFilter = \"balance\" | \"amountDeposited\" | \"\";\n\nexport interface LPTokenSelectProps {\n    state: LPTokensState;\n    title: string;\n    emptyText: string;\n    showFilter?: boolean;\n    filter?: LPTokenSelectFilter;\n    onFilterChanged?: (filter: LPTokenSelectFilter) => void;\n    Item: FC<LPTokenItemProps>;\n}\n\nexport interface LPTokenItemProps {\n    token: LPToken;\n    selected: boolean;\n    filter?: LPTokenSelectFilter;\n    onSelectToken: (token: LPToken) => void;\n}\n\nconst LPTokenSelect: FC<LPTokenSelectProps> = props => {\n    const onUnselectToken = useCallback(() => {\n        props.state.setSelectedLPToken(undefined);\n    }, [props.state.setSelectedLPToken]);\n    return (\n        <Column>\n            <Text\n                fontWeight={\"bold\"}\n                medium={true}\n                style={{ marginBottom: props.showFilter ? Spacing.tiny : Spacing.normal, fontSize: 20 }}>\n                {props.title}\n            </Text>\n            {props.showFilter && <Filter filter={props.filter} onFilterChanged={props.onFilterChanged} />}\n            {props.state.selectedLPToken ? (\n                <props.Item\n                    token={props.state.selectedLPToken}\n                    selected={true}\n                    filter={\"\"}\n                    onSelectToken={onUnselectToken}\n                />\n            ) : (\n                <LPTokenList state={props.state} filter={props.filter} emptyText={props.emptyText} Item={props.Item} />\n            )}\n        </Column>\n    );\n};\n\nconst Filter = ({ filter, onFilterChanged }) => {\n    const handler = (f: string) => () => onFilterChanged(f);\n    return (\n        <FlexView style={{ width: \"100%\", justifyContent: \"flex-end\" }}>\n            <CheckBox checked={filter === \"balance\"} onPress={handler(\"balance\")} title={\"with balance\"} />\n            <CheckBox\n                checked={filter === \"amountDeposited\"}\n                onPress={handler(\"amountDeposited\")}\n                title={\"with deposit\"}\n            />\n            <CheckBox checked={!filter} onPress={handler(\"\")} title={\"all\"} />\n        </FlexView>\n    );\n};\n\nconst CheckBox = (props: CheckBoxProps) => {\n    const { darkMode } = useContext(GlobalContext);\n    const { primary, secondary, textLight } = useColors();\n    return (\n        <NativeCheckBox\n            {...props}\n            textStyle={{ fontFamily: \"regular\", fontSize: 14, color: textLight, marginLeft: 0, marginRight: 4 }}\n            containerStyle={{\n                backgroundColor: \"transparent\",\n                borderWidth: 0,\n                marginLeft: Spacing.tiny,\n                marginRight: 0,\n                marginVertical: Spacing.small,\n                padding: 0\n            }}\n            iconRight={true}\n            iconType={\"material-community\"}\n            checkedIcon={\"radiobox-marked\"}\n            uncheckedIcon={\"radiobox-blank\"}\n            checkedColor={darkMode ? secondary : primary}\n        />\n    );\n};\n\n// tslint:disable-next-line:max-func-body-length\nconst LPTokenList = ({\n    state,\n    emptyText,\n    filter,\n    Item\n}: {\n    state: LPTokensState;\n    emptyText: string;\n    filter?: LPTokenSelectFilter;\n    Item: FC<LPTokenItemProps>;\n}) => {\n    const renderItem = useCallback(\n        ({ item }) => {\n            return (\n                <Item\n                    key={item.address}\n                    token={item}\n                    selected={false}\n                    filter={filter}\n                    onSelectToken={state.setSelectedLPToken}\n                />\n            );\n        },\n        [filter, state.setSelectedLPToken]\n    );\n    let data = state.lpTokens.sort((t1, t2) => {\n        return (t2.totalDeposited || ethers.constants.Zero)\n            .sub(t1.totalDeposited || ethers.constants.Zero)\n            .div(ethers.BigNumber.from(10).pow(14))\n            .toNumber();\n    });\n    if (filter === \"amountDeposited\") {\n        data = data.filter(token => token.amountDeposited?.gt(0));\n    } else if (filter === \"balance\") {\n        data = data.filter(token => token.balance.gt(0));\n    }\n    return state.loading ? (\n        <ActivityIndicator size={\"large\"} style={{ marginTop: Spacing.large }} />\n    ) : data.length === 0 ? (\n        <EmptyList text={emptyText} />\n    ) : (\n        <FlatList\n            keyExtractor={item => JSON.stringify(item)}\n            data={data}\n            renderItem={renderItem}\n            ItemSeparatorComponent={Border}\n        />\n    );\n};\n\nconst EmptyList = ({ text }: { text: string }) => {\n    return (\n        <View style={{ margin: Spacing.normal }}>\n            <Text light={true} style={{ textAlign: \"center\", width: \"100%\" }}>\n                {text}\n            </Text>\n        </View>\n    );\n};\n\nexport default LPTokenSelect;\n","import React from \"react\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport FlexView from \"./FlexView\";\nimport Text from \"./Text\";\n\nconst Meta = ({ label, text }: { label: string; text: string }) => {\n    return (\n        <FlexView style={{ justifyContent: \"space-between\", marginTop: Spacing.tiny, marginHorizontal: Spacing.small }}>\n            <Text fontWeight={\"bold\"} style={{ fontSize: 14 }}>\n                {label}\n            </Text>\n            <Text style={{ fontSize: 14 }}>{text}</Text>\n        </FlexView>\n    );\n};\n\nexport default Meta;\n","import React, { useContext } from \"react\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport { GlobalContext } from \"../context/GlobalContext\";\nimport useColors from \"../hooks/useColors\";\nimport Text from \"./Text\";\n\nconst Notice = (props: { text: string; color?: string }) => {\n    const { darkMode } = useContext(GlobalContext);\n    const { primary, secondary } = useColors();\n    const color = props.color || (darkMode ? secondary : primary);\n    return (\n        <Text\n            note={true}\n            style={{\n                color,\n                borderColor: color,\n                borderWidth: 1,\n                borderRadius: 4,\n                padding: Spacing.small\n            }}>\n            {props.text}\n        </Text>\n    );\n};\n\nexport default Notice;\n","import React, { useContext } from \"react\";\nimport { Icon } from \"react-native-elements\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport { GlobalContext } from \"../context/GlobalContext\";\nimport useColors from \"../hooks/useColors\";\n\nconst SelectIcon = () => {\n    const { darkMode } = useContext(GlobalContext);\n    const { primary, secondary } = useColors();\n    return (\n        <Icon\n            type={\"material-community\"}\n            name={\"chevron-right\"}\n            color={darkMode ? secondary : primary}\n            style={{ marginLeft: Spacing.tiny }}\n        />\n    );\n};\n\nexport default SelectIcon;\n","import React, { FC } from \"react\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport Text from \"./Text\";\n\ninterface SubtitleProps {\n    text: string;\n}\n\nconst Subtitle: FC<SubtitleProps> = props => {\n    return (\n        <Text fontWeight={\"bold\"} medium={true} style={{ marginBottom: Spacing.normal, fontSize: 20 }}>\n            {props.text}\n        </Text>\n    );\n};\n\nexport default Subtitle;\n","import React, { FC, useCallback } from \"react\";\nimport { Input as NativeInput, InputProps as NativeInputProps } from \"react-native-elements\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\n\nexport interface Validation {\n    regexp: RegExp;\n    error: string;\n}\n\nexport interface InputProps extends NativeInputProps {\n    color?: string;\n    size?: \"small\" | \"normal\" | \"large\";\n    allowed?: Validation[];\n    forbidden?: Validation[];\n    onError?: (error: string) => void;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst Input: FC<InputProps> = props => {\n    const { textDark, textMedium, textLight } = useColors();\n    const size = props.size || \"normal\";\n    const color = props.color || textDark;\n    const fontSize = size === \"small\" ? 24 : size === \"large\" ? 36 : 30;\n    const onChangeText = useCallback(\n        (text: string) => {\n            props.onChangeText?.(text);\n            props.onError?.(\"\");\n            const errors = [] as string[];\n            if (text !== \"\" && props.forbidden) {\n                props.forbidden.forEach(validation => {\n                    if (text.match(validation.regexp)) {\n                        errors.push(validation.error);\n                    }\n                });\n            }\n            if (text !== \"\" && props.allowed) {\n                props.allowed.forEach(validation => {\n                    if (!text.match(validation.regexp)) {\n                        errors.push(validation.error);\n                    }\n                });\n            }\n            if (errors.length > 0) {\n                props.onError?.(errors.join(\"\\n\"));\n            }\n        },\n        [props.onChangeText, props.onError, props.forbidden, props.allowed]\n    );\n    return (\n        <NativeInput\n            {...props}\n            inputStyle={[\n                // @ts-ignore\n                { fontSize, fontFamily: \"regular\", paddingBottom: 4, color, outline: \"none\", marginTop: 0 },\n                props.inputStyle\n            ]}\n            labelStyle={[{ color: textMedium }, props.labelStyle]}\n            placeholderTextColor={props.placeholderTextColor || textLight}\n            errorStyle={props.onError ? { height: 0 } : props.errorStyle}\n            containerStyle={[{ paddingHorizontal: 0, marginTop: Spacing.tiny }, props.containerStyle]}\n            onChangeText={onChangeText}\n        />\n    );\n};\n\nexport default Input;\n","import React, { FC, useCallback, useContext } from \"react\";\nimport { View } from \"react-native\";\n\nimport { ethers } from \"ethers\";\nimport { Spacing } from \"../constants/dimension\";\nimport { GlobalContext } from \"../context/GlobalContext\";\nimport useColors from \"../hooks/useColors\";\nimport Token from \"../types/Token\";\nimport { formatBalance, parseBalance } from \"../utils\";\nimport Button from \"./Button\";\nimport Column from \"./Column\";\nimport Input from \"./Input\";\nimport Subtitle from \"./Subtitle\";\n\nexport interface TokenInputProps {\n    title?: string;\n    token?: Token;\n    hidden: boolean;\n    amount: string;\n    onAmountChanged: (amount: string) => void;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst TokenInput: FC<TokenInputProps> = props => {\n    const onChangeText = useCallback(\n        (text: string) => {\n            if (props.token && props.onAmountChanged) {\n                try {\n                    parseBalance(text, props.token.decimals);\n                    props.onAmountChanged(text);\n                } catch (e) {\n                    if (text.endsWith(\".\") && text.indexOf(\".\") === text.length - 1) {\n                        props.onAmountChanged(text);\n                    }\n                }\n            }\n        },\n        [props.token, props.onAmountChanged]\n    );\n    if (props.hidden) {\n        return <Column noTopMargin={true} />;\n    }\n    const label = props.token?.symbol;\n    return (\n        <Column noTopMargin={!props.title}>\n            {props.title && <Subtitle text={props.title} />}\n            <View style={{ marginHorizontal: Spacing.small }}>\n                <Input label={label} value={props.amount} onChangeText={onChangeText} placeholder={\"0.0\"} />\n                {props.token?.balance?.gt(0) && <MaxButton token={props.token} updateAmount={props.onAmountChanged} />}\n            </View>\n        </Column>\n    );\n};\n\nconst MaxButton = (props: { token: Token; updateAmount }) => {\n    const { darkMode } = useContext(GlobalContext);\n    const { primary, secondary } = useColors();\n    const onPressMax = useCallback(() => {\n        if (props.token) {\n            let balance = props.token.balance;\n            if (props.token.symbol === \"ETH\") {\n                // Subtract 0.01 ETH for gas fee\n                const fee = ethers.BigNumber.from(10).pow(16);\n                balance = balance.gt(fee) ? balance.sub(fee) : ethers.constants.Zero;\n            }\n            props.updateAmount(formatBalance(balance, props.token.decimals));\n        }\n    }, [props.token, props.updateAmount]);\n    return (\n        <View style={{ position: \"absolute\", right: 0, bottom: 12 }}>\n            <Button\n                type={\"clear\"}\n                color={darkMode ? secondary : primary}\n                title={\"MAX\"}\n                fontWeight={\"bold\"}\n                onPress={onPressMax}\n                buttonStyle={{ paddingHorizontal: 0 }}\n            />\n        </View>\n    );\n};\n\nexport default TokenInput;\n","import { useCallback, useContext, useEffect, useState } from \"react\";\n\nimport { ethers } from \"ethers\";\nimport useAsyncEffect from \"use-async-effect\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport { GlobalContext } from \"../context/GlobalContext\";\nimport Token from \"../types/Token\";\nimport { parseBalance } from \"../utils\";\nimport useSDK, { ROUTER } from \"./useSDK\";\n\nexport interface TokenPairState {\n    fromSymbol: string;\n    setFromSymbol: (symbol: string) => void;\n    toSymbol: string;\n    setToSymbol: (symbol: string) => void;\n    fromToken?: Token;\n    toToken?: Token;\n    fromAmount: string;\n    setFromAmount: (amount: string) => void;\n    toAmount: string;\n    setToAmount: (amount: string) => void;\n    fromTokenAllowed: boolean;\n    setFromTokenAllowed: (allowed: boolean) => void;\n    toTokenAllowed: boolean;\n    setToTokenAllowed: (allowed: boolean) => void;\n    loading: boolean;\n    onWrap: () => Promise<void>;\n    wrapping: boolean;\n    onUnwrap: () => Promise<void>;\n    unwrapping: boolean;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst useTokenPairState: () => TokenPairState = () => {\n    const { tokens, updateTokens } = useContext(GlobalContext);\n    const { provider, signer, address, getTokenAllowance } = useContext(EthersContext);\n    const { wrapETH, unwrapETH } = useSDK();\n    const [fromSymbol, setFromSymbol] = useState(\"\");\n    const [toSymbol, setToSymbol] = useState(\"\");\n    const [fromAmount, setFromAmount] = useState(\"\");\n    const [toAmount, setToAmount] = useState(\"\");\n    const [fromTokenAllowed, setFromTokenAllowed] = useState(false);\n    const [toTokenAllowed, setToTokenAllowed] = useState(false);\n    const [loading, setLoading] = useState(false);\n    const [wrapping, setWrapping] = useState(false);\n    const [unwrapping, setUnwrapping] = useState(false);\n\n    const fromToken = tokens.find(token => token.symbol === fromSymbol);\n    const toToken = tokens.find(token => token.symbol === toSymbol);\n\n    useEffect(() => {\n        if (fromSymbol === \"\") {\n            setToSymbol(\"\");\n        }\n        setFromAmount(\"\");\n        setToAmount(\"\");\n    }, [fromSymbol, toSymbol]);\n\n    useEffect(() => {\n        setFromSymbol(\"\");\n    }, [address]);\n\n    useAsyncEffect(async () => {\n        if (fromToken && toToken && provider && signer) {\n            setFromTokenAllowed(false);\n            setToTokenAllowed(false);\n            setLoading(true);\n            try {\n                const minAllowance = ethers.BigNumber.from(2)\n                    .pow(96)\n                    .sub(1);\n                if (fromToken.symbol !== \"ETH\") {\n                    const fromAllowance = await getTokenAllowance(fromToken.address, ROUTER);\n                    setFromTokenAllowed(ethers.BigNumber.from(fromAllowance).gte(minAllowance));\n                }\n                if (toToken.symbol !== \"ETH\") {\n                    const toAllowance = await getTokenAllowance(toToken.address, ROUTER);\n                    setToTokenAllowed(ethers.BigNumber.from(toAllowance).gte(minAllowance));\n                }\n            } finally {\n                setLoading(false);\n            }\n        }\n    }, [fromToken, toToken, provider, signer]);\n\n    const onWrap = useCallback(async () => {\n        if (fromAmount && signer) {\n            setWrapping(true);\n            try {\n                const tx = await wrapETH(parseBalance(fromAmount));\n                if (tx) {\n                    await tx.wait();\n                    await updateTokens();\n                    setFromSymbol(\"\");\n                }\n            } finally {\n                setWrapping(false);\n            }\n        }\n    }, [fromAmount, signer]);\n\n    const onUnwrap = useCallback(async () => {\n        if (fromAmount && signer) {\n            setUnwrapping(true);\n            try {\n                const tx = await unwrapETH(parseBalance(fromAmount));\n                if (tx) {\n                    await tx.wait();\n                    await updateTokens();\n                    setFromSymbol(\"\");\n                }\n            } finally {\n                setUnwrapping(false);\n            }\n        }\n    }, [fromAmount, signer]);\n\n    return {\n        fromSymbol,\n        setFromSymbol,\n        toSymbol,\n        setToSymbol,\n        fromToken,\n        toToken,\n        fromAmount,\n        setFromAmount,\n        toAmount,\n        setToAmount,\n        fromTokenAllowed,\n        setFromTokenAllowed,\n        toTokenAllowed,\n        setToTokenAllowed,\n        loading,\n        onWrap,\n        wrapping,\n        onUnwrap,\n        unwrapping\n    };\n};\n\nexport default useTokenPairState;\n","import { useContext, useEffect, useState } from \"react\";\n\nimport { Pair } from \"@levx/sushiswap-sdk\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport useSDK from \"./useSDK\";\nimport useTokenPairState, { TokenPairState } from \"./useTokenPairState\";\n\nexport interface LiquidityState extends TokenPairState {\n    pair?: Pair;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst useLiquidityState: () => LiquidityState = () => {\n    const state = useTokenPairState();\n    const { provider, addOnBlockListener, removeOnBlockListener } = useContext(EthersContext);\n    const [loading, setLoading] = useState(false);\n    const [pair, setPair] = useState<Pair>();\n    const { getPair } = useSDK();\n\n    useEffect(() => {\n        if (state.fromSymbol && state.toSymbol) {\n            const updatePair = async () => {\n                if (state.fromToken && state.toToken && provider) {\n                    setPair(undefined);\n                    try {\n                        setPair(await getPair(state.fromToken, state.toToken));\n                    } catch (e) {\n                    } finally {\n                        setLoading(false);\n                    }\n                }\n            };\n\n            setLoading(true);\n            updatePair();\n            const name = \"updatePair(\" + state.fromSymbol + \",\" + state.toSymbol + \")\";\n\n            addOnBlockListener(name, updatePair);\n            return () => {\n                removeOnBlockListener(name);\n            };\n        }\n    }, [state.fromSymbol, state.toSymbol]);\n\n    return {\n        ...state,\n        loading: loading || state.loading,\n        pair\n    };\n};\n\nexport default useLiquidityState;\n","import { useContext, useEffect, useState } from \"react\";\n\nimport { EthersContext } from \"../context/EthersContext\";\nimport { GlobalContext } from \"../context/GlobalContext\";\nimport LPToken from \"../types/LPToken\";\nimport useLiquidityState, { LiquidityState } from \"./useLiquidityState\";\nimport useSDK from \"./useSDK\";\n\nexport interface LPTokensState extends LiquidityState {\n    lastTimeRefreshed: number;\n    updateLastTimeRefreshed: () => void;\n    lpTokens: LPToken[];\n    selectedLPToken?: LPToken;\n    setSelectedLPToken: (token?: LPToken) => void;\n    selectedLPTokenAllowed: boolean;\n    setSelectedLPTokenAllowed: (allowed: boolean) => void;\n    amount: string;\n    setAmount: (amount: string) => void;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst useLPTokensState: (loadPools: boolean) => LPTokensState = loadPools => {\n    const state = useLiquidityState();\n    const { provider, signer, address, addOnBlockListener, removeOnBlockListener } = useContext(EthersContext);\n    const { tokens } = useContext(GlobalContext);\n    const { getMyLPTokens, getPools } = useSDK();\n    const [lastTimeRefreshed, setLastTimeRefreshed] = useState(0);\n    const [loading, setLoading] = useState(true);\n    const [lpTokens, setLPTokens] = useState<LPToken[]>([]);\n    const [selectedLPToken, setSelectedLPToken] = useState<LPToken>();\n    const [selectedLPTokenAllowed, setSelectedLPTokenAllowed] = useState(false);\n    const [amount, setAmount] = useState(\"\");\n\n    const updateLPTokens = async () => {\n        try {\n            const method = loadPools ? getPools : getMyLPTokens;\n            const data = await method();\n            if (data) {\n                setLPTokens(data);\n            }\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    useEffect(() => {\n        if (!selectedLPToken) {\n            setAmount(\"\");\n        }\n    }, [selectedLPToken]);\n\n    useEffect(() => {\n        if (provider && signer && (loadPools || tokens.length > 0)) {\n            setLoading(true);\n            updateLPTokens();\n\n            const name = \"updateLPTokens()\";\n            addOnBlockListener(name, updateLPTokens);\n            return () => {\n                removeOnBlockListener(name);\n            };\n        }\n    }, [provider, signer, tokens.length, address, lastTimeRefreshed]);\n\n    return {\n        ...state,\n        loading: state.loading || loading,\n        lastTimeRefreshed,\n        updateLastTimeRefreshed: () => {\n            setLastTimeRefreshed(Date.now());\n        },\n        lpTokens,\n        selectedLPToken,\n        setSelectedLPToken,\n        selectedLPTokenAllowed,\n        setSelectedLPTokenAllowed,\n        amount,\n        setAmount\n    };\n};\n\nexport default useLPTokensState;\n","import { useCallback, useContext, useEffect, useState } from \"react\";\n\nimport { ethers } from \"ethers\";\nimport useAsyncEffect from \"use-async-effect\";\nimport { LPTokenSelectFilter } from \"../components/LPTokenSelect\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport { parseBalance } from \"../utils\";\nimport useLPTokensState, { LPTokensState } from \"./useLPTokensState\";\nimport useSDK, { MASTER_CHEF } from \"./useSDK\";\n\nexport interface FarmingState extends LPTokensState {\n    action?: Action;\n    setAction: (action?: Action) => void;\n    expectedSushiRewardPerBlock?: ethers.BigNumber;\n    filteredBy: LPTokenSelectFilter;\n    setFilteredBy: (filter: LPTokenSelectFilter) => void;\n    onDeposit: () => Promise<void>;\n    depositing: boolean;\n    onWithdraw: () => Promise<void>;\n    withdrawing: boolean;\n}\n\nexport type Action = \"deposit\" | \"withdraw\";\n\n// tslint:disable-next-line:max-func-body-length\nconst useFarmingState: () => FarmingState = () => {\n    const state = useLPTokensState(true);\n    const { provider, signer, getTokenAllowance } = useContext(EthersContext);\n    const { getExpectedSushiRewardPerBlock, deposit, withdraw } = useSDK();\n    const [filteredBy, setFilteredBy] = useState(\"\" as LPTokenSelectFilter);\n    const [action, setAction] = useState<Action>();\n    const [loading, setLoading] = useState(false);\n    const [expectedSushiRewardPerBlock, setExpectedSushiRewardPerBlock] = useState<ethers.BigNumber>();\n    const [depositing, setDepositing] = useState(false);\n    const [withdrawing, setWithdrawing] = useState(false);\n\n    useEffect(() => {\n        setFilteredBy(\"\");\n        setAction(undefined);\n        setLoading(false);\n        setDepositing(false);\n        setWithdrawing(false);\n        setExpectedSushiRewardPerBlock(undefined);\n    }, [state.selectedLPToken]);\n\n    useAsyncEffect(async () => {\n        if (signer && state.selectedLPToken) {\n            setLoading(true);\n            try {\n                setExpectedSushiRewardPerBlock(await getExpectedSushiRewardPerBlock(state.selectedLPToken));\n            } finally {\n                setLoading(false);\n            }\n        }\n    }, [signer, state.selectedLPToken]);\n\n    useAsyncEffect(async () => {\n        if (provider && signer && state.selectedLPToken) {\n            setLoading(true);\n            state.setSelectedLPTokenAllowed(false);\n            try {\n                const minAllowance = ethers.BigNumber.from(2)\n                    .pow(96)\n                    .sub(1);\n                const allowance = await getTokenAllowance(state.selectedLPToken.address, MASTER_CHEF);\n                state.setSelectedLPTokenAllowed(ethers.BigNumber.from(allowance).gte(minAllowance));\n            } finally {\n                setLoading(false);\n            }\n        }\n    }, [provider, signer, state.selectedLPToken]);\n\n    useEffect(() => {\n        state.setAmount(\"\");\n    }, [action]);\n\n    const onDeposit = useCallback(async () => {\n        if (state.selectedLPToken?.id && state.amount && signer) {\n            setDepositing(true);\n            try {\n                const amount = parseBalance(state.amount, state.selectedLPToken.decimals);\n                const tx = await deposit(state.selectedLPToken.id, amount);\n                await tx.wait();\n                state.setSelectedLPToken(undefined);\n                await state.updateLastTimeRefreshed();\n            } finally {\n                setDepositing(false);\n            }\n        }\n    }, [state.selectedLPToken, state.amount, signer]);\n\n    const onWithdraw = useCallback(async () => {\n        if (state.selectedLPToken?.id && state.amount && signer) {\n            setWithdrawing(true);\n            try {\n                const amount = parseBalance(state.amount, state.selectedLPToken.decimals);\n                const tx = await withdraw(state.selectedLPToken.id, amount);\n                await tx.wait();\n                state.setSelectedLPToken(undefined);\n                await state.updateLastTimeRefreshed();\n            } finally {\n                setWithdrawing(false);\n            }\n        }\n    }, [state.selectedLPToken, state.amount, signer]);\n\n    return {\n        ...state,\n        loading: state.loading || loading,\n        filteredBy,\n        setFilteredBy,\n        action,\n        setAction,\n        expectedSushiRewardPerBlock,\n        onDeposit,\n        depositing,\n        onWithdraw,\n        withdrawing\n    };\n};\n\nexport default useFarmingState;\n","import React, { useCallback, useContext } from \"react\";\nimport { Image, View } from \"react-native\";\n\nimport * as Linking from \"expo-linking\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport { GlobalContext } from \"../context/GlobalContext\";\nimport Button from \"./Button\";\n\nconst ConnectWallet = () => {\n    const { darkMode } = useContext(GlobalContext);\n    const onPress = useCallback(async () => {\n        if (window.ethereum) {\n            await window.ethereum.enable();\n        } else {\n            await Linking.openURL(\"https://metamask.io/\");\n        }\n    }, [window.ethereum]);\n    const title = window.ethereum ? \"Connect\" : \"Install MetaMask\";\n    return (\n        <View style={{ flex: 1, alignItems: \"center\", justifyContent: \"center\" }}>\n            <Image\n                source={darkMode ? require(\"../../assets/metamask-dark.png\") : require(\"../../assets/metamask.png\")}\n                style={{ width: 223, height: 183, marginBottom: Spacing.huge }}\n            />\n            <Button type={\"outline\"} size={\"large\"} onPress={onPress} title={title} containerStyle={{ width: 440 }} />\n        </View>\n    );\n};\nexport default ConnectWallet;\n","import React, { useCallback } from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport FlexView from \"./FlexView\";\nimport Text from \"./Text\";\n\nconst Footer = () => (\n    <View\n        // @ts-ignore\n        style={{\n            position: \"fixed\",\n            bottom: 0,\n            width: \"100%\",\n            margin: Spacing.content\n        }}>\n        <Text note={true} style={{ marginLeft: 12 }}>\n            Built by <Link to={\"https://levx.io\"} text={\"Team LevX\"} />\n        </Text>\n        <FlexView>\n            <Link to={\"https://github.com/lev-x\"} text={\"GitHub\"} />\n            <Link to={\"https://twitter.com/LevxApp\"} text={\"Twitter\"} />\n            <Link to={\"https://discord.gg/Mcdm7v\"} text={\"Discord\"} />\n        </FlexView>\n    </View>\n);\n\nconst Link = ({ to, text }) => {\n    const onPress = useCallback(() => {\n        window.open(to, \"_blank\");\n    }, []);\n    return (\n        <Text note={true} style={{ textDecorationLine: \"underline\", marginRight: 8 }} onPress={onPress}>\n            {text}\n        </Text>\n    );\n};\n\nexport default Footer;\n","import React, { useContext } from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport useColors from \"../hooks/useColors\";\nimport useStyles from \"../hooks/useStyles\";\nimport FlexView from \"./FlexView\";\nimport Text from \"./Text\";\n\nconst Status = () => {\n    const { textMedium, textLight, green } = useColors();\n    const { shadow } = useStyles();\n    const { chainId } = useContext(EthersContext);\n    const connected = chainId === 1;\n    const title = connected ? \"Connected\" : \"Not connected\";\n    const color = connected ? green : textLight;\n    return (\n        <FlexView\n            // @ts-ignore\n            style={{\n                position: \"fixed\",\n                right: Spacing.content,\n                bottom: Spacing.normal,\n                height: 40,\n                alignItems: \"center\",\n                justifyContent: \"center\",\n                paddingHorizontal: Spacing.small,\n                borderRadius: 16,\n                ...shadow\n            }}>\n            <View style={{ backgroundColor: color, width: 6, height: 6, borderRadius: 3, marginRight: 12 }} />\n            <Text style={{ fontSize: 16, color: textMedium, marginRight: 2 }}>{title}</Text>\n            {/*<Icon type={\"material-community\"} name={\"chevron-down\"} color={textLight} size={22} />*/}\n        </FlexView>\n    );\n};\n\nexport default Status;\n","import React, { useContext } from \"react\";\nimport { View } from \"react-native\";\n\nimport ConnectToWallet from \"../components/ConnectToWallet\";\nimport Footer from \"../components/Footer\";\nimport Status from \"../components/Status\";\nimport Text from \"../components/Text\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport useColors from \"../hooks/useColors\";\n\nconst Screen = props => {\n    const { address, chainId } = useContext(EthersContext);\n    const { background } = useColors();\n    if (!address) {\n        return <ConnectToWallet />;\n    }\n    if (chainId !== 1) {\n        return (\n            <View style={{ flex: 1, alignItems: \"center\", justifyContent: \"center\" }}>\n                <Text light={true} style={{ textAlign: \"center\" }}>\n                    {\"Please switch network to\\n'Ethereum Mainnet'\"}\n                </Text>\n            </View>\n        );\n    }\n    return (\n        <View style={{ flex: 1, backgroundColor: background }}>\n            <View {...props} />\n            <Status />\n            <Footer />\n        </View>\n    );\n};\n\nexport default Screen;\n","import React, { FC, useCallback, useState } from \"react\";\nimport { Image, TouchableHighlight, View } from \"react-native\";\nimport { Icon } from \"react-native-elements\";\nimport { Hoverable } from \"react-native-web-hover\";\nimport { Link } from \"react-router-dom\";\n\nimport { ethers } from \"ethers\";\nimport useAsyncEffect from \"use-async-effect\";\nimport ApproveButton from \"../components/ApproveButton\";\nimport Button from \"../components/Button\";\nimport ButtonGroup from \"../components/ButtonGroup\";\nimport CloseIcon from \"../components/CloseIcon\";\nimport Column from \"../components/Column\";\nimport Container from \"../components/Container\";\nimport Content from \"../components/Content\";\nimport ErrorMessage from \"../components/ErrorMessage\";\nimport FetchingButton from \"../components/FetchingButton\";\nimport FlexView from \"../components/FlexView\";\nimport InsufficientBalanceButton from \"../components/InsufficientBalanceButton\";\nimport LPTokenSelect, { LPTokenItemProps } from \"../components/LPTokenSelect\";\nimport Meta from \"../components/Meta\";\nimport Notice from \"../components/Notice\";\nimport SelectIcon from \"../components/SelectIcon\";\nimport Subtitle from \"../components/Subtitle\";\nimport Text from \"../components/Text\";\nimport TokenInput from \"../components/TokenInput\";\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport useFarmingState, { Action, FarmingState } from \"../hooks/useFarmingState\";\nimport { MASTER_CHEF } from \"../hooks/useSDK\";\nimport LPToken from \"../types/LPToken\";\nimport MetamaskError from \"../types/MetamaskError\";\nimport { formatBalance, isEmptyValue, parseBalance } from \"../utils\";\nimport Screen from \"./Screen\";\n\nconst Actions = [\"deposit\", \"withdraw\"];\n\nconst FarmingScreen = () => {\n    return (\n        <Screen>\n            <Container>\n                <Content>\n                    <View style={{ alignItems: \"center\", marginBottom: Spacing.large }}>\n                        <Farming />\n                    </View>\n                </Content>\n            </Container>\n        </Screen>\n    );\n};\n\nconst Farming = () => {\n    const state = useFarmingState();\n    const emptyText =\n        state.filteredBy === \"amountDeposited\"\n            ? \"You don't have any pool with deposit.\"\n            : state.filteredBy === \"balance\"\n            ? \"You don't have any pool with balance.\"\n            : \"Temporarily unable to load pools.\";\n    return (\n        <>\n            <Column>\n                <Text h4={true} style={{ textAlign: \"center\" }}>\n                    🌾 Farming\n                </Text>\n            </Column>\n            <LPTokenSelect\n                state={state}\n                title={\"1. Select a pool for yield farming:\"}\n                emptyText={emptyText}\n                showFilter={!state.selectedLPToken}\n                filter={state.filteredBy}\n                onFilterChanged={state.setFilteredBy}\n                Item={TokenItem}\n            />\n            <ActionSelect state={state} />\n            <Deposit state={state} />\n            <Withdraw state={state} />\n        </>\n    );\n};\n\n// tslint:disable-next-line:max-func-body-length\nconst TokenItem: FC<LPTokenItemProps> = props => {\n    const { background, backgroundHovered, textMedium } = useColors();\n    const amount =\n        (props.filter === \"balance\"\n            ? props.token.balance\n            : props.filter === \"amountDeposited\"\n            ? props.token.amountDeposited\n            : props.token.totalDeposited) || \"0\";\n    const onPress = useCallback(() => {\n        props.onSelectToken(props.token);\n    }, [props.onSelectToken, props.token]);\n    const field =\n        props.filter === \"amountDeposited\" ? \"My Deposit\" : props.filter === \"balance\" ? \"My Balance\" : \"Total Deposit\";\n    return (\n        <Hoverable>\n            {({ hovered }) => (\n                <TouchableHighlight onPress={onPress}>\n                    <View style={{ backgroundColor: hovered ? backgroundHovered : background }}>\n                        <FlexView style={{ alignItems: \"center\", margin: Spacing.small }}>\n                            <View>\n                                <LogoSymbol token={props.token.tokenA} />\n                                <LogoSymbol token={props.token.tokenB} />\n                            </View>\n                            <View style={{ flex: 1 }}>\n                                <Text style={{ textAlign: \"right\", fontSize: 15 }}>{field}</Text>\n                                <Text light={true} style={{ textAlign: \"right\", fontSize: 22, color: textMedium }}>\n                                    {formatBalance(amount, props.token.decimals, 8)}\n                                </Text>\n                            </View>\n                            {props.selected ? <CloseIcon /> : <SelectIcon />}\n                        </FlexView>\n                    </View>\n                </TouchableHighlight>\n            )}\n        </Hoverable>\n    );\n};\n\nconst LogoSymbol = ({ token }) => {\n    const { textMedium } = useColors();\n    return (\n        <FlexView style={{ alignItems: \"center\", marginBottom: Spacing.tiny }}>\n            <Image\n                source={{ uri: token.logoURI }}\n                style={{ width: 24, height: 24, backgroundColor: \"white\", borderRadius: 12 }}\n            />\n            <Text light={true} style={{ fontSize: 22, color: textMedium, marginLeft: Spacing.small }}>\n                {token.symbol}\n            </Text>\n        </FlexView>\n    );\n};\n\nconst ActionSelect = ({ state }: { state: FarmingState }) => {\n    if (!state.selectedLPToken) {\n        return <Column noTopMargin={true} />;\n    }\n    const index = state.action ? Actions.indexOf(state.action) : null;\n    const onPress = useCallback((i: number) => {\n        state.setAction(Actions[i] as Action);\n    }, []);\n    const balance = formatBalance(state.selectedLPToken!.balance, state.selectedLPToken!.decimals);\n    const deposit = formatBalance(state.selectedLPToken.amountDeposited || \"0\", state.selectedLPToken!.decimals);\n    return (\n        <Column>\n            <Subtitle text={\"2. Do you want to DEPOSIT or WITHDRAW?\"} />\n            <View style={{ marginHorizontal: Spacing.small, marginBottom: Spacing.normal }}>\n                <Meta label={\"My Balance\"} text={balance} />\n                <Meta label={\"My Deposit\"} text={deposit} />\n            </View>\n            <ButtonGroup\n                selectedIndex={index}\n                onPress={onPress}\n                buttons={[{ element: DepositText }, { element: WithdrawText }]}\n                containerStyle={{ marginHorizontal: Spacing.small }}\n            />\n        </Column>\n    );\n};\n\nconst DepositText = () => {\n    return (\n        <FlexView style={{ alignItems: \"center\" }}>\n            <Text style={{ color: \"black\" }}>Deposit</Text>\n            <Icon\n                type={\"material-community\"}\n                name={\"chevron-right\"}\n                color={\"black\"}\n                style={{ marginLeft: Spacing.tiny, marginTop: 2 }}\n            />\n        </FlexView>\n    );\n};\n\nconst WithdrawText = () => {\n    return (\n        <FlexView style={{ alignItems: \"center\" }}>\n            <Text style={{ color: \"black\" }}>Withdraw</Text>\n            <Icon\n                type={\"material-community\"}\n                name={\"chevron-right\"}\n                color={\"black\"}\n                style={{ marginLeft: Spacing.tiny, marginTop: 2 }}\n            />\n        </FlexView>\n    );\n};\n\nconst Deposit = ({ state }: { state: FarmingState }) => {\n    if (!state.selectedLPToken || state.action !== \"deposit\") {\n        return <Column noTopMargin={true} />;\n    }\n    return (\n        <Column>\n            <AddLiquidityNotice state={state} />\n            <TokenInput\n                title={\"3. Amount of tokens to DEPOSIT:\"}\n                token={state.selectedLPToken}\n                hidden={state.selectedLPToken.balance.isZero()}\n                amount={state.amount}\n                onAmountChanged={state.setAmount}\n            />\n            <DepositInfo state={state} />\n            <DepositControls state={state} />\n        </Column>\n    );\n};\n\nconst AddLiquidityNotice = ({ state }: { state: FarmingState }) => {\n    const { green } = useColors();\n    if (!state.selectedLPToken!.balance.isZero()) {\n        return <Column noTopMargin={true} />;\n    }\n    return (\n        <>\n            <View style={{ marginHorizontal: Spacing.small }}>\n                <Notice\n                    color={green}\n                    text={\n                        \"You need some \" +\n                        state.selectedLPToken!.symbol +\n                        \" token to start farming. Add liquidity to get the LP token.\"\n                    }\n                />\n            </View>\n            <AddLiquidityButton />\n        </>\n    );\n};\n\nconst DepositInfo = ({ state }: { state: FarmingState }) => {\n    if (state.selectedLPToken!.balance.isZero()) {\n        return <Column noTopMargin={true} />;\n    }\n    const balance = formatBalance(state.selectedLPToken!.balance, state.selectedLPToken!.decimals);\n    const sushiReward =\n        state.expectedSushiRewardPerBlock && state.amount\n            ? formatBalance(\n                  state.expectedSushiRewardPerBlock\n                      .mul(parseBalance(state.amount, 18))\n                      .div(ethers.BigNumber.from(10).pow(18)),\n                  18\n              )\n            : null;\n    return (\n        <Column noTopMargin={true}>\n            <Meta label={\"My Balance\"} text={balance} />\n            {!isEmptyValue(state.amount) && <Meta label={\"SUSHI Reward per Block\"} text={sushiReward || \"…\"} />}\n        </Column>\n    );\n};\n\nconst DepositControls = ({ state }: { state: FarmingState }) => {\n    const [error, setError] = useState<MetamaskError>({});\n    useAsyncEffect(() => setError({}), [state.selectedLPToken]);\n    if (state.selectedLPToken!.balance.isZero()) {\n        return <Column noTopMargin={true} />;\n    }\n    const approveRequired = !state.selectedLPTokenAllowed;\n    const disabled = approveRequired || isEmptyValue(state.amount);\n    return (\n        <Column>\n            {parseBalance(state.amount, state.selectedLPToken!.decimals).gt(state.selectedLPToken!.balance) ? (\n                <InsufficientBalanceButton symbol={state.selectedLPToken!.symbol} />\n            ) : state.loading ? (\n                <FetchingButton />\n            ) : (\n                <>\n                    <ApproveButton\n                        token={state.selectedLPToken!}\n                        spender={MASTER_CHEF}\n                        onSuccess={() => state.setSelectedLPTokenAllowed(true)}\n                        onError={setError}\n                        hidden={isEmptyValue(state.amount) || !approveRequired}\n                    />\n                    <DepositButton state={state} onError={setError} disabled={disabled} />\n                </>\n            )}\n            {error.message && error.code !== 4001 && <ErrorMessage error={error} />}\n        </Column>\n    );\n};\n\nconst AddLiquidityButton = () => {\n    const { green } = useColors();\n    return (\n        <Link to={\"/liquidity\"} style={{ textDecoration: \"none\" }}>\n            <Button color={green} title={\"Add Liquidity\"} containerStyle={{ marginTop: Spacing.normal }} />\n        </Link>\n    );\n};\n\nconst DepositButton = ({\n    state,\n    onError,\n    disabled\n}: {\n    state: FarmingState;\n    onError: (e) => void;\n    disabled: boolean;\n}) => {\n    const onPress = useCallback(() => {\n        onError({});\n        state.onDeposit().catch(onError);\n    }, [state.onDeposit, onError]);\n    return <Button size={\"large\"} title={\"Deposit\"} disabled={disabled} loading={state.depositing} onPress={onPress} />;\n};\n\nconst Withdraw = ({ state }: { state: FarmingState }) => {\n    if (!state.selectedLPToken || state.action !== \"withdraw\") {\n        return <Column noTopMargin={true} />;\n    }\n    const token: LPToken = {\n        ...state.selectedLPToken,\n        balance: state.selectedLPToken.amountDeposited || ethers.constants.Zero\n    };\n    return (\n        <Column>\n            <NoLPTokenNotice state={state} />\n            <TokenInput\n                title={\"3. Amount of tokens to WITHDRAW:\"}\n                token={token}\n                hidden={state.loading || state.selectedLPToken.amountDeposited?.isZero() || false}\n                amount={state.amount}\n                onAmountChanged={state.setAmount}\n            />\n            <WithdrawInfo state={state} />\n            <WithdrawControls state={state} />\n        </Column>\n    );\n};\n\nconst NoLPTokenNotice = ({ state }: { state: FarmingState }) => {\n    if (state.loading || !state.selectedLPToken || !state.selectedLPToken.amountDeposited?.isZero()) {\n        return <Column noTopMargin={true} />;\n    }\n    return (\n        <Column noTopMargin={true}>\n            <View style={{ marginHorizontal: Spacing.small }}>\n                <Notice\n                    text={\"You don't have any \" + state.selectedLPToken!.symbol + \" token deposited. Deposit it first.\"}\n                />\n            </View>\n        </Column>\n    );\n};\n\nconst WithdrawInfo = ({ state }: { state: FarmingState }) => {\n    if (\n        state.loading ||\n        !state.selectedLPToken ||\n        !state.selectedLPToken.amountDeposited ||\n        state.selectedLPToken.amountDeposited?.isZero() ||\n        !state.selectedLPToken.pendingSushi\n    ) {\n        return <Column noTopMargin={true} />;\n    }\n    const deposit = formatBalance(state.selectedLPToken.amountDeposited, state.selectedLPToken!.decimals);\n    const pendingSushi = formatBalance(\n        state.selectedLPToken.pendingSushi || ethers.constants.Zero,\n        state.selectedLPToken!.decimals\n    );\n    return (\n        <Column noTopMargin={true}>\n            <Meta label={\"My Deposit\"} text={deposit} />\n            <Meta label={\"Pending Sushi Reward\"} text={pendingSushi} />\n            <View style={{ marginTop: Spacing.normal, marginHorizontal: Spacing.small }}>\n                <Notice text={\"All pending sushi reward will be transferred to you if you withdraw.\"} />\n            </View>\n        </Column>\n    );\n};\n\nconst WithdrawControls = ({ state }: { state: FarmingState }) => {\n    const [error, setError] = useState<MetamaskError>({});\n    useAsyncEffect(() => setError({}), [state.selectedLPToken]);\n    if (state.loading) {\n        return (\n            <Column>\n                <FetchingButton />\n            </Column>\n        );\n    }\n    if (\n        !state.selectedLPToken ||\n        !state.selectedLPToken.amountDeposited ||\n        state.selectedLPToken.amountDeposited.isZero()\n    ) {\n        return <Column noTopMargin={true} />;\n    }\n    return (\n        <Column>\n            {parseBalance(state.amount, state.selectedLPToken!.decimals).gt(state.selectedLPToken.amountDeposited) ? (\n                <InsufficientBalanceButton symbol={state.selectedLPToken!.symbol} />\n            ) : (\n                <WithdrawButton state={state} onError={setError} disabled={isEmptyValue(state.amount)} />\n            )}\n            {error.message && error.code !== 4001 && <ErrorMessage error={error} />}\n        </Column>\n    );\n};\n\nconst WithdrawButton = ({\n    state,\n    onError,\n    disabled\n}: {\n    state: FarmingState;\n    onError: (e) => void;\n    disabled: boolean;\n}) => {\n    const onPress = useCallback(() => {\n        onError({});\n        state.onWithdraw().catch(onError);\n    }, [state.onWithdraw, onError]);\n    return (\n        <Button size={\"large\"} title={\"Withdraw\"} disabled={disabled} loading={state.withdrawing} onPress={onPress} />\n    );\n};\n\nexport default FarmingScreen;\n","import React, { FC, useCallback, useContext, useMemo } from \"react\";\nimport { ActivityIndicator, FlatList, Image, TouchableHighlight, View } from \"react-native\";\nimport { Hoverable } from \"react-native-web-hover\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport { GlobalContext } from \"../context/GlobalContext\";\nimport useColors from \"../hooks/useColors\";\nimport Token from \"../types/Token\";\nimport { formatBalance } from \"../utils\";\nimport Border from \"./Border\";\nimport CloseIcon from \"./CloseIcon\";\nimport Column from \"./Column\";\nimport FlexView from \"./FlexView\";\nimport SelectIcon from \"./SelectIcon\";\nimport Subtitle from \"./Subtitle\";\nimport Text from \"./Text\";\n\ninterface TokenSelectProps {\n    title: string;\n    hidden: boolean;\n    symbol: string;\n    onChangeSymbol: (symbol: string) => void;\n    filterTokens: (token: Token) => boolean;\n}\n\nconst TokenSelect: FC<TokenSelectProps> = props => {\n    const { tokens } = useContext(GlobalContext);\n    const token = tokens.find(t => t.symbol === props.symbol);\n    const onSelectToken = useCallback(\n        t => {\n            props.onChangeSymbol(t.symbol);\n        },\n        [props.onChangeSymbol]\n    );\n    const onUnselectToken = useCallback(() => {\n        props.onChangeSymbol(\"\");\n    }, [props.onChangeSymbol]);\n    if (/*!props.from && props.oppositeSymbol === \"\"*/ props.hidden) {\n        return <Column noTopMargin={true} />;\n    }\n    return (\n        <Column>\n            <Subtitle text={props.title} />\n            {token ? (\n                <TokenItem token={token} selected={true} onSelectToken={onUnselectToken} />\n            ) : (\n                <TokenList filterTokens={props.filterTokens} onSelectToken={onSelectToken} />\n            )}\n        </Column>\n    );\n};\n\n// tslint:disable-next-line:max-func-body-length\nconst TokenList = (props: { filterTokens: (token: Token) => boolean; onSelectToken: (token: Token) => void }) => {\n    const { loadingTokens } = useContext(GlobalContext);\n    const { tokens } = useContext(GlobalContext);\n    const renderItem = useCallback(\n        ({ item }) => {\n            return <TokenItem key={item.address} token={item} selected={false} onSelectToken={props.onSelectToken} />;\n        },\n        [props.onSelectToken]\n    );\n    const data = useMemo(\n        () =>\n            tokens\n                .filter(props.filterTokens)\n                .sort(\n                    (t1, t2) =>\n                        (t2.balance.isZero() ? 0 : 10000000000) -\n                        (t1.balance.isZero() ? 0 : 10000000000) +\n                        t1.symbol.localeCompare(t2.symbol)\n                ),\n        [tokens]\n    );\n    return loadingTokens ? (\n        <ActivityIndicator size={\"large\"} style={{ marginTop: Spacing.large }} />\n    ) : data.length === 0 ? (\n        <EmptyList />\n    ) : (\n        <FlatList\n            keyExtractor={item => JSON.stringify(item)}\n            data={data}\n            renderItem={renderItem}\n            ItemSeparatorComponent={Border}\n        />\n    );\n};\n\nconst EmptyList = () => {\n    return (\n        <View style={{ margin: Spacing.normal }}>\n            <Text light={true} style={{ textAlign: \"center\", width: \"100%\" }}>\n                {\"You don't have any token with balance.\\nTransfer tokens to your address first.\"}\n            </Text>\n        </View>\n    );\n};\n\nconst TokenItem = (props: { token: Token; selected: boolean; onSelectToken: (token: Token) => void }) => {\n    const { background, backgroundHovered, textMedium } = useColors();\n    const onPress = useCallback(() => {\n        props.onSelectToken(props.token);\n    }, [props.onSelectToken, props.token]);\n    return (\n        <Hoverable>\n            {({ hovered }) => (\n                <TouchableHighlight onPress={onPress}>\n                    <View style={{ backgroundColor: hovered ? backgroundHovered : background }}>\n                        <FlexView style={{ alignItems: \"center\", margin: Spacing.small }}>\n                            <Image\n                                source={{ uri: props.token.logoURI }}\n                                style={{ width: 24, height: 24, backgroundColor: \"white\", borderRadius: 12 }}\n                            />\n                            <Text light={true} style={{ marginLeft: Spacing.small, fontSize: 22, color: textMedium }}>\n                                {props.token.symbol}\n                            </Text>\n                            <Text light={true} style={{ flex: 1, textAlign: \"right\", fontSize: 22, color: textMedium }}>\n                                {formatBalance(props.token.balance, props.token.decimals, 8)}\n                            </Text>\n                            {props.selected ? <CloseIcon /> : <SelectIcon />}\n                        </FlexView>\n                    </View>\n                </TouchableHighlight>\n            )}\n        </Hoverable>\n    );\n};\n\nexport default TokenSelect;\n","import React from \"react\";\n\nimport { TokenPairState } from \"../hooks/useTokenPairState\";\nimport Button from \"./Button\";\n\nconst UnsupportedButton = ({ state }: { state: TokenPairState }) => {\n    return <Button size={\"large\"} title={state.fromSymbol + \"-\" + state.toSymbol + \" Not Supported\"} disabled={true} />;\n};\n\nexport default UnsupportedButton;\n","import React, { useCallback, useState } from \"react\";\n\nimport { ethers } from \"ethers\";\nimport useAsyncEffect from \"use-async-effect\";\nimport { AddLiquidityState } from \"../hooks/useAddLiquidityState\";\nimport { ROUTER } from \"../hooks/useSDK\";\nimport MetamaskError from \"../types/MetamaskError\";\nimport { convertAmount, convertToken, formatBalance, isEmptyValue, parseBalance } from \"../utils\";\nimport ApproveButton from \"./ApproveButton\";\nimport Button from \"./Button\";\nimport Column from \"./Column\";\nimport ErrorMessage from \"./ErrorMessage\";\nimport FetchingButton from \"./FetchingButton\";\nimport InsufficientBalanceButton from \"./InsufficientBalanceButton\";\nimport Meta from \"./Meta\";\nimport Notice from \"./Notice\";\nimport Text from \"./Text\";\nimport TokenInput from \"./TokenInput\";\nimport TokenSelect from \"./TokenSelect\";\nimport UnsupportedButton from \"./UnsupportedButton\";\n\nconst AddLiquidity = ({ state }: { state: AddLiquidityState }) => (\n    <>\n        <Column>\n            <Text h4={true} style={{ textAlign: \"center\" }}>\n                🔥 Add Liquidity\n            </Text>\n        </Column>\n        <TokenSelect\n            title={\"1. Select the 1st token you want to ADD:\"}\n            hidden={false}\n            symbol={state.fromSymbol}\n            onChangeSymbol={state.setFromSymbol}\n            filterTokens={token => token.balance && !token.balance.isZero()}\n        />\n        <TokenSelect\n            title={\"2. Select the 2nd token you want to ADD:\"}\n            hidden={state.fromSymbol === \"\"}\n            symbol={state.toSymbol}\n            onChangeSymbol={state.setToSymbol}\n            filterTokens={token => token.symbol !== state.fromSymbol && token.balance && !token.balance.isZero()}\n        />\n        <FromTokenInput state={state} />\n        <ToTokenInput state={state} />\n        <PriceInfo state={state} />\n        <Controls state={state} />\n    </>\n);\n\nconst FromTokenInput = ({ state }: { state: AddLiquidityState }) => {\n    const onAmountChanged = useCallback(\n        (newAmount: string) => {\n            state.setFromAmount(newAmount);\n            if (state.pair && state.fromToken) {\n                const fromPrice = state.pair.priceOf(convertToken(state.fromToken));\n                state.setToAmount(fromPrice.quote(convertAmount(state.fromToken, newAmount)).toExact());\n            }\n        },\n        [state.pair, state.fromToken]\n    );\n    return (\n        <TokenInput\n            title={\"3. How many \" + state.fromSymbol + \"-\" + state.toSymbol + \" do you want to supply?\"}\n            token={state.fromToken}\n            hidden={!state.fromToken || !state.toToken}\n            amount={state.fromAmount}\n            onAmountChanged={onAmountChanged}\n        />\n    );\n};\n\nconst ToTokenInput = ({ state }: { state: AddLiquidityState }) => {\n    const onAmountChanged = useCallback(\n        (newAmount: string) => {\n            state.setToAmount(newAmount);\n            if (state.pair && state.toToken) {\n                const toPrice = state.pair.priceOf(convertToken(state.toToken));\n                state.setFromAmount(toPrice.quote(convertAmount(state.toToken, newAmount)).toExact());\n            }\n        },\n        [state.pair, state.toToken]\n    );\n    return (\n        <TokenInput\n            token={state.toToken}\n            hidden={!state.fromToken || !state.toToken}\n            amount={state.toAmount}\n            onAmountChanged={onAmountChanged}\n        />\n    );\n};\n\nconst PriceInfo = ({ state }: { state: AddLiquidityState }) => {\n    if (!isEmptyValue(state.fromAmount) && !state.loading && !state.pair) {\n        const initialPrice = formatBalance(\n            parseBalance(state.toAmount, state.toToken?.decimals)\n                .mul(ethers.BigNumber.from(10).pow(8))\n                .div(parseBalance(state.fromAmount, state.fromToken?.decimals)),\n            8\n        );\n        return (\n            <Column noTopMargin={true}>\n                <Notice\n                    text={\n                        \"You are the first liquidity provider.\\n\" +\n                        \"The ratio of tokens you add will set the price of this pool.\"\n                    }\n                />\n                {!!state.fromAmount && !!state.toAmount && (\n                    <Price price={initialPrice} fromSymbol={state.fromSymbol} toSymbol={state.toSymbol} />\n                )}\n            </Column>\n        );\n    }\n    if (!state.fromToken || !state.toToken) {\n        return <Column noTopMargin={true} />;\n    }\n    const price = state.pair ? state.pair.priceOf(convertToken(state.fromToken)).toSignificant(8) : \"…\";\n    return (\n        <Column noTopMargin={true}>\n            <Price price={price} fromSymbol={state.fromSymbol} toSymbol={state.toSymbol} />\n        </Column>\n    );\n};\n\nconst Price = ({ price, fromSymbol, toSymbol }) => (\n    <Meta label={\"Price\"} text={price + \" \" + toSymbol + \" = 1 \" + fromSymbol} />\n);\n\n// tslint:disable-next-line:max-func-body-length\nconst Controls = ({ state }: { state: AddLiquidityState }) => {\n    const [error, setError] = useState<MetamaskError>({});\n    useAsyncEffect(() => setError({}), [state.fromSymbol, state.toSymbol, state.fromAmount]);\n    if (!state.fromToken || !state.toToken) {\n        return <Column noTopMargin={true} />;\n    }\n    const insufficientFromToken = parseBalance(state.fromAmount, state.fromToken.decimals).gt(state.fromToken.balance);\n    const insufficientToToken = parseBalance(state.toAmount, state.toToken.decimals).gt(state.toToken.balance);\n    const fromApproveRequired = state.fromSymbol !== \"ETH\" && !state.fromTokenAllowed;\n    const toApproveRequired = state.toSymbol !== \"ETH\" && !state.toTokenAllowed;\n    const disabled =\n        fromApproveRequired || toApproveRequired || isEmptyValue(state.fromAmount) || isEmptyValue(state.toAmount);\n    return (\n        <Column>\n            {insufficientFromToken ? (\n                <InsufficientBalanceButton symbol={state.fromSymbol} />\n            ) : insufficientToToken ? (\n                <InsufficientBalanceButton symbol={state.toSymbol} />\n            ) : state.loading || !state.pair ? (\n                <FetchingButton />\n            ) : (state.fromSymbol === \"ETH\" && state.toSymbol === \"WETH\") ||\n              (state.fromSymbol === \"WETH\" && state.toSymbol === \"ETH\") ? (\n                <UnsupportedButton state={state} />\n            ) : (\n                <>\n                    <ApproveButton\n                        token={state.fromToken}\n                        spender={ROUTER}\n                        onSuccess={() => state.setFromTokenAllowed(true)}\n                        onError={setError}\n                        hidden={!fromApproveRequired}\n                    />\n                    <ApproveButton\n                        token={state.toToken}\n                        spender={ROUTER}\n                        onSuccess={() => state.setToTokenAllowed(true)}\n                        onError={setError}\n                        hidden={!toApproveRequired}\n                    />\n                    <SupplyButton state={state} onError={setError} disabled={disabled} />\n                </>\n            )}\n            {error.message && error.code !== 4001 && <ErrorMessage error={error} />}\n        </Column>\n    );\n};\n\nconst SupplyButton = ({\n    state,\n    onError,\n    disabled\n}: {\n    state: AddLiquidityState;\n    onError: (e) => void;\n    disabled: boolean;\n}) => {\n    const onPress = useCallback(() => {\n        onError({});\n        state.onAdd().catch(onError);\n    }, [state.onAdd, onError]);\n    return (\n        <Button\n            size={\"large\"}\n            title={\"Supply \" + state.fromSymbol + \"-\" + state.toSymbol}\n            disabled={disabled}\n            loading={state.adding}\n            onPress={onPress}\n        />\n    );\n};\n\nexport default AddLiquidity;\n","import React, { FC, useCallback, useState } from \"react\";\nimport { Image, TouchableHighlight, View } from \"react-native\";\nimport { Icon } from \"react-native-elements\";\nimport { Hoverable } from \"react-native-web-hover\";\n\nimport useAsyncEffect from \"use-async-effect\";\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport { RemoveLiquidityState } from \"../hooks/useRemoveLiquidityState\";\nimport { ROUTER } from \"../hooks/useSDK\";\nimport MetamaskError from \"../types/MetamaskError\";\nimport { formatBalance, isEmptyValue, parseBalance } from \"../utils\";\nimport ApproveButton from \"./ApproveButton\";\nimport Button from \"./Button\";\nimport CloseIcon from \"./CloseIcon\";\nimport Column from \"./Column\";\nimport ErrorMessage from \"./ErrorMessage\";\nimport FetchingButton from \"./FetchingButton\";\nimport FlexView from \"./FlexView\";\nimport InsufficientBalanceButton from \"./InsufficientBalanceButton\";\nimport LPTokenSelect, { LPTokenItemProps } from \"./LPTokenSelect\";\nimport SelectIcon from \"./SelectIcon\";\nimport Text from \"./Text\";\nimport TokenInput from \"./TokenInput\";\n\nconst RemoveLiquidity = ({ state }: { state: RemoveLiquidityState }) => (\n    <>\n        <Column>\n            <Text h4={true} style={{ textAlign: \"center\" }}>\n                🎉 Remove Liquidity\n            </Text>\n        </Column>\n        <LPTokenSelect\n            state={state}\n            title={\"1. Select the pool to REMOVE liquidity from:\"}\n            emptyText={\"You don't have any liquidity.\"}\n            Item={TokenItem}\n        />\n        <TokenInput\n            title={\"2. How many tokens do you want to REMOVE?\"}\n            token={state.selectedLPToken}\n            hidden={!state.selectedLPToken}\n            amount={state.amount}\n            onAmountChanged={state.setAmount}\n        />\n        <AmountInfo state={state} />\n        <Controls state={state} />\n    </>\n);\n\nconst TokenItem: FC<LPTokenItemProps> = props => {\n    const { background, backgroundHovered, textMedium } = useColors();\n    const balance = formatBalance(props.token.balance, props.token.decimals, 18);\n    const onPress = useCallback(() => {\n        props.onSelectToken(props.token);\n    }, [props.onSelectToken, props.token]);\n    return (\n        <Hoverable>\n            {({ hovered }) => (\n                <TouchableHighlight onPress={onPress}>\n                    <View style={{ backgroundColor: hovered ? backgroundHovered : background }}>\n                        <FlexView style={{ alignItems: \"center\", margin: Spacing.small }}>\n                            <View>\n                                <LogoSymbol token={props.token.tokenA} />\n                                <LogoSymbol token={props.token.tokenB} />\n                            </View>\n                            <View style={{ flex: 1 }}>\n                                <Text note={true} style={{ textAlign: \"right\" }}>\n                                    My Balance\n                                </Text>\n                                <Text light={true} style={{ textAlign: \"right\", fontSize: 22, color: textMedium }}>\n                                    {balance}\n                                </Text>\n                            </View>\n                            {props.selected ? <CloseIcon /> : <SelectIcon />}\n                        </FlexView>\n                    </View>\n                </TouchableHighlight>\n            )}\n        </Hoverable>\n    );\n};\n\nconst LogoSymbol = ({ token }) => {\n    const { textMedium } = useColors();\n    return (\n        <FlexView style={{ alignItems: \"center\", marginBottom: Spacing.tiny }}>\n            <Image\n                source={{ uri: token.logoURI }}\n                style={{ width: 24, height: 24, backgroundColor: \"white\", borderRadius: 12 }}\n            />\n            <Text light={true} style={{ fontSize: 22, color: textMedium, marginLeft: Spacing.small }}>\n                {token.symbol}\n            </Text>\n        </FlexView>\n    );\n};\n\nconst AmountInfo = ({ state }: { state: RemoveLiquidityState }) => {\n    if (!state.selectedLPToken || isEmptyValue(state.fromAmount) || isEmptyValue(state.toAmount)) {\n        return <Column noTopMargin={true} />;\n    }\n    return (\n        <Column noTopMargin={true}>\n            <ArrowDown />\n            <Amount amount={state.fromAmount} token={state.fromToken} />\n            <Amount amount={state.toAmount} token={state.toToken} />\n        </Column>\n    );\n};\n\nconst ArrowDown = () => {\n    const { textLight } = useColors();\n    return <Icon type={\"material-community\"} name={\"arrow-down\"} color={textLight} style={{ margin: Spacing.small }} />;\n};\n\nconst Amount = ({ amount, token }) => {\n    const symbol = token.symbol === \"WETH\" ? \"ETH\" : token.symbol;\n    return (\n        <Text style={{ fontSize: 22, textAlign: \"center\" }}>\n            {amount} {symbol}\n        </Text>\n    );\n};\n\n// tslint:disable-next-line:max-func-body-length\nconst Controls = ({ state }: { state: RemoveLiquidityState }) => {\n    const [error, setError] = useState<MetamaskError>({});\n    useAsyncEffect(() => setError({}), [state.fromSymbol, state.toSymbol, state.fromAmount]);\n    if (!state.selectedLPToken) {\n        return <Column noTopMargin={true} />;\n    }\n    const approveRequired = !state.selectedLPTokenAllowed;\n    const disabled = approveRequired || isEmptyValue(state.amount);\n    return (\n        <Column>\n            {parseBalance(state.amount, state.selectedLPToken.decimals).gt(state.selectedLPToken.balance) ? (\n                <InsufficientBalanceButton symbol={state.selectedLPToken.symbol} />\n            ) : state.loading || !state.pair ? (\n                <FetchingButton />\n            ) : (\n                <>\n                    <ApproveButton\n                        token={state.selectedLPToken}\n                        spender={ROUTER}\n                        onSuccess={() => state.setSelectedLPTokenAllowed(true)}\n                        onError={setError}\n                        hidden={!approveRequired}\n                    />\n                    <RemoveButton state={state} onError={setError} disabled={disabled} />\n                </>\n            )}\n            {error.message && error.code !== 4001 && <ErrorMessage error={error} />}\n        </Column>\n    );\n};\n\nconst RemoveButton = ({\n    state,\n    onError,\n    disabled\n}: {\n    state: RemoveLiquidityState;\n    onError: (e) => void;\n    disabled: boolean;\n}) => {\n    const onPress = useCallback(() => {\n        onError({});\n        state.onRemove().catch(onError);\n    }, [state.onRemove, onError]);\n    return <Button size={\"large\"} title={\"Remove\"} disabled={disabled} loading={state.removing} onPress={onPress} />;\n};\n\nexport default RemoveLiquidity;\n","import { useCallback, useContext, useState } from \"react\";\n\nimport { EthersContext } from \"../context/EthersContext\";\nimport { GlobalContext } from \"../context/GlobalContext\";\nimport { parseBalance } from \"../utils\";\nimport useLiquidityState, { LiquidityState } from \"./useLiquidityState\";\nimport useSDK from \"./useSDK\";\n\nexport interface AddLiquidityState extends LiquidityState {\n    onAdd: () => Promise<void>;\n    adding: boolean;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst useAddLiquidityState: () => AddLiquidityState = () => {\n    const state = useLiquidityState();\n    const { signer } = useContext(EthersContext);\n    const { updateTokens } = useContext(GlobalContext);\n    const [adding, setAdding] = useState(false);\n    const { addLiquidity, addLiquidityETH } = useSDK();\n\n    const onAdd = useCallback(async () => {\n        if (state.fromToken && state.toToken && state.fromAmount && state.toAmount && signer) {\n            setAdding(true);\n            try {\n                const fromAmount = parseBalance(state.fromAmount, state.fromToken.decimals);\n                const toAmount = parseBalance(state.toAmount, state.toToken.decimals);\n                if (state.fromSymbol === \"ETH\" || state.toSymbol === \"ETH\") {\n                    const [token, amount, amountETH] =\n                        state.fromSymbol === \"ETH\"\n                            ? [state.toToken, toAmount, fromAmount]\n                            : [state.fromToken, fromAmount, toAmount];\n                    const tx = await addLiquidityETH(token, amount, amountETH);\n                    await tx.wait();\n                } else {\n                    const tx = await addLiquidity(state.fromToken, state.toToken, fromAmount, toAmount);\n                    await tx.wait();\n                }\n                await updateTokens();\n                state.setFromSymbol(\"\");\n            } finally {\n                setAdding(false);\n            }\n        }\n    }, [state.fromToken, state.toToken, state.fromAmount, state.toAmount, signer, updateTokens]);\n\n    return {\n        ...state,\n        onAdd,\n        adding\n    };\n};\n\nexport default useAddLiquidityState;\n","import { useCallback, useContext, useState } from \"react\";\n\nimport { ethers } from \"ethers\";\nimport useAsyncEffect from \"use-async-effect\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport { GlobalContext } from \"../context/GlobalContext\";\nimport { convertToken, formatBalance, parseBalance, parseCurrencyAmount } from \"../utils\";\nimport useLPTokensState, { LPTokensState } from \"./useLPTokensState\";\nimport useSDK, { ROUTER } from \"./useSDK\";\n\nexport interface RemoveLiquidityState extends LPTokensState {\n    onRemove: () => Promise<void>;\n    removing: boolean;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst useRemoveLiquidityState: () => RemoveLiquidityState = () => {\n    const state = useLPTokensState(false);\n    const { provider, signer, getTokenAllowance } = useContext(EthersContext);\n    const { updateTokens } = useContext(GlobalContext);\n    const { removeLiquidity, removeLiquidityETH } = useSDK();\n    const [loading, setLoading] = useState(false);\n    const [removing, setRemoving] = useState(false);\n\n    useAsyncEffect(async () => {\n        if (provider && signer && state.selectedLPToken) {\n            state.setFromSymbol(state.selectedLPToken.tokenA.symbol);\n            state.setToSymbol(state.selectedLPToken.tokenB.symbol);\n\n            setLoading(true);\n            state.setSelectedLPTokenAllowed(false);\n            try {\n                const minAllowance = ethers.BigNumber.from(2)\n                    .pow(96)\n                    .sub(1);\n                const allowance = await getTokenAllowance(state.selectedLPToken.address, ROUTER);\n                state.setSelectedLPTokenAllowed(ethers.BigNumber.from(allowance).gte(minAllowance));\n            } finally {\n                setLoading(false);\n            }\n        }\n    }, [provider, signer, state.selectedLPToken]);\n\n    // tslint:disable-next-line:max-func-body-length\n    useAsyncEffect(async () => {\n        if (\n            state.selectedLPToken &&\n            state.selectedLPToken.totalSupply &&\n            state.pair &&\n            state.fromToken &&\n            state.toToken\n        ) {\n            if (state.pair.liquidityToken.address === state.selectedLPToken.address) {\n                const fromReserve = parseCurrencyAmount(\n                    state.pair.reserveOf(convertToken(state.fromToken)),\n                    state.fromToken.decimals\n                );\n                const toReserve = parseCurrencyAmount(\n                    state.pair.reserveOf(convertToken(state.toToken)),\n                    state.toToken.decimals\n                );\n                state.setFromAmount(\n                    formatBalance(\n                        parseBalance(state.amount, state.selectedLPToken.decimals)\n                            .mul(fromReserve)\n                            .div(state.selectedLPToken.totalSupply)\n                            .toString(),\n                        state.selectedLPToken.tokenA.decimals\n                    )\n                );\n                state.setToAmount(\n                    formatBalance(\n                        parseBalance(state.amount, state.selectedLPToken.decimals)\n                            .mul(toReserve)\n                            .div(state.selectedLPToken.totalSupply)\n                            .toString(),\n                        state.selectedLPToken.tokenB.decimals\n                    )\n                );\n            }\n        }\n    }, [state.selectedLPToken, state.amount, state.pair, state.fromToken, state.toToken, signer]);\n\n    const onRemove = useCallback(async () => {\n        if (state.fromAmount && state.toAmount && state.selectedLPToken && state.amount && signer) {\n            setRemoving(true);\n            try {\n                const fromAmount = parseBalance(state.fromAmount, state.fromToken!.decimals);\n                const toAmount = parseBalance(state.toAmount, state.toToken!.decimals);\n                const liquidity = parseBalance(state.amount, state.selectedLPToken.decimals);\n                if (state.fromSymbol === \"WETH\" || state.toSymbol === \"WETH\") {\n                    const [token, amountToRemove, amountToRemoveETH] =\n                        state.fromSymbol === \"WETH\"\n                            ? [state.toToken!, toAmount, fromAmount]\n                            : [state.fromToken!, fromAmount, toAmount];\n                    const tx = await removeLiquidityETH(token, liquidity, amountToRemove, amountToRemoveETH);\n                    await tx.wait();\n                } else {\n                    const tx = await removeLiquidity(state.fromToken!, state.toToken!, liquidity, fromAmount, toAmount);\n                    await tx.wait();\n                }\n                await updateTokens();\n                state.setSelectedLPToken(undefined);\n            } finally {\n                setRemoving(false);\n            }\n        }\n    }, [state.fromAmount, state.toAmount, state.selectedLPToken, state.amount, signer, updateTokens]);\n\n    return {\n        ...state,\n        loading: state.loading || loading,\n        onRemove,\n        removing\n    };\n};\n\nexport default useRemoveLiquidityState;\n","import React from \"react\";\nimport { View } from \"react-native\";\n\nimport AddLiquidity from \"../components/AddLiquidity\";\nimport Column from \"../components/Column\";\nimport Container from \"../components/Container\";\nimport Content from \"../components/Content\";\nimport FlexView from \"../components/FlexView\";\nimport RemoveLiquidity from \"../components/RemoveLiquidity\";\nimport Text from \"../components/Text\";\nimport { Spacing } from \"../constants/dimension\";\nimport useAddLiquidityState from \"../hooks/useAddLiquidityState\";\nimport useColors from \"../hooks/useColors\";\nimport useRemoveLiquidityState from \"../hooks/useRemoveLiquidityState\";\nimport Screen from \"./Screen\";\n\nconst LiquidityScreen = () => {\n    const addLiquidityState = useAddLiquidityState();\n    const removeLiquidityState = useRemoveLiquidityState();\n    return (\n        <Screen>\n            <Container>\n                <Content>\n                    <View style={{ alignItems: \"center\", marginBottom: Spacing.huge * 2 }}>\n                        {!removeLiquidityState.selectedLPToken && <AddLiquidity state={addLiquidityState} />}\n                        {!removeLiquidityState.selectedLPToken && <OR />}\n                        <RemoveLiquidity state={removeLiquidityState} />\n                    </View>\n                </Content>\n            </Container>\n        </Screen>\n    );\n};\n\nconst OR = () => {\n    const { background } = useColors();\n    return (\n        <Column>\n            <FlexView\n                style={{\n                    width: \"100%\",\n                    paddingHorizontal: Spacing.small,\n                    paddingVertical: Spacing.huge,\n                    alignItems: \"center\"\n                }}>\n                <Line />\n                <Text h4={true} light={true} style={{ paddingHorizontal: Spacing.small, backgroundColor: background }}>\n                    or\n                </Text>\n                <Line />\n            </FlexView>\n        </Column>\n    );\n};\n\nconst Line = () => {\n    const { border } = useColors();\n    return <View style={{ height: 1, flex: 1, backgroundColor: border }} />;\n};\n\nexport default LiquidityScreen;\n","import { useCallback, useContext, useEffect, useState } from \"react\";\n\nimport { ethers } from \"ethers\";\nimport useAsyncEffect from \"use-async-effect\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport { GlobalContext } from \"../context/GlobalContext\";\nimport Token from \"../types/Token\";\nimport { getContract, parseBalance } from \"../utils\";\nimport useSDK, { SUSHI_BAR } from \"./useSDK\";\n\nexport type Action = \"enter\" | \"leave\";\n\nexport interface SushiBarState {\n    action?: Action;\n    setAction: (action?: Action) => void;\n    sushi?: Token;\n    xSushi?: Token;\n    sushiStaked?: ethers.BigNumber;\n    sushiSupply?: ethers.BigNumber;\n    xSushiSupply?: ethers.BigNumber;\n    amount: string;\n    setAmount: (amount: string) => void;\n    sushiAllowed: boolean;\n    setSushiAllowed: (allowed: boolean) => void;\n    xSushiAllowed: boolean;\n    setXSushiAllowed: (allowed: boolean) => void;\n    loading: boolean;\n    onEnter: () => Promise<void>;\n    entering: boolean;\n    onLeave: () => Promise<void>;\n    leaving: boolean;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst useSushiBarState: () => SushiBarState = () => {\n    const { tokens, updateTokens } = useContext(GlobalContext);\n    const { provider, signer, address, getTokenAllowance } = useContext(EthersContext);\n    const { enterSushiBar, leaveSushiBar } = useSDK();\n    const [action, setAction] = useState<Action>();\n    const [sushiStaked, setSushiStaked] = useState<ethers.BigNumber>();\n    const [sushiSupply, setSushiSupply] = useState<ethers.BigNumber>();\n    const [xSushiSupply, setXSushiSupply] = useState<ethers.BigNumber>();\n    const [amount, setAmount] = useState(\"\");\n    const [sushiAllowed, setSushiAllowed] = useState(false);\n    const [xSushiAllowed, setXSushiAllowed] = useState(false);\n    const [loading, setLoading] = useState(false);\n    const [entering, setEntering] = useState(false);\n    const [leaving, setLeaving] = useState(false);\n\n    const sushi = tokens.find(token => token.symbol === \"SUSHI\");\n    const xSushi = tokens.find(token => token.symbol === \"xSUSHI\");\n\n    useEffect(() => {\n        setAmount(\"\");\n    }, [address, action]);\n\n    useAsyncEffect(async () => {\n        if (sushi && xSushi && provider && signer) {\n            setSushiAllowed(false);\n            setXSushiAllowed(false);\n            setLoading(true);\n            try {\n                const minAllowance = ethers.BigNumber.from(2)\n                    .pow(96)\n                    .sub(1);\n                const sushiAllowance = await getTokenAllowance(sushi.address, SUSHI_BAR);\n                setSushiAllowed(ethers.BigNumber.from(sushiAllowance).gte(minAllowance));\n                const xSushiAllowance = await getTokenAllowance(xSushi.address, SUSHI_BAR);\n                setXSushiAllowed(ethers.BigNumber.from(xSushiAllowance).gte(minAllowance));\n\n                const sushiContract = getContract(\"ERC20\", sushi.address, signer);\n                setSushiStaked(await sushiContract.balanceOf(SUSHI_BAR));\n                setSushiSupply(await sushiContract.totalSupply());\n                const xSushiContract = getContract(\"ERC20\", xSushi.address, signer);\n                setXSushiSupply(await xSushiContract.totalSupply());\n            } finally {\n                setLoading(false);\n            }\n        }\n    }, [sushi, xSushi, provider, signer]);\n\n    const onEnter = useCallback(async () => {\n        if (amount && signer) {\n            setEntering(true);\n            try {\n                const tx = await enterSushiBar(parseBalance(amount));\n                if (tx) {\n                    await tx.wait();\n                    await updateTokens();\n                    setAmount(\"\");\n                }\n            } finally {\n                setEntering(false);\n            }\n        }\n    }, [amount, signer]);\n\n    const onLeave = useCallback(async () => {\n        if (amount && signer) {\n            setLeaving(true);\n            try {\n                const tx = await leaveSushiBar(parseBalance(amount));\n                if (tx) {\n                    await tx.wait();\n                    await updateTokens();\n                    setAmount(\"\");\n                }\n            } finally {\n                setLeaving(false);\n            }\n        }\n    }, [amount, signer]);\n\n    return {\n        action,\n        setAction,\n        sushi,\n        xSushi,\n        sushiStaked,\n        sushiSupply,\n        xSushiSupply,\n        amount,\n        setAmount,\n        sushiAllowed,\n        setSushiAllowed,\n        xSushiAllowed,\n        setXSushiAllowed,\n        loading,\n        onEnter,\n        entering,\n        onLeave,\n        leaving\n    };\n};\n\nexport default useSushiBarState;\n","import React, { useCallback, useState } from \"react\";\nimport { ActivityIndicator, View } from \"react-native\";\nimport { Icon } from \"react-native-elements\";\n\nimport { ethers } from \"ethers\";\nimport useAsyncEffect from \"use-async-effect\";\nimport ApproveButton from \"../components/ApproveButton\";\nimport Button from \"../components/Button\";\nimport ButtonGroup from \"../components/ButtonGroup\";\nimport Column from \"../components/Column\";\nimport Container from \"../components/Container\";\nimport Content from \"../components/Content\";\nimport ErrorMessage from \"../components/ErrorMessage\";\nimport FetchingButton from \"../components/FetchingButton\";\nimport FlexView from \"../components/FlexView\";\nimport InsufficientBalanceButton from \"../components/InsufficientBalanceButton\";\nimport Meta from \"../components/Meta\";\nimport Notice from \"../components/Notice\";\nimport Subtitle from \"../components/Subtitle\";\nimport Text from \"../components/Text\";\nimport TokenInput from \"../components/TokenInput\";\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport { SUSHI_BAR } from \"../hooks/useSDK\";\nimport useSushiBarState, { Action, SushiBarState } from \"../hooks/useSushiBarState\";\nimport MetamaskError from \"../types/MetamaskError\";\nimport { formatBalance, isEmptyValue, parseBalance } from \"../utils\";\nimport Screen from \"./Screen\";\n\nconst Actions = [\"enter\", \"leave\"];\n\nconst SushiBarScreen = () => {\n    return (\n        <Screen>\n            <Container>\n                <Content>\n                    <Staking />\n                </Content>\n            </Container>\n        </Screen>\n    );\n};\n\nconst Staking = () => {\n    const state = useSushiBarState();\n    return (\n        <View style={{ alignItems: \"center\", marginBottom: Spacing.huge * 2 }}>\n            <Column>\n                <Text h4={true} style={{ textAlign: \"center\" }}>\n                    🧑‍🍳 Sushi Bar\n                </Text>\n            </Column>\n            <ActionSelect state={state} />\n            {state.action === \"enter\" && state.sushi && state.sushi.balance.isZero() && <NoSushiNotice />}\n            {state.action === \"leave\" && state.xSushi && state.xSushi.balance.isZero() && <NoXSushiNotice />}\n            <TokenInput\n                title={\"2. How many SUSHI do you want to STAKE?\"}\n                token={state.sushi}\n                hidden={state.action !== \"enter\" || !state.sushi || state.sushi.balance.isZero()}\n                amount={state.amount}\n                onAmountChanged={state.setAmount}\n            />\n            <TokenInput\n                title={\"2. How many xSUSHI do you want to UNSTAKE?\"}\n                token={state.xSushi}\n                hidden={state.action !== \"leave\" || !state.xSushi || state.xSushi.balance.isZero()}\n                amount={state.amount}\n                onAmountChanged={state.setAmount}\n            />\n            <StakeInfo state={state} />\n            <Controls state={state} />\n        </View>\n    );\n};\n\nconst ActionSelect = ({ state }: { state: SushiBarState }) => {\n    if (!state.sushi || !state.xSushi || !state.sushiStaked || !state.xSushiSupply) {\n        return (\n            <Column noTopMargin={true}>\n                <ActivityIndicator size={\"large\"} style={{ marginTop: Spacing.large }} />\n            </Column>\n        );\n    }\n    const index = state.action ? Actions.indexOf(state.action) : null;\n    const onPress = useCallback((i: number) => {\n        state.setAction(Actions[i] as Action);\n    }, []);\n    return (\n        <Column>\n            <Subtitle text={\"1. Do you want to STAKE or UNSTAKE?\"} />\n            <View style={{ marginHorizontal: Spacing.small, marginBottom: Spacing.normal }}>\n                <Meta label={\"Total SUSHI Staked\"} text={formatBalance(state.sushiStaked, state.sushi.decimals)} />\n                <Meta label={\"My SUSHI Balance\"} text={formatBalance(state.sushi.balance, state.sushi.decimals)} />\n                <Line />\n                <Meta label={\"Total xSUSHI Supply\"} text={formatBalance(state.xSushiSupply, state.xSushi.decimals)} />\n                <Meta label={\"My xSUSHI Balance\"} text={formatBalance(state.xSushi.balance, state.xSushi.decimals)} />\n            </View>\n            <ButtonGroup\n                selectedIndex={index}\n                onPress={onPress}\n                buttons={[{ element: StakeText }, { element: UnstakeText }]}\n                containerStyle={{ marginHorizontal: Spacing.small }}\n            />\n        </Column>\n    );\n};\n\nconst Line = () => {\n    const { border } = useColors();\n    return (\n        <View style={{ width: \"100%\", paddingHorizontal: Spacing.small }}>\n            <View\n                style={{\n                    height: 1,\n                    width: \"100%\",\n                    marginTop: Spacing.small,\n                    marginBottom: Spacing.tiny,\n                    backgroundColor: border\n                }}\n            />\n        </View>\n    );\n};\n\nconst StakeText = () => {\n    return (\n        <FlexView style={{ alignItems: \"center\" }}>\n            <Text style={{ color: \"black\" }}>Stake SUSHI</Text>\n            <Icon\n                type={\"material-community\"}\n                name={\"chevron-right\"}\n                color={\"black\"}\n                style={{ marginLeft: Spacing.tiny }}\n            />\n        </FlexView>\n    );\n};\n\nconst UnstakeText = () => {\n    return (\n        <FlexView style={{ alignItems: \"center\" }}>\n            <Text style={{ color: \"black\" }}>Unstake xSUSHI</Text>\n            <Icon\n                type={\"material-community\"}\n                name={\"chevron-right\"}\n                color={\"black\"}\n                style={{ marginLeft: Spacing.tiny }}\n            />\n        </FlexView>\n    );\n};\n\nconst NoSushiNotice = () => {\n    return (\n        <Column noTopMargin={true} style={{ padding: Spacing.small, marginTop: Spacing.small }}>\n            <Notice text={\"You don't have any SUSHI balance.\"} />\n        </Column>\n    );\n};\n\nconst NoXSushiNotice = () => {\n    return (\n        <Column noTopMargin={true} style={{ padding: Spacing.small, marginTop: Spacing.small }}>\n            <Notice text={\"You don't have any xSUSHI staked.\"} />\n        </Column>\n    );\n};\n\nconst StakeInfo = ({ state }: { state: SushiBarState }) => {\n    if (!state.sushi || !state.xSushi || !state.sushiSupply || !state.xSushiSupply || isEmptyValue(state.amount)) {\n        return <Column noTopMargin={true} />;\n    }\n    const amount = parseBalance(state.amount, state.sushi.decimals);\n    const xSushiAmount = amount.mul(state.xSushiSupply).div(state.sushiSupply);\n    const share = xSushiAmount.mul(ethers.BigNumber.from(10).pow(8)).div(state.xSushiSupply);\n    return (\n        <Column noTopMargin={true}>\n            <Meta label={\"xSUSHI Amount\"} text={formatBalance(xSushiAmount, state.xSushi.decimals)} />\n            <Meta label={\"xSUSHI Share\"} text={formatBalance(share, 8) + \"%\"} />\n        </Column>\n    );\n};\n\nconst Controls = ({ state }: { state: SushiBarState }) => {\n    const [error, setError] = useState<MetamaskError>({});\n    useAsyncEffect(() => setError({}), [state.action, state.amount]);\n    const token = state.action === \"leave\" ? state.xSushi : state.sushi;\n    if (!state.action || !token || isEmptyValue(state.amount)) return <Column noTopMargin={true} />;\n    return (\n        <Column>\n            {parseBalance(state.amount, token.decimals).gt(token.balance) ? (\n                <InsufficientBalanceButton symbol={token.symbol} />\n            ) : state.loading ? (\n                <FetchingButton />\n            ) : (\n                <>\n                    <ApproveButton\n                        token={token}\n                        spender={SUSHI_BAR}\n                        onSuccess={() => state.setSushiAllowed(true)}\n                        onError={setError}\n                        hidden={state.action === \"leave\" || state.sushiAllowed}\n                    />\n                    {state.action === \"leave\" ? (\n                        <UnstakeButton state={state} onError={setError} />\n                    ) : (\n                        <StakeButton state={state} onError={setError} disabled={!state.sushiAllowed} />\n                    )}\n                </>\n            )}\n            {error.message && error.code !== 4001 && <ErrorMessage error={error} />}\n        </Column>\n    );\n};\n\nconst StakeButton = ({\n    state,\n    onError,\n    disabled\n}: {\n    state: SushiBarState;\n    onError: (e) => void;\n    disabled: boolean;\n}) => {\n    const onPress = useCallback(async () => {\n        onError({});\n        try {\n            await state.onEnter();\n            state.setAction();\n        } catch (e) {\n            onError(e);\n        }\n    }, []);\n    return <Button size={\"large\"} title={\"Stake\"} loading={state.entering} onPress={onPress} disabled={disabled} />;\n};\n\nconst UnstakeButton = ({ state, onError }: { state: SushiBarState; onError: (e) => void }) => {\n    const onPress = useCallback(async () => {\n        onError({});\n        try {\n            await state.onLeave();\n            state.setAction();\n        } catch (e) {\n            onError(e);\n        }\n    }, []);\n    return <Button size={\"large\"} title={\"Unstake\"} loading={state.leaving} onPress={onPress} />;\n};\n\nexport default SushiBarScreen;\n","import { useCallback, useContext, useEffect, useState } from \"react\";\n\nimport { Trade } from \"@levx/sushiswap-sdk\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport { GlobalContext } from \"../context/GlobalContext\";\nimport { parseBalance } from \"../utils\";\nimport useSDK from \"./useSDK\";\nimport useTokenPairState, { TokenPairState } from \"./useTokenPairState\";\n\nexport interface SwapState extends TokenPairState {\n    trade?: Trade;\n    unsupported: boolean;\n    onSwap: () => Promise<void>;\n    swapping: boolean;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst useSwapState: () => SwapState = () => {\n    const state = useTokenPairState();\n    const { addToTradeHistory, updateTokens } = useContext(GlobalContext);\n    const { provider, signer, addOnBlockListener, removeOnBlockListener } = useContext(EthersContext);\n    const { getTrade, swap } = useSDK();\n    const [loading, setLoading] = useState(true);\n    const [trade, setTrade] = useState<Trade>();\n    const [unsupported, setUnsupported] = useState(false);\n    const [swapping, setSwapping] = useState(false);\n\n    useEffect(() => {\n        if (state.fromSymbol && state.toSymbol && state.fromAmount) {\n            const updateTrade = async () => {\n                if (state.fromToken && state.toToken && state.fromAmount && provider) {\n                    const amount = parseBalance(state.fromAmount, state.fromToken.decimals);\n                    if (!amount.isZero()) {\n                        setTrade(undefined);\n                        setUnsupported(false);\n                        try {\n                            setTrade(await getTrade(state.fromToken, state.toToken, amount));\n                        } catch (e) {\n                            setUnsupported(true);\n                        } finally {\n                            setLoading(false);\n                        }\n                    }\n                }\n            };\n\n            setLoading(true);\n            updateTrade();\n            const name = \"updateTrade(\" + state.fromSymbol + \",\" + state.toSymbol + \",\" + state.fromAmount + \")\";\n\n            addOnBlockListener(name, updateTrade);\n            return () => {\n                removeOnBlockListener(name);\n            };\n        }\n    }, [state.fromSymbol, state.toSymbol, state.fromAmount]);\n\n    const onSwap = useCallback(async () => {\n        if (state.fromToken && state.toToken && state.fromAmount && signer && trade) {\n            setSwapping(true);\n            try {\n                const result = await swap(trade);\n                if (result) {\n                    await result.tx.wait();\n                    await addToTradeHistory(result.trade);\n                    await updateTokens();\n                    state.setFromSymbol(\"\");\n                }\n            } finally {\n                setSwapping(false);\n            }\n        }\n    }, [state.fromToken, state.toToken, state.fromAmount, signer, trade]);\n\n    return {\n        ...state,\n        loading: loading || state.loading,\n        trade,\n        unsupported,\n        onSwap,\n        swapping\n    };\n};\n\nexport default useSwapState;\n","import React, { useCallback, useState } from \"react\";\nimport { View } from \"react-native\";\nimport { Icon } from \"react-native-elements\";\n\nimport useAsyncEffect from \"use-async-effect\";\nimport ApproveButton from \"../components/ApproveButton\";\nimport Button from \"../components/Button\";\nimport Column from \"../components/Column\";\nimport Container from \"../components/Container\";\nimport Content from \"../components/Content\";\nimport ErrorMessage from \"../components/ErrorMessage\";\nimport FetchingButton from \"../components/FetchingButton\";\nimport InsufficientBalanceButton from \"../components/InsufficientBalanceButton\";\nimport Meta from \"../components/Meta\";\nimport Text from \"../components/Text\";\nimport TokenInput from \"../components/TokenInput\";\nimport TokenSelect from \"../components/TokenSelect\";\nimport UnsupportedButton from \"../components/UnsupportedButton\";\nimport { Spacing } from \"../constants/dimension\";\nimport { ETH } from \"../constants/tokens\";\nimport useColors from \"../hooks/useColors\";\nimport useSDK, { ROUTER } from \"../hooks/useSDK\";\nimport useSwapState, { SwapState } from \"../hooks/useSwapState\";\nimport MetamaskError from \"../types/MetamaskError\";\nimport { formatBalance, isEmptyValue, parseBalance } from \"../utils\";\nimport Screen from \"./Screen\";\n\nconst SwapScreen = () => {\n    return (\n        <Screen>\n            <Container>\n                <Content>\n                    <View style={{ alignItems: \"center\", marginBottom: Spacing.large }}>\n                        <Column>\n                            <Text h4={true} style={{ textAlign: \"center\" }}>\n                                🍣 Swap Tokens\n                            </Text>\n                        </Column>\n                        <Swap />\n                    </View>\n                </Content>\n            </Container>\n        </Screen>\n    );\n};\n\nconst Swap = () => {\n    const state = useSwapState();\n    return (\n        <>\n            <TokenSelect\n                title={\"1. Select the token you want to SELL:\"}\n                hidden={false}\n                symbol={state.fromSymbol}\n                onChangeSymbol={state.setFromSymbol}\n                filterTokens={token => token.balance && !token.balance.isZero()}\n            />\n            <TokenSelect\n                title={\"2. Select the token you want to BUY:\"}\n                hidden={state.fromSymbol === \"\"}\n                symbol={state.toSymbol}\n                onChangeSymbol={state.setToSymbol}\n                filterTokens={token => token.symbol !== state.fromSymbol}\n            />\n            <TokenInput\n                title={\"3. How many \" + (state.fromSymbol || \"tokens\") + \" do you want to SELL?\"}\n                token={state.fromToken}\n                hidden={!state.fromToken}\n                amount={state.fromAmount}\n                onAmountChanged={state.setFromAmount}\n            />\n            <TradeInfo state={state} />\n            <Controls state={state} />\n        </>\n    );\n};\n\nconst TradeInfo = ({ state }: { state: SwapState }) => {\n    if (\n        !isEmptyValue(state.fromAmount) &&\n        ((state.fromSymbol === \"ETH\" && state.toSymbol === \"WETH\") ||\n            (state.fromSymbol === \"WETH\" && state.toSymbol === \"ETH\"))\n    ) {\n        return <WrapInfo state={state} />;\n    }\n    if (state.fromSymbol === \"\" || state.toSymbol === \"\" || isEmptyValue(state.fromAmount)) {\n        return <Column noTopMargin={true} />;\n    }\n    return <SwapInfo state={state} />;\n};\n\nconst WrapInfo = ({ state }: { state: SwapState }) => {\n    return (\n        <Column noTopMargin={true}>\n            <ArrowDown />\n            <Text style={{ fontSize: 30, textAlign: \"center\" }}>\n                {state.fromAmount} {state.toSymbol}\n            </Text>\n        </Column>\n    );\n};\n\nconst SwapInfo = ({ state }: { state: SwapState }) => {\n    const { calculateFee } = useSDK();\n    const amount = state.trade?.outputAmount?.toSignificant(8);\n    const price = state.trade?.executionPrice?.toSignificant(8);\n    const impact = state.trade?.priceImpact?.toSignificant(2);\n    const fee = state.fromToken\n        ? formatBalance(\n              calculateFee(parseBalance(state.fromAmount, state.fromToken.decimals)),\n              state.fromToken.decimals,\n              8\n          )\n        : \"\";\n    return (\n        <Column noTopMargin={true}>\n            <ArrowDown />\n            <Text style={{ fontSize: 30, textAlign: \"center\", marginBottom: Spacing.normal }}>\n                {amount || \"…\"} {state.toSymbol}\n            </Text>\n            <Meta label={\"Price\"} text={price ? price + \" \" + state.toSymbol + \"  = 1 \" + state.fromSymbol : \"…\"} />\n            <Meta label={\"Price Impact\"} text={impact ? impact + \"%\" : \"…\"} />\n            <Meta label={\"Fee (0.30%)\"} text={fee ? fee + \" \" + state.fromSymbol : \"…\"} />\n        </Column>\n    );\n};\n\nconst ArrowDown = () => {\n    const { textLight } = useColors();\n    return <Icon type={\"material-community\"} name={\"arrow-down\"} color={textLight} style={{ margin: Spacing.tiny }} />;\n};\n\n// tslint:disable-next-line:max-func-body-length\nconst Controls = ({ state }: { state: SwapState }) => {\n    const [error, setError] = useState<MetamaskError>({});\n    useAsyncEffect(() => setError({}), [state.fromSymbol, state.toSymbol, state.fromAmount]);\n    if (state.toSymbol === \"\" || isEmptyValue(state.fromAmount) || !state.fromToken) {\n        return <Column noTopMargin={true} />;\n    }\n    const approveRequired = state.fromSymbol !== \"ETH\" && !state.fromTokenAllowed;\n    return (\n        <Column>\n            {parseBalance(state.fromAmount, state.fromToken.decimals).gt(state.fromToken.balance) ? (\n                <InsufficientBalanceButton symbol={state.fromSymbol} />\n            ) : state.fromSymbol === \"WETH\" && state.toSymbol === \"ETH\" ? (\n                <UnwrapButton state={state} onError={setError} />\n            ) : state.fromSymbol === \"ETH\" && state.toSymbol === \"WETH\" ? (\n                <WrapButton state={state} onError={setError} />\n            ) : state.unsupported ? (\n                <UnsupportedButton state={state} />\n            ) : state.loading || !state.trade ? (\n                <FetchingButton />\n            ) : (\n                <>\n                    <ApproveButton\n                        token={state.fromToken}\n                        spender={ROUTER}\n                        onSuccess={() => state.setFromTokenAllowed(true)}\n                        onError={setError}\n                        hidden={!approveRequired}\n                    />\n                    <SwapButton state={state} onError={setError} disabled={approveRequired} />\n                </>\n            )}\n            {error.message && error.code !== 4001 && <ErrorMessage error={error} />}\n        </Column>\n    );\n};\n\nconst SwapButton = ({ state, onError, disabled }: { state: SwapState; onError: (e) => void; disabled: boolean }) => {\n    const onPress = useCallback(() => {\n        onError({});\n        state.onSwap().catch(onError);\n    }, [state.onSwap, onError]);\n    return (\n        <Button\n            size={\"large\"}\n            title={\"Swap \" + state.fromSymbol + \"-\" + state.toSymbol}\n            disabled={disabled}\n            loading={state.swapping}\n            onPress={onPress}\n        />\n    );\n};\n\nconst WrapButton = ({ state, onError }: { state: SwapState; onError: (e) => void }) => {\n    const onPress = useCallback(async () => {\n        onError({});\n        state.onWrap().catch(onError);\n    }, []);\n    return <Button size={\"large\"} title={\"Wrap\"} loading={state.wrapping} onPress={onPress} />;\n};\n\nconst UnwrapButton = ({ state, onError }: { state: SwapState; onError: (e) => void }) => {\n    const onPress = useCallback(async () => {\n        onError({});\n        state.onUnwrap().catch(onError);\n    }, []);\n    return <Button size={\"large\"} title={\"Unwrap\"} loading={state.unwrapping} onPress={onPress} />;\n};\n\nexport default SwapScreen;\n","import React, { useContext } from \"react\";\nimport { View } from \"react-native\";\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\n\nimport { OpenSans_300Light, OpenSans_400Regular, OpenSans_700Bold } from \"@expo-google-fonts/open-sans\";\nimport { UnicaOne_400Regular } from \"@expo-google-fonts/unica-one\";\nimport { AppLoading } from \"expo\";\nimport { DeviceType } from \"expo-device\";\nimport { useFonts } from \"expo-font\";\n\nimport \"dotenv/config\";\nimport useAsyncEffect from \"use-async-effect\";\nimport Header from \"./src/components/Header\";\nimport MobileNotSupported from \"./src/components/MobileNotSupported\";\nimport { ContextProvider } from \"./src/context\";\nimport { GlobalContext } from \"./src/context/GlobalContext\";\nimport FarmingScreen from \"./src/screens/FarmingScreen\";\nimport LiquidityScreen from \"./src/screens/LiquidityScreen\";\nimport SushiBarScreen from \"./src/screens/SushiBarScreen\";\nimport SwapScreen from \"./src/screens/SwapScreen\";\n\nconst App = () => {\n    const [fontsLoaded] = useFonts({\n        title: UnicaOne_400Regular,\n        light: OpenSans_300Light,\n        regular: OpenSans_400Regular,\n        bold: OpenSans_700Bold\n    });\n    if (!fontsLoaded) {\n        return <AppLoading />;\n    }\n    return (\n        <ContextProvider>\n            <Router>\n                <Main />\n            </Router>\n        </ContextProvider>\n    );\n};\n\nconst Main = () => {\n    const { load, deviceType } = useContext(GlobalContext);\n    useAsyncEffect(load, []);\n    if (!deviceType) {\n        return <AppLoading />;\n    }\n    if (deviceType === DeviceType.PHONE) {\n        return <MobileNotSupported />;\n    }\n    return <Navigation />;\n};\n\nconst Navigation = () => {\n    return (\n        <View style={{ flex: 1 }}>\n            <Header />\n            <Switch>\n                <Route path={\"/liquidity\"}>\n                    <LiquidityScreen />\n                </Route>\n                <Route path={\"/farming\"}>\n                    <FarmingScreen />\n                </Route>\n                <Route path={\"/sushibar\"}>\n                    <SushiBarScreen />\n                </Route>\n                <Route path={\"/\"}>\n                    <SwapScreen />\n                </Route>\n            </Switch>\n        </View>\n    );\n};\n\nexport default App;\n","/* eslint-env browser */\n\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', function () {\n    navigator.serviceWorker\n      .register('/expo-service-worker.js', { scope: '/' })\n      .then(function (info) {\n        // console.info('Registered service-worker', info);\n      })\n      .catch(function (error) {\n        console.info('Failed to register service-worker', error);\n      });\n  });\n}\n","var map = {\n\t\"./Address.json\": 598,\n\t\"./Context.json\": 599,\n\t\"./ERC20.json\": 600,\n\t\"./EnumerableSet.json\": 601,\n\t\"./GovernorAlpha.json\": 602,\n\t\"./IERC20.json\": 603,\n\t\"./IERC20Uniswap.json\": 604,\n\t\"./IMigrator.json\": 605,\n\t\"./IMigratorChef.json\": 606,\n\t\"./IUniswapV2Callee.json\": 607,\n\t\"./IUniswapV2ERC20.json\": 608,\n\t\"./IUniswapV2Factory.json\": 609,\n\t\"./IUniswapV2Pair.json\": 610,\n\t\"./IUniswapV2Router01.json\": 611,\n\t\"./IUniswapV2Router02.json\": 612,\n\t\"./IWETH.json\": 613,\n\t\"./MasterChef.json\": 614,\n\t\"./Math.json\": 615,\n\t\"./Migrations.json\": 616,\n\t\"./Migrator.json\": 617,\n\t\"./MockERC20.json\": 618,\n\t\"./Ownable.json\": 619,\n\t\"./SafeERC20.json\": 620,\n\t\"./SafeMath.json\": 621,\n\t\"./SafeMathUniswap.json\": 622,\n\t\"./SushiBar.json\": 623,\n\t\"./SushiMaker.json\": 624,\n\t\"./SushiRestaurant.json\": 625,\n\t\"./SushiToken.json\": 626,\n\t\"./Timelock.json\": 627,\n\t\"./TimelockInterface.json\": 628,\n\t\"./TransferHelper.json\": 629,\n\t\"./UQ112x112.json\": 630,\n\t\"./UniswapV2ERC20.json\": 631,\n\t\"./UniswapV2Factory.json\": 632,\n\t\"./UniswapV2Library.json\": 633,\n\t\"./UniswapV2Pair.json\": 634,\n\t\"./UniswapV2Router02.json\": 635\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 597;","module.exports = __webpack_public_path__ + \"static/media/levx-typography-dark.859ceaa3.png\";","module.exports = __webpack_public_path__ + \"static/media/levx-typography.5d37ed2a.png\";","module.exports = __webpack_public_path__ + \"static/media/sushiswap.ef005f32.jpg\";","module.exports = __webpack_public_path__ + \"static/media/metamask-dark.2137a831.png\";","module.exports = __webpack_public_path__ + \"static/media/metamask.15e22fef.png\";"],"sourceRoot":""}