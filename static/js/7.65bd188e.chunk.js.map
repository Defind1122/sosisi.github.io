{"version":3,"sources":["src/hooks/useStyles.tsx","src/components/Heading.tsx","src/hooks/useLinker.tsx","src/components/InfoBox.tsx","src/components/Notice.tsx","src/components/ErrorMessage.tsx","src/components/SocialIcons.tsx","src/components/web/WebFooter.tsx","src/components/FetchingButton.tsx","src/components/InsufficientBalanceButton.tsx","src/components/TokenInput.tsx","src/components/Column.tsx","src/components/Input.tsx","src/hooks/useStakingState.tsx","src/screens/UnstakeScreen.tsx"],"names":["useStyles","useColors","shadowColor","shadow","borderDark","border","useCallback","attrs","borderColor","color","borderWidth","borderRadius","radius","padding","Spacing","small","tiny","elevation","shadowOffset","width","height","shadowOpacity","shadowRadius","overflow","Heading","props","accent","style","alignItems","marginBottom","disabled","medium","fontWeight","flex","fontSize","paddingBottom","text","buttonText","type","size","title","onPress","onPressButton","Platform","OS","path","route","target","history","useHistory","window","open","push","_target","navigate","useNavigation","InfoBox","backgroundLight","backgroundColor","marginTop","normal","Notice","borderStyle","clear","paddingHorizontal","note","titleStyle","buttonStyle","paddingVertical","alignSelf","ErrorMessage","error","code","message","SocialIcon","darkMode","useContext","GlobalContext","background","textLight","light","iconColor","undefined","SocialIcons","onPressTwitter","useLinker","onPressGithub","onPressDiscord","FlexView","justifyContent","name","raised","reverse","reverseColor","containerStyle","Link","to","Text","textDecorationLine","WebFooter","Column","noTopMargin","View","huge","textAlign","FetchingButton","InsufficientBalanceButton","symbol","MaxButton","onPressMax","token","balance","fee","pow10","gt","sub","ethers","constants","Zero","updateAmount","formatBalance","decimals","position","right","bottom","maxButtonText","IS_DESKTOP","TokenInput","onChangeText","onAmountChanged","parseBalance","e","endsWith","indexOf","length","label","value","amount","placeholder","autoFocus","inputStyle","marginHorizontal","inputContainerStyle","borderBottomWidth","labelStyle","fontFamily","paddingTop","hideMaxButton","large","Input","textDark","textMedium","onError","errors","forbidden","forEach","validation","match","regexp","allowed","join","minHeight","outline","placeholderTextColor","errorStyle","useStakingState","EthersContext","provider","signer","address","getTokenAllowance","tokens","updateTokens","useSDK","enterSushiBar","leaveSushiBar","useState","sushiStaked","setSushiStaked","sushiSupply","setSushiSupply","xSushiSupply","setXSushiSupply","setAmount","sushiAllowed","setSushiAllowed","xSushiAllowed","setXSushiAllowed","loading","setLoading","entering","setEntering","leaving","setLeaving","sushi","useMemo","find","xSushi","useEffect","useAsyncEffect","a","async","minAllowance","BigNumber","from","pow","SUSHI_BAR","sushiAllowance","gte","xSushiAllowance","sushiContract","getContract","balanceOf","totalSupply","xSushiContract","onEnter","parsed","tx","wait","onLeave","Staking","state","XSushiBalance","AmountInput","isZero","UnstakeInfo","isEmptyValue","sushiAmount","mul","div","Controls","setError","UnstakeButton","UnstakeScreen"],"mappings":"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","file":"static/js/7.65bd188e.chunk.js","sourcesContent":["import { useCallback } from \"react\";\nimport { ViewStyle } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"./useColors\";\n\nconst useStyles = () => {\n    const { shadow: shadowColor, borderDark } = useColors();\n    const border = useCallback(\n        (attrs?: { color?: string; radius?: number }) => ({\n            borderColor: attrs?.color || borderDark,\n            borderWidth: 1,\n            borderRadius: attrs?.radius || 8,\n            padding: Spacing.small\n        }),\n        []\n    );\n    const shadow = () =>\n        ({\n            borderRadius: Spacing.tiny,\n            elevation: Spacing.small,\n            shadowColor,\n            shadowOffset: { width: 0, height: 2 },\n            shadowOpacity: 0.5,\n            shadowRadius: 4,\n            overflow: \"visible\"\n        } as ViewStyle);\n    return { border, shadow };\n};\n\nexport default useStyles;\n","import React, { FC } from \"react\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport Button from \"./Button\";\nimport FlexView from \"./FlexView\";\nimport Text from \"./Text\";\n\ninterface HeadingProps {\n    text: string;\n    disabled?: boolean;\n    buttonText?: string;\n    onPressButton?: () => void | Promise<void>;\n}\n\nconst Heading: FC<HeadingProps> = props => {\n    const { accent } = useColors();\n    return (\n        <FlexView style={{ alignItems: \"flex-end\", height: 32, marginBottom: props.disabled ? 0 : Spacing.small }}>\n            <Text\n                medium={true}\n                fontWeight={\"bold\"}\n                disabled={props.disabled}\n                style={{ flex: 1, fontSize: 18, paddingBottom: Spacing.tiny }}>\n                {props.text}\n            </Text>\n            {props.buttonText && (\n                <Button\n                    type={\"clear\"}\n                    size={\"small\"}\n                    title={props.buttonText}\n                    onPress={props.onPressButton}\n                    color={accent}\n                />\n            )}\n        </FlexView>\n    );\n};\n\nexport default Heading;\n","import { useCallback } from \"react\";\nimport { Platform } from \"react-native\";\nimport { useHistory } from \"react-router-dom\";\n\nimport { useNavigation } from \"@react-navigation/native\";\n\nconst useWebLinker = (path: string, route: string, target?: string) => {\n    const history = useHistory();\n    return useCallback(() => {\n        if (target) {\n            window.open(path, target);\n        } else {\n            history.push(path);\n        }\n    }, [path, target]);\n};\n\nconst useAppLinker = (path: string, route: string, _target?: string) => {\n    const { navigate } = useNavigation();\n    return useCallback(() => {\n        navigate(route);\n    }, [route]);\n};\n\nexport default Platform.OS === \"web\" ? useWebLinker : useAppLinker;\n","import React, { PropsWithChildren } from \"react\";\nimport { View, ViewProps } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport useStyles from \"../hooks/useStyles\";\n\nconst InfoBox = (props: PropsWithChildren<ViewProps>) => {\n    const { backgroundLight } = useColors();\n    const { border } = useStyles();\n    return (\n        <View\n            {...props}\n            style={[\n                {\n                    ...border({ color: backgroundLight }),\n                    backgroundColor: backgroundLight,\n                    marginTop: Spacing.normal + Spacing.small,\n                    padding: Spacing.small + Spacing.tiny\n                },\n                props.style\n            ]}\n        />\n    );\n};\n\nexport default InfoBox;\n","import React from \"react\";\nimport { View, ViewStyle } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useStyles from \"../hooks/useStyles\";\nimport Button from \"./Button\";\nimport Text from \"./Text\";\n\nexport interface NoticeProps {\n    text: string;\n    clear?: boolean;\n    color?: string;\n    buttonText?: string;\n    onPressButton?: () => void;\n    style?: ViewStyle;\n}\n\nconst Notice = (props: NoticeProps) => {\n    const { border } = useStyles();\n    const borderStyle = border({ color: props.color });\n    const color = props.color || borderStyle.borderColor;\n    return (\n        <View style={[props.clear ? { paddingHorizontal: Spacing.tiny } : borderStyle, props.style]}>\n            <Text\n                note={true}\n                style={{\n                    color\n                }}>\n                {props.text}\n            </Text>\n            {props.buttonText && props.onPressButton && (\n                <Button\n                    title={props.buttonText}\n                    type={\"clear\"}\n                    size={\"small\"}\n                    fontWeight={\"bold\"}\n                    onPress={props.onPressButton}\n                    titleStyle={{ color }}\n                    buttonStyle={{ paddingHorizontal: 0, paddingVertical: 0 }}\n                    style={{ alignSelf: \"flex-end\", marginTop: Spacing.tiny }}\n                />\n            )}\n        </View>\n    );\n};\n\nexport default Notice;\n","import React from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport MetamaskError from \"../types/MetamaskError\";\nimport Text from \"./Text\";\n\nconst ErrorMessage = ({ error }: { error: MetamaskError }) => (\n    <View\n        style={{\n            borderColor: \"red\",\n            borderWidth: 1,\n            width: \"100%\",\n            padding: Spacing.tiny,\n            marginTop: Spacing.small\n        }}>\n        {error.code && (\n            <Text fontWeight={\"bold\"} style={{ color: \"red\", fontSize: 14 }}>\n                Error Code {error.code}\n            </Text>\n        )}\n        <Text note={true} style={{ color: \"red\", fontSize: 14 }}>\n            {error.message}\n        </Text>\n    </View>\n);\n\nexport default ErrorMessage;\n","import React, { useContext } from \"react\";\nimport { Icon, SocialIcon as NativeSocialIcon, SocialIconProps } from \"react-native-elements\";\n\nimport { GlobalContext } from \"../context/GlobalContext\";\nimport useColors from \"../hooks/useColors\";\nimport useLinker from \"../hooks/useLinker\";\nimport FlexView from \"./FlexView\";\n\nconst SocialIcons = () => {\n    const { darkMode } = useContext(GlobalContext);\n    const { background, textLight } = useColors();\n    const onPressTwitter = useLinker(\"https://twitter.com/sushiswap\", \"\", \"_blank\");\n    const onPressGithub = useLinker(\"https://github.com/sushiswap\", \"\", \"_blank\");\n    const onPressDiscord = useLinker(\"https://discord.gg/YS8xH7E\", \"\", \"_blank\");\n    return (\n        <FlexView style={{ width: \"100%\", justifyContent: \"center\" }}>\n            <SocialIcon type=\"github-alt\" onPress={onPressGithub} />\n            <SocialIcon type=\"twitter\" onPress={onPressTwitter} />\n            <Icon\n                type={\"material-community\"}\n                name={\"discord\"}\n                raised={true}\n                reverse={true}\n                color={background}\n                reverseColor={darkMode ? \"white\" : \"#7289da\"}\n                style={{ backgroundColor: background }}\n                containerStyle={{\n                    borderWidth: 1,\n                    borderColor: darkMode ? \"white\" : textLight\n                }}\n                onPress={onPressDiscord}\n            />\n        </FlexView>\n    );\n};\n\nconst SocialIcon = (props: SocialIconProps) => {\n    const { darkMode } = useContext(GlobalContext);\n    const { background, textLight } = useColors();\n    return (\n        <NativeSocialIcon\n            {...props}\n            light={!darkMode}\n            iconColor={darkMode ? \"white\" : undefined}\n            style={{\n                backgroundColor: background,\n                borderWidth: 1,\n                borderColor: darkMode ? \"white\" : textLight\n            }}\n        />\n    );\n};\n\nexport default SocialIcons;\n","import React, { useCallback } from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../../constants/dimension\";\nimport Column from \"../Column\";\nimport SocialIcons from \"../SocialIcons\";\nimport Text from \"../Text\";\n\nconst WebFooter = () => (\n    <Column noTopMargin={true}>\n        <View\n            style={{\n                width: \"100%\",\n                padding: Spacing.normal,\n                marginTop: Spacing.huge\n            }}>\n            <SocialIcons />\n            <Text note={true} style={{ marginTop: Spacing.tiny, textAlign: \"center\", width: \"100%\" }}>\n                2020 Built by <Link to={\"https://levx.io\"} text={\"LevX Team\"} />\n            </Text>\n        </View>\n    </Column>\n);\n\nconst Link = ({ to, text }) => {\n    const onPress = useCallback(() => {\n        window.open(to, \"_blank\");\n    }, []);\n    return (\n        <Text note={true} style={{ textDecorationLine: \"underline\" }} onPress={onPress}>\n            {text}\n        </Text>\n    );\n};\n\nexport default WebFooter;\n","import React from \"react\";\n\nimport Button from \"./Button\";\n\nconst FetchingButton = () => {\n    return <Button title={\"Fetching…\"} disabled={true} />;\n};\nexport default FetchingButton;\n","import React from \"react\";\n\nimport Button from \"./Button\";\n\nconst InsufficientBalanceButton = ({ symbol }: { symbol: string }) => {\n    return <Button title={\"Insufficient \" + (symbol ? symbol : \"Balance\")} disabled={true} />;\n};\nexport default InsufficientBalanceButton;\n","import React, { FC, useCallback } from \"react\";\nimport { Platform, View } from \"react-native\";\n\nimport { ethers } from \"ethers\";\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport useStyles from \"../hooks/useStyles\";\nimport Token from \"../types/Token\";\nimport { formatBalance, parseBalance, pow10 } from \"../utils\";\nimport Button from \"./Button\";\nimport Heading from \"./Heading\";\nimport Input from \"./Input\";\n\nexport interface TokenInputProps {\n    title?: string;\n    token?: Token;\n    amount: string;\n    onAmountChanged: (amount: string) => void;\n    label?: string;\n    hideMaxButton?: boolean;\n    maxButtonText?: string;\n    autoFocus?: boolean;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst TokenInput: FC<TokenInputProps> = props => {\n    const { border } = useStyles();\n    const onChangeText = useCallback(\n        (text: string) => {\n            if (props.token && props.onAmountChanged) {\n                try {\n                    parseBalance(text, props.token.decimals);\n                    props.onAmountChanged(text);\n                } catch (e) {\n                    if (text.endsWith(\".\") && text.indexOf(\".\") === text.length - 1) {\n                        props.onAmountChanged(text);\n                    }\n                }\n            }\n        },\n        [props.token, props.onAmountChanged]\n    );\n    return (\n        <View>\n            {props.title && <Heading text={props.title} />}\n            <View>\n                <Input\n                    label={props.label}\n                    value={props.amount}\n                    onChangeText={onChangeText}\n                    placeholder={\"0.0\"}\n                    autoFocus={props.autoFocus || false}\n                    inputStyle={{ marginHorizontal: 4 }}\n                    inputContainerStyle={{ borderBottomWidth: 0 }}\n                    labelStyle={{ fontFamily: \"light\", height: props.label ? \"auto\" : 0 }}\n                    containerStyle={{\n                        ...border(),\n                        paddingHorizontal: Spacing.tiny,\n                        paddingTop: 15,\n                        paddingBottom: 2\n                    }}\n                />\n                {props.token?.balance?.gt(0) && !props.hideMaxButton && (\n                    <MaxButton\n                        token={props.token}\n                        maxButtonText={props.maxButtonText}\n                        updateAmount={props.onAmountChanged}\n                    />\n                )}\n            </View>\n        </View>\n    );\n};\n\nconst MaxButton = (props: { token: Token; updateAmount; maxButtonText?: string }) => {\n    const { accent } = useColors();\n    const onPressMax = useCallback(() => {\n        if (props.token) {\n            let balance = props.token.balance;\n            if (props.token.symbol === \"ETH\") {\n                // Subtract 0.01 ETH for gas fee\n                const fee = pow10(16);\n                balance = balance.gt(fee) ? balance.sub(fee) : ethers.constants.Zero;\n            }\n            props.updateAmount(formatBalance(balance, props.token.decimals));\n        }\n    }, [props.token, props.updateAmount]);\n    return (\n        <View style={{ position: \"absolute\", right: 12, bottom: Platform.OS === \"web\" ? 12 : 24 }}>\n            <Button\n                type={\"clear\"}\n                size={\"small\"}\n                color={accent}\n                title={props.maxButtonText || (IS_DESKTOP ? \"MAX \" + props.token.symbol : \"MAX\")}\n                fontWeight={\"bold\"}\n                onPress={onPressMax}\n                buttonStyle={{ paddingHorizontal: 4 }}\n            />\n        </View>\n    );\n};\n\nexport default TokenInput;\n","import React, { FC } from \"react\";\nimport { Platform, View, ViewProps, ViewStyle } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\n\ninterface ColumnProps extends ViewProps {\n    noTopMargin?: boolean;\n    style?: ViewStyle;\n}\n\nconst Column: FC<ColumnProps> = props => (\n    <View\n        {...props}\n        style={[\n            {\n                width: \"100%\",\n                marginTop: props.noTopMargin ? 0 : Platform.OS === \"web\" ? Spacing.large : Spacing.normal\n            },\n            props.style\n        ]}\n    />\n);\n\nexport default Column;\n","import React, { FC, useCallback } from \"react\";\nimport { Platform } from \"react-native\";\nimport { Input as NativeInput, InputProps as NativeInputProps } from \"react-native-elements\";\n\nimport useColors from \"../hooks/useColors\";\n\nexport interface Validation {\n    regexp: RegExp;\n    error: string;\n}\n\nexport interface InputProps extends NativeInputProps {\n    color?: string;\n    size?: \"small\" | \"normal\" | \"large\";\n    allowed?: Validation[];\n    forbidden?: Validation[];\n    onError?: (error: string) => void;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst Input: FC<InputProps> = props => {\n    const { textDark, textMedium, textLight } = useColors();\n    const size = props.size || \"normal\";\n    const color = props.color || textDark;\n    const fontSize = size === \"small\" ? 16 : size === \"large\" ? 24 : 20;\n    const onChangeText = useCallback(\n        (text: string) => {\n            props.onChangeText?.(text);\n            props.onError?.(\"\");\n            const errors = [] as string[];\n            if (text !== \"\" && props.forbidden) {\n                props.forbidden.forEach(validation => {\n                    if (text.match(validation.regexp)) {\n                        errors.push(validation.error);\n                    }\n                });\n            }\n            if (text !== \"\" && props.allowed) {\n                props.allowed.forEach(validation => {\n                    if (!text.match(validation.regexp)) {\n                        errors.push(validation.error);\n                    }\n                });\n            }\n            if (errors.length > 0) {\n                props.onError?.(errors.join(\"\\n\"));\n            }\n        },\n        [props.onChangeText, props.onError, props.forbidden, props.allowed]\n    );\n    return (\n        <NativeInput\n            {...props}\n            inputStyle={[\n                { fontSize, fontFamily: \"regular\", paddingBottom: 4, color, marginTop: 0, minHeight: 32 },\n                // @ts-ignore\n                Platform.OS === \"web\" ? { outline: \"none\" } : {},\n                props.inputStyle\n            ]}\n            labelStyle={[{ color: textMedium }, props.labelStyle]}\n            placeholderTextColor={props.placeholderTextColor || textLight}\n            errorStyle={props.onError ? { height: 0 } : props.errorStyle}\n            containerStyle={[{ paddingHorizontal: 0 }, props.containerStyle]}\n            onChangeText={onChangeText}\n        />\n    );\n};\n\nexport default Input;\n","import { useCallback, useContext, useEffect, useMemo, useState } from \"react\";\n\nimport { ethers } from \"ethers\";\nimport useAsyncEffect from \"use-async-effect\";\nimport { SUSHI_BAR } from \"../constants/contracts\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport Token from \"../types/Token\";\nimport { getContract, parseBalance } from \"../utils\";\nimport useSDK from \"./useSDK\";\n\nexport type StakeAction = \"sushi-balance\" | \"stake\";\nexport type UnstakeAction = \"xsushi-balance\" | \"unstake\";\n\nexport interface StakingState {\n    sushi?: Token;\n    xSushi?: Token;\n    sushiStaked?: ethers.BigNumber;\n    sushiSupply?: ethers.BigNumber;\n    xSushiSupply?: ethers.BigNumber;\n    amount: string;\n    setAmount: (amount: string) => void;\n    sushiAllowed: boolean;\n    setSushiAllowed: (allowed: boolean) => void;\n    xSushiAllowed: boolean;\n    setXSushiAllowed: (allowed: boolean) => void;\n    loading: boolean;\n    onEnter: () => Promise<void>;\n    entering: boolean;\n    onLeave: () => Promise<void>;\n    leaving: boolean;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst useStakingState: () => StakingState = () => {\n    const { provider, signer, address, getTokenAllowance, tokens, updateTokens } = useContext(EthersContext);\n    const { enterSushiBar, leaveSushiBar } = useSDK();\n    const [sushiStaked, setSushiStaked] = useState<ethers.BigNumber>();\n    const [sushiSupply, setSushiSupply] = useState<ethers.BigNumber>();\n    const [xSushiSupply, setXSushiSupply] = useState<ethers.BigNumber>();\n    const [amount, setAmount] = useState(\"\");\n    const [sushiAllowed, setSushiAllowed] = useState(false);\n    const [xSushiAllowed, setXSushiAllowed] = useState(false);\n    const [loading, setLoading] = useState(false);\n    const [entering, setEntering] = useState(false);\n    const [leaving, setLeaving] = useState(false);\n\n    const sushi = useMemo(() => tokens.find(token => token.symbol === \"SUSHI\"), [tokens]);\n    const xSushi = useMemo(() => tokens.find(token => token.symbol === \"xSUSHI\"), [tokens]);\n\n    useEffect(() => {\n        setAmount(\"\");\n    }, [address]);\n\n    useAsyncEffect(async () => {\n        if (sushi && xSushi && provider && signer) {\n            setSushiAllowed(false);\n            setXSushiAllowed(false);\n            setLoading(true);\n            try {\n                const minAllowance = ethers.BigNumber.from(2)\n                    .pow(96)\n                    .sub(1);\n                const sushiAllowance = await getTokenAllowance(sushi.address, SUSHI_BAR);\n                setSushiAllowed(ethers.BigNumber.from(sushiAllowance).gte(minAllowance));\n                const xSushiAllowance = await getTokenAllowance(xSushi.address, SUSHI_BAR);\n                setXSushiAllowed(ethers.BigNumber.from(xSushiAllowance).gte(minAllowance));\n\n                const sushiContract = getContract(\"ERC20\", sushi.address, signer);\n                setSushiStaked(await sushiContract.balanceOf(SUSHI_BAR));\n                setSushiSupply(await sushiContract.totalSupply());\n                const xSushiContract = getContract(\"ERC20\", xSushi.address, signer);\n                setXSushiSupply(await xSushiContract.totalSupply());\n            } finally {\n                setLoading(false);\n            }\n        }\n    }, [sushi, xSushi, provider, signer]);\n\n    const onEnter = useCallback(async () => {\n        if (amount && sushi && signer) {\n            setEntering(true);\n            try {\n                const parsed = parseBalance(amount, sushi.decimals);\n                const tx = await enterSushiBar(parsed, signer);\n                if (tx) {\n                    await tx.wait();\n                    await updateTokens();\n                    setAmount(\"\");\n                }\n            } finally {\n                setEntering(false);\n            }\n        }\n    }, [amount, sushi, signer]);\n\n    const onLeave = useCallback(async () => {\n        if (amount && xSushi && signer) {\n            setLeaving(true);\n            try {\n                const parsed = parseBalance(amount, xSushi.decimals);\n                const tx = await leaveSushiBar(parsed, signer);\n                if (tx) {\n                    await tx.wait();\n                    await updateTokens();\n                    setAmount(\"\");\n                }\n            } finally {\n                setLeaving(false);\n            }\n        }\n    }, [amount, xSushi, signer]);\n\n    return {\n        sushi,\n        xSushi,\n        sushiStaked,\n        sushiSupply,\n        xSushiSupply,\n        amount,\n        setAmount,\n        sushiAllowed,\n        setSushiAllowed,\n        xSushiAllowed,\n        setXSushiAllowed,\n        loading,\n        onEnter,\n        entering,\n        onLeave,\n        leaving\n    };\n};\n\nexport default useStakingState;\n","import React, { useState } from \"react\";\nimport { Platform, View } from \"react-native\";\n\nimport Button from \"../components/Button\";\nimport Container from \"../components/Container\";\nimport Content from \"../components/Content\";\nimport ErrorMessage from \"../components/ErrorMessage\";\nimport FetchingButton from \"../components/FetchingButton\";\nimport Heading from \"../components/Heading\";\nimport InfoBox from \"../components/InfoBox\";\nimport InsufficientBalanceButton from \"../components/InsufficientBalanceButton\";\nimport Notice from \"../components/Notice\";\nimport Text from \"../components/Text\";\nimport Title from \"../components/Title\";\nimport TokenInput from \"../components/TokenInput\";\nimport WebFooter from \"../components/web/WebFooter\";\nimport { StakingSubMenu } from \"../components/web/WebSubMenu\";\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport useStakingState, { StakingState } from \"../hooks/useStakingState\";\nimport MetamaskError from \"../types/MetamaskError\";\nimport { formatBalance, isEmptyValue, parseBalance } from \"../utils\";\nimport Screen from \"./Screen\";\n\nconst UnstakeScreen = () => {\n    return (\n        <Screen>\n            <StakingSubMenu />\n            <Container>\n                <Content>\n                    <Title text={\"Unstake\"} />\n                    <Text light={true}>Convert your xSUSHI to SUSHI.</Text>\n                    <Staking />\n                    {Platform.OS === \"web\" && <WebFooter />}\n                </Content>\n            </Container>\n        </Screen>\n    );\n};\n\nconst Staking = () => {\n    const state = useStakingState();\n    return (\n        <View style={{ marginTop: Spacing.large }}>\n            <XSushiBalance state={state} />\n            <AmountInput state={state} />\n            {state.xSushi && state.xSushi.balance.isZero() && (\n                <Notice text={\"You don't have any xSUSHI.\"} color={\"orange\"} style={{ marginTop: Spacing.small }} />\n            )}\n            <UnstakeInfo state={state} />\n        </View>\n    );\n};\n\nconst XSushiBalance = ({ state }: { state: StakingState }) => {\n    return (\n        <View>\n            <Heading text={\"Your xSUSHI\"} />\n            <Text disabled={!state.xSushi} style={{ fontSize: 28, marginBottom: Spacing.normal }}>\n                {!state.xSushi\n                    ? \"Fetching...\"\n                    : formatBalance(state.xSushi.balance, state.xSushi.decimals, IS_DESKTOP ? 18 : 8)}\n            </Text>\n        </View>\n    );\n};\n\nconst AmountInput = ({ state }: { state: StakingState }) => {\n    if (!state.xSushi || state.xSushi.balance.isZero()) {\n        return <Heading text={\"Amount To Unstake\"} disabled={true} />;\n    }\n    return (\n        <View>\n            <Heading text={\"Amount To Unstake\"} />\n            <TokenInput token={state.xSushi} amount={state.amount} onAmountChanged={state.setAmount} autoFocus={true} />\n        </View>\n    );\n};\n\nconst UnstakeInfo = ({ state }: { state: StakingState }) => {\n    const disabled =\n        !state.sushi || !state.xSushi || !state.sushiStaked || !state.xSushiSupply || isEmptyValue(state.amount);\n    const sushiAmount = disabled\n        ? undefined\n        : parseBalance(state.amount, state.xSushi!.decimals)\n              .mul(state.sushiStaked!)\n              .div(state.xSushiSupply!);\n    return (\n        <InfoBox>\n            <Text disabled={disabled} style={{ fontSize: 28 }}>\n                {!sushiAmount ? \"N/A\" : formatBalance(sushiAmount, state.sushi!.decimals, 8) + \" SUSHI\"}\n            </Text>\n            <Controls state={state} />\n        </InfoBox>\n    );\n};\n\nconst Controls = ({ state }: { state: StakingState }) => {\n    const [error, setError] = useState<MetamaskError>({});\n    return (\n        <View style={{ marginTop: Spacing.normal }}>\n            {!state.xSushi || state.xSushi.balance.isZero() || isEmptyValue(state.amount) ? (\n                <UnstakeButton state={state} onError={setError} disabled={true} />\n            ) : parseBalance(state.amount, state.xSushi.decimals).gt(state.xSushi.balance) ? (\n                <InsufficientBalanceButton symbol={state.xSushi.symbol} />\n            ) : state.loading ? (\n                <FetchingButton />\n            ) : (\n                <UnstakeButton state={state} onError={setError} disabled={false} />\n            )}\n            {error.message && error.code !== 4001 && <ErrorMessage error={error} />}\n        </View>\n    );\n};\n\nconst UnstakeButton = ({\n    state,\n    onError,\n    disabled\n}: {\n    state: StakingState;\n    onError: (e) => void;\n    disabled: boolean;\n}) => {\n    const onPress = async () => {\n        onError({});\n        try {\n            await state.onLeave();\n            state.setAmount(\"\");\n        } catch (e) {\n            onError(e);\n        }\n    };\n    return <Button title={\"Unstake\"} loading={state.leaving} onPress={onPress} disabled={disabled} />;\n};\n\nexport default UnstakeScreen;\n"],"sourceRoot":""}