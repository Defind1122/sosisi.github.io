{"version":3,"sources":["src/context/EthersContext.tsx","src/components/FlexView.tsx","src/components/web/WebHeader.tsx","src/hooks/useLinker.tsx","src/constants/tokens.ts","src/utils/index.ts","src/components/Button.tsx","src/hooks/useAllCommonPairs.tsx","src/hooks/useSDK.tsx","src/components/Container.tsx","src/components/Content.tsx","src/components/app/AppHeader.tsx","src/components/web/ConnectToWallet.tsx","src/components/web/MobileNotSupported.tsx","src/screens/Screen.tsx","src/components/Title.tsx","src/components/web/WebSubMenu.tsx","src/utils/fetch-utils.ts","src/constants/Fraction.ts","src/components/SocialIcons.tsx","src/constants/dimension.ts","src/constants/contracts.ts","src/context/index.tsx","src/screens/EmptyScreen.tsx","src/screens/index.tsx","App.tsx","src/constants/colors.ts","src/hooks/useColors.tsx","web-build/register-service-worker.js","globals.js","src/context/GlobalContext.tsx","src/utils/analytics-utils.ts","assets/metamask-dark.png","assets/metamask.png","assets/sushiswap.jpg","src/components/Text.tsx"],"names":["EthersContext","React","createContext","provider","undefined","signer","kovanProvider","kovanSigner","chainId","address","ensName","addOnBlockListener","_name","_listener","removeOnBlockListener","tokens","ETH","setTokens","_tokens","updateTokens","a","async","loadingTokens","approveToken","_token","_spender","_amount","getTokenAllowance","ethers","constants","Zero","getTokenBalance","_who","getTotalSupply","EthersContextProvider","children","useState","setProvider","setKovanProvider","setSigner","setKovanSigner","setChainId","setAddress","setENSName","onBlockListeners","setOnBlockListeners","setLoadingTokens","useEffect","kovan","providers","AlchemyProvider","wallet","Wallet","useAsyncEffect","window","ethereum","web3","Web3Provider","alchemy","network","getSigner","onAccountsChanged","selectedAddress","Analytics","Number","onChainChanged","on","off","lookupAddress","ens","fetchTokens","data","useCallback","token","spender","amount","MaxUint256","erc20","getContract","estimateGas","approve","gasLimit","tx","logTransaction","toString","send","contract","owner","who","balanceOf","totalSupply","name","listener","old","onBlock","block","Object","entries","Provider","value","EthersContextConsumer","Consumer","FlexView","props","flexDirection","direction","style","Title","darkMode","useContext","GlobalContext","useColors","textDark","white","color","alignSelf","alignItems","to","textDecoration","fontSize","Menu","height","MenuItem","title","path","Status","DarkModeSwitch","textLight","match","useRouteMatch","active","startsWith","marginLeft","Spacing","tiny","fontFamily","padding","green","borderDark","connected","substring","length","justifyContent","small","paddingHorizontal","borderRadius","borderWidth","borderColor","backgroundColor","width","marginRight","setDarkMode","onChange","dark","marginBottom","transform","scale","WebHeader","header","position","top","zIndex","HEADER_HEIGHT","paddingBottom","flex","HEADER_WIDTH","paddingTop","normal","Platform","OS","route","target","history","useHistory","open","push","_target","navigate","useNavigation","AddressZero","decimals","symbol","logoURI","balance","BigNumber","from","CONTRACTS","ERC20","IUniswapV2Factory","IUniswapV2Pair","IUniswapV2Router02","IWETH","MasterChef","Migrator2","SushiBar","OrderBook","Settlement","LPTokenScanner","abi","formatBalance","maxFraction","formatted","utils","formatUnits","split","substr","parseBalance","parseUnits","isEmptyValue","text","isBigNumber","isZero","replace","convertToken","WETH","SDKToken","ChainId","MAINNET","convertAmount","TokenAmount","parseCurrencyAmount","toExact","ContractFactory","pow10","exp","pow","Button","primary","textMedium","placeholder","backgroundLight","type","size","fontWeight","disabled","loading","onPress","loadingProps","buttonStyle","titleStyle","disabledTitleStyle","disabledStyle","DAI","Token","USDC","USDT","SUSHI","YAM","AMPL","BASES_TO_CHECK_TRADES_AGAINST","CUSTOM_BASES","wrappedCurrency","currency","ETHER","useAllCommonPairs","loadAllCommonPairs","currencyA","currencyB","bases","tokenA","tokenB","basePairs","flatMap","base","map","otherBase","filter","t0","t1","allPairCombinations","Boolean","b","customBases","customBasesA","customBasesB","find","equals","Promise","all","pair","Fetcher","fetchPairData","pairs","minAmount","percent","sub","mul","numerator","div","denominator","Order","maker","fromToken","toToken","amountIn","amountOutMin","recipient","deadline","Math","floor","Date","now","v","r","s","filledAmountIn","canceled","this","eq","toNumber","SETTLEMENT","settlement","getAddress","hashOfOrder","hash","signMessage","arrayify","signature","splitSignature","sign","useSDK","allowedSlippage","Percent","getTrade","fromAmount","isETH","CurrencyAmount","ether","Trade","bestTradeExactIn","maxHops","maxNumResults","swap","trade","Router","feeOnTransfer","ttl","params","swapCallParameters","router","ROUTER","methodName","args","functions","arg","createOrder","order","toArgs","orderBook","ORDER_BOOK","cancelOrder","slice","queryOrderFilledEvents","filters","OrderFilled","queryFilter","wrapETH","weth","deposit","unwrapETH","withdraw","getPair","addLiquidity","toAmount","getTime","removeLiquidityETH","liquidity","amountETH","removeLiquidity","addLiquidityETH","getExpectedSushiRewardPerBlock","masterChef","MASTER_CHEF","totalAllocPoint","sushiPerBlock","poolInfo","id","allocPoint","lpTokenId","enterSushiBar","sushiBar","SUSHI_BAR","enter","leaveSushiBar","leave","migrate","lpToken","migrator2","MIGRATOR2","calculateSwapFee","calculateLimitOrderFee","calculateLimitOrderReturn","price","limitOrderFeeDeducted","swapFeeDeducted","Fraction","parse","apply","calculateAmountOfLPTokenMinted","liquidityToken","getLiquidityMinted","Container","Universal","select","web","contentContainerStyle","default","Content","WEB_WIDTH","paddingVertical","huge","AppHeader","background","View","StatusBar","translucent","ConnectWallet","enable","Linking","Image","source","require","containerStyle","MobileNotSupported","minHeight","Text","marginTop","SocialIcons","Screen","deviceType","DeviceType","PHONE","light","textAlign","right","bottom","left","ConnectToWallet","AppLoading","SwapSubMenu","WebSubMenu","items","LiquiditySubMenu","StakingSubMenu","submenu","SUB_MENU_HEIGHT","borderBottomWidth","item","key","accent","isExact","fetch","response","json","balances","getBalance","i","tokenBalances","tokenBalance","sort","t2","fetchPools","pools","pool","poolToken","totalDeposited","userInfo","amountDeposited","pendingSushi","fetchMyLPTokens","fetchLPTokens","SUSHISWAP_FACTORY","fetchMyUniswapLPTokens","UNISWAP_FACTORY","factory","factoryContract","allPairsLength","scanner","LP_TOKEN_SCANNER","account","pages","page","findPairs","min","flat","index","findOrFetchToken","token0","token1","t","toLowerCase","meta","logo","fetchMyLimitOrders","canceledHashes","numberOfHashesOfMaker","hashesOfMaker","hashes","HashZero","orderOfHash","filledAmountInOfHash","includes","myOrders","compareOrders","o0","o1","status","compared","fetchMyCanceledLimitOrderHashes","numberOfCanceledHashesOfMaker","allCanceledHashes","sdk","numeratorToken","denominatorToken","NAN","ZERO","BASE","isNaN","fraction","gt","lt","maxFractions","str","endsWith","One","SocialIcon","iconColor","onPressTwitter","useLinker","onPressGithub","onPressDiscord","raised","reverse","reverseColor","SCREEN_HEIGHT","round","Dimensions","get","large","ContextProvider","EmptyScreen","FarmingScreen","lazy","LiquidityScreen","MigrateScreen","MyLimitOrdersScreen","RemoveLiquidityScreen","StakeScreen","UnstakeScreen","SwapScreen","Screens","load","WebScreens","fallback","Tab","createBottomTabNavigator","AppScreens","border","theme","DefaultTheme","colors","card","notification","NavigationContainer","Navigator","tabBarOptions","activeTintColor","inactiveTintColor","labelStyle","component","options","tabOptions","iconName","tabBarIcon","App","useFonts","OpenSans_300Light","regular","OpenSans_400Regular","bold","OpenSans_600SemiBold","Colors","common","transparent","secondary","red","twitter","facebook","shadow","navigator","addEventListener","serviceWorker","register","scope","then","info","catch","error","console","global","Buffer","clear","mnemonic","setMnemonic","GlobalContextProvider","colorScheme","useColorScheme","setDeviceType","getDeviceTypeAsync","AsyncStorage","getItem","mode","mne","removeItem","setItem","String","GlobalContextConsumer","gasPrice","module","exports","medium","note","h1Style","h2Style","h3Style","h4Style","caption"],"mappings":"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","file":"static/js/app.727da468.chunk.js","sourcesContent":["import React, { useCallback, useEffect, useState } from \"react\";\n\nimport * as Analytics from \"expo-firebase-analytics\";\n\nimport { EventType, Listener } from \"@ethersproject/abstract-provider\";\nimport { ethers } from \"ethers\";\nimport useAsyncEffect from \"use-async-effect\";\nimport { ETH } from \"../constants/tokens\";\nimport Token from \"../types/Token\";\nimport { getContract } from \"../utils\";\nimport { logTransaction } from \"../utils/analytics-utils\";\nimport { fetchTokens } from \"../utils/fetch-utils\";\n\nexport type OnBlockListener = (block?: number) => void | Promise<void>;\n\nconst PRIVATE_KEY = \"0xca417c154948d370f011c5d9ac3fba516d7b15671a069e7d5d48f56b723c9cc1\";\n\nexport const EthersContext = React.createContext({\n    provider: undefined as ethers.providers.JsonRpcProvider | undefined,\n    signer: undefined as ethers.providers.JsonRpcSigner | undefined,\n    kovanProvider: undefined as ethers.providers.JsonRpcProvider | undefined,\n    kovanSigner: undefined as ethers.Signer | undefined,\n    chainId: 0,\n    address: null as string | null,\n    ensName: null as string | null,\n    addOnBlockListener: (_name: string, _listener: OnBlockListener) => {},\n    removeOnBlockListener: (_name: string) => {},\n    tokens: [ETH] as Token[],\n    setTokens: (_tokens: Token[]) => {},\n    updateTokens: async () => {},\n    loadingTokens: false,\n    approveToken: async (_token: string, _spender: string, _amount?: ethers.BigNumber) => {\n        return {} as ethers.providers.TransactionResponse | undefined;\n    },\n    getTokenAllowance: async (_token: string, _spender: string) => {\n        return ethers.constants.Zero as ethers.BigNumber | undefined;\n    },\n    getTokenBalance: async (_token: string, _who: string) => {\n        return ethers.constants.Zero as ethers.BigNumber | undefined;\n    },\n    getTotalSupply: async (_token: string) => {\n        return ethers.constants.Zero as ethers.BigNumber | undefined;\n    }\n});\n\n// tslint:disable-next-line:max-func-body-length\nexport const EthersContextProvider = ({ children }) => {\n    // const { mnemonic } = useContext(GlobalContext);\n    const [provider, setProvider] = useState<ethers.providers.JsonRpcProvider>();\n    const [kovanProvider, setKovanProvider] = useState<ethers.providers.JsonRpcProvider>();\n    const [signer, setSigner] = useState<ethers.providers.JsonRpcSigner>();\n    const [kovanSigner, setKovanSigner] = useState<ethers.Signer>();\n    const [chainId, setChainId] = useState<number>(1);\n    const [address, setAddress] = useState<string | null>(null);\n    const [ensName, setENSName] = useState<string | null>(null);\n    const [onBlockListeners, setOnBlockListeners] = useState<{ [name: string]: OnBlockListener }>({});\n    const [tokens, setTokens] = useState<Token[]>([]);\n    const [loadingTokens, setLoadingTokens] = useState(true);\n\n    useEffect(() => {\n        // Kovan\n        const kovan = new ethers.providers.AlchemyProvider(42, \"3NGZpyMoljbXikGsz9hWzKZ_bnqbZny2\");\n        const wallet = new ethers.Wallet(PRIVATE_KEY, kovan);\n        setKovanProvider(kovan);\n        setKovanSigner(wallet);\n    }, []);\n\n    useAsyncEffect(async () => {\n        // Mainnet\n        if (window.ethereum) {\n            const web3 = new ethers.providers.Web3Provider(window.ethereum);\n            const alchemy = new ethers.providers.AlchemyProvider(\n                web3.network,\n                __DEV__ ? \"gSgAj0Ntfsn-DOKKlUhjqeUlePrVX8va\" : \"yLD5iJzUEo_Kvlg_PwMXl7N9ESK2_b6E\"\n            );\n            setProvider(alchemy);\n            setSigner(await web3.getSigner());\n        }\n    }, [window.ethereum]);\n\n    useEffect(() => {\n        if (window.ethereum) {\n            const onAccountsChanged = () => {\n                setAddress(window.ethereum.selectedAddress);\n                if (window.ethereum.chainId && window.ethereum.selectedAddress) {\n                    Analytics.setUserId(Number(window.ethereum.chainId) + \":\" + window.ethereum.selectedAddress);\n                }\n            };\n            const onChainChanged = () => {\n                setChainId(Number(window.ethereum.chainId));\n            };\n            onAccountsChanged();\n            onChainChanged();\n            window.ethereum.on(\"accountsChanged\", onAccountsChanged);\n            window.ethereum.on(\"chainChanged\", onChainChanged);\n            return () => {\n                window.ethereum.off(\"accountsChanged\", onAccountsChanged);\n                window.ethereum.off(\"chainChanged\", onAccountsChanged);\n            };\n        }\n    }, [window.ethereum, signer]);\n\n    useAsyncEffect(async () => {\n        if (signer && address) {\n            const ens = await signer.provider.lookupAddress(address);\n            setENSName(ens);\n        }\n    }, [signer, address]);\n\n    // Set provider and signer for mobile app\n    // useEffect(() => {\n    //     if (mnemonic) {\n    //         const alchemy = new ethers.providers.AlchemyProvider(1, Constants.manifest.extra.alchemyApiKey);\n    //         setProvider(alchemy);\n    //         const wallet = ethers.Wallet.fromMnemonic(mnemonic).connect(alchemy);\n    //         setSigner(wallet);\n    //     }\n    // }, [mnemonic]);\n\n    const updateTokens = async () => {\n        if (address && provider) {\n            try {\n                const data = await fetchTokens(address, provider);\n                if (data) {\n                    await setTokens(data);\n                }\n            } finally {\n                setLoadingTokens(false);\n            }\n        }\n    };\n\n    useAsyncEffect(async () => {\n        if (provider) {\n            setLoadingTokens(true);\n            await updateTokens();\n        }\n    }, [provider, address]);\n\n    const approveToken = useCallback(\n        async (token: string, spender: string, amount?: ethers.BigNumber) => {\n            if (signer) {\n                amount = amount || ethers.constants.MaxUint256;\n                const erc20 = getContract(\"ERC20\", token, signer);\n                const gasLimit = await erc20.estimateGas.approve(spender, amount);\n                const tx = await erc20.approve(spender, amount, {\n                    gasLimit\n                });\n                return await logTransaction(tx, \"ERC20.approve()\", spender, amount.toString());\n            }\n        },\n        [signer]\n    );\n\n    const getTokenAllowance = useCallback(\n        async (token: string, spender: string) => {\n            if (provider && address) {\n                return await provider.send(\"alchemy_getTokenAllowance\", [\n                    {\n                        contract: token,\n                        owner: address,\n                        spender\n                    }\n                ]);\n            }\n        },\n        [provider, address]\n    );\n\n    const getTokenBalance = useCallback(\n        async (token: string, who: string) => {\n            if (provider && signer) {\n                const erc20 = getContract(\"ERC20\", token, signer);\n                return await erc20.balanceOf(who);\n            }\n        },\n        [provider, signer]\n    );\n\n    const getTotalSupply = useCallback(\n        async (token: string) => {\n            if (signer) {\n                const erc20 = getContract(\"ERC20\", token, signer);\n                return await erc20.totalSupply();\n            }\n        },\n        [signer]\n    );\n\n    const addOnBlockListener = useCallback(\n        (name, listener) => {\n            setOnBlockListeners(old => ({ ...old, [name]: listener }));\n        },\n        [setOnBlockListeners]\n    );\n\n    const removeOnBlockListener = useCallback(\n        name => {\n            setOnBlockListeners(old => {\n                delete old[name];\n                return old;\n            });\n        },\n        [setOnBlockListeners]\n    );\n\n    useEffect(() => {\n        if (provider && chainId === 1) {\n            const onBlock = async (block: number) => {\n                for (const listener of Object.entries(onBlockListeners)) {\n                    await listener[1]?.(block);\n                }\n            };\n            provider.on(\"block\", onBlock);\n            return () => {\n                provider.off(\"block\", onBlock);\n            };\n        }\n    }, [provider, chainId, onBlockListeners]);\n\n    return (\n        <EthersContext.Provider\n            value={{\n                provider,\n                signer,\n                kovanProvider,\n                kovanSigner,\n                chainId,\n                address,\n                ensName,\n                tokens,\n                setTokens,\n                updateTokens,\n                loadingTokens,\n                approveToken,\n                getTokenAllowance,\n                getTokenBalance,\n                getTotalSupply,\n                addOnBlockListener,\n                removeOnBlockListener\n            }}>\n            {children}\n        </EthersContext.Provider>\n    );\n};\n\ninterface JsonRPCRequest {\n    jsonrpc: string;\n    method: string;\n    params: any[];\n    id: number;\n}\n\ninterface JsonRPCResponse {\n    jsonrpc: string;\n    id: number;\n    result?: any;\n    error?: string;\n}\n\ninterface Callback<ResultType> {\n    (error: Error): void;\n    (error: null, val: ResultType): void;\n}\n\ndeclare global {\n    interface Window {\n        ethereum: {\n            enable(): void;\n            send(payload: any, callback: any): any;\n            send(payload: JsonRPCRequest, callback: Callback<JsonRPCResponse>): any;\n            selectedAddress: string;\n            chainId: string;\n            on(eventName: EventType, listener: Listener);\n            off(eventName: EventType, listener: Listener);\n        };\n    }\n}\n\nexport const EthersContextConsumer = EthersContext.Consumer;\n","import React, { FunctionComponent } from \"react\";\nimport { View, ViewProps } from \"react-native\";\n\ninterface FlexViewProps extends ViewProps {\n    direction?: \"row\" | \"column\";\n}\n\nconst FlexView: FunctionComponent<FlexViewProps> = props => {\n    const flexDirection = props.direction || \"row\";\n    return <View {...props} style={[{ flexDirection }, props.style]} />;\n};\nexport default FlexView;\n","import React, { useCallback, useContext } from \"react\";\nimport { View } from \"react-native\";\nimport { Link, useRouteMatch } from \"react-router-dom\";\n\nimport Switch from \"expo-dark-mode-switch\";\n\nimport { HEADER_HEIGHT, HEADER_WIDTH, Spacing } from \"../../constants/dimension\";\nimport { EthersContext } from \"../../context/EthersContext\";\nimport { GlobalContext } from \"../../context/GlobalContext\";\nimport useColors from \"../../hooks/useColors\";\nimport FlexView from \"../FlexView\";\nimport Text from \"../Text\";\n\nconst WebHeader = () => {\n    const { header } = useColors();\n    return (\n        <View\n            // @ts-ignore\n            style={{\n                position: \"fixed\",\n                top: 0,\n                zIndex: 100,\n                width: \"100%\",\n                height: HEADER_HEIGHT,\n                paddingBottom: Spacing.small,\n                backgroundColor: header\n            }}>\n            <FlexView\n                style={{\n                    flex: 1,\n                    width: HEADER_WIDTH,\n                    alignSelf: \"center\",\n                    justifyContent: \"space-between\",\n                    alignItems: \"flex-end\",\n                    paddingTop: Spacing.small,\n                    paddingHorizontal: Spacing.normal\n                }}>\n                <Title />\n                <Menu />\n            </FlexView>\n        </View>\n    );\n};\n\nexport const Title = () => {\n    const { darkMode } = useContext(GlobalContext);\n    const { textDark, white } = useColors();\n    const color = darkMode ? white : textDark;\n    return (\n        <View style={{ alignSelf: \"center\", alignItems: \"center\" }}>\n            <Link to={\"/\"} style={{ textDecoration: \"none\" }}>\n                <Text style={{ fontSize: 28, color }}>SushiSwap</Text>\n            </Link>\n        </View>\n    );\n};\n\nconst Menu = () => {\n    return (\n        <FlexView\n            style={{\n                height: \"100%\",\n                alignItems: \"flex-end\"\n            }}>\n            <MenuItem title={\"Swap\"} path={\"/swap\"} />\n            <MenuItem title={\"Liquidity\"} path={\"/liquidity\"} />\n            {/*<MenuItem title={\"Farming\"} path={\"/farming\"} />*/}\n            <MenuItem title={\"Staking\"} path={\"/staking\"} />\n            <Status />\n            <DarkModeSwitch />\n        </FlexView>\n    );\n};\n\nconst MenuItem = ({ title, path }) => {\n    const { textDark, textLight } = useColors();\n    const match = useRouteMatch(path);\n    const active = match?.path?.startsWith(path);\n    return (\n        <Link to={path} style={{ marginLeft: Spacing.tiny, textDecoration: \"none\" }}>\n            <View>\n                <Text style={{ fontFamily: \"regular\", fontSize: 18, color: active ? textDark : textLight, padding: 3 }}>\n                    {title}\n                </Text>\n            </View>\n        </Link>\n    );\n};\n\nconst Status = () => {\n    const { textLight, green, borderDark } = useColors();\n    const { chainId, address, ensName } = useContext(EthersContext);\n    const connected = chainId === 1 && address;\n    const title = connected\n        ? ensName || address!.substring(0, 6) + \"...\" + address!.substring(address!.length - 4, address!.length)\n        : \"Not connected\";\n    const color = connected ? green : textLight;\n    return (\n        <FlexView\n            style={{\n                height: 28,\n                justifyContent: \"center\",\n                alignItems: \"center\",\n                marginLeft: Spacing.small,\n                paddingHorizontal: Spacing.small,\n                borderRadius: 16,\n                borderWidth: 1,\n                borderColor: borderDark\n            }}>\n            <View style={{ backgroundColor: color, width: 6, height: 6, borderRadius: 3, marginRight: 12 }} />\n            <Text style={{ fontSize: 15, color: textLight, marginRight: 2 }}>{title}</Text>\n        </FlexView>\n    );\n};\n\nconst DarkModeSwitch = () => {\n    const { darkMode, setDarkMode } = useContext(GlobalContext);\n    const onChange = useCallback(\n        async dark => {\n            await setDarkMode(dark);\n        },\n        [setDarkMode]\n    );\n    return (\n        <View style={{ marginLeft: Spacing.tiny, marginRight: -8, marginBottom: -3 }}>\n            <Switch\n                value={darkMode}\n                onChange={onChange}\n                style={{\n                    transform: [\n                        {\n                            scale: 0.75\n                        }\n                    ]\n                }}\n            />\n        </View>\n    );\n};\n\nexport default WebHeader;\n","import { useCallback } from \"react\";\nimport { Platform } from \"react-native\";\nimport { useHistory } from \"react-router-dom\";\n\nimport { useNavigation } from \"@react-navigation/native\";\n\nconst useWebLinker = (path: string, route: string, target?: string) => {\n    const history = useHistory();\n    return useCallback(() => {\n        if (target) {\n            window.open(path, target);\n        } else {\n            history.push(path);\n        }\n    }, [path, target]);\n};\n\nconst useAppLinker = (path: string, route: string, _target?: string) => {\n    const { navigate } = useNavigation();\n    return useCallback(() => {\n        navigate(route);\n    }, [route]);\n};\n\nexport default Platform.OS === \"web\" ? useWebLinker : useAppLinker;\n","import { ethers } from \"ethers\";\nimport Token from \"../types/Token\";\n\nexport const ETH: Token = {\n    name: \"Ethereum\",\n    address: ethers.constants.AddressZero,\n    decimals: 18,\n    symbol: \"ETH\",\n    logoURI: \"https://lite.sushiswap.fi/images/tokens/ETH.png\",\n    balance: ethers.BigNumber.from(0)\n};\n","import ERC20 from \"@sushiswap/core/build/contracts/ERC20.json\";\nimport IUniswapV2Factory from \"@sushiswap/core/build/contracts/IUniswapV2Factory.json\";\nimport IUniswapV2Pair from \"@sushiswap/core/build/contracts/IUniswapV2Pair.json\";\nimport IUniswapV2Router02 from \"@sushiswap/core/build/contracts/IUniswapV2Router02.json\";\nimport IWETH from \"@sushiswap/core/build/contracts/IWETH.json\";\nimport MasterChef from \"@sushiswap/core/build/contracts/MasterChef.json\";\nimport Migrator2 from \"@sushiswap/core/build/contracts/Migrator2.json\";\nimport SushiBar from \"@sushiswap/core/build/contracts/SushiBar.json\";\nimport { ChainId, CurrencyAmount, Token as SDKToken, TokenAmount, WETH } from \"@sushiswap/sdk\";\nimport OrderBook from \"@sushiswap/settlement/deployments/kovan/OrderBook.json\";\nimport Settlement from \"@sushiswap/settlement/deployments/mainnet/Settlement.json\";\nimport { ethers } from \"ethers\";\nimport LPTokenScanner from \"../constants/abi/LPTokenScanner.json\";\nimport Token from \"../types/Token\";\n\nconst CONTRACTS = {\n    ERC20,\n    IUniswapV2Factory,\n    IUniswapV2Pair,\n    IUniswapV2Router02,\n    IWETH,\n    MasterChef,\n    Migrator2,\n    SushiBar,\n    OrderBook,\n    Settlement,\n    LPTokenScanner: { abi: LPTokenScanner }\n};\n\nexport const formatBalance = (value: ethers.BigNumberish, decimals = 18, maxFraction = 0) => {\n    const formatted = ethers.utils.formatUnits(value, decimals);\n    if (maxFraction > 0) {\n        const split = formatted.split(\".\");\n        if (split.length > 1) {\n            return split[0] + \".\" + split[1].substr(0, maxFraction);\n        }\n    }\n    return formatted;\n};\n\nexport const parseBalance = (value: string, decimals = 18) => {\n    return ethers.utils.parseUnits(value || \"0\", decimals);\n};\n\nexport const isEmptyValue = (text: string) =>\n    ethers.BigNumber.isBigNumber(text)\n        ? ethers.BigNumber.from(text).isZero()\n        : text === \"\" || text.replace(/0/g, \"\").replace(/\\./, \"\") === \"\";\n\nexport const convertToken = (token: Token) => {\n    return token.symbol === \"ETH\" ? WETH[\"1\"] : new SDKToken(ChainId.MAINNET, token.address, token.decimals);\n};\n\nexport const convertAmount = (token: Token, amount: string) => {\n    return new TokenAmount(convertToken(token), parseBalance(amount, token.decimals).toString());\n};\n\nexport const parseCurrencyAmount = (value: CurrencyAmount, decimals = 18) => {\n    return ethers.BigNumber.from(parseBalance(value.toExact(), decimals));\n};\n\nexport const getContract = (name: string, address: string, signer: ethers.Signer) => {\n    const contract = CONTRACTS[name];\n    return ethers.ContractFactory.getContract(address, contract.abi, signer);\n};\n\nexport const pow10 = (exp: ethers.BigNumberish) => {\n    return ethers.BigNumber.from(10).pow(exp);\n};\n\nexport const formatDate = (date: Date) => {\n    return date.toLocaleDateString(\"en-US\") + \" \" + date.toLocaleTimeString(\"en-US\");\n};\n","import React, { FC } from \"react\";\nimport { Button as NativeButton, ButtonProps as NativeButtonProps } from \"react-native-elements\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\n\nexport interface ButtonProps extends NativeButtonProps {\n    color?: string;\n    size?: \"small\" | \"normal\" | \"large\";\n    fontWeight?: \"light\" | \"regular\" | \"bold\";\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst Button: FC<ButtonProps> = props => {\n    const { primary, textMedium, placeholder, backgroundLight } = useColors();\n    const type = props.type || \"solid\";\n    const size = props.size || \"normal\";\n    const height = props.size === \"small\" ? 36 : size === \"normal\" ? 45 : 54;\n    const fontSize = props.size === \"small\" ? 13 : size === \"normal\" ? 15 : 18;\n    const fontFamily = props.fontWeight || \"regular\";\n    return (\n        <NativeButton\n            {...props}\n            disabled={props.loading || props.disabled}\n            onPress={props.loading ? undefined : props.onPress}\n            type={type}\n            loadingProps={{ color: textMedium }}\n            buttonStyle={[\n                {\n                    height,\n                    paddingHorizontal: Spacing.small,\n                    backgroundColor: \"transparent\"\n                },\n                props.buttonStyle\n            ]}\n            titleStyle={[\n                { fontSize, fontFamily, color: type === \"solid\" ? \"white\" : props.color || textMedium },\n                props.titleStyle\n            ]}\n            disabledTitleStyle={[{ fontSize, fontFamily, color: placeholder }, props.titleStyle]}\n            style={[{ backgroundColor: type === \"solid\" ? props.color || primary : \"transparent\" }, props.style]}\n            disabledStyle={[\n                { backgroundColor: type === \"solid\" ? backgroundLight : \"transparent\" },\n                props.disabledStyle\n            ]}\n        />\n    );\n};\nexport default Button;\n","import { useCallback } from \"react\";\n\nimport { ChainId, Currency, ETHER, Fetcher, Pair, Token, WETH } from \"@sushiswap/sdk\";\nimport { ethers } from \"ethers\";\n\nconst DAI = new Token(ChainId.MAINNET, \"0x6B175474E89094C44Da98b954EedeAC495271d0F\", 18, \"DAI\", \"Dai Stablecoin\");\nconst USDC = new Token(ChainId.MAINNET, \"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\", 6, \"USDC\", \"USD//C\");\nconst USDT = new Token(ChainId.MAINNET, \"0xdAC17F958D2ee523a2206206994597C13D831ec7\", 6, \"USDT\", \"Tether USD\");\nconst SUSHI = new Token(ChainId.MAINNET, \"0x6B3595068778DD592e39A122f4f5a5cF09C90fE2\", 18, \"SUSHI\", \"SushiToken\");\nconst YAM = new Token(ChainId.MAINNET, \"0x0e2298E3B3390e3b945a5456fBf59eCc3f55DA16\", 18, \"YAM\", \"YAM\");\nconst AMPL = new Token(ChainId.MAINNET, \"0xD46bA6D942050d489DBd938a2C909A5d5039A161\", 9, \"AMPL\", \"Ampleforth\");\n\nconst BASES_TO_CHECK_TRADES_AGAINST = [WETH[ChainId.MAINNET], DAI, USDC, USDT, SUSHI, YAM];\nconst CUSTOM_BASES = {\n    [AMPL.address]: [DAI, WETH[ChainId.MAINNET]]\n};\n\nfunction wrappedCurrency(currency: Currency | undefined): Token | undefined {\n    return currency === ETHER ? WETH[ChainId.MAINNET] : currency instanceof Token ? currency : undefined;\n}\n\n// Source: https://github.com/Uniswap/uniswap-interface/blob/master/src/hooks/Trades.ts\nconst useAllCommonPairs = () => {\n    const loadAllCommonPairs = useCallback(\n        // tslint:disable-next-line:max-func-body-length\n        async (currencyA?: Currency, currencyB?: Currency, provider?: ethers.providers.BaseProvider) => {\n            const bases: Token[] = BASES_TO_CHECK_TRADES_AGAINST;\n            const [tokenA, tokenB] = [wrappedCurrency(currencyA), wrappedCurrency(currencyB)];\n            const basePairs: [Token, Token][] = bases\n                .flatMap((base): [Token, Token][] => bases.map(otherBase => [base, otherBase]))\n                .filter(([t0, t1]) => t0.address !== t1.address);\n\n            const allPairCombinations =\n                tokenA && tokenB\n                    ? [\n                          // the direct pair\n                          [tokenA, tokenB],\n                          // token A against all bases\n                          ...bases.map((base): [Token, Token] => [tokenA, base]),\n                          // token B against all bases\n                          ...bases.map((base): [Token, Token] => [tokenB, base]),\n                          // each base against all bases\n                          ...basePairs\n                      ]\n                          .filter((tokens): tokens is [Token, Token] => Boolean(tokens[0] && tokens[1]))\n                          .filter(([t0, t1]) => t0.address !== t1.address)\n                          .filter(([a, b]) => {\n                              const customBases = CUSTOM_BASES;\n                              if (!customBases) return true;\n\n                              const customBasesA: Token[] | undefined = customBases[a.address];\n                              const customBasesB: Token[] | undefined = customBases[b.address];\n\n                              if (!customBasesA && !customBasesB) return true;\n\n                              if (customBasesA && !customBasesA.find(base => tokenB.equals(base))) return false;\n                              return !(customBasesB && !customBasesB.find(base => tokenA.equals(base)));\n                          })\n                    : [];\n\n            const pairs = await Promise.all(\n                allPairCombinations.map(async pair => {\n                    try {\n                        return await Fetcher.fetchPairData(pair[0], pair[1], provider);\n                    } catch (e) {\n                        return null;\n                    }\n                })\n            );\n            return pairs.filter(pair => pair !== null) as Pair[];\n        },\n        []\n    );\n\n    return { loadAllCommonPairs };\n};\n\nexport default useAllCommonPairs;\n","import { useCallback, useContext } from \"react\";\n\nimport { CurrencyAmount, Fetcher, Pair, Percent, Router, TokenAmount, Trade, WETH } from \"@sushiswap/sdk\";\nimport { ethers } from \"ethers\";\nimport { MASTER_CHEF, MIGRATOR2, ORDER_BOOK, ROUTER, SETTLEMENT, SUSHI_BAR } from \"../constants/contracts\";\nimport Fraction from \"../constants/Fraction\";\nimport { ETH } from \"../constants/tokens\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport LPToken from \"../types/LPToken\";\nimport Token from \"../types/Token\";\nimport { convertToken, getContract, pow10 } from \"../utils\";\nimport { logTransaction } from \"../utils/analytics-utils\";\nimport useAllCommonPairs from \"./useAllCommonPairs\";\n\n// tslint:disable-next-line:max-func-body-length\nconst useSDK = () => {\n    const { getTotalSupply } = useContext(EthersContext);\n    const { loadAllCommonPairs } = useAllCommonPairs();\n    const allowedSlippage = new Percent(\"50\", \"10000\"); // 0.05%\n    const ttl = 60 * 20;\n\n    const getTrade = useCallback(\n        async (\n            fromToken: Token,\n            toToken: Token,\n            fromAmount: ethers.BigNumber,\n            provider: ethers.providers.BaseProvider\n        ) => {\n            if (provider) {\n                const isETH = fromToken.symbol === \"ETH\";\n                const from = convertToken(fromToken);\n                const to = convertToken(toToken);\n                const pairs = await loadAllCommonPairs(from, to, provider);\n                const amount = isETH\n                    ? CurrencyAmount.ether(fromAmount.toString())\n                    : new TokenAmount(from, fromAmount.toString());\n                return Trade.bestTradeExactIn(pairs, amount, to, { maxHops: 3, maxNumResults: 1 })[0];\n            }\n        },\n        []\n    );\n\n    const swap = useCallback(async (trade: Trade, signer: ethers.Signer) => {\n        if (trade) {\n            const params = Router.swapCallParameters(trade, {\n                feeOnTransfer: false,\n                allowedSlippage,\n                recipient: await signer.getAddress(),\n                ttl\n            });\n            const router = getContract(\"IUniswapV2Router02\", ROUTER, signer);\n            const gasLimit = await router.estimateGas[params.methodName](...params.args, {\n                value: params.value\n            });\n            const tx = await router.functions[params.methodName](...params.args, {\n                value: params.value,\n                gasLimit: gasLimit.mul(120).div(100)\n            });\n            await logTransaction(\n                tx,\n                \"UniswapV2Router02.\" + params.methodName + \"()\",\n                ...params.args.map(arg => arg.toString())\n            );\n            return {\n                trade,\n                tx\n            };\n        }\n    }, []);\n\n    const createOrder = useCallback(\n        async (\n            fromToken: Token,\n            toToken: Token,\n            amountIn: ethers.BigNumber,\n            amountOutMin: ethers.BigNumber,\n            signer: ethers.Signer,\n            kovanSigner: ethers.Signer\n        ) => {\n            const order = new Order(signer, fromToken, toToken, amountIn, amountOutMin, await signer.getAddress());\n            const args = await order.toArgs();\n\n            const orderBook = getContract(\"OrderBook\", ORDER_BOOK, kovanSigner);\n            const gasLimit = await orderBook.estimateGas.createOrder(args);\n            const tx = await orderBook.createOrder(args, {\n                gasLimit: gasLimit.mul(120).div(100)\n            });\n            return await logTransaction(tx, \"OrderBook.createOrder()\", ...args.map(arg => arg.toString()));\n        },\n        []\n    );\n\n    const cancelOrder = useCallback(async (order: Order, signer: ethers.Signer) => {\n        const settlement = getContract(\"Settlement\", SETTLEMENT, signer);\n        const args = (await order.toArgs()).slice(0, 7);\n        const gasLimit = await settlement.estimateGas.cancelOrder(...args);\n        const tx = await settlement.cancelOrder(...args, {\n            gasLimit: gasLimit.mul(120).div(100)\n        });\n        return await logTransaction(tx, \"Settlement.cancelOrder()\", ...args.map(arg => arg.toString()));\n    }, []);\n\n    const queryOrderFilledEvents = useCallback(async (hash: string, signer: ethers.Signer) => {\n        const settlement = getContract(\"Settlement\", SETTLEMENT, signer);\n        const filter = settlement.filters.OrderFilled(hash);\n        return await settlement.queryFilter(filter);\n    }, []);\n\n    const wrapETH = useCallback(async (amount: ethers.BigNumber, signer: ethers.Signer) => {\n        const weth = getContract(\"IWETH\", WETH[1].address, signer);\n        const gasLimit = await weth.estimateGas.deposit({\n            value: amount\n        });\n        const tx = await weth.deposit({\n            value: amount,\n            gasLimit\n        });\n        return await logTransaction(tx, \"WETH.deposit()\");\n    }, []);\n\n    const unwrapETH = useCallback(async (amount: ethers.BigNumber, signer: ethers.Signer) => {\n        const weth = getContract(\"IWETH\", WETH[1].address, signer);\n        const gasLimit = await weth.estimateGas.withdraw(amount);\n        const tx = await weth.withdraw(amount, {\n            gasLimit\n        });\n        return await logTransaction(tx, \"WETH.withdraw()\");\n    }, []);\n\n    const getPair = useCallback(async (fromToken: Token, toToken: Token, provider: ethers.providers.BaseProvider) => {\n        const from = convertToken(fromToken);\n        const to = convertToken(toToken);\n        return await Fetcher.fetchPairData(from, to, provider);\n    }, []);\n\n    const addLiquidity = useCallback(\n        async (\n            fromToken: Token,\n            toToken: Token,\n            fromAmount: ethers.BigNumber,\n            toAmount: ethers.BigNumber,\n            signer: ethers.Signer\n        ) => {\n            const router = getContract(\"IUniswapV2Router02\", ROUTER, signer);\n            const deadline = `0x${(Math.floor(new Date().getTime() / 1000) + ttl).toString(16)}`;\n            const args = [\n                fromToken.address,\n                toToken.address,\n                fromAmount,\n                toAmount,\n                minAmount(fromAmount, allowedSlippage),\n                minAmount(toAmount, allowedSlippage),\n                await signer.getAddress(),\n                deadline\n            ];\n            const gasLimit = await router.estimateGas.addLiquidity(...args);\n            const tx = await router.functions.addLiquidity(...args, {\n                gasLimit: gasLimit.mul(120).div(100)\n            });\n            return logTransaction(tx, \"UniswapV2Router02.addLiquidity()\", ...args.map(arg => arg.toString()));\n        },\n        []\n    );\n\n    const removeLiquidityETH = useCallback(\n        async (\n            token: Token,\n            liquidity: ethers.BigNumber,\n            amount: ethers.BigNumber,\n            amountETH: ethers.BigNumber,\n            signer: ethers.Signer\n        ) => {\n            const router = getContract(\"IUniswapV2Router02\", ROUTER, signer);\n            const deadline = `0x${(Math.floor(new Date().getTime() / 1000) + ttl).toString(16)}`;\n            const args = [\n                token.address,\n                liquidity,\n                minAmount(amount, allowedSlippage),\n                minAmount(amountETH, allowedSlippage),\n                await signer.getAddress(),\n                deadline\n            ];\n            const gasLimit = await router.estimateGas.removeLiquidityETH(...args);\n            const tx = await router.functions.removeLiquidityETH(...args, {\n                gasLimit: gasLimit.mul(120).div(100)\n            });\n            return logTransaction(tx, \"UniswapV2Router02.removeLiquidityETH()\", ...args.map(arg => arg.toString()));\n        },\n        []\n    );\n\n    const removeLiquidity = useCallback(\n        async (\n            fromToken: Token,\n            toToken: Token,\n            liquidity: ethers.BigNumber,\n            fromAmount: ethers.BigNumber,\n            toAmount: ethers.BigNumber,\n            signer: ethers.Signer\n        ) => {\n            const router = getContract(\"IUniswapV2Router02\", ROUTER, signer);\n            const deadline = `0x${(Math.floor(new Date().getTime() / 1000) + ttl).toString(16)}`;\n            const args = [\n                fromToken.address,\n                toToken.address,\n                liquidity,\n                minAmount(fromAmount, allowedSlippage),\n                minAmount(toAmount, allowedSlippage),\n                await signer.getAddress(),\n                deadline\n            ];\n            const gasLimit = await router.estimateGas.removeLiquidity(...args);\n            const tx = await router.functions.removeLiquidity(...args, {\n                gasLimit: gasLimit.mul(120).div(100)\n            });\n            return logTransaction(tx, \"UniswapV2Router02.removeLiquidity()\", ...args.map(arg => arg.toString()));\n        },\n        []\n    );\n\n    const addLiquidityETH = useCallback(\n        async (token: Token, amount: ethers.BigNumber, amountETH: ethers.BigNumber, signer: ethers.Signer) => {\n            const router = getContract(\"IUniswapV2Router02\", ROUTER, signer);\n            const deadline = `0x${(Math.floor(new Date().getTime() / 1000) + ttl).toString(16)}`;\n            const args = [\n                token.address,\n                amount,\n                minAmount(amount, allowedSlippage),\n                minAmount(amountETH, allowedSlippage),\n                await signer.getAddress(),\n                deadline\n            ];\n            const gasLimit = await router.estimateGas.addLiquidityETH(...args, {\n                value: amountETH\n            });\n            const tx = await router.functions.addLiquidityETH(...args, {\n                gasLimit: gasLimit.mul(120).div(100),\n                value: amountETH\n            });\n            return logTransaction(tx, \"UniswapV2Router02.addLiquidityETH()\", ...args.map(arg => arg.toString()));\n        },\n        []\n    );\n\n    const getExpectedSushiRewardPerBlock = useCallback(async (token: LPToken, signer: ethers.Signer) => {\n        const masterChef = getContract(\"MasterChef\", MASTER_CHEF, signer);\n        const totalAllocPoint = await masterChef.totalAllocPoint();\n        const sushiPerBlock = await masterChef.sushiPerBlock();\n        const { allocPoint } = await masterChef.poolInfo(token.id);\n        return ethers.BigNumber.from(sushiPerBlock)\n            .mul(allocPoint)\n            .div(totalAllocPoint);\n    }, []);\n\n    const deposit = useCallback(async (lpTokenId: number, amount: ethers.BigNumber, signer: ethers.Signer) => {\n        const masterChef = getContract(\"MasterChef\", MASTER_CHEF, signer);\n        const gasLimit = await masterChef.estimateGas.deposit(lpTokenId, amount);\n        const tx = await masterChef.deposit(lpTokenId, amount, {\n            gasLimit: gasLimit.mul(120).div(100)\n        });\n        return logTransaction(tx, \"MasterChef.deposit()\", lpTokenId, amount.toString());\n    }, []);\n\n    const withdraw = useCallback(async (lpTokenId: number, amount: ethers.BigNumber, signer: ethers.Signer) => {\n        const masterChef = getContract(\"MasterChef\", MASTER_CHEF, signer);\n        const gasLimit = await masterChef.estimateGas.withdraw(lpTokenId, amount);\n        const tx = await masterChef.withdraw(lpTokenId, amount, {\n            gasLimit: gasLimit.mul(120).div(100)\n        });\n        return logTransaction(tx, \"MasterChef.withdraw()\", lpTokenId, amount.toString());\n    }, []);\n\n    const enterSushiBar = useCallback(async (amount: ethers.BigNumber, signer: ethers.Signer) => {\n        const sushiBar = getContract(\"SushiBar\", SUSHI_BAR, signer);\n        const gasLimit = await sushiBar.estimateGas.enter(amount);\n        const tx = await sushiBar.enter(amount, {\n            gasLimit: gasLimit.mul(120).div(100)\n        });\n        return logTransaction(tx, \"SushiBar.enter()\", amount.toString());\n    }, []);\n\n    const leaveSushiBar = useCallback(async (amount: ethers.BigNumber, signer: ethers.Signer) => {\n        const sushiBar = getContract(\"SushiBar\", SUSHI_BAR, signer);\n        const gasLimit = await sushiBar.estimateGas.leave(amount);\n        const tx = await sushiBar.leave(amount, {\n            gasLimit: gasLimit.mul(120).div(100)\n        });\n        return logTransaction(tx, \"SushiBar.leave()\", amount.toString());\n    }, []);\n\n    const migrate = useCallback(async (lpToken: LPToken, amount: ethers.BigNumber, signer: ethers.Signer) => {\n        const migrator2 = getContract(\"Migrator2\", MIGRATOR2, signer);\n        const deadline = `0x${(Math.floor(new Date().getTime() / 1000) + ttl).toString(16)}`;\n        const args = [\n            lpToken.tokenA.address,\n            lpToken.tokenB.address,\n            amount,\n            ethers.constants.Zero,\n            ethers.constants.Zero,\n            deadline\n        ];\n        const gasLimit = await migrator2.estimateGas.migrate(...args);\n        const tx = await migrator2.migrate(...args, {\n            gasLimit: gasLimit.mul(120).div(100)\n        });\n        return logTransaction(tx, \"Migrator2.migrate()\", ...args.map(arg => arg.toString()));\n    }, []);\n\n    const calculateSwapFee = (fromAmount: ethers.BigNumber) => {\n        return fromAmount.mul(3).div(1000);\n    };\n\n    const calculateLimitOrderFee = (fromAmount: ethers.BigNumber) => {\n        return fromAmount.mul(2).div(1000);\n    };\n\n    const calculateLimitOrderReturn = (\n        fromToken: Token,\n        toToken: Token,\n        fromAmount: ethers.BigNumber,\n        price: string\n    ) => {\n        const limitOrderFeeDeducted = fromAmount.sub(calculateLimitOrderFee(fromAmount));\n        const swapFeeDeducted = limitOrderFeeDeducted.sub(calculateSwapFee(limitOrderFeeDeducted));\n        return Fraction.parse(price).apply(swapFeeDeducted.mul(pow10(toToken.decimals)).div(pow10(fromToken.decimals)));\n    };\n\n    const calculateAmountOfLPTokenMinted = async (pair: Pair, fromAmount: TokenAmount, toAmount: TokenAmount) => {\n        const totalSupply = await getTotalSupply(pair.liquidityToken.address);\n        if (totalSupply) {\n            return pair.getLiquidityMinted(\n                new TokenAmount(pair.liquidityToken, totalSupply.toString()),\n                fromAmount,\n                toAmount\n            );\n        }\n    };\n\n    return {\n        allowedSlippage,\n        getTrade,\n        swap,\n        createOrder,\n        cancelOrder,\n        queryOrderFilledEvents,\n        wrapETH,\n        unwrapETH,\n        getPair,\n        addLiquidity,\n        addLiquidityETH,\n        removeLiquidity,\n        removeLiquidityETH,\n        getExpectedSushiRewardPerBlock,\n        deposit,\n        withdraw,\n        enterSushiBar,\n        leaveSushiBar,\n        migrate,\n        calculateSwapFee,\n        calculateLimitOrderFee,\n        calculateLimitOrderReturn,\n        calculateAmountOfLPTokenMinted\n    };\n};\n\nconst minAmount = (amount: ethers.BigNumber, percent: Percent) => {\n    return amount.sub(amount.mul(percent.numerator.toString()).div(percent.denominator.toString()));\n};\n\nexport type OrderStatus = \"Open\" | \"Expired\" | \"Filled\" | \"Canceled\";\n\nexport class Order {\n    maker: ethers.Signer;\n    fromToken: Token;\n    toToken: Token;\n    amountIn: ethers.BigNumber;\n    amountOutMin: ethers.BigNumber;\n    recipient: string;\n    deadline: ethers.BigNumber;\n    v?: number;\n    r?: string;\n    s?: string;\n    filledAmountIn?: ethers.BigNumber;\n    canceled?: boolean;\n\n    constructor(\n        maker: ethers.Signer,\n        fromToken: Token,\n        toToken: Token,\n        amountIn: ethers.BigNumber,\n        amountOutMin: ethers.BigNumber,\n        recipient: string,\n        deadline = ethers.BigNumber.from(Math.floor(Date.now() / 1000 + 24 * 3600)),\n        v?: number,\n        r?: string,\n        s?: string,\n        filledAmountIn?: ethers.BigNumber,\n        canceled?: boolean\n    ) {\n        this.maker = maker;\n        this.fromToken = fromToken;\n        this.toToken = toToken;\n        this.amountIn = amountIn;\n        this.amountOutMin = amountOutMin;\n        this.recipient = recipient;\n        this.deadline = deadline;\n        this.v = v;\n        this.r = r;\n        this.s = s;\n        this.filledAmountIn = filledAmountIn;\n        this.canceled = canceled;\n    }\n\n    status(): OrderStatus {\n        return this.canceled\n            ? \"Canceled\"\n            : this.filledAmountIn?.eq(this.amountIn)\n            ? \"Filled\"\n            : this.deadline.toNumber() * 1000 < Date.now()\n            ? \"Expired\"\n            : \"Open\";\n    }\n\n    async hash() {\n        const settlement = await getContract(\"Settlement\", SETTLEMENT, this.maker);\n        return await settlement.hashOfOrder(\n            await this.maker.getAddress(),\n            this.fromToken.address,\n            this.toToken.address,\n            this.amountIn,\n            this.amountOutMin,\n            this.recipient,\n            this.deadline\n        );\n    }\n\n    async sign() {\n        const hash = await this.hash();\n        const signature = await this.maker.signMessage(ethers.utils.arrayify(hash));\n        return ethers.utils.splitSignature(signature);\n    }\n\n    async toArgs() {\n        const { v, r, s } = this.v && this.r && this.s ? { v: this.v, r: this.r, s: this.s } : await this.sign();\n        return [\n            await this.maker.getAddress(),\n            this.fromToken.address,\n            this.toToken.address,\n            this.amountIn,\n            this.amountOutMin,\n            this.recipient,\n            this.deadline,\n            v,\n            r,\n            s\n        ];\n    }\n}\n\nexport default useSDK;\n","import React, { FC } from \"react\";\nimport { Platform, SafeAreaView, ScrollView, ViewProps } from \"react-native\";\n\nexport type ContainerProps = ViewProps;\n\n// tslint:disable-next-line:max-func-body-length\nconst Container: FC<ContainerProps> = props => {\n    const Universal = Platform.select({\n        web: () => (\n            <ScrollView\n                contentContainerStyle={{ flex: 1 }}\n                style={[\n                    {\n                        flex: 1\n                    },\n                    props.style\n                ]}\n                {...props}\n            />\n        ),\n        default: () => (\n            <SafeAreaView style={{ flex: 1 }}>\n                <ScrollView {...props} />\n            </SafeAreaView>\n        )\n    });\n    return <Universal />;\n};\n\nexport default Container;\n","import React from \"react\";\nimport { View, ViewProps } from \"react-native\";\n\nimport { Spacing, WEB_WIDTH } from \"../constants/dimension\";\n\nconst Content: React.FunctionComponent<ViewProps> = props => {\n    return (\n        <View\n            {...props}\n            style={[\n                {\n                    width: WEB_WIDTH,\n                    marginLeft: \"auto\",\n                    marginRight: \"auto\",\n                    paddingHorizontal: Spacing.normal,\n                    paddingVertical: Spacing.huge\n                },\n                props.style\n            ]}\n        />\n    );\n};\nexport default Content;\n","import React from \"react\";\nimport { View } from \"react-native\";\n\nimport { StatusBar } from \"expo-status-bar\";\n\nimport { HEADER_HEIGHT } from \"../../constants/dimension\";\nimport useColors from \"../../hooks/useColors\";\n\nconst AppHeader = () => {\n    const { background } = useColors();\n    return (\n        <View\n            style={{\n                width: \"100%\",\n                height: HEADER_HEIGHT,\n                backgroundColor: background\n            }}>\n            <StatusBar translucent={false} backgroundColor={background} />\n        </View>\n    );\n};\n\nexport default AppHeader;\n","import React, { useCallback, useContext } from \"react\";\nimport { Image, View } from \"react-native\";\n\nimport * as Linking from \"expo-linking\";\n\nimport { Spacing } from \"../../constants/dimension\";\nimport { GlobalContext } from \"../../context/GlobalContext\";\nimport Button from \"../Button\";\n\nconst ConnectWallet = () => {\n    const { darkMode } = useContext(GlobalContext);\n    const onPress = useCallback(async () => {\n        if (window.ethereum) {\n            await window.ethereum.enable();\n        } else {\n            await Linking.openURL(\"https://metamask.io/\");\n        }\n    }, [window.ethereum]);\n    const title = window.ethereum ? \"Connect\" : \"Install MetaMask\";\n    return (\n        <View style={{ flex: 1, alignItems: \"center\", justifyContent: \"center\" }}>\n            <Image\n                source={\n                    darkMode ? require(\"../../../assets/metamask-dark.png\") : require(\"../../../assets/metamask.png\")\n                }\n                style={{ width: 223, height: 183, marginBottom: Spacing.huge }}\n            />\n            <Button size={\"large\"} color={\"#e2761b\"} onPress={onPress} title={title} containerStyle={{ width: 440 }} />\n        </View>\n    );\n};\nexport default ConnectWallet;\n","import React from \"react\";\nimport { Image, View } from \"react-native\";\n\nimport { Spacing } from \"../../constants/dimension\";\nimport SocialIcons from \"../SocialIcons\";\nimport Text from \"../Text\";\nimport { Title } from \"./WebHeader\";\n\nconst MobileNotSupported = () => {\n    return (\n        <View\n            style={{\n                justifyContent: \"center\",\n                alignItems: \"center\",\n                width: \"100%\",\n                minHeight: \"100%\",\n                padding: Spacing.normal\n            }}>\n            <Image\n                source={require(\"../../../assets/sushiswap.jpg\")}\n                style={{ width: 192, height: 192, marginBottom: Spacing.normal }}\n            />\n            <Title />\n            <Text style={{ marginTop: Spacing.normal }}>Mobile devices not supported yet.</Text>\n            <SocialIcons />\n        </View>\n    );\n};\n\nexport default MobileNotSupported;\n","import React, { useContext } from \"react\";\nimport { Platform, View } from \"react-native\";\n\nimport { AppLoading } from \"expo\";\nimport { DeviceType } from \"expo-device\";\n\nimport AppHeader from \"../components/app/AppHeader\";\nimport Text from \"../components/Text\";\nimport ConnectToWallet from \"../components/web/ConnectToWallet\";\nimport MobileNotSupported from \"../components/web/MobileNotSupported\";\nimport { HEADER_HEIGHT } from \"../constants/dimension\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport { GlobalContext } from \"../context/GlobalContext\";\n\nconst Screen = props => {\n    const { deviceType } = useContext(GlobalContext);\n    const { address, chainId } = useContext(EthersContext);\n    if (!deviceType) {\n        return <AppLoading />;\n    }\n    if (Platform.OS === \"web\") {\n        if (deviceType === DeviceType.PHONE) return <MobileNotSupported />;\n        if (!address) return <ConnectToWallet />;\n        if (chainId !== 1)\n            return (\n                <View style={{ flex: 1, alignItems: \"center\", justifyContent: \"center\" }}>\n                    <Text light={true} style={{ textAlign: \"center\" }}>\n                        {\"Please switch network to\\n'Ethereum Mainnet'\"}\n                    </Text>\n                </View>\n            );\n        return (\n            <View\n                {...props}\n                style={[{ position: \"absolute\", top: HEADER_HEIGHT, right: 0, bottom: 0, left: 0 }, props.style]}\n            />\n        );\n    } else {\n        return (\n            <View style={{ width: \"100%\", height: \"100%\" }}>\n                <AppHeader />\n                <View {...props} style={[{ flex: 1 }, props.style]} />\n            </View>\n        );\n    }\n};\n\nexport default Screen;\n","import React, { FC } from \"react\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport Text from \"./Text\";\n\ninterface TitleProps {\n    text: string;\n}\n\nconst Title: FC<TitleProps> = props => {\n    return (\n        <Text fontWeight={\"bold\"} style={{ marginBottom: Spacing.tiny, fontSize: 40 }}>\n            {props.text}\n        </Text>\n    );\n};\n\nexport default Title;\n","import React, { FC } from \"react\";\nimport { View } from \"react-native\";\nimport { Link, useRouteMatch } from \"react-router-dom\";\n\nimport { HEADER_WIDTH, Spacing, SUB_MENU_HEIGHT } from \"../../constants/dimension\";\nimport useColors from \"../../hooks/useColors\";\nimport FlexView from \"../FlexView\";\nimport Text from \"../Text\";\n\nexport interface WebSubMenuItem {\n    title: string;\n    path: string;\n}\n\nexport interface WebSubMenuProps {\n    items: WebSubMenuItem[];\n}\n\nexport const SwapSubMenu = () => (\n    <WebSubMenu\n        items={[\n            {\n                title: \"New Order\",\n                path: \"/swap\"\n            },\n            {\n                title: \"My Orders\",\n                path: \"/swap/my-orders\"\n            }\n        ]}\n    />\n);\n\nexport const LiquiditySubMenu = () => (\n    <WebSubMenu\n        items={[\n            {\n                title: \"Add Liquidity\",\n                path: \"/liquidity\"\n            },\n            {\n                title: \"Remove Liquidity\",\n                path: \"/liquidity/remove\"\n            },\n            {\n                title: \"Migrate Liquidity\",\n                path: \"/liquidity/migrate\"\n            }\n        ]}\n    />\n);\n\nexport const StakingSubMenu = () => (\n    <WebSubMenu\n        items={[\n            {\n                title: \"Stake\",\n                path: \"/staking\"\n            },\n            {\n                title: \"Unstake\",\n                path: \"/staking/unstake\"\n            }\n        ]}\n    />\n);\n\nconst WebSubMenu: FC<WebSubMenuProps> = props => {\n    const { borderDark, submenu } = useColors();\n    return (\n        <View\n            style={{\n                height: SUB_MENU_HEIGHT,\n                width: \"100%\",\n                borderBottomWidth: 1,\n                borderColor: borderDark + \"40\",\n                backgroundColor: submenu\n            }}>\n            <FlexView\n                style={{\n                    width: HEADER_WIDTH,\n                    marginTop: 2,\n                    paddingHorizontal: Spacing.normal,\n                    alignSelf: \"center\",\n                    justifyContent: \"flex-end\",\n                    alignItems: \"center\"\n                }}>\n                {props.items.map(item => (\n                    <MenuItem key={item.path} {...item} />\n                ))}\n            </FlexView>\n        </View>\n    );\n};\n\nconst MenuItem = ({ title, path }) => {\n    const { accent, textLight } = useColors();\n    const match = useRouteMatch(path);\n    const active = match?.isExact;\n    return (\n        <Link to={path} style={{ marginLeft: Spacing.tiny, padding: Spacing.tiny, textDecoration: \"none\" }}>\n            <Text\n                fontWeight={active ? \"regular\" : \"light\"}\n                style={{\n                    fontSize: 13,\n                    color: active ? accent : textLight\n                }}>\n                {title}\n            </Text>\n        </Link>\n    );\n};\n\nexport default WebSubMenu;\n","import { FACTORY_ADDRESS as SUSHISWAP_FACTORY } from \"@sushiswap/sdk\";\nimport { FACTORY_ADDRESS as UNISWAP_FACTORY } from \"@uniswap/sdk\";\nimport { ethers } from \"ethers\";\nimport { LP_TOKEN_SCANNER, MASTER_CHEF, ORDER_BOOK, SETTLEMENT } from \"../constants/contracts\";\nimport { ETH } from \"../constants/tokens\";\nimport { Order, OrderStatus } from \"../hooks/useSDK\";\nimport LPToken from \"../types/LPToken\";\nimport Token from \"../types/Token\";\nimport { getContract } from \"./index\";\n\nexport const fetchTokens = async (address: string, provider?: ethers.providers.JsonRpcProvider) => {\n    if (provider) {\n        const response = await fetch(\"https://lite.sushiswap.fi/tokens.json\");\n        const json = await response.json();\n\n        const balances = await provider.send(\"alchemy_getTokenBalances\", [\n            address,\n            json.tokens.map(token => token.address)\n        ]);\n        return [\n            {\n                ...ETH,\n                balance: await provider.getBalance(address)\n            },\n            ...json.tokens.map((token, i) => ({\n                ...token,\n                balance: ethers.BigNumber.from(balances.tokenBalances[i].tokenBalance || 0)\n            }))\n        ].sort((t1, t2) => {\n            return t2.balance\n                .sub(t1.balance)\n                .div(ethers.BigNumber.from(10).pow(10))\n                .toNumber();\n        });\n    }\n};\n\nexport const fetchPools = async (provider?: ethers.providers.JsonRpcProvider, signer?: ethers.Signer) => {\n    if (provider && signer) {\n        const response = await fetch(\"https://lite.sushiswap.fi/pools.json\");\n        const pools = await response.json();\n        const address = await signer.getAddress();\n        const balances = await provider.send(\"alchemy_getTokenBalances\", [address, pools.map(pool => pool.address)]);\n        return (await Promise.all(\n            pools.map(async (pool, i) => {\n                const poolToken = getContract(\"ERC20\", pool.address, signer);\n                const totalDeposited = await poolToken.balanceOf(MASTER_CHEF);\n                const masterChef = getContract(\"MasterChef\", MASTER_CHEF, signer);\n                const { amount: amountDeposited } = await masterChef.userInfo(i, address);\n                const pendingSushi = await masterChef.pendingSushi(i, address);\n                return {\n                    ...pool,\n                    id: i,\n                    symbol: pool.tokenA.symbol + \"-\" + pool.tokenB.symbol + \" LP\",\n                    balance: ethers.BigNumber.from(balances.tokenBalances[i].tokenBalance || 0),\n                    totalDeposited,\n                    amountDeposited,\n                    pendingSushi\n                };\n            })\n        )) as LPToken[];\n    }\n};\n\nexport const fetchMyLPTokens = async (\n    tokens: Token[],\n    provider?: ethers.providers.JsonRpcProvider,\n    signer?: ethers.Signer\n) => {\n    if (provider && signer) {\n        return await fetchLPTokens(SUSHISWAP_FACTORY, tokens, provider, signer);\n    }\n};\n\nexport const fetchMyUniswapLPTokens = async (\n    tokens: Token[],\n    provider?: ethers.providers.JsonRpcProvider,\n    signer?: ethers.Signer\n) => {\n    if (provider && signer) {\n        return await fetchLPTokens(UNISWAP_FACTORY, tokens, provider, signer);\n    }\n};\n\nconst LP_TOKENS_LIMIT = 2000;\n\nconst fetchLPTokens = async (\n    factory: string,\n    tokens: Token[],\n    provider: ethers.providers.JsonRpcProvider,\n    signer: ethers.Signer\n) => {\n    const factoryContract = getContract(\"IUniswapV2Factory\", factory, signer);\n    const length = await factoryContract.allPairsLength();\n    const scanner = getContract(\"LPTokenScanner\", LP_TOKEN_SCANNER, signer);\n    const account = await signer.getAddress();\n    const pages: number[] = [];\n    for (let i = 0; i < length; i += LP_TOKENS_LIMIT) pages.push(i);\n    const pairs = (\n        await Promise.all(\n            pages.map(page =>\n                scanner.findPairs(account, factory, page, Math.min(page + LP_TOKENS_LIMIT, length.toNumber()))\n            )\n        )\n    ).flat();\n    const balances = await provider.send(\"alchemy_getTokenBalances\", [account, pairs.map(pair => pair.token)]);\n    return await Promise.all(\n        pairs.map(async (pair, index) => {\n            const address = pair.token;\n            const balance = ethers.BigNumber.from(balances.tokenBalances[index].tokenBalance);\n            const contract = getContract(\"IUniswapV2Pair\", address, signer);\n            const erc20 = getContract(\"ERC20\", address, signer);\n            const decimals = Number(await erc20.decimals());\n            const totalSupply = await erc20.totalSupply();\n            const tokenA = await findOrFetchToken(provider, await contract.token0(), tokens);\n            const tokenB = await findOrFetchToken(provider, await contract.token1(), tokens);\n            const name = tokenA.symbol + \"-\" + tokenB.symbol + \" LP Token\";\n            const symbol = tokenA.symbol + \"-\" + tokenB.symbol;\n            return { address, decimals, name, symbol, balance, totalSupply, tokenA, tokenB } as LPToken;\n        })\n    );\n};\n\nexport const findOrFetchToken = async (\n    provider: ethers.providers.JsonRpcProvider,\n    address: string,\n    tokens?: Token[]\n) => {\n    if (tokens) {\n        const token = tokens.find(t => t.address.toLowerCase() === address.toLowerCase());\n        if (token) {\n            return token;\n        }\n    }\n    const meta = await provider.send(\"alchemy_getTokenMetadata\", [address]);\n    return {\n        address,\n        symbol: meta.symbol,\n        decimals: meta.decimals,\n        logoURI: meta.logo,\n        balance: ethers.constants.Zero\n    } as Token;\n};\n\nconst LIMIT_ORDERS_LIMIT = 20;\n\nexport const fetchMyLimitOrders = async (\n    signer: ethers.Signer,\n    kovanSigner: ethers.Signer,\n    provider: ethers.providers.JsonRpcProvider,\n    tokens?: Token[],\n    canceledHashes?: string[]\n) => {\n    const orderBook = getContract(\"OrderBook\", ORDER_BOOK, kovanSigner);\n    const settlement = await getContract(\"Settlement\", SETTLEMENT, signer);\n    const maker = await signer.getAddress();\n    const length = await orderBook.numberOfHashesOfMaker(maker);\n    const pages: number[] = [];\n    for (let i = 0; i * LIMIT_ORDERS_LIMIT < length; i++) pages.push(i);\n    const hashes = (await Promise.all(pages.map(page => orderBook.hashesOfMaker(maker, page, LIMIT_ORDERS_LIMIT))))\n        .flat()\n        .filter(hash => hash !== ethers.constants.HashZero);\n    const myOrders = await Promise.all(\n        hashes.map(async hash => {\n            const args = await orderBook.orderOfHash(hash);\n            return new Order(\n                signer,\n                await findOrFetchToken(provider, args.fromToken, tokens),\n                await findOrFetchToken(provider, args.toToken, tokens),\n                args.amountIn,\n                args.amountOutMin,\n                args.recipient,\n                args.deadline,\n                args.v,\n                args.r,\n                args.s,\n                await settlement.filledAmountInOfHash(hash),\n                canceledHashes && canceledHashes.includes(hash)\n            );\n        })\n    );\n    return myOrders.sort(compareOrders) as Order[];\n};\n\nconst compareOrders = (o0, o1) => {\n    const status = (s: OrderStatus) => (s === \"Open\" ? 0 : s === \"Filled\" ? 1 : 2);\n    const compared = status(o0.status()) - status(o1.status());\n    return compared === 0 ? o1.deadline.toNumber() - o0.deadline.toNumber() : compared;\n};\n\nexport const fetchMyCanceledLimitOrderHashes = async (signer: ethers.Signer) => {\n    const settlement = await getContract(\"Settlement\", SETTLEMENT, signer);\n    const length = await settlement.numberOfCanceledHashesOfMaker(await signer.getAddress());\n    const pages: number[] = [];\n    for (let i = 0; i * LIMIT_ORDERS_LIMIT < length; i++) pages.push(i);\n    return (await Promise.all(pages.map(page => settlement.allCanceledHashes(page, LIMIT_ORDERS_LIMIT))))\n        .flat()\n        .filter(hash => hash !== ethers.constants.HashZero);\n};\n","import { Fraction as SDKFraction } from \"@sushiswap/sdk\";\nimport { ethers } from \"ethers\";\nimport Token from \"../types/Token\";\nimport { formatBalance, isEmptyValue, parseBalance } from \"../utils\";\n\nclass Fraction {\n    static BASE = ethers.BigNumber.from(10).pow(18);\n    static NAN = new Fraction(ethers.constants.Zero, ethers.constants.Zero);\n    static ZERO = new Fraction(ethers.constants.Zero, ethers.constants.One);\n    static convert(sdk: SDKFraction) {\n        return new Fraction(\n            ethers.BigNumber.from(sdk.numerator.toString()),\n            ethers.BigNumber.from(sdk.denominator.toString())\n        );\n    }\n    static from(numerator: ethers.BigNumberish, denominator: ethers.BigNumberish) {\n        return new Fraction(ethers.BigNumber.from(numerator), ethers.BigNumber.from(denominator));\n    }\n    static fromTokens(\n        numerator: ethers.BigNumberish,\n        denominator: ethers.BigNumberish,\n        numeratorToken: Token,\n        denominatorToken: Token\n    ) {\n        return new Fraction(\n            ethers.BigNumber.from(numerator).mul(ethers.BigNumber.from(10).pow(denominatorToken.decimals)),\n            ethers.BigNumber.from(denominator).mul(ethers.BigNumber.from(10).pow(numeratorToken.decimals))\n        );\n    }\n    static parse(value: string) {\n        return value === \"\"\n            ? Fraction.NAN\n            : isEmptyValue(value)\n            ? Fraction.ZERO\n            : new Fraction(parseBalance(value, 18), Fraction.BASE);\n    }\n\n    numerator: ethers.BigNumber;\n    denominator: ethers.BigNumber;\n\n    private constructor(numerator: ethers.BigNumber, denominator: ethers.BigNumber) {\n        this.numerator = numerator;\n        this.denominator = denominator;\n    }\n\n    isZero() {\n        return !this.isNaN() && this.numerator.isZero();\n    }\n\n    isNaN() {\n        return this.denominator.isZero();\n    }\n\n    eq(fraction: Fraction) {\n        return this.numerator\n            .mul(fraction.denominator)\n            .div(fraction.numerator)\n            .eq(this.denominator);\n    }\n\n    gt(fraction: Fraction) {\n        return this.numerator\n            .mul(fraction.denominator)\n            .div(fraction.numerator)\n            .gt(this.denominator);\n    }\n\n    lt(fraction: Fraction) {\n        return this.numerator\n            .mul(fraction.denominator)\n            .div(fraction.numerator)\n            .lt(this.denominator);\n    }\n\n    toString(maxFractions = 8) {\n        if (this.isNaN()) return \"\";\n        if (this.isZero()) return \"0\";\n        let str = formatBalance(this.numerator.mul(Fraction.BASE).div(this.denominator), 18, maxFractions);\n        if (str.endsWith(\".0\")) str = str.substring(0, str.length - 2);\n        return str;\n    }\n\n    apply(value: ethers.BigNumberish) {\n        return this.denominator.isZero() ? ethers.constants.Zero : this.numerator.mul(value).div(this.denominator);\n    }\n}\n\nexport default Fraction;\n","import React, { useContext } from \"react\";\nimport { Icon, SocialIcon as NativeSocialIcon, SocialIconProps } from \"react-native-elements\";\n\nimport { GlobalContext } from \"../context/GlobalContext\";\nimport useColors from \"../hooks/useColors\";\nimport useLinker from \"../hooks/useLinker\";\nimport FlexView from \"./FlexView\";\n\nconst SocialIcons = () => {\n    const { darkMode } = useContext(GlobalContext);\n    const { background, textLight } = useColors();\n    const onPressTwitter = useLinker(\"https://twitter.com/sushiswap\", \"\", \"_blank\");\n    const onPressGithub = useLinker(\"https://github.com/sushiswap\", \"\", \"_blank\");\n    const onPressDiscord = useLinker(\"https://discord.gg/YS8xH7E\", \"\", \"_blank\");\n    return (\n        <FlexView style={{ width: \"100%\", justifyContent: \"center\" }}>\n            <SocialIcon type=\"github-alt\" onPress={onPressGithub} />\n            <SocialIcon type=\"twitter\" onPress={onPressTwitter} />\n            <Icon\n                type={\"material-community\"}\n                name={\"discord\"}\n                raised={true}\n                reverse={true}\n                color={background}\n                reverseColor={darkMode ? \"white\" : \"#7289da\"}\n                style={{ backgroundColor: background }}\n                containerStyle={{\n                    borderWidth: 1,\n                    borderColor: darkMode ? \"white\" : textLight\n                }}\n                onPress={onPressDiscord}\n            />\n        </FlexView>\n    );\n};\n\nconst SocialIcon = (props: SocialIconProps) => {\n    const { darkMode } = useContext(GlobalContext);\n    const { background, textLight } = useColors();\n    return (\n        <NativeSocialIcon\n            {...props}\n            light={!darkMode}\n            iconColor={darkMode ? \"white\" : undefined}\n            style={{\n                backgroundColor: background,\n                borderWidth: 1,\n                borderColor: darkMode ? \"white\" : textLight\n            }}\n        />\n    );\n};\n\nexport default SocialIcons;\n","import { Dimensions } from \"react-native\";\n\nexport const SCREEN_WIDTH = Math.round(Dimensions.get(\"window\").width);\nexport const SCREEN_HEIGHT = Math.round(Dimensions.get(\"window\").height);\nexport const IS_HIGH_RESOLUTION = SCREEN_HEIGHT > 667;\nexport const HEADER_HEIGHT = 64;\nexport const HEADER_WIDTH = 980;\nexport const WEB_WIDTH = 540;\nexport const SUB_MENU_HEIGHT = 40;\n\nexport const Spacing = IS_HIGH_RESOLUTION\n    ? {\n          tiny: 8,\n          small: 16,\n          normal: 32,\n          large: 48,\n          huge: 64\n      }\n    : {\n          tiny: 6,\n          small: 12,\n          normal: 24,\n          large: 32,\n          huge: 48\n      };\n","import OrderBook from \"@sushiswap/settlement/deployments/kovan/OrderBook.json\";\nimport Settlement from \"@sushiswap/settlement/deployments/mainnet/Settlement.json\";\n\n// export const UNISWAP_ROUTER = \"0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\";\nexport const SUSHISWAP_ROUTER = \"0xd9e1ce17f2641f24ae83637ab66a2cca9c378b9f\";\nexport const ROUTER = SUSHISWAP_ROUTER;\nexport const MASTER_CHEF = \"0xc2edad668740f1aa35e4d8f227fb8e17dca888cd\";\nexport const SUSHI_BAR = \"0x8798249c2e607446efb7ad49ec89dd1865ff4272\";\nexport const SUSHI_ROLL = \"0x94CfE11E6b57f6f84bBa2c6DfB0fAeA47C4741D6\";\nexport const LP_TOKEN_SCANNER = \"0xD132Ce8eA8865348Ac25E416d95ab1Ba84D216AF\";\nexport const MIGRATOR2 = \"0x60A02cD1e3443E8ab7825DccF8d7080Eb78BCA6F\";\nexport const ORDER_BOOK = OrderBook.address;\nexport const SETTLEMENT = Settlement.address;\n","import React from \"react\";\n\nimport { EthersContextConsumer, EthersContextProvider } from \"./EthersContext\";\nimport { GlobalContextConsumer, GlobalContextProvider } from \"./GlobalContext\";\n\nexport const ContextProvider = ({ children }) => {\n    return (\n        <GlobalContextProvider>\n            <EthersContextProvider>{children}</EthersContextProvider>\n        </GlobalContextProvider>\n    );\n};\n\nexport const ContextConsumer = ({ children }) => {\n    return (\n        <GlobalContextConsumer>\n            {globalContext => (\n                <EthersContextConsumer>\n                    {ethersContext =>\n                        children({\n                            ...globalContext,\n                            ...ethersContext\n                        })\n                    }\n                </EthersContextConsumer>\n            )}\n        </GlobalContextConsumer>\n    );\n};\n","import React from \"react\";\nimport { View } from \"react-native\";\n\nimport Container from \"../components/Container\";\nimport Content from \"../components/Content\";\nimport Title from \"../components/Title\";\nimport WebHeader from \"../components/web/WebHeader\";\nimport WebSubMenu from \"../components/web/WebSubMenu\";\nimport useColors from \"../hooks/useColors\";\nimport Screen from \"./Screen\";\n\nconst EmptyScreen = () => {\n    const { background } = useColors();\n    return (\n        <View style={{ width: \"100%\", height: \"100%\", backgroundColor: background }}>\n            <Screen>\n                <WebSubMenu items={[]} />\n                <Container>\n                    <Content>\n                        <Title text={\"Loading...\"} />\n                    </Content>\n                </Container>\n            </Screen>\n            <WebHeader />\n        </View>\n    );\n};\n\nexport default EmptyScreen;\n","import React, { lazy, Suspense, useContext } from \"react\";\nimport { Platform, View } from \"react-native\";\nimport { Icon } from \"react-native-elements\";\nimport { HashRouter as Router, Redirect, Route, Switch } from \"react-router-dom\";\n\nimport { DeviceType } from \"expo-device\";\n\nimport { createBottomTabNavigator } from \"@react-navigation/bottom-tabs\";\nimport { DefaultTheme, NavigationContainer, Theme } from \"@react-navigation/native\";\nimport useAsyncEffect from \"use-async-effect\";\nimport WebHeader from \"../components/web/WebHeader\";\nimport { GlobalContext } from \"../context/GlobalContext\";\nimport useColors from \"../hooks/useColors\";\nimport EmptyScreen from \"./EmptyScreen\";\nconst FarmingScreen = lazy(() => import(\"./FarmingScreen\"));\nconst LiquidityScreen = lazy(() => import(\"./LiquidityScreen\"));\nconst MigrateScreen = lazy(() => import(\"./MigrateScreen\"));\nconst MyLimitOrdersScreen = lazy(() => import(\"./MyLimitOrdersScreen\"));\nconst RemoveLiquidityScreen = lazy(() => import(\"./RemoveLiquidityScreen\"));\nconst StakeScreen = lazy(() => import(\"./StakeScreen\"));\nconst UnstakeScreen = lazy(() => import(\"./UnstakeScreen\"));\nconst SwapScreen = lazy(() => import(\"./SwapScreen\"));\n\nexport const Screens = () => {\n    const { load } = useContext(GlobalContext);\n    useAsyncEffect(load, []);\n    return Platform.OS === \"web\" ? <WebScreens /> : <AppScreens />;\n};\n\n// tslint:disable-next-line:max-func-body-length\nconst WebScreens = () => {\n    const { deviceType } = useContext(GlobalContext);\n    const { background } = useColors();\n    return (\n        <Router>\n            <Suspense fallback={<EmptyScreen />}>\n                <View style={{ flex: 1, backgroundColor: background }}>\n                    <Switch>\n                        <Route path={\"/swap/my-orders\"}>\n                            <MyLimitOrdersScreen />\n                        </Route>\n                        <Route path={\"/swap\"}>\n                            <SwapScreen />\n                        </Route>\n                        <Route path={\"/liquidity/remove\"}>\n                            <RemoveLiquidityScreen />\n                        </Route>\n                        <Route path={\"/liquidity/migrate\"}>\n                            <MigrateScreen />\n                        </Route>\n                        <Route path={\"/liquidity\"}>\n                            <LiquidityScreen />\n                        </Route>\n                        {/*<Route path={\"/farming\"}>*/}\n                        {/*    <FarmingScreen />*/}\n                        {/*</Route>*/}\n                        <Route path={\"/staking/unstake\"}>\n                            <UnstakeScreen />\n                        </Route>\n                        <Route path={\"/staking\"}>\n                            <StakeScreen />\n                        </Route>\n                        <Redirect to={\"/swap\"} />\n                    </Switch>\n                    {deviceType !== DeviceType.PHONE && <WebHeader />}\n                </View>\n            </Suspense>\n        </Router>\n    );\n};\n\nconst Tab = createBottomTabNavigator();\n\nconst AppScreens = () => {\n    const { darkMode } = useContext(GlobalContext);\n    const { primary, accent, background, border, textDark, disabled } = useColors();\n    const theme: Theme = {\n        ...DefaultTheme,\n        dark: darkMode,\n        colors: {\n            primary,\n            background,\n            border,\n            card: background,\n            notification: background,\n            text: textDark\n        }\n    };\n    return (\n        <NavigationContainer theme={theme}>\n            <Tab.Navigator\n                tabBarOptions={{\n                    activeTintColor: accent,\n                    inactiveTintColor: disabled,\n                    labelStyle: { marginBottom: 4 }\n                }}>\n                <Tab.Screen name=\"Home\" component={SwapScreen} options={tabOptions(\"home\")} />\n                <Tab.Screen name=\"Liquidity\" component={LiquidityScreen} options={tabOptions(\"water\")} />\n                <Tab.Screen name=\"Farming\" component={FarmingScreen} options={tabOptions(\"leaf\")} />\n            </Tab.Navigator>\n        </NavigationContainer>\n    );\n};\n\nconst tabOptions = iconName => ({\n    tabBarIcon: ({ color }) => <Icon type={\"material-community\"} name={iconName} color={color} />\n});\n","/* tslint:disable:ordered-imports */\nimport \"./globals\";\nimport React from \"react\";\n\nimport { OpenSans_300Light, OpenSans_400Regular, OpenSans_600SemiBold } from \"@expo-google-fonts/open-sans\";\nimport { AppLoading } from \"expo\";\nimport { useFonts } from \"expo-font\";\n\nimport { ContextProvider } from \"./src/context\";\nimport { Screens } from \"./src/screens\";\nimport { YellowBox } from \"react-native\";\n\nif (__DEV__) {\n    YellowBox.ignoreWarnings([\"Setting a timer\", \"VirtualizedLists should never be nested\"]);\n}\n\nconst App = () => {\n    const [fontsLoaded] = useFonts({\n        light: OpenSans_300Light,\n        regular: OpenSans_400Regular,\n        bold: OpenSans_600SemiBold\n    });\n    if (!fontsLoaded) {\n        return <AppLoading />;\n    }\n    return (\n        <ContextProvider>\n            <Screens />\n        </ContextProvider>\n    );\n};\n\nexport default App;\n","export const Colors = {\n    common: {\n        white: \"#ffffff\",\n        transparent: \"#ffffff00\",\n        primary: \"#291C64\",\n        secondary: \"#9BECEE\",\n        green: \"#32CD32\",\n        red: \"#FF0000\",\n        twitter: \"#1da1f2\",\n        facebook: \"#3B5998\"\n    },\n    light: {\n        accent: \"#291C64\",\n        header: \"#ffffffb8\",\n        submenu: \"#ffffffb8\",\n        background: \"#f8f8f8\",\n        backgroundLight: \"#f0f0f0\",\n        border: \"#e5e5e5\",\n        borderDark: \"#cccccc\",\n        textDark: \"#1d1d1f\",\n        textMedium: \"#222222\",\n        textLight: \"#888888\",\n        disabled: \"#b4b4b4\",\n        shadow: \"#444444\",\n        placeholder: \"#b4b4b4\"\n    },\n    dark: {\n        accent: \"#9BECEE\",\n        header: \"#000000\",\n        submenu: \"#121212\",\n        background: \"#121212\",\n        backgroundLight: \"#1a1a1a\",\n        border: \"#ffffff33\",\n        borderDark: \"#666666\",\n        textDark: \"#d5d1cc\",\n        textMedium: \"#cccccc\",\n        textLight: \"#aaaaaa\",\n        disabled: \"#aaaaaa80\",\n        shadow: \"#03080c\",\n        placeholder: \"#666666\"\n    }\n};\n","import { useContext } from \"react\";\n\nimport { Colors } from \"../constants/colors\";\nimport { GlobalContext } from \"../context/GlobalContext\";\n\nconst useColors = () => {\n    const { darkMode } = useContext(GlobalContext);\n    return {\n        ...Colors[darkMode ? \"dark\" : \"light\"],\n        ...Colors.common\n    };\n};\n\nexport default useColors;\n","/* eslint-env browser */\n\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', function () {\n    navigator.serviceWorker\n      .register('./expo-service-worker.js', { scope: './' })\n      .then(function (info) {\n        // console.info('Registered service-worker', info);\n      })\n      .catch(function (error) {\n        console.info('Failed to register service-worker', error);\n      });\n  });\n}\n","global.Buffer = require('buffer').Buffer;\n","import React, { useState } from \"react\";\nimport { useColorScheme } from \"react-native-appearance\";\n\nimport { DeviceType, getDeviceTypeAsync } from \"expo-device\";\n\nimport AsyncStorage from \"@react-native-community/async-storage\";\nimport useAsyncEffect from \"use-async-effect\";\n\nexport const GlobalContext = React.createContext({\n    load: async () => {},\n    clear: async () => {},\n    deviceType: undefined as DeviceType | undefined,\n    darkMode: false as boolean,\n    setDarkMode: async darkMode => {},\n    mnemonic: \"\",\n    setMnemonic: (mnemonic: string) => {}\n});\n\n// tslint:disable-next-line:max-func-body-length\nexport const GlobalContextProvider = ({ children }) => {\n    const colorScheme = useColorScheme();\n    const [deviceType, setDeviceType] = useState<DeviceType>();\n    const [darkMode, setDarkMode] = useState(colorScheme === \"dark\");\n    const [mnemonic, setMnemonic] = useState(\"\");\n    useAsyncEffect(async () => {\n        setDeviceType(await getDeviceTypeAsync());\n    }, []);\n    return (\n        <GlobalContext.Provider\n            value={{\n                load: async () => {\n                    const mode = await AsyncStorage.getItem(\"dark_mode\");\n                    setDarkMode(mode === \"true\");\n                    const mne = await AsyncStorage.getItem(\"mnemonic\");\n                    if (mne) {\n                        setMnemonic(mne);\n                    }\n                },\n                clear: async () => {\n                    setDarkMode(false);\n                    await AsyncStorage.removeItem(\"dark_mode\");\n                    await AsyncStorage.removeItem(\"mnemonic\");\n                },\n                deviceType,\n                darkMode,\n                setDarkMode: async (mode: boolean) => {\n                    await AsyncStorage.setItem(\"dark_mode\", String(mode));\n                    setDarkMode(mode);\n                },\n                mnemonic,\n                setMnemonic: async (mne: string) => {\n                    await AsyncStorage.setItem(\"mnemonic\", mne);\n                    setMnemonic(mne);\n                }\n            }}>\n            {children}\n        </GlobalContext.Provider>\n    );\n};\n\nexport const GlobalContextConsumer = GlobalContext.Consumer;\n","import * as Analytics from \"expo-firebase-analytics\";\n\nimport { ethers } from \"ethers\";\n\nexport const logTransaction = async (\n    tx: ethers.providers.TransactionResponse,\n    name: string,\n    ...args: any[]\n): Promise<ethers.providers.TransactionResponse> => {\n    await Analytics.logEvent(\"tx:\" + name, {\n        args: args || [],\n        hash: tx.hash,\n        value: tx.value.toString(),\n        gasLimit: tx.gasLimit.toString(),\n        gasPrice: tx.gasPrice.toString(),\n        chainId: tx.chainId\n    });\n    return tx;\n};\n","module.exports = __webpack_public_path__ + \"static/media/metamask-dark.2137a831.png\";","module.exports = __webpack_public_path__ + \"static/media/metamask.15e22fef.png\";","module.exports = __webpack_public_path__ + \"static/media/sushiswap.ef005f32.jpg\";","import React, { FC } from \"react\";\nimport { Text as NativeText, TextProps as NativeTextProps } from \"react-native-elements\";\n\nimport useColors from \"../hooks/useColors\";\n\nexport interface TextProps extends NativeTextProps {\n    note?: boolean;\n    caption?: boolean;\n    dark?: boolean;\n    medium?: boolean;\n    light?: boolean;\n    disabled?: boolean;\n    fontWeight?: \"light\" | \"regular\" | \"bold\";\n}\n\nconst Text: FC<TextProps> = props => {\n    const { textDark, textMedium, textLight, placeholder } = useColors();\n    const fontFamily = props.fontWeight || \"regular\";\n    const color = props.disabled\n        ? placeholder\n        : props.medium\n        ? textMedium\n        : props.note || props.light\n        ? textLight\n        : textDark;\n    return (\n        <NativeText\n            {...props}\n            h1Style={[{ fontFamily }, props.h1Style]}\n            h2Style={[{ fontFamily }, props.h2Style]}\n            h3Style={[{ fontFamily }, props.h3Style]}\n            h4Style={[{ fontFamily }, props.h4Style]}\n            style={[\n                {\n                    fontFamily,\n                    fontSize: props.note ? 13 : props.caption ? 18 : 15,\n                    color\n                },\n                props.style\n            ]}\n        />\n    );\n};\nexport default Text;\n"],"sourceRoot":""}