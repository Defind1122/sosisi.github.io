{"version":3,"sources":["src/components/Notice.tsx","src/components/Meta.tsx","src/hooks/useDelayedEffect.tsx","src/components/TokenAmount.tsx","src/components/UnsupportedButton.tsx","src/components/TokenName.tsx","src/components/TokenSearch.tsx","src/components/TokenSelect.tsx","src/hooks/useAddLiquidityState.tsx","src/screens/LiquidityScreen.tsx"],"names":["Notice","props","borderStyle","border","useStyles","color","borderColor","style","clear","paddingHorizontal","Spacing","tiny","note","text","buttonText","onPressButton","title","type","size","fontWeight","onPress","titleStyle","buttonStyle","paddingVertical","alignSelf","marginTop","Meta","useColors","textMedium","textLight","placeholder","useLinker","url","disabled","suffix","justifyContent","fontSize","label","undefined","textDecorationLine","handles","useDelayedEffect","effect","timeout","inputs","key","toString","useAsyncEffect","handle","setTimeout","clearTimeout","TokenAmount","caption","formatBalance","amount","token","balance","decimals","UnsupportedButton","state","fromSymbol","toSymbol","TokenName","Text","numberOfLines","ellipsizeMode","marginLeft","small","width","name","Loading","ActivityIndicator","position","right","bottom","TokenItem","accent","useCallback","onSelectToken","Selectable","selected","marginBottom","ITEM_SEPARATOR_HEIGHT","FlexView","alignItems","TokenLogo","View","flex","Button","duplicate","symbol","height","TokenSearch","useContext","EthersContext","provider","signer","getTokenBalance","tokens","useState","tokenToAdd","setTokenToAdd","loading","setLoading","findIndex","t","address","useEffect","a","async","trim","ethers","utils","isAddress","findOrFetchToken","getAddress","Input","value","onChangeText","autoFocus","inputStyle","marginHorizontal","inputContainerStyle","borderBottomWidth","marginRight","labelStyle","containerStyle","paddingTop","paddingBottom","onAddToken","TokenList","loadingTokens","renderItem","item","data","useMemo","filter","hidden","sort","t1","t2","isZero","localeCompare","length","FlatList","keyExtractor","EmptyList","margin","normal","textAlign","selectable","TokenSymbol","TokenSelect","addCustomToken","search","setSearch","query","setQuery","find","toLowerCase","Expandable","expanded","onExpand","onChangeSymbol","hide","includes","useAddLiquidityState","useTokenPairState","updateTokens","pair","setPair","adding","setAdding","useSDK","getPair","addLiquidity","addLiquidityETH","useDelayedOnBlockEffect","block","fromToken","toToken","onAdd","fromAmount","toAmount","parseBalance","amountETH","tx","wait","setFromSymbol","AddLiquidity","large","Border","ItemSeparator","FromTokenSelect","customTokens","ToTokenSelect","setToSymbol","Heading","FromTokenInput","TokenInput","onAmountChanged","newAmount","setFromAmount","priceOf","convertToken","quote","convertAmount","toExact","setToAmount","isEmptyValue","hideMaxButton","ToTokenInput","PriceInfo","FirstProviderInfo","green","noAmount","initialPrice","Fraction","from","InfoBox","price","PairPriceInfo","setAmount","textDark","calculateAmountOfLPTokenMinted","minted","toFixed","PriceMeta","Controls","error","setError","fromApproveRequired","fromTokenAllowed","toApproveRequired","toTokenAllowed","onError","FetchingButton","gt","InsufficientBalanceButton","ApproveButton","spender","ROUTER","onSuccess","setFromTokenAllowed","setToTokenAllowed","message","code","ErrorMessage","SupplyButton","goToRemoveLiquidity","LiquidityScreen","Screen","Container","Content","Title","light","Platform","OS","WebFooter"],"mappings":"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","file":"static/js/10.7187aa32.chunk.js","sourcesContent":["import React from \"react\";\nimport { View, ViewStyle } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useStyles from \"../hooks/useStyles\";\nimport Button from \"./Button\";\nimport Text from \"./Text\";\n\nexport interface NoticeProps {\n    text: string;\n    clear?: boolean;\n    color?: string;\n    buttonText?: string;\n    onPressButton?: () => void;\n    style?: ViewStyle;\n}\n\nconst Notice = (props: NoticeProps) => {\n    const { border } = useStyles();\n    const borderStyle = border({ color: props.color });\n    const color = props.color || borderStyle.borderColor;\n    return (\n        <View style={[props.clear ? { paddingHorizontal: Spacing.tiny } : borderStyle, props.style]}>\n            <Text\n                note={true}\n                style={{\n                    color\n                }}>\n                {props.text}\n            </Text>\n            {props.buttonText && props.onPressButton && (\n                <Button\n                    title={props.buttonText}\n                    type={\"clear\"}\n                    size={\"small\"}\n                    fontWeight={\"bold\"}\n                    onPress={props.onPressButton}\n                    titleStyle={{ color }}\n                    buttonStyle={{ paddingHorizontal: 0, paddingVertical: 0 }}\n                    style={{ alignSelf: \"flex-end\", marginTop: Spacing.tiny }}\n                />\n            )}\n        </View>\n    );\n};\n\nexport default Notice;\n","import React, { FC } from \"react\";\n\nimport useColors from \"../hooks/useColors\";\nimport useLinker from \"../hooks/useLinker\";\nimport FlexView from \"./FlexView\";\nimport Text from \"./Text\";\n\nexport interface MetaProps {\n    label: string;\n    text?: string;\n    suffix?: string;\n    url?: string;\n    disabled?: boolean;\n}\n\nconst Meta: FC<MetaProps> = props => {\n    const { textMedium, textLight, placeholder } = useColors();\n    const onPress = useLinker(props.url || \"\", \"\", \"_blank\");\n    const text = props.disabled\n        ? \"N/A\"\n        : props.text\n        ? props.text + (props.suffix ? \" \" + props.suffix : \"\")\n        : \"Fetching…\";\n    return (\n        <FlexView style={{ justifyContent: \"space-between\", marginTop: 4 }}>\n            <Text fontWeight={\"bold\"} style={{ fontSize: 13, color: props.disabled ? placeholder : textMedium }}>\n                {props.label}\n            </Text>\n            <Text\n                onPress={props.url ? onPress : undefined}\n                style={{\n                    fontSize: 13,\n                    color: props.disabled ? placeholder : props.text ? textMedium : textLight,\n                    textDecorationLine: props.url ? \"underline\" : \"none\"\n                }}>\n                {text}\n            </Text>\n        </FlexView>\n    );\n};\n\nexport default Meta;\n","import useAsyncEffect from \"use-async-effect\";\n\nconst handles = {};\n\nconst useDelayedEffect = (\n    effect: (isMounted: () => boolean) => unknown | Promise<unknown>,\n    timeout: number,\n    inputs?: any[]\n) => {\n    const key = effect.toString();\n    useAsyncEffect<number>(\n        () => {\n            const handle = setTimeout(effect, timeout);\n            handles[key] = handle;\n            return handle;\n        },\n        handle => {\n            clearTimeout(handle);\n        },\n        inputs\n    );\n};\nexport default useDelayedEffect;\n","import React from \"react\";\nimport { TextStyle } from \"react-native\";\n\nimport { ethers } from \"ethers\";\nimport Token from \"../types/Token\";\nimport { formatBalance } from \"../utils\";\nimport Text from \"./Text\";\n\nconst TokenAmount = (props: { token: Token; amount?: ethers.BigNumber; disabled?: boolean; style?: TextStyle }) => (\n    <Text caption={true} disabled={props.disabled} style={props.style}>\n        {formatBalance(props.amount || props.token.balance, props.token.decimals, 8)}\n    </Text>\n);\n\nexport default TokenAmount;\n","import React from \"react\";\n\nimport { TokenPairState } from \"../hooks/useTokenPairState\";\nimport Button from \"./Button\";\n\nconst UnsupportedButton = ({ state }: { state: TokenPairState }) => {\n    return <Button title={state.fromSymbol + \"-\" + state.toSymbol + \" Not Supported\"} disabled={true} />;\n};\n\nexport default UnsupportedButton;\n","import React from \"react\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport Token from \"../types/Token\";\nimport Text from \"./Text\";\n\nconst TokenName = (props: { token: Token; disabled?: boolean }) => (\n    <Text\n        caption={true}\n        numberOfLines={1}\n        ellipsizeMode={\"tail\"}\n        style={{ marginLeft: Spacing.small, width: 180 }}\n        disabled={props.disabled}>\n        {props.token.name}\n    </Text>\n);\n\nexport default TokenName;\n","import React, { FC, useCallback, useContext, useEffect, useState } from \"react\";\nimport { ActivityIndicator, View } from \"react-native\";\n\nimport { ethers } from \"ethers\";\nimport { Spacing } from \"../constants/dimension\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport useColors from \"../hooks/useColors\";\nimport useDelayedEffect from \"../hooks/useDelayedEffect\";\nimport useStyles from \"../hooks/useStyles\";\nimport Token from \"../types/Token\";\nimport { findOrFetchToken } from \"../utils/fetch-utils\";\nimport Button from \"./Button\";\nimport FlexView from \"./FlexView\";\nimport Input from \"./Input\";\nimport { ITEM_SEPARATOR_HEIGHT } from \"./ItemSeparator\";\nimport Selectable from \"./Selectable\";\nimport TokenLogo from \"./TokenLogo\";\nimport TokenName from \"./TokenName\";\n\nexport interface TokenSearchProps {\n    tokens?: Token[];\n    text: string;\n    onChangeText: (text: string) => void;\n    onAddToken?: (token: Token) => void;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst TokenSearch: FC<TokenSearchProps> = props => {\n    const { border } = useStyles();\n    const { provider, signer, getTokenBalance, tokens } = useContext(EthersContext);\n    const [tokenToAdd, setTokenToAdd] = useState<Token>();\n    const [loading, setLoading] = useState(false);\n    const duplicate = !!tokenToAdd && tokens.findIndex(t => t.address === tokenToAdd.address) !== -1;\n    if (!props.tokens) return <View />;\n    useEffect(() => {\n        if (props.text === \"\") {\n            setLoading(false);\n            setTokenToAdd(undefined);\n        }\n    }, [props.text]);\n    useDelayedEffect(\n        async () => {\n            const address = props.text.trim();\n            if (provider && signer && ethers.utils.isAddress(address)) {\n                setLoading(true);\n                try {\n                    const token = await findOrFetchToken(provider, address);\n                    if (token.name && token.symbol && token.decimals) {\n                        const balance = await getTokenBalance(address, await signer.getAddress());\n                        setTokenToAdd({\n                            ...token,\n                            balance\n                        } as Token);\n                    }\n                } finally {\n                    setLoading(false);\n                }\n            }\n        },\n        300,\n        [provider, signer, props.text]\n    );\n    return (\n        <View>\n            <FlexView style={{ marginBottom: Spacing.small }}>\n                <Input\n                    value={props.text}\n                    onChangeText={props.onChangeText}\n                    placeholder={\"Search for a token… (name, symbol or address)\"}\n                    autoFocus={true}\n                    inputStyle={{ marginHorizontal: Spacing.tiny, fontSize: props.text ? 20 : 16 }}\n                    inputContainerStyle={{ borderBottomWidth: 0, marginRight: loading ? 32 : 0 }}\n                    labelStyle={{ height: 0 }}\n                    containerStyle={{\n                        ...border(),\n                        paddingHorizontal: Spacing.tiny,\n                        paddingTop: 12,\n                        paddingBottom: 0\n                    }}\n                />\n                {props.onAddToken && loading && <Loading />}\n            </FlexView>\n            {props.onAddToken && tokenToAdd && (\n                <TokenItem token={tokenToAdd} selected={true} onSelectToken={props.onAddToken} duplicate={duplicate} />\n            )}\n        </View>\n    );\n};\n\nconst Loading = () => <ActivityIndicator size={\"small\"} style={{ position: \"absolute\", right: 16, bottom: 16 }} />;\n\nconst TokenItem = (props: {\n    token: Token;\n    selected: boolean;\n    onSelectToken: (token: Token) => void;\n    duplicate: boolean;\n}) => {\n    const { accent } = useColors();\n    const onPress = useCallback(() => {\n        props.onSelectToken(props.token);\n    }, [props.onSelectToken, props.token]);\n    return (\n        <Selectable\n            selected={false}\n            disabled={true}\n            onPress={onPress}\n            style={{\n                marginBottom: ITEM_SEPARATOR_HEIGHT\n            }}>\n            <FlexView style={{ alignItems: \"center\" }}>\n                <TokenLogo token={props.token} />\n                <TokenName token={props.token} />\n                <View style={{ flex: 1 }} />\n                <Button\n                    type={\"clear\"}\n                    size={\"small\"}\n                    color={accent}\n                    title={props.duplicate ? \"Already Added\" : \"ADD \" + props.token.symbol}\n                    fontWeight={\"bold\"}\n                    onPress={onPress}\n                    disabled={props.duplicate}\n                    buttonStyle={{ paddingHorizontal: 4, height: 27 }}\n                />\n            </FlexView>\n        </Selectable>\n    );\n};\n\nexport default TokenSearch;\n","import React, { FC, useCallback, useContext, useEffect, useMemo, useState } from \"react\";\nimport { FlatList, View, ViewStyle } from \"react-native\";\n\nimport { ethers } from \"ethers\";\nimport { Spacing } from \"../constants/dimension\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport useDelayedEffect from \"../hooks/useDelayedEffect\";\nimport Token from \"../types/Token\";\nimport Expandable from \"./Expandable\";\nimport FlexView from \"./FlexView\";\nimport { ITEM_SEPARATOR_HEIGHT } from \"./ItemSeparator\";\nimport Loading from \"./Loading\";\nimport Selectable from \"./Selectable\";\nimport Text from \"./Text\";\nimport TokenAmount from \"./TokenAmount\";\nimport TokenLogo from \"./TokenLogo\";\nimport TokenName from \"./TokenName\";\nimport TokenSearch from \"./TokenSearch\";\nimport TokenSymbol from \"./TokenSymbol\";\n\nexport interface TokenSelectProps {\n    title: string;\n    symbol: string;\n    onChangeSymbol: (symbol: string) => void;\n    disabled?: (token: Token) => boolean;\n    hidden?: (token: Token) => boolean;\n    style?: ViewStyle;\n}\n\nconst TokenSelect: FC<TokenSelectProps> = props => {\n    const { tokens, addCustomToken } = useContext(EthersContext);\n    const [search, setSearch] = useState(\"\");\n    const [query, setQuery] = useState(\"\");\n    const token = useMemo(() => tokens.find(t => t.symbol === props.symbol), [tokens, props.symbol]);\n    const onSelectToken = t => props.onChangeSymbol(t.symbol);\n    const onUnselectToken = () => props.onChangeSymbol(\"\");\n    const onAddToken = async (t: Token) => {\n        await addCustomToken(t);\n        setSearch(\"\");\n        setQuery(\"\");\n    };\n    const hidden = (t: Token) => {\n        let hide = props.hidden?.(t) || false;\n        if (!hide && query.length > 0 && !ethers.utils.isAddress(query)) {\n            hide = !t.symbol.toLowerCase().includes(query) && !t.name.toLowerCase().includes(query);\n        }\n        return hide;\n    };\n    useEffect(() => setSearch(\"\"), [props.symbol]);\n    useDelayedEffect(() => setQuery(search.trim().toLowerCase()), 300, [search]);\n    return (\n        <View style={props.style}>\n            <Expandable title={props.title} expanded={!props.symbol} onExpand={() => props.onChangeSymbol(\"\")}>\n                <TokenSearch text={search} onChangeText={setSearch} tokens={tokens} onAddToken={onAddToken} />\n                <TokenList disabled={props.disabled} hidden={hidden} onSelectToken={onSelectToken} />\n            </Expandable>\n            {token && <TokenItem token={token} selected={true} onSelectToken={onUnselectToken} selectable={true} />}\n        </View>\n    );\n};\n\n// tslint:disable-next-line:max-func-body-length\nconst TokenList = (props: {\n    onSelectToken: (token: Token) => void;\n    disabled?: (token: Token) => boolean;\n    hidden?: (token: Token) => boolean;\n}) => {\n    const { loadingTokens, tokens } = useContext(EthersContext);\n    const renderItem = useCallback(\n        ({ item }) => {\n            return (\n                <TokenItem\n                    key={item.address}\n                    token={item}\n                    selected={false}\n                    onSelectToken={props.onSelectToken}\n                    disabled={props.disabled?.(item)}\n                />\n            );\n        },\n        [props.onSelectToken, props.disabled]\n    );\n    const data = useMemo(\n        () =>\n            tokens\n                .filter(token => (props.hidden ? !props.hidden(token) : true))\n                .sort(\n                    (t1, t2) =>\n                        (t2.balance.isZero() ? 0 : 10000000000) -\n                        (t1.balance.isZero() ? 0 : 10000000000) +\n                        t1.symbol.localeCompare(t2.symbol)\n                ),\n        [tokens, props.hidden]\n    );\n    return loadingTokens ? (\n        <Loading />\n    ) : data.length === 0 ? (\n        <EmptyList />\n    ) : (\n        <FlatList keyExtractor={item => item.address} data={data} renderItem={renderItem} />\n    );\n};\n\nconst EmptyList = () => {\n    return (\n        <View style={{ margin: Spacing.normal }}>\n            <Text disabled={true} style={{ textAlign: \"center\", width: \"100%\" }}>\n                {\"You don't have any matching tokens.\"}\n            </Text>\n        </View>\n    );\n};\n\nconst TokenItem = (props: {\n    token: Token;\n    selected: boolean;\n    onSelectToken: (token: Token) => void;\n    disabled?: boolean;\n    selectable?: boolean;\n}) => {\n    const onPress = useCallback(() => {\n        props.onSelectToken(props.token);\n    }, [props.onSelectToken, props.token]);\n    return (\n        <Selectable\n            selected={props.selected}\n            onPress={onPress}\n            disabled={props.disabled || props.selectable}\n            style={{\n                marginBottom: ITEM_SEPARATOR_HEIGHT\n            }}>\n            <FlexView style={{ alignItems: \"center\" }}>\n                <TokenLogo token={props.token} disabled={props.disabled} />\n                <TokenName token={props.token} disabled={props.disabled} />\n                <TokenAmount token={props.token} disabled={props.disabled} style={{ flex: 1, textAlign: \"right\" }} />\n                <TokenSymbol token={props.token} disabled={props.disabled} />\n            </FlexView>\n        </Selectable>\n    );\n};\n\nexport default TokenSelect;\n","import { useCallback, useContext, useState } from \"react\";\n\nimport { Pair } from \"@sushiswap/sdk\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport { parseBalance } from \"../utils\";\nimport useDelayedOnBlockEffect from \"./useDelayedOnBlockEffect\";\nimport useSDK from \"./useSDK\";\nimport useTokenPairState, { TokenPairState } from \"./useTokenPairState\";\n\nexport interface AddLiquidityState extends TokenPairState {\n    pair?: Pair;\n    onAdd: () => Promise<void>;\n    adding: boolean;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst useAddLiquidityState: () => AddLiquidityState = () => {\n    const state = useTokenPairState();\n    const { provider, signer, updateTokens } = useContext(EthersContext);\n    const [loading, setLoading] = useState(false);\n    const [pair, setPair] = useState<Pair>();\n    const [adding, setAdding] = useState(false);\n    const { getPair, addLiquidity, addLiquidityETH } = useSDK();\n\n    useDelayedOnBlockEffect(\n        async block => {\n            if (!block) {\n                setLoading(true);\n                setPair(undefined);\n            }\n            if (state.fromToken && state.toToken && provider) {\n                try {\n                    setPair(await getPair(state.fromToken, state.toToken, provider));\n                } catch (e) {\n                } finally {\n                    setLoading(false);\n                }\n            } else {\n                setLoading(false);\n            }\n        },\n        () => \"getPair(\" + state.fromSymbol + \",\" + state.toSymbol + \")\",\n        [state.fromSymbol, state.toSymbol, provider],\n        0\n    );\n\n    const onAdd = useCallback(async () => {\n        if (state.fromToken && state.toToken && state.fromAmount && state.toAmount && signer) {\n            setAdding(true);\n            try {\n                const fromAmount = parseBalance(state.fromAmount, state.fromToken.decimals);\n                const toAmount = parseBalance(state.toAmount, state.toToken.decimals);\n                if (state.fromSymbol === \"ETH\" || state.toSymbol === \"ETH\") {\n                    const [token, amount, amountETH] =\n                        state.fromSymbol === \"ETH\"\n                            ? [state.toToken, toAmount, fromAmount]\n                            : [state.fromToken, fromAmount, toAmount];\n                    const tx = await addLiquidityETH(token, amount, amountETH, signer);\n                    await tx.wait();\n                } else {\n                    const tx = await addLiquidity(state.fromToken, state.toToken, fromAmount, toAmount, signer);\n                    await tx.wait();\n                }\n                await updateTokens();\n                state.setFromSymbol(\"\");\n            } finally {\n                setAdding(false);\n            }\n        }\n    }, [state.fromToken, state.toToken, state.fromAmount, state.toAmount, signer]);\n\n    return {\n        ...state,\n        loading: loading || state.loading,\n        pair,\n        onAdd,\n        adding\n    };\n};\n\nexport default useAddLiquidityState;\n","import React, { useCallback, useContext, useState } from \"react\";\nimport { Platform, View } from \"react-native\";\n\nimport useAsyncEffect from \"use-async-effect\";\nimport ApproveButton from \"../components/ApproveButton\";\nimport Border from \"../components/Border\";\nimport Button from \"../components/Button\";\nimport Container from \"../components/Container\";\nimport Content from \"../components/Content\";\nimport ErrorMessage from \"../components/ErrorMessage\";\nimport FetchingButton from \"../components/FetchingButton\";\nimport Heading from \"../components/Heading\";\nimport InfoBox from \"../components/InfoBox\";\nimport InsufficientBalanceButton from \"../components/InsufficientBalanceButton\";\nimport ItemSeparator from \"../components/ItemSeparator\";\nimport Meta from \"../components/Meta\";\nimport Notice from \"../components/Notice\";\nimport Text from \"../components/Text\";\nimport Title from \"../components/Title\";\nimport TokenInput from \"../components/TokenInput\";\nimport TokenSelect from \"../components/TokenSelect\";\nimport UnsupportedButton from \"../components/UnsupportedButton\";\nimport WebFooter from \"../components/web/WebFooter\";\nimport { LiquiditySubMenu } from \"../components/web/WebSubMenu\";\nimport { ROUTER } from \"../constants/contracts\";\nimport { Spacing } from \"../constants/dimension\";\nimport Fraction from \"../constants/Fraction\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport useAddLiquidityState, { AddLiquidityState } from \"../hooks/useAddLiquidityState\";\nimport useColors from \"../hooks/useColors\";\nimport useLinker from \"../hooks/useLinker\";\nimport useSDK from \"../hooks/useSDK\";\nimport MetamaskError from \"../types/MetamaskError\";\nimport { convertAmount, convertToken, isEmptyValue, parseBalance } from \"../utils\";\nimport Screen from \"./Screen\";\n\nconst LiquidityScreen = () => {\n    return (\n        <Screen>\n            <LiquiditySubMenu />\n            <Container>\n                <Content>\n                    <Title text={\"Add Liquidity\"} />\n                    <Text light={true}>Add liquidity to a pool and get LP tokens of the pair.</Text>\n                    <AddLiquidity />\n                    {Platform.OS === \"web\" && <WebFooter />}\n                </Content>\n            </Container>\n        </Screen>\n    );\n};\n\nconst AddLiquidity = () => {\n    const state = useAddLiquidityState();\n    return (\n        <View style={{ marginTop: Spacing.large }}>\n            <FromTokenSelect state={state} />\n            <Border />\n            <ToTokenSelect state={state} />\n            <Border />\n            <FromTokenInput state={state} />\n            <ItemSeparator />\n            <ToTokenInput state={state} />\n            <ItemSeparator />\n            <PriceInfo state={state} />\n        </View>\n    );\n};\n\nconst FromTokenSelect = ({ state }: { state: AddLiquidityState }) => {\n    const { customTokens } = useContext(EthersContext);\n    return (\n        <TokenSelect\n            title={\"1st Token\"}\n            symbol={state.fromSymbol}\n            onChangeSymbol={state.setFromSymbol}\n            hidden={token => !customTokens.find(t => t.address === token.address) && token.balance.isZero()}\n        />\n    );\n};\n\nconst ToTokenSelect = ({ state }: { state: AddLiquidityState }) => {\n    const { customTokens } = useContext(EthersContext);\n    if (!state.fromSymbol) {\n        return <Heading text={\"2nd Token\"} disabled={true} />;\n    }\n    return (\n        <View>\n            <TokenSelect\n                title={\"2nd Token\"}\n                symbol={state.toSymbol}\n                onChangeSymbol={state.setToSymbol}\n                hidden={token =>\n                    token.symbol === state.fromSymbol ||\n                    (!customTokens.find(t => t.address === token.address) && token.balance.isZero())\n                }\n            />\n        </View>\n    );\n};\n\nconst FromTokenInput = ({ state }: { state: AddLiquidityState }) => {\n    if (!state.fromSymbol || !state.toSymbol) {\n        return <Heading text={\"Amount of Tokens\"} disabled={true} />;\n    }\n    const onAmountChanged = (newAmount: string) => {\n        state.setFromAmount(newAmount);\n        if (state.pair && state.fromToken) {\n            const fromPrice = state.pair.priceOf(convertToken(state.fromToken));\n            const toAmount = fromPrice.quote(convertAmount(state.fromToken, newAmount)).toExact();\n            state.setToAmount(isEmptyValue(toAmount) ? \"\" : toAmount);\n        }\n    };\n    return (\n        <TokenInput\n            title={\"Amount of Tokens\"}\n            token={state.fromToken}\n            amount={state.fromAmount}\n            onAmountChanged={onAmountChanged}\n            hideMaxButton={state.loading && !state.pair}\n        />\n    );\n};\n\nconst ToTokenInput = ({ state }: { state: AddLiquidityState }) => {\n    if (!state.fromSymbol || !state.toSymbol) {\n        return <View />;\n    }\n    const onAmountChanged = (newAmount: string) => {\n        state.setToAmount(newAmount);\n        if (state.pair && state.toToken) {\n            const toPrice = state.pair.priceOf(convertToken(state.toToken));\n            const fromAmount = toPrice.quote(convertAmount(state.toToken, newAmount)).toExact();\n            state.setFromAmount(isEmptyValue(fromAmount) ? \"\" : fromAmount);\n        }\n    };\n    return (\n        <TokenInput\n            token={state.toToken}\n            amount={state.toAmount}\n            onAmountChanged={onAmountChanged}\n            hideMaxButton={state.loading && !state.pair}\n        />\n    );\n};\n\nconst PriceInfo = ({ state }: { state: AddLiquidityState }) => {\n    if (state.fromToken && state.toToken && !state.loading && !state.pair) {\n        return <FirstProviderInfo state={state} />;\n    } else {\n        return <PairPriceInfo state={state} />;\n    }\n};\n\nconst FirstProviderInfo = ({ state }: { state: AddLiquidityState }) => {\n    const { green } = useColors();\n    const noAmount = isEmptyValue(state.fromAmount) || isEmptyValue(state.toAmount);\n    const initialPrice = Fraction.from(\n        parseBalance(state.toAmount, state.toToken!.decimals),\n        parseBalance(state.fromAmount, state.fromToken!.decimals)\n    ).toString(8);\n    return (\n        <View>\n            <InfoBox style={{ marginTop: Spacing.normal }}>\n                <PriceMeta state={state} price={initialPrice} disabled={noAmount} />\n            </InfoBox>\n            <Notice\n                text={\n                    \"You are the first liquidity provider.\\n\" +\n                    \"The ratio of tokens you add will set the price of this pool.\"\n                }\n                color={green}\n                style={{ marginTop: Spacing.small }}\n            />\n        </View>\n    );\n};\n\nconst PairPriceInfo = ({ state }: { state: AddLiquidityState }) => {\n    const [amount, setAmount] = useState<string>();\n    const { textDark, textLight, placeholder } = useColors();\n    const { calculateAmountOfLPTokenMinted } = useSDK();\n    useAsyncEffect(async () => {\n        if (state.pair && !isEmptyValue(state.fromAmount) && !isEmptyValue(state.toAmount)) {\n            const minted = await calculateAmountOfLPTokenMinted(\n                state.pair,\n                convertAmount(state.fromToken!, state.fromAmount),\n                convertAmount(state.toToken!, state.toAmount)\n            );\n            setAmount(minted?.toFixed(8));\n        }\n    }, [state.pair, state.fromAmount, state.toAmount]);\n    const disabled = isEmptyValue(state.fromAmount) || isEmptyValue(state.toAmount);\n    const price =\n        state.pair && state.fromToken ? state.pair.priceOf(convertToken(state.fromToken)).toFixed(8) : undefined;\n    const color = disabled ? placeholder : amount ? textDark : textLight;\n    const symbol = state.fromSymbol + \"-\" + state.toSymbol;\n    return (\n        <InfoBox>\n            <Text style={{ fontSize: 28, marginBottom: Spacing.normal, color }}>\n                {disabled ? \"N/A\" : amount ? amount + \" \" + symbol : \"Fetching…\"}\n            </Text>\n            <PriceMeta state={state} price={price} disabled={!state.fromSymbol || !state.toSymbol} />\n            <Controls state={state} />\n        </InfoBox>\n    );\n};\n\nconst PriceMeta = ({ state, price, disabled }) => (\n    <Meta label={\"Price\"} text={price} suffix={state.toSymbol + \" = 1 \" + state.fromSymbol} disabled={disabled} />\n);\n\n// tslint:disable-next-line:max-func-body-length\nconst Controls = ({ state }: { state: AddLiquidityState }) => {\n    const [error, setError] = useState<MetamaskError>({});\n    useAsyncEffect(() => setError({}), [state.fromSymbol, state.toSymbol, state.fromAmount]);\n    const fromApproveRequired = state.fromSymbol !== \"ETH\" && !state.fromTokenAllowed;\n    const toApproveRequired = state.toSymbol !== \"ETH\" && !state.toTokenAllowed;\n    const disabled =\n        fromApproveRequired || toApproveRequired || isEmptyValue(state.fromAmount) || isEmptyValue(state.toAmount);\n    return (\n        <View style={{ marginTop: Spacing.normal }}>\n            {!state.fromToken ||\n            !state.toToken ||\n            state.loading ||\n            isEmptyValue(state.fromAmount) ||\n            isEmptyValue(state.toAmount) ? (\n                <SupplyButton state={state} onError={setError} disabled={true} />\n            ) : state.loading || !state.pair ? (\n                <FetchingButton />\n            ) : parseBalance(state.fromAmount, state.fromToken.decimals).gt(state.fromToken.balance) ? (\n                <InsufficientBalanceButton symbol={state.fromSymbol} />\n            ) : parseBalance(state.toAmount, state.toToken.decimals).gt(state.toToken.balance) ? (\n                <InsufficientBalanceButton symbol={state.toSymbol} />\n            ) : (state.fromSymbol === \"ETH\" && state.toSymbol === \"WETH\") ||\n              (state.fromSymbol === \"WETH\" && state.toSymbol === \"ETH\") ? (\n                <UnsupportedButton state={state} />\n            ) : (\n                <>\n                    <ApproveButton\n                        token={state.fromToken}\n                        spender={ROUTER}\n                        onSuccess={() => state.setFromTokenAllowed(true)}\n                        onError={setError}\n                        hidden={!fromApproveRequired}\n                    />\n                    <ApproveButton\n                        token={state.toToken}\n                        spender={ROUTER}\n                        onSuccess={() => state.setToTokenAllowed(true)}\n                        onError={setError}\n                        hidden={!toApproveRequired}\n                    />\n                    <SupplyButton state={state} onError={setError} disabled={disabled} />\n                </>\n            )}\n            {error.message && error.code !== 4001 && <ErrorMessage error={error} />}\n        </View>\n    );\n};\n\nconst SupplyButton = ({\n    state,\n    onError,\n    disabled\n}: {\n    state: AddLiquidityState;\n    onError: (e) => void;\n    disabled: boolean;\n}) => {\n    const goToRemoveLiquidity = useLinker(\"/liquidity/remove\", \"RemoveLiquidity\");\n    const onPress = useCallback(async () => {\n        onError({});\n        try {\n            await state.onAdd();\n            goToRemoveLiquidity();\n        } catch (e) {\n            onError(e);\n        }\n    }, [state.onAdd, onError]);\n    return (\n        <Button\n            title={state.fromSymbol && state.toSymbol ? \"Supply \" + state.fromSymbol + \"-\" + state.toSymbol : \"Supply\"}\n            disabled={disabled}\n            loading={state.adding}\n            onPress={onPress}\n        />\n    );\n};\n\nexport default LiquidityScreen;\n"],"sourceRoot":""}