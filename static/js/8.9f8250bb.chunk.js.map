{"version":3,"sources":["src/components/AmountMeta.tsx","src/components/InsufficientBalanceButton.tsx","src/components/ApproveButton.tsx","src/components/Notice.tsx","src/components/TokenSymbol.tsx","src/hooks/useDelayedEffect.tsx","src/components/TokenAmount.tsx","src/components/TokenName.tsx","src/components/Select.tsx","src/components/TokenPrice.tsx","src/components/TokenValue.tsx","src/components/UnsupportedButton.tsx","src/components/TokenSearch.tsx","src/components/TokenSelect.tsx","src/components/ExperimentalNotice.tsx","src/hooks/useSwapState.tsx","src/screens/SwapScreen.tsx"],"names":["AmountMeta","props","useColors","textDark","textLight","placeholder","style","fontSize","IS_DESKTOP","marginBottom","Spacing","normal","color","disabled","amount","suffix","InsufficientBalanceButton","symbol","title","ApproveButton","approveToken","useContext","EthersContext","useState","loading","setLoading","onPress","useCallback","a","async","token","onError","address","spender","tx","wait","onSuccess","hidden","containerStyle","tiny","Notice","borderStyle","border","useStyles","clear","note","text","buttonText","onPressButton","type","size","fontWeight","titleStyle","buttonStyle","paddingHorizontal","paddingVertical","alignSelf","marginTop","TokenSymbol","medium","caption","marginLeft","handles","useDelayedEffect","effect","timeout","inputs","key","toString","useAsyncEffect","handle","setTimeout","clearTimeout","TokenAmount","formatBalance","balance","decimals","TokenName","numberOfLines","ellipsizeMode","small","width","name","Item","ITEM_SEPARATOR_HEIGHT","paddingLeft","paddingRight","selected","selectable","setOption","undefined","option","alignItems","flex","description","Select","expanded","onExpand","options","map","TokenPrice","formatUSD","priceUSD","TokenValue","valueUSD","UnsupportedButton","state","fromSymbol","toSymbol","Loading","ActivityIndicator","position","right","bottom","TokenItem","accent","onSelectToken","Selectable","FlexView","TokenLogo","View","Button","duplicate","height","TokenSearch","provider","tokens","tokenToAdd","setTokenToAdd","findIndex","t","useEffect","trim","ethers","utils","isAddress","findOrFetchToken","Input","value","onChangeText","autoFocus","inputStyle","marginHorizontal","inputContainerStyle","borderBottomWidth","marginRight","labelStyle","paddingTop","paddingBottom","onAddToken","TokenList","loadingTokens","renderItem","item","data","useMemo","filter","sort","compareTokens","length","FlatList","keyExtractor","EmptyList","margin","Text","textAlign","CloseIcon","SelectIcon","t1","t2","isZero","value2","value1","localeCompare","TokenSelect","addCustomToken","search","setSearch","query","setQuery","find","toLowerCase","Expandable","onChangeSymbol","includes","ExperimentalNotice","onPressContract","useLinker","contractURL","marginVertical","useSwapState","useTokenPairState","chainId","signer","kovanSigner","updateTokens","getTrade","useSDK","useSwapRouter","swap","calculateSwapFee","useSettlement","calculateLimitOrderFee","calculateLimitOrderReturn","createOrder","orderType","setOrderType","priceInETH","setPriceInETH","trade","setTrade","unsupported","setUnsupported","swapFee","setSwapFee","limitOrderPrice","setLimitOrderPrice","limitOrderFee","setLimitOrderFee","limitOrderSwapFee","setLimitOrderSwapFee","limitOrderReturn","setLimitOrderReturn","swapping","setSwapping","creatingOrder","setCreatingOrder","setFromSymbol","fromToken","isWETH","constants","WeiPerEther","Token","toToken","WETH","Fetcher","fetchPairData","pair","parseBalance","priceOf","toFixed","isEmptyValue","fromAmount","useDelayedOnBlockEffect","block","sub","onSwap","result","onCreateOrder","amountIn","Fraction","parse","apply","mul","pow10","div","limitOrderUnsupported","isETH","Swap","large","Border","OrderTypeSelect","FromTokenSelect","customTokens","Heading","ETH","ToTokenSelect","limit","setToSymbol","AmountInput","TokenInput","onAmountChanged","setFromAmount","AmountNotice","lte","PriceInput","marketPrice","executionPrice","invert","Zero","maxButtonText","LimitOrderUnsupportedNotice","NoPairNotice","TradeInfo","isETHWETHPair","InfoBox","WrapInfo","SwapInfo","outputAmount","price","impact","priceImpact","Meta","label","SwapControls","error","setError","approveRequired","fromTokenAllowed","gt","FetchingButton","ROUTER","setFromTokenAllowed","message","code","ErrorMessage","SwapButton","catch","WrapButton","onWrap","wrapping","UnwrapButton","onUnwrap","unwrapping","LimitOrderInfo","d","LimitOrderControls","getTokenAllowance","allowed","setAllowed","SETTLEMENT","allowance","BigNumber","from","gte","PriceTooLowButton","PlaceOrderButton","goToLimitOrders","SwapScreen","Screen","Container","BackgroundImage","Content","Title","light","Platform","OS","WebFooter"],"mappings":"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","file":"static/js/8.9f8250bb.chunk.js","sourcesContent":["import React, { FC } from \"react\";\n\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport Text from \"./Text\";\n\nexport interface AmountMetaProps {\n    amount?: string;\n    suffix?: string;\n    disabled?: boolean;\n}\n\nconst AmountMeta: FC<AmountMetaProps> = props => {\n    const { textDark, textLight, placeholder } = useColors();\n    return (\n        <Text\n            style={{\n                fontSize: IS_DESKTOP ? 28 : 20,\n                marginBottom: Spacing.normal,\n                color: props.disabled ? placeholder : props.amount ? textDark : textLight\n            }}>\n            {props.disabled ? \"N/A\" : props.amount ? props.amount + \" \" + (props.suffix || \"\") : \"Fetching…\"}\n        </Text>\n    );\n};\n\nexport default AmountMeta;\n","import React from \"react\";\n\nimport Button from \"./Button\";\n\nconst InsufficientBalanceButton = ({ symbol }: { symbol: string }) => {\n    return <Button title={\"Insufficient \" + (symbol ? symbol : \"Balance\")} disabled={true} />;\n};\nexport default InsufficientBalanceButton;\n","import React, { FC, useCallback, useContext, useState } from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport Token from \"../types/Token\";\nimport Button from \"./Button\";\n\nexport interface ApproveButtonProps {\n    token: Token;\n    spender: string;\n    onSuccess: () => void;\n    onError: (e) => void;\n    hidden?: boolean;\n}\n\nconst ApproveButton: FC<ApproveButtonProps> = props => {\n    const { approveToken } = useContext(EthersContext);\n    const [loading, setLoading] = useState(false);\n    const onPress = useCallback(async () => {\n        if (props.token) {\n            props.onError({});\n            setLoading(true);\n            try {\n                const tx = await approveToken(props.token.address, props.spender);\n                if (tx) {\n                    await tx.wait();\n                    props.onSuccess();\n                }\n            } catch (e) {\n                props.onError(e);\n            } finally {\n                setLoading(false);\n            }\n        }\n    }, [props.token]);\n    if (props.hidden) return <View />;\n    return (\n        <Button\n            title={\"Approve \" + (props.token?.symbol || \"\")}\n            onPress={onPress}\n            loading={loading}\n            containerStyle={{ marginBottom: Spacing.tiny }}\n        />\n    );\n};\n\nexport default ApproveButton;\n","import React from \"react\";\nimport { View, ViewStyle } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport useStyles from \"../hooks/useStyles\";\nimport Button from \"./Button\";\nimport Text from \"./Text\";\n\nexport interface NoticeProps {\n    text: string;\n    clear?: boolean;\n    color?: string;\n    buttonText?: string;\n    onPressButton?: () => void;\n    style?: ViewStyle;\n}\n\nconst Notice = (props: NoticeProps) => {\n    const { textLight } = useColors();\n    const { border } = useStyles();\n    const borderStyle = border({ color: props.color });\n    const color = props.color || textLight;\n    return (\n        <View style={[props.clear ? {} : borderStyle, props.style]}>\n            <Text note={true} style={{ color }}>\n                {props.text}\n            </Text>\n            {props.buttonText && props.onPressButton && (\n                <Button\n                    title={props.buttonText}\n                    type={\"clear\"}\n                    size={\"small\"}\n                    fontWeight={\"bold\"}\n                    onPress={props.onPressButton}\n                    titleStyle={{ color }}\n                    buttonStyle={{ paddingHorizontal: 0, paddingVertical: 0 }}\n                    style={{ alignSelf: \"flex-end\", marginTop: Spacing.tiny }}\n                />\n            )}\n        </View>\n    );\n};\n\nexport default Notice;\n","import React from \"react\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport Token from \"../types/Token\";\nimport Text from \"./Text\";\n\nconst TokenSymbol = (props: { token: Token; disabled?: boolean }) => (\n    <Text medium={true} caption={true} disabled={props.disabled} style={{ marginLeft: Spacing.tiny }}>\n        {props.token.symbol}\n    </Text>\n);\n\nexport default TokenSymbol;\n","import useAsyncEffect from \"use-async-effect\";\n\nconst handles = {};\n\nconst useDelayedEffect = (\n    effect: (isMounted: () => boolean) => unknown | Promise<unknown>,\n    timeout: number,\n    inputs?: any[]\n) => {\n    const key = effect.toString();\n    useAsyncEffect<number>(\n        () => {\n            const handle = setTimeout(effect, timeout);\n            handles[key] = handle;\n            return handle;\n        },\n        handle => {\n            clearTimeout(handle);\n        },\n        inputs\n    );\n};\nexport default useDelayedEffect;\n","import React from \"react\";\nimport { TextStyle } from \"react-native\";\n\nimport { ethers } from \"ethers\";\nimport { IS_DESKTOP } from \"../constants/dimension\";\nimport Token from \"../types/Token\";\nimport { formatBalance } from \"../utils\";\nimport Text from \"./Text\";\n\nconst TokenAmount = (props: { token: Token; amount?: ethers.BigNumber; disabled?: boolean; style?: TextStyle }) => (\n    <Text caption={IS_DESKTOP} disabled={props.disabled} style={props.style}>\n        {formatBalance(props.amount || props.token.balance, props.token.decimals, 8)}\n    </Text>\n);\n\nexport default TokenAmount;\n","import React from \"react\";\n\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport Token from \"../types/Token\";\nimport Text from \"./Text\";\n\nconst TokenName = (props: { token: Token; disabled?: boolean }) => (\n    <Text\n        caption={true}\n        numberOfLines={1}\n        ellipsizeMode={\"tail\"}\n        style={{ marginLeft: Spacing.small, width: 180 }}\n        disabled={props.disabled}>\n        {IS_DESKTOP ? props.token.name : props.token.symbol}\n    </Text>\n);\n\nexport default TokenName;\n","import React, { FC } from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport CloseIcon from \"./CloseIcon\";\nimport Expandable from \"./Expandable\";\nimport FlexView from \"./FlexView\";\nimport { ITEM_SEPARATOR_HEIGHT } from \"./ItemSeparator\";\nimport Selectable from \"./Selectable\";\nimport SelectIcon from \"./SelectIcon\";\nimport Text from \"./Text\";\n\nexport interface Option {\n    key: string;\n    title: string;\n    description: string;\n}\n\nexport interface SelectProps {\n    title: string;\n    options: Option[];\n    option?: Option;\n    setOption: (option?: Option) => void;\n}\n\nconst Select: FC<SelectProps> = props => {\n    return (\n        <View>\n            <Expandable title={props.title} expanded={!props.option} onExpand={() => props.setOption()}>\n                {props.options.map(option => (\n                    <Item\n                        key={option.key}\n                        option={option}\n                        setOption={props.setOption}\n                        selected={option.key === props.option?.key}\n                    />\n                ))}\n            </Expandable>\n            {props.option && (\n                <Item option={props.option} setOption={props.setOption} selected={true} selectable={false} />\n            )}\n        </View>\n    );\n};\n\nconst Item = (props: {\n    option: Option;\n    setOption?: (option?: Option) => void;\n    selected: boolean;\n    selectable?: boolean;\n}) => {\n    return (\n        <Selectable\n            containerStyle={{ marginBottom: ITEM_SEPARATOR_HEIGHT }}\n            style={{ paddingLeft: Spacing.small + Spacing.tiny, paddingRight: Spacing.small }}\n            selected={props.selected}\n            disabled={props.selectable}\n            onPress={() => props.setOption?.(props.selected ? undefined : props.option)}>\n            <FlexView style={{ alignItems: \"center\" }}>\n                <View style={{ flex: 1 }}>\n                    <Text fontWeight={\"regular\"}>{props.option.title}</Text>\n                    <Text note={true} style={{ marginTop: 4 }}>\n                        {props.option.description}\n                    </Text>\n                </View>\n                {props.selected ? <CloseIcon /> : <SelectIcon />}\n            </FlexView>\n        </Selectable>\n    );\n};\n\nexport default Select;\n","import React, { FC } from \"react\";\nimport { TextStyle } from \"react-native\";\n\nimport TokenWithValue from \"../types/TokenWithValue\";\nimport { formatUSD } from \"../utils\";\nimport Text from \"./Text\";\n\nexport interface TokenPriceProps {\n    token: TokenWithValue;\n    disabled?: boolean;\n    style?: TextStyle;\n}\n\nconst TokenPrice: FC<TokenPriceProps> = props => {\n    return (\n        <Text note={true} fontWeight={\"light\"} disabled={props.disabled} style={props.style}>\n            {formatUSD(props.token.priceUSD || 0, 4)}\n        </Text>\n    );\n};\n\nexport default TokenPrice;\n","import React, { FC } from \"react\";\nimport { TextStyle } from \"react-native\";\n\nimport TokenWithValue from \"../types/TokenWithValue\";\nimport { formatUSD } from \"../utils\";\nimport Text from \"./Text\";\n\nexport interface TokenValueProps {\n    token: TokenWithValue;\n    disabled?: boolean;\n    style?: TextStyle;\n}\n\nconst TokenValue: FC<TokenValueProps> = props => {\n    return (\n        <Text note={true} fontWeight={\"light\"} disabled={props.disabled} style={props.style}>\n            {formatUSD(props.token.valueUSD || 0, 4)}\n        </Text>\n    );\n};\n\nexport default TokenValue;\n","import React from \"react\";\n\nimport { TokenPairState } from \"../hooks/useTokenPairState\";\nimport Button from \"./Button\";\n\nconst UnsupportedButton = ({ state }: { state: TokenPairState }) => {\n    return <Button title={state.fromSymbol + \"-\" + state.toSymbol + \" Not Supported\"} disabled={true} />;\n};\n\nexport default UnsupportedButton;\n","import React, { FC, useCallback, useContext, useEffect, useState } from \"react\";\nimport { ActivityIndicator, View } from \"react-native\";\n\nimport { ethers } from \"ethers\";\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport useColors from \"../hooks/useColors\";\nimport useDelayedEffect from \"../hooks/useDelayedEffect\";\nimport useStyles from \"../hooks/useStyles\";\nimport Token from \"../types/Token\";\nimport { findOrFetchToken } from \"../utils/fetch-utils\";\nimport Button from \"./Button\";\nimport FlexView from \"./FlexView\";\nimport Input from \"./Input\";\nimport { ITEM_SEPARATOR_HEIGHT } from \"./ItemSeparator\";\nimport Selectable from \"./Selectable\";\nimport TokenLogo from \"./TokenLogo\";\nimport TokenName from \"./TokenName\";\n\nexport interface TokenSearchProps {\n    tokens?: Token[];\n    text: string;\n    onChangeText: (text: string) => void;\n    onAddToken?: (token: Token) => void;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst TokenSearch: FC<TokenSearchProps> = props => {\n    const { border } = useStyles();\n    const { provider, tokens } = useContext(EthersContext);\n    const [tokenToAdd, setTokenToAdd] = useState<Token>();\n    const [loading, setLoading] = useState(false);\n    const duplicate = !!tokenToAdd && tokens.findIndex(t => t.address === tokenToAdd.address) !== -1;\n    if (!props.tokens) return <View />;\n    useEffect(() => {\n        if (props.text === \"\") {\n            setLoading(false);\n            setTokenToAdd(undefined);\n        }\n    }, [props.text]);\n    useDelayedEffect(\n        async () => {\n            const address = props.text.trim();\n            if (provider && ethers.utils.isAddress(address)) {\n                setLoading(true);\n                try {\n                    const token = await findOrFetchToken(address, provider);\n                    if (token.name && token.symbol && token.decimals) {\n                        setTokenToAdd(token as Token);\n                    }\n                } finally {\n                    setLoading(false);\n                }\n            }\n        },\n        300,\n        [provider, props.text]\n    );\n    return (\n        <View>\n            <FlexView style={{ marginBottom: Spacing.small }}>\n                <Input\n                    value={props.text}\n                    onChangeText={props.onChangeText}\n                    placeholder={\"Token name, symbol or address\"}\n                    autoFocus={IS_DESKTOP}\n                    inputStyle={{ marginHorizontal: Spacing.tiny, fontSize: props.text ? 20 : 16 }}\n                    inputContainerStyle={{ borderBottomWidth: 0, marginRight: loading ? 32 : 0 }}\n                    labelStyle={{ height: 0 }}\n                    containerStyle={{\n                        ...border(),\n                        paddingHorizontal: Spacing.tiny,\n                        paddingTop: 12,\n                        paddingBottom: 0\n                    }}\n                />\n                {props.onAddToken && loading && <Loading />}\n            </FlexView>\n            {props.onAddToken && tokenToAdd && (\n                <TokenItem token={tokenToAdd} selected={true} onSelectToken={props.onAddToken} duplicate={duplicate} />\n            )}\n        </View>\n    );\n};\n\nconst Loading = () => <ActivityIndicator size={\"small\"} style={{ position: \"absolute\", right: 16, bottom: 16 }} />;\n\nconst TokenItem = (props: {\n    token: Token;\n    selected: boolean;\n    onSelectToken: (token: Token) => void;\n    duplicate: boolean;\n}) => {\n    const { accent } = useColors();\n    const onPress = useCallback(() => {\n        props.onSelectToken(props.token);\n    }, [props.onSelectToken, props.token]);\n    return (\n        <Selectable\n            selected={false}\n            disabled={true}\n            onPress={onPress}\n            containerStyle={{\n                marginBottom: ITEM_SEPARATOR_HEIGHT\n            }}>\n            <FlexView style={{ alignItems: \"center\" }}>\n                <TokenLogo token={props.token} />\n                <TokenName token={props.token} />\n                <View style={{ flex: 1 }} />\n                <Button\n                    type={\"clear\"}\n                    size={\"small\"}\n                    color={accent}\n                    title={props.duplicate ? \"Already Added\" : \"ADD \" + props.token.symbol}\n                    fontWeight={\"bold\"}\n                    onPress={onPress}\n                    disabled={props.duplicate}\n                    buttonStyle={{ paddingHorizontal: 4, height: 27 }}\n                />\n            </FlexView>\n        </Selectable>\n    );\n};\n\nexport default TokenSearch;\n","import React, { FC, useCallback, useContext, useEffect, useMemo, useState } from \"react\";\nimport { FlatList, View, ViewStyle } from \"react-native\";\n\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport useDelayedEffect from \"../hooks/useDelayedEffect\";\nimport Token from \"../types/Token\";\nimport TokenWithValue from \"../types/TokenWithValue\";\nimport CloseIcon from \"./CloseIcon\";\nimport Expandable from \"./Expandable\";\nimport FlexView from \"./FlexView\";\nimport { ITEM_SEPARATOR_HEIGHT } from \"./ItemSeparator\";\nimport Loading from \"./Loading\";\nimport Selectable from \"./Selectable\";\nimport SelectIcon from \"./SelectIcon\";\nimport Text from \"./Text\";\nimport TokenAmount from \"./TokenAmount\";\nimport TokenLogo from \"./TokenLogo\";\nimport TokenName from \"./TokenName\";\nimport TokenPrice from \"./TokenPrice\";\nimport TokenSearch from \"./TokenSearch\";\nimport TokenSymbol from \"./TokenSymbol\";\nimport TokenValue from \"./TokenValue\";\n\nexport interface TokenSelectProps {\n    title: string;\n    symbol: string;\n    onChangeSymbol: (symbol: string) => void;\n    disabled?: (token: Token) => boolean;\n    hidden?: (token: Token) => boolean;\n    style?: ViewStyle;\n}\n\nconst TokenSelect: FC<TokenSelectProps> = props => {\n    const { tokens, addCustomToken } = useContext(EthersContext);\n    const [search, setSearch] = useState(\"\");\n    const [query, setQuery] = useState(\"\");\n    const token = useMemo(() => tokens.find(t => t.symbol === props.symbol), [tokens, props.symbol]);\n    const onSelectToken = t => props.onChangeSymbol(t.symbol);\n    const onUnselectToken = () => props.onChangeSymbol(\"\");\n    const onAddToken = async (t: Token) => {\n        await addCustomToken(t);\n        setSearch(\"\");\n        setQuery(\"\");\n        props.onChangeSymbol(t.symbol);\n    };\n    const hidden = (t: Token) => {\n        if (query.length > 0) {\n            return !t.symbol.toLowerCase().includes(query) && !t.name.toLowerCase().includes(query);\n        }\n        return props.hidden?.(t) || false;\n    };\n    useEffect(() => setSearch(\"\"), [props.symbol]);\n    useDelayedEffect(() => setQuery(search.trim().toLowerCase()), 300, [search]);\n    return (\n        <View style={props.style}>\n            <Expandable title={props.title} expanded={!props.symbol} onExpand={() => props.onChangeSymbol(\"\")}>\n                <TokenSearch text={search} onChangeText={setSearch} tokens={tokens} onAddToken={onAddToken} />\n                <TokenList disabled={props.disabled} hidden={hidden} onSelectToken={onSelectToken} />\n            </Expandable>\n            {token && <TokenItem token={token} selected={true} onSelectToken={onUnselectToken} selectable={true} />}\n        </View>\n    );\n};\n\nconst TokenList = (props: {\n    onSelectToken: (token: Token) => void;\n    disabled?: (token: Token) => boolean;\n    hidden?: (token: Token) => boolean;\n}) => {\n    const { loadingTokens, tokens } = useContext(EthersContext);\n    const renderItem = useCallback(\n        ({ item }) => {\n            return (\n                <TokenItem\n                    key={item.address}\n                    token={item}\n                    selected={false}\n                    onSelectToken={props.onSelectToken}\n                    disabled={props.disabled?.(item)}\n                />\n            );\n        },\n        [props.onSelectToken, props.disabled]\n    );\n    const data = useMemo(\n        () => tokens.filter(token => (props.hidden ? !props.hidden(token) : true)).sort(compareTokens),\n        [tokens, props.hidden]\n    );\n    return loadingTokens ? (\n        <Loading />\n    ) : data.length === 0 ? (\n        <EmptyList />\n    ) : (\n        <FlatList keyExtractor={item => item.address} data={data} renderItem={renderItem} />\n    );\n};\n\nconst EmptyList = () => {\n    return (\n        <View style={{ margin: Spacing.normal }}>\n            <Text disabled={true} style={{ textAlign: \"center\", width: \"100%\" }}>\n                {\"You don't have any matching tokens.\"}\n            </Text>\n        </View>\n    );\n};\n\n// tslint:disable-next-line:max-func-body-length\nconst TokenItem = (props: {\n    token: TokenWithValue;\n    selected: boolean;\n    onSelectToken: (token: Token) => void;\n    disabled?: boolean;\n    selectable?: boolean;\n}) => {\n    const onPress = useCallback(() => {\n        props.onSelectToken(props.token);\n    }, [props.onSelectToken, props.token]);\n    return (\n        <Selectable\n            selected={props.selected}\n            onPress={onPress}\n            disabled={props.disabled || props.selectable}\n            containerStyle={{\n                marginBottom: ITEM_SEPARATOR_HEIGHT\n            }}>\n            <FlexView style={{ alignItems: \"center\" }}>\n                <TokenLogo token={props.token} disabled={props.disabled} />\n                <View>\n                    {props.token.priceUSD !== null && (\n                        <TokenPrice\n                            token={props.token}\n                            disabled={props.disabled}\n                            style={{ marginLeft: Spacing.small }}\n                        />\n                    )}\n                    <TokenName token={props.token} disabled={props.disabled} />\n                </View>\n                <View style={{ flex: 1, alignItems: \"flex-end\" }}>\n                    {props.token.valueUSD !== null && <TokenValue token={props.token} disabled={props.disabled} />}\n                    <FlexView>\n                        <TokenAmount\n                            token={props.token}\n                            disabled={props.disabled}\n                            style={{ flex: 1, textAlign: \"right\" }}\n                        />\n                        {IS_DESKTOP && <TokenSymbol token={props.token} disabled={props.disabled} />}\n                    </FlexView>\n                </View>\n                {props.selected ? <CloseIcon /> : <SelectIcon />}\n            </FlexView>\n        </Selectable>\n    );\n};\n\nconst compareTokens = (t1: TokenWithValue, t2: TokenWithValue) => {\n    if (t2.balance.isZero() && t1.balance.isZero()) return (t2?.priceUSD || 0) - (t1?.priceUSD || 0);\n    const value2 = t2?.valueUSD || 0;\n    const value1 = t1?.valueUSD || 1;\n    if (value2 === value1) {\n        return (\n            (t2.balance.isZero() ? 0 : 10000000000) -\n            (t1.balance.isZero() ? 0 : 10000000000) +\n            t1.symbol.localeCompare(t2.symbol)\n        );\n    }\n    return value2 - value1;\n};\n\nexport default TokenSelect;\n","import React from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useLinker from \"../hooks/useLinker\";\nimport Notice from \"./Notice\";\n\nconst ExperimentalNotice = (props: { contractURL: string }) => {\n    const onPressContract = useLinker(props.contractURL, \"\", \"_blank\");\n    return (\n        <View style={{ marginVertical: Spacing.tiny }}>\n            <Notice\n                text={\n                    \"This feature is in beta and contracts are unaudited. Read the contract yourself and use it at your own risk.\"\n                }\n                color={\"orange\"}\n                buttonText={\"View Contract\"}\n                onPressButton={onPressContract}\n            />\n        </View>\n    );\n};\n\nexport default ExperimentalNotice;\n","import { useCallback, useContext, useEffect, useState } from \"react\";\n\nimport { Trade } from \"@sushiswap/sdk\";\nimport { Fetcher, Token, WETH } from \"@uniswap/sdk\";\nimport { ethers } from \"ethers\";\nimport useAsyncEffect from \"use-async-effect\";\nimport Fraction from \"../constants/Fraction\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport { formatBalance, isEmptyValue, isETH, isWETH, parseBalance, pow10 } from \"../utils\";\nimport useDelayedEffect from \"./useDelayedEffect\";\nimport useDelayedOnBlockEffect from \"./useDelayedOnBlockEffect\";\nimport useSDK from \"./useSDK\";\nimport useSettlement from \"./useSettlement\";\nimport useSwapRouter from \"./useSwapRouter\";\nimport useTokenPairState, { TokenPairState } from \"./useTokenPairState\";\n\nexport type OrderType = \"market\" | \"limit\";\n\nexport interface SwapState extends TokenPairState {\n    orderType?: OrderType;\n    setOrderType: (orderType?: OrderType) => void;\n    priceInETH?: ethers.BigNumber | null;\n    trade?: Trade;\n    unsupported: boolean;\n    limitOrderUnsupported: boolean;\n    limitOrderPrice: string;\n    setLimitOrderPrice: (price: string) => void;\n    swapFee: string;\n    limitOrderFee: string;\n    limitOrderSwapFee: string;\n    limitOrderReturn: string;\n    onSwap: () => Promise<void>;\n    swapping: boolean;\n    onCreateOrder: () => Promise<void>;\n    creatingOrder: boolean;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst useSwapState: () => SwapState = () => {\n    const state = useTokenPairState();\n    const { chainId, provider, signer, kovanSigner, updateTokens } = useContext(EthersContext);\n    const { getTrade } = useSDK();\n    const { swap, calculateSwapFee } = useSwapRouter();\n    const { calculateLimitOrderFee, calculateLimitOrderReturn } = useSettlement();\n    const { createOrder } = useSettlement();\n    const [loading, setLoading] = useState(true);\n    const [orderType, setOrderType] = useState<OrderType>();\n    const [priceInETH, setPriceInETH] = useState<ethers.BigNumber | null>();\n    const [trade, setTrade] = useState<Trade>();\n    const [unsupported, setUnsupported] = useState(false);\n    const [swapFee, setSwapFee] = useState(\"\");\n    const [limitOrderPrice, setLimitOrderPrice] = useState<string>(\"\");\n    const [limitOrderFee, setLimitOrderFee] = useState(\"\");\n    const [limitOrderSwapFee, setLimitOrderSwapFee] = useState(\"\");\n    const [limitOrderReturn, setLimitOrderReturn] = useState(\"\");\n    const [swapping, setSwapping] = useState(false);\n    const [creatingOrder, setCreatingOrder] = useState(false);\n\n    useEffect(() => {\n        if (!orderType) {\n            state.setFromSymbol(\"\");\n        }\n        setLimitOrderPrice(\"\");\n    }, [orderType]);\n\n    useAsyncEffect(async () => {\n        setPriceInETH(undefined);\n        if (provider && state.fromToken) {\n            if (isWETH(state.fromToken)) {\n                setPriceInETH(ethers.constants.WeiPerEther);\n            } else {\n                try {\n                    const fromToken = new Token(chainId, state.fromToken.address, state.fromToken.decimals);\n                    const toToken = WETH[chainId];\n                    const pair = await Fetcher.fetchPairData(fromToken, toToken, provider);\n                    setPriceInETH(parseBalance(pair.priceOf(toToken).toFixed(), fromToken.decimals));\n                } catch (e) {\n                    setPriceInETH(null);\n                }\n            }\n        }\n    }, [chainId, provider, state.fromToken]);\n\n    useDelayedEffect(\n        () => {\n            if (isEmptyValue(state.fromAmount)) {\n                setLimitOrderPrice(\"\");\n                setTrade(undefined);\n            }\n        },\n        300,\n        [state.fromAmount]\n    );\n\n    useDelayedOnBlockEffect(\n        async block => {\n            if (!block) {\n                setLoading(true);\n            }\n            if (state.fromToken && state.toToken && state.fromAmount && provider) {\n                const amount = parseBalance(state.fromAmount, state.fromToken.decimals);\n                if (!amount.isZero()) {\n                    setUnsupported(false);\n                    try {\n                        setTrade(await getTrade(state.fromToken, state.toToken, amount, provider));\n                    } catch (e) {\n                        setUnsupported(true);\n                    } finally {\n                        setLoading(false);\n                    }\n                }\n            }\n        },\n        () => \"getTrade(\" + state.fromSymbol + \",\" + state.toSymbol + \",\" + state.fromAmount + \")\",\n        [state.fromSymbol, state.toSymbol, state.fromAmount]\n    );\n\n    useAsyncEffect(() => {\n        if (trade && !isEmptyValue(state.fromAmount)) {\n            const fromAmount = parseBalance(state.fromAmount, state.fromToken!.decimals);\n            setSwapFee(formatBalance(calculateSwapFee(fromAmount), state.fromToken!.decimals, 8));\n            if (orderType === \"limit\") {\n                setLimitOrderFee(formatBalance(calculateLimitOrderFee(fromAmount), state.fromToken!.decimals, 8));\n                setLimitOrderSwapFee(\n                    formatBalance(\n                        calculateSwapFee(fromAmount.sub(calculateLimitOrderFee(fromAmount))),\n                        state.fromToken!.decimals,\n                        8\n                    )\n                );\n            }\n        }\n    }, [orderType, trade, state.fromAmount]);\n\n    useAsyncEffect(() => {\n        if (state.fromToken && state.toToken && !isEmptyValue(state.fromAmount) && !isEmptyValue(limitOrderPrice)) {\n            setLimitOrderReturn(\n                formatBalance(\n                    calculateLimitOrderReturn(\n                        state.fromToken,\n                        state.toToken,\n                        parseBalance(state.fromAmount, state.fromToken.decimals),\n                        limitOrderPrice\n                    ),\n                    state.toToken.decimals\n                )\n            );\n        }\n    }, [state.fromToken, state.toToken, state.fromAmount, limitOrderPrice]);\n\n    const onSwap = useCallback(async () => {\n        if (state.fromToken && state.toToken && state.fromAmount && signer && trade) {\n            setSwapping(true);\n            try {\n                const result = await swap(trade, signer);\n                if (result) {\n                    await result.tx.wait();\n                    await updateTokens();\n                    setTrade(undefined);\n                    setOrderType(undefined);\n                }\n            } finally {\n                setSwapping(false);\n            }\n        }\n    }, [state.fromToken, state.toToken, state.fromAmount, signer, trade]);\n\n    const onCreateOrder = useCallback(async () => {\n        if (\n            state.fromToken &&\n            state.toToken &&\n            state.fromAmount &&\n            !isEmptyValue(limitOrderPrice) &&\n            signer &&\n            kovanSigner\n        ) {\n            setCreatingOrder(true);\n            try {\n                const amountIn = parseBalance(state.fromAmount, state.fromToken.decimals);\n                const tx = await createOrder(\n                    state.fromToken,\n                    state.toToken,\n                    amountIn,\n                    Fraction.parse(limitOrderPrice)\n                        .apply(amountIn)\n                        .mul(pow10(state.toToken.decimals))\n                        .div(pow10(state.fromToken.decimals)),\n                    signer,\n                    kovanSigner\n                );\n                await tx.wait();\n                setTrade(undefined);\n                setOrderType(undefined);\n            } finally {\n                setCreatingOrder(false);\n            }\n        }\n    }, [state.fromToken, state.toToken, state.fromAmount, signer, kovanSigner, limitOrderPrice]);\n\n    return {\n        ...state,\n        loading: loading || state.loading,\n        orderType,\n        setOrderType,\n        priceInETH,\n        trade,\n        unsupported,\n        swapFee,\n        limitOrderPrice,\n        setLimitOrderPrice,\n        limitOrderFee,\n        limitOrderSwapFee,\n        limitOrderReturn,\n        onSwap,\n        swapping,\n        limitOrderUnsupported: orderType === \"limit\" && (isETH(state.fromToken) || isETH(state.toToken)),\n        onCreateOrder,\n        creatingOrder\n    };\n};\n\nexport default useSwapState;\n","import React, { useCallback, useContext, useState } from \"react\";\nimport { Platform, View } from \"react-native\";\n\nimport { ethers } from \"ethers\";\nimport useAsyncEffect from \"use-async-effect\";\nimport AmountMeta from \"../components/AmountMeta\";\nimport ApproveButton from \"../components/ApproveButton\";\nimport BackgroundImage from \"../components/BackgroundImage\";\nimport Border from \"../components/Border\";\nimport Button from \"../components/Button\";\nimport Container from \"../components/Container\";\nimport Content from \"../components/Content\";\nimport ErrorMessage from \"../components/ErrorMessage\";\nimport ExperimentalNotice from \"../components/ExperimentalNotice\";\nimport FetchingButton from \"../components/FetchingButton\";\nimport Heading from \"../components/Heading\";\nimport InfoBox from \"../components/InfoBox\";\nimport InsufficientBalanceButton from \"../components/InsufficientBalanceButton\";\nimport Meta from \"../components/Meta\";\nimport Notice from \"../components/Notice\";\nimport Select, { Option } from \"../components/Select\";\nimport Text from \"../components/Text\";\nimport Title from \"../components/Title\";\nimport TokenInput from \"../components/TokenInput\";\nimport TokenSelect from \"../components/TokenSelect\";\nimport UnsupportedButton from \"../components/UnsupportedButton\";\nimport WebFooter from \"../components/web/WebFooter\";\nimport { SwapSubMenu } from \"../components/web/WebSubMenu\";\nimport { ROUTER, SETTLEMENT } from \"../constants/contracts\";\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport Fraction from \"../constants/Fraction\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport useColors from \"../hooks/useColors\";\nimport useDelayedEffect from \"../hooks/useDelayedEffect\";\nimport useLinker from \"../hooks/useLinker\";\nimport useSwapState, { OrderType, SwapState } from \"../hooks/useSwapState\";\nimport MetamaskError from \"../types/MetamaskError\";\nimport Token from \"../types/Token\";\nimport { formatBalance, isEmptyValue, isETH, isETHWETHPair, isWETH, parseBalance } from \"../utils\";\nimport Screen from \"./Screen\";\n\nconst SwapScreen = () => {\n    return (\n        <Screen>\n            <Container>\n                <BackgroundImage />\n                <Content>\n                    <Title text={\"New Order\"} />\n                    <Text light={true}>Swap now or place a limit order with a desired price.</Text>\n                    <Swap />\n                </Content>\n                {Platform.OS === \"web\" && <WebFooter />}\n            </Container>\n            <SwapSubMenu />\n        </Screen>\n    );\n};\n\nconst Swap = () => {\n    const state = useSwapState();\n    return (\n        <View style={{ marginTop: Spacing.large }}>\n            <OrderTypeSelect state={state} />\n            <Border />\n            <FromTokenSelect state={state} />\n            <Border />\n            <ToTokenSelect state={state} />\n            <Border />\n            <AmountInput state={state} />\n            {state.orderType === \"limit\" && (\n                <View>\n                    <AmountNotice state={state} />\n                    <Border />\n                    <PriceInput state={state} />\n                </View>\n            )}\n            {!state.loading && !state.trade && <NoPairNotice state={state} />}\n            <TradeInfo state={state} />\n        </View>\n    );\n};\n\nconst OrderTypeSelect = ({ state }: { state: SwapState }) => {\n    const options: Option[] = [\n        { key: \"market\", title: \"Market Order\", description: \"Settle an order immediately\" },\n        { key: \"limit\", title: \"Limit Order\", description: \"Place an order with a desired price to be settled\" }\n    ];\n    return (\n        <View>\n            <Select\n                title={\"Order Type\"}\n                options={options}\n                option={options.find(option => option.key === state.orderType)}\n                setOption={option => state.setOrderType(option?.key as OrderType | undefined)}\n            />\n            {state.orderType === \"limit\" && (\n                <ExperimentalNotice\n                    contractURL={\n                        \"https://github.com/sushiswap/sushiswap-settlement/blob/master/contracts/Settlement.sol\"\n                    }\n                />\n            )}\n        </View>\n    );\n};\n\nconst FromTokenSelect = ({ state }: { state: SwapState }) => {\n    const { tokens, customTokens } = useContext(EthersContext);\n    if (!state.orderType) {\n        return <Heading text={\"Token To Sell\"} disabled={true} />;\n    }\n    const ETH = tokens ? tokens.find(token => isETH(token)) : null;\n    return (\n        <View>\n            <TokenSelect\n                title={\"Token To Sell\"}\n                symbol={state.fromSymbol}\n                onChangeSymbol={state.setFromSymbol}\n                hidden={token =>\n                    (!customTokens.find(t => t.address === token.address) && token.balance.isZero()) ||\n                    (state.orderType === \"limit\" && isETH(token))\n                }\n            />\n            {state.orderType === \"limit\" && !state.fromSymbol && ETH && !ETH.balance.isZero() && (\n                <LimitOrderUnsupportedNotice />\n            )}\n        </View>\n    );\n};\n\nconst ToTokenSelect = ({ state }: { state: SwapState }) => {\n    if (!state.orderType || !state.fromSymbol) {\n        return <Heading text={\"Token To Buy\"} disabled={true} />;\n    }\n    const limit = state.orderType === \"limit\";\n    const onChangeSymbol = (symbol: string) => {\n        state.setToSymbol(limit && symbol === \"ETH\" ? \"WETH\" : symbol);\n    };\n    return (\n        <View>\n            <TokenSelect\n                title={\"Token To Buy\"}\n                symbol={state.toSymbol}\n                onChangeSymbol={onChangeSymbol}\n                hidden={token => token.symbol === state.fromSymbol || (limit && isETH(token))}\n            />\n            {state.orderType === \"limit\" && !state.toSymbol && <LimitOrderUnsupportedNotice />}\n        </View>\n    );\n};\n\nconst AmountInput = ({ state }: { state: SwapState }) => {\n    if (!state.fromSymbol || !state.toSymbol) {\n        return <Heading text={\"Amount\"} disabled={true} />;\n    }\n    return (\n        <View>\n            <Heading text={state.fromSymbol + \" Amount\"} />\n            <TokenInput\n                token={state.fromToken}\n                amount={state.fromAmount}\n                onAmountChanged={state.setFromAmount}\n                autoFocus={IS_DESKTOP}\n            />\n        </View>\n    );\n};\n\nconst AmountNotice = ({ state }: { state: SwapState }) => {\n    if (\n        state.priceInETH === undefined ||\n        isEmptyValue(state.fromAmount) ||\n        !state.fromToken ||\n        (state.priceInETH && parseBalance(state.fromAmount, state.fromToken.decimals).lte(state.priceInETH.mul(10)))\n    ) {\n        return <View />;\n    }\n    return (\n        <View style={{ marginTop: Spacing.small }}>\n            <Notice\n                text={\n                    state.priceInETH === null\n                        ? \"This token is not supported in beta.\"\n                        : \"Maximum allowed amount in beta is \" +\n                          formatBalance(state.priceInETH.mul(10), state.fromToken!.decimals) +\n                          \" \" +\n                          state.fromSymbol +\n                          \" (≈ 10 ETH).\"\n                }\n                color={\"red\"}\n            />\n        </View>\n    );\n};\n\nconst PriceInput = ({ state }: { state: SwapState }) => {\n    if (!state.fromSymbol || !state.toSymbol) {\n        return <Heading text={\"Minimum Price\"} disabled={true} />;\n    }\n    const marketPrice =\n        state.toToken && state.trade\n            ? parseBalance(state.trade.executionPrice.invert().toFixed(state.toToken.decimals), state.toToken.decimals)\n            : ethers.constants.Zero;\n    return (\n        <TokenInput\n            title={\"Minimum Price (\" + state.fromSymbol + \"/\" + state.toSymbol + \")\"}\n            token={\n                {\n                    ...state.toToken,\n                    balance: marketPrice\n                } as Token\n            }\n            amount={state.limitOrderPrice}\n            onAmountChanged={state.setLimitOrderPrice}\n            maxButtonText={\"MARKET\"}\n        />\n    );\n};\n\nconst LimitOrderUnsupportedNotice = () => {\n    const { placeholder } = useColors();\n    return (\n        <Notice\n            text={\"⚠️ ETH not supported for limit orders. Use WETH instead.\"}\n            color={placeholder}\n            clear={true}\n            style={{ marginVertical: Spacing.small, marginHorizontal: Spacing.tiny }}\n        />\n    );\n};\n\nconst NoPairNotice = ({ state }: { state: SwapState }) => {\n    return (\n        <Notice\n            text={state.fromSymbol + \"-\" + state.toSymbol + \" pair hasn't been created yet.\"}\n            color={\"red\"}\n            style={{ marginTop: Spacing.normal }}\n        />\n    );\n};\n\nconst TradeInfo = ({ state }: { state: SwapState }) => {\n    if (isETHWETHPair(state.fromToken, state.toToken)) {\n        return <WrapInfo state={state} />;\n    }\n    const disabled =\n        state.fromSymbol === \"\" ||\n        state.toSymbol === \"\" ||\n        isEmptyValue(state.fromAmount) ||\n        (state.orderType === \"limit\" && isETH(state.fromToken)) ||\n        (!state.loading && !state.trade);\n    return (\n        <InfoBox>\n            {state.orderType === \"limit\" ? (\n                <LimitOrderInfo state={state} />\n            ) : (\n                <SwapInfo state={state} disabled={disabled} />\n            )}\n        </InfoBox>\n    );\n};\n\nconst WrapInfo = ({ state }: { state: SwapState }) => {\n    const disabled = isEmptyValue(state.fromAmount);\n    return (\n        <InfoBox>\n            <Text style={{ fontSize: 28, marginBottom: Spacing.normal }} disabled={disabled}>\n                {disabled ? \"N/A\" : state.fromAmount + \" \" + state.toSymbol}\n            </Text>\n            <SwapControls state={state} />\n        </InfoBox>\n    );\n};\n\nconst SwapInfo = ({ state, disabled }: { state: SwapState; disabled: boolean }) => {\n    const amount = state.trade?.outputAmount?.toFixed();\n    const price = state.trade?.executionPrice?.toFixed();\n    const impact = state.trade?.priceImpact?.toFixed(2);\n    return (\n        <View>\n            <AmountMeta amount={amount} suffix={state.toSymbol} disabled={disabled} />\n            <Meta\n                label={\"Price\"}\n                text={price}\n                suffix={state.toSymbol + \"  = 1 \" + state.fromSymbol}\n                disabled={disabled}\n            />\n            <Meta label={\"Price Impact\"} text={impact} suffix={\"%\"} disabled={disabled} />\n            <Meta label={\"Fee (0.30%)\"} text={state.swapFee} suffix={state.fromSymbol} disabled={disabled} />\n            <SwapControls state={state} />\n        </View>\n    );\n};\n\n// tslint:disable-next-line:max-func-body-length\nconst SwapControls = ({ state }: { state: SwapState }) => {\n    const [error, setError] = useState<MetamaskError>({});\n    useAsyncEffect(() => setError({}), [state.fromSymbol, state.toSymbol, state.fromAmount]);\n    const approveRequired = state.fromSymbol !== \"ETH\" && !state.fromTokenAllowed;\n    return (\n        <View style={{ marginTop: Spacing.normal }}>\n            {!state.fromToken ||\n            !state.toToken ||\n            isEmptyValue(state.fromAmount) ||\n            (!state.loading && !state.trade) ? (\n                <SwapButton state={state} onError={setError} disabled={true} />\n            ) : parseBalance(state.fromAmount, state.fromToken.decimals).gt(state.fromToken.balance) ? (\n                <InsufficientBalanceButton symbol={state.fromSymbol} />\n            ) : isWETH(state.fromToken) && isETH(state.toToken) ? (\n                <UnwrapButton state={state} onError={setError} />\n            ) : isETH(state.fromToken) && isWETH(state.toToken) ? (\n                <WrapButton state={state} onError={setError} />\n            ) : state.unsupported ? (\n                <UnsupportedButton state={state} />\n            ) : state.loading || !state.trade ? (\n                <FetchingButton />\n            ) : (\n                <>\n                    <ApproveButton\n                        token={state.fromToken}\n                        spender={ROUTER}\n                        onSuccess={() => state.setFromTokenAllowed(true)}\n                        onError={setError}\n                        hidden={!approveRequired}\n                    />\n                    <SwapButton state={state} onError={setError} disabled={approveRequired} />\n                </>\n            )}\n            {error.message && error.code !== 4001 && <ErrorMessage error={error} />}\n        </View>\n    );\n};\n\nconst SwapButton = ({ state, onError, disabled }: { state: SwapState; onError: (e) => void; disabled: boolean }) => {\n    const onPress = useCallback(() => {\n        onError({});\n        state.onSwap().catch(onError);\n    }, [state.onSwap, onError]);\n    return (\n        <Button\n            title={state.fromSymbol && state.toSymbol ? \"Swap \" + state.fromSymbol + \"-\" + state.toSymbol : \"Swap\"}\n            disabled={disabled}\n            loading={state.swapping}\n            onPress={onPress}\n        />\n    );\n};\n\nconst WrapButton = ({ state, onError }: { state: SwapState; onError: (e) => void }) => {\n    const onPress = useCallback(async () => {\n        onError({});\n        state.onWrap().catch(onError);\n    }, []);\n    return <Button title={\"Wrap\"} loading={state.wrapping} onPress={onPress} />;\n};\n\nconst UnwrapButton = ({ state, onError }: { state: SwapState; onError: (e) => void }) => {\n    const onPress = useCallback(async () => {\n        onError({});\n        state.onUnwrap().catch(onError);\n    }, []);\n    return <Button title={\"Unwrap\"} loading={state.unwrapping} onPress={onPress} />;\n};\n\nconst LimitOrderInfo = ({ state }: { state: SwapState }) => {\n    const d = !state.trade?.executionPrice;\n    return (\n        <View>\n            <Text\n                disabled={isEmptyValue(state.limitOrderReturn)}\n                style={{ fontSize: 28, marginBottom: Spacing.normal }}>\n                {isEmptyValue(state.limitOrderReturn) ? \"N/A\" : state.limitOrderReturn + \" \" + state.toSymbol}\n            </Text>\n            <Meta\n                label={\"Market Price\"}\n                text={state.trade?.executionPrice?.invert().toFixed(8) || undefined}\n                suffix={state.fromSymbol + \" / \" + state.toSymbol}\n                disabled={d}\n            />\n            <Meta label={\"Relayer Fee (0.20%)\"} text={state.limitOrderFee} suffix={state.fromSymbol} disabled={d} />\n            <Meta label={\"Swap Fee (0.30%)\"} text={state.limitOrderSwapFee} suffix={state.fromSymbol} disabled={d} />\n            <Meta label={\"Expiration\"} text={\"24 Hours From Now\"} disabled={d} />\n            <LimitOrderControls state={state} />\n        </View>\n    );\n};\n\n// tslint:disable-next-line:max-func-body-length\nconst LimitOrderControls = ({ state }: { state: SwapState }) => {\n    const { getTokenAllowance } = useContext(EthersContext);\n    const [error, setError] = useState<MetamaskError>({});\n    const [allowed, setAllowed] = useState<boolean>();\n    useAsyncEffect(() => setError({}), [state.fromSymbol, state.toSymbol, state.fromAmount]);\n    useDelayedEffect(\n        async () => {\n            if (state.fromToken && !isEmptyValue(state.fromAmount)) {\n                const fromAmount = parseBalance(state.fromAmount, state.fromToken.decimals);\n                const allowance = await getTokenAllowance(state.fromToken.address, SETTLEMENT);\n                setAllowed(ethers.BigNumber.from(allowance).gte(fromAmount));\n            }\n        },\n        500,\n        [state.fromToken, state.fromAmount]\n    );\n    const disabled =\n        state.orderType === \"market\" ||\n        state.toSymbol === \"\" ||\n        !state.fromToken ||\n        !state.toToken ||\n        isEmptyValue(state.fromAmount) ||\n        !state.priceInETH ||\n        parseBalance(state.fromAmount, state.fromToken!.decimals).gt(state.priceInETH.mul(10)) ||\n        !state.trade ||\n        isEmptyValue(state.limitOrderPrice);\n    return (\n        <View style={{ marginTop: Spacing.normal }}>\n            {disabled ? (\n                <PlaceOrderButton state={state} onError={setError} disabled={true} />\n            ) : parseBalance(state.fromAmount, state.fromToken!.decimals).gt(state.fromToken!.balance) ? (\n                <InsufficientBalanceButton symbol={state.fromSymbol} />\n            ) : !Fraction.parse(state.limitOrderPrice).gt(\n                  Fraction.parse(state.trade!.executionPrice.toFixed(state.toToken!.decimals))\n              ) ? (\n                <PriceTooLowButton />\n            ) : state.unsupported ? (\n                <UnsupportedButton state={state} />\n            ) : state.loading || !state.trade ? (\n                <FetchingButton />\n            ) : (\n                <>\n                    <ApproveButton\n                        token={state.fromToken!}\n                        spender={SETTLEMENT}\n                        onSuccess={() => setAllowed(true)}\n                        onError={setError}\n                        hidden={allowed}\n                    />\n                    <PlaceOrderButton state={state} onError={setError} disabled={!allowed} />\n                </>\n            )}\n            {error.message && error.code !== 4001 && <ErrorMessage error={error} />}\n        </View>\n    );\n};\n\nconst PriceTooLowButton = () => {\n    return <Button title={\"Set Price Greater Than Market\"} disabled={true} />;\n};\n\nconst PlaceOrderButton = ({\n    state,\n    onError,\n    disabled\n}: {\n    state: SwapState;\n    onError: (e) => void;\n    disabled: boolean;\n}) => {\n    const goToLimitOrders = useLinker(\"/swap/my-orders\", \"LimitOrders\");\n    const onPress = useCallback(async () => {\n        onError({});\n        try {\n            await state.onCreateOrder();\n            goToLimitOrders();\n        } catch (e) {\n            onError(e);\n        }\n    }, [state.onCreateOrder, goToLimitOrders, onError]);\n    return <Button title={\"Place Limit Order\"} disabled={disabled} loading={state.creatingOrder} onPress={onPress} />;\n};\n\nexport default SwapScreen;\n"],"sourceRoot":""}