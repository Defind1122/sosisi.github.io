{"version":3,"sources":["src/components/Meta.tsx","src/hooks/useLPTokensState.tsx","src/components/LPTokenSelect.tsx","src/hooks/useRemoveLiquidityState.tsx","src/screens/RemoveLiquidityScreen.tsx"],"names":["Meta","props","useColors","textMedium","textLight","placeholder","onPress","useLinker","url","text","disabled","suffix","style","justifyContent","marginTop","fontWeight","fontSize","color","label","undefined","textDecorationLine","useLPTokensState","mode","state","useTokenPairState","useContext","EthersContext","provider","signer","address","tokens","useState","lastTimeRefreshed","setLastTimeRefreshed","loading","setLoading","lpTokens","setLPTokens","selectedLPToken","setSelectedLPToken","selectedLPTokenAllowed","setSelectedLPTokenAllowed","pair","setPair","amount","setAmount","getPair","useSDK","updateLPTokens","a","async","fetchPools","fetchMyLPTokens","fetchMyUniswapLPTokens","data","useEffect","useAsyncEffect","tokenA","tokenB","useDelayedOnBlockEffect","block","length","fromToken","toToken","updateLastTimeRefreshed","Date","now","LPTokenList","emptyText","filter","Item","renderItem","useCallback","item","key","token","selected","onSelectToken","sort","t1","t2","totalDeposited","ethers","constants","Zero","sub","div","pow10","toNumber","amountDeposited","gt","balance","Loading","FlatList","keyExtractor","JSON","stringify","EmptyList","View","margin","Spacing","normal","Text","textAlign","width","LPTokenItem","formatBalance","decimals","Selectable","marginBottom","ITEM_SEPARATOR_HEIGHT","FlexView","alignItems","TokenLogo","small","replaceWETH","marginLeft","TokenSymbol","flex","tiny","caption","light","LPTokenSelect","Expandable","title","expanded","onExpand","useRemoveLiquidityState","getTokenAllowance","updateTokens","removeLiquidity","removeLiquidityETH","removing","setRemoving","setFromSymbol","symbol","setToSymbol","minAllowance","BigNumber","from","pow","ROUTER","allowance","gte","totalSupply","liquidityToken","fromReserve","parseCurrencyAmount","reserveOf","convertToken","toReserve","setFromAmount","parseBalance","mul","toString","setToAmount","onRemove","fromAmount","toAmount","liquidity","fromSymbol","toSymbol","amountToRemove","amountToRemoveETH","tx","wait","RemoveLiquidity","large","Border","AmountInput","TokenInput","onAmountChanged","Heading","AmountInfo","InfoBox","Controls","error","setError","approveRequired","isEmptyValue","onError","InsufficientBalanceButton","FetchingButton","ApproveButton","spender","onSuccess","hidden","message","code","ErrorMessage","RemoveButton","catch","Button","RemoveLiquidityScreen","Screen","Container","Content","Title","Platform","OS","WebFooter"],"mappings":"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","file":"static/js/12.9f9577a8.chunk.js","sourcesContent":["import React, { FC } from \"react\";\n\nimport useColors from \"../hooks/useColors\";\nimport useLinker from \"../hooks/useLinker\";\nimport FlexView from \"./FlexView\";\nimport Text from \"./Text\";\n\nexport interface MetaProps {\n    label: string;\n    text?: string;\n    suffix?: string;\n    url?: string;\n    disabled?: boolean;\n}\n\nconst Meta: FC<MetaProps> = props => {\n    const { textMedium, textLight, placeholder } = useColors();\n    const onPress = useLinker(props.url || \"\", \"\", \"_blank\");\n    const text = props.disabled\n        ? \"N/A\"\n        : props.text\n        ? props.text + (props.suffix ? \" \" + props.suffix : \"\")\n        : \"Fetching…\";\n    return (\n        <FlexView style={{ justifyContent: \"space-between\", marginTop: 4 }}>\n            <Text fontWeight={\"bold\"} style={{ fontSize: 13, color: props.disabled ? placeholder : textMedium }}>\n                {props.label}\n            </Text>\n            <Text\n                onPress={props.url ? onPress : undefined}\n                style={{\n                    fontSize: 13,\n                    color: props.disabled ? placeholder : props.text ? textMedium : textLight,\n                    textDecorationLine: props.url ? \"underline\" : \"none\"\n                }}>\n                {text}\n            </Text>\n        </FlexView>\n    );\n};\n\nexport default Meta;\n","import { useContext, useEffect, useState } from \"react\";\n\nimport { Pair } from \"@sushiswap/sdk\";\nimport useAsyncEffect from \"use-async-effect\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport LPToken from \"../types/LPToken\";\nimport { fetchMyLPTokens, fetchMyUniswapLPTokens, fetchPools } from \"../utils/fetch-utils\";\nimport useDelayedOnBlockEffect from \"./useDelayedOnBlockEffect\";\nimport useSDK from \"./useSDK\";\nimport useTokenPairState, { TokenPairState } from \"./useTokenPairState\";\n\nexport interface LPTokensState extends TokenPairState {\n    updateLPTokens: () => Promise<void>;\n    lastTimeRefreshed: number;\n    updateLastTimeRefreshed: () => void;\n    lpTokens: LPToken[];\n    selectedLPToken?: LPToken;\n    setSelectedLPToken: (token?: LPToken) => void;\n    selectedLPTokenAllowed: boolean;\n    setSelectedLPTokenAllowed: (allowed: boolean) => void;\n    pair?: Pair;\n    amount: string;\n    setAmount: (amount: string) => void;\n}\n\ntype Mode = \"pools\" | \"my-lp-tokens\" | \"my-uniswap-lp-tokens\";\n\n// tslint:disable-next-line:max-func-body-length\nconst useLPTokensState: (mode: Mode) => LPTokensState = mode => {\n    const state = useTokenPairState();\n    const { provider, signer, address, tokens } = useContext(EthersContext);\n    const [lastTimeRefreshed, setLastTimeRefreshed] = useState(0);\n    const [loading, setLoading] = useState(true);\n    const [lpTokens, setLPTokens] = useState<LPToken[]>([]);\n    const [selectedLPToken, setSelectedLPToken] = useState<LPToken>();\n    const [selectedLPTokenAllowed, setSelectedLPTokenAllowed] = useState(false);\n    const [pair, setPair] = useState<Pair>();\n    const [amount, setAmount] = useState(\"\");\n    const { getPair } = useSDK();\n\n    const updateLPTokens = async () => {\n        if (provider && signer) {\n            try {\n                const data = await (mode === \"pools\"\n                    ? fetchPools(provider, signer)\n                    : mode === \"my-lp-tokens\"\n                    ? fetchMyLPTokens(tokens, provider, signer)\n                    : fetchMyUniswapLPTokens(tokens, provider, signer));\n                if (data) {\n                    setLPTokens(data);\n                }\n            } finally {\n                setLoading(false);\n            }\n        }\n    };\n\n    useEffect(() => {\n        if (!selectedLPToken) {\n            setAmount(\"\");\n        }\n    }, [selectedLPToken]);\n\n    useAsyncEffect(async () => {\n        setLoading(true);\n        setPair(undefined);\n        if (selectedLPToken && provider) {\n            try {\n                setPair(await getPair(selectedLPToken.tokenA, selectedLPToken.tokenB, provider));\n            } catch (e) {\n            } finally {\n                setLoading(false);\n            }\n        } else {\n            setLoading(false);\n        }\n    }, [selectedLPToken, provider]);\n\n    useDelayedOnBlockEffect(\n        async block => {\n            if (address && (mode === \"pools\" || tokens.length > 0)) {\n                if (!block) {\n                    setLoading(true);\n                }\n                await updateLPTokens();\n            }\n        },\n        () => \"updateLPTokens()\",\n        [tokens.length, address, lastTimeRefreshed],\n        0\n    );\n\n    return {\n        ...state,\n        fromToken: state.fromToken || selectedLPToken?.tokenA,\n        toToken: state.toToken || selectedLPToken?.tokenB,\n        updateLPTokens,\n        loading: state.loading || loading,\n        lastTimeRefreshed,\n        updateLastTimeRefreshed: () => {\n            setLastTimeRefreshed(Date.now());\n        },\n        lpTokens,\n        selectedLPToken,\n        setSelectedLPToken,\n        selectedLPTokenAllowed,\n        setSelectedLPTokenAllowed,\n        pair,\n        amount,\n        setAmount\n    };\n};\n\nexport default useLPTokensState;\n","import React, { FC, useCallback } from \"react\";\nimport { FlatList, View, ViewStyle } from \"react-native\";\n\nimport { ethers } from \"ethers\";\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport { LPTokensState } from \"../hooks/useLPTokensState\";\nimport LPToken from \"../types/LPToken\";\nimport { formatBalance, pow10 } from \"../utils\";\nimport CheckBox from \"./CheckBox\";\nimport Expandable from \"./Expandable\";\nimport FlexView from \"./FlexView\";\nimport { ITEM_SEPARATOR_HEIGHT } from \"./ItemSeparator\";\nimport Loading from \"./Loading\";\nimport Selectable from \"./Selectable\";\nimport Text from \"./Text\";\nimport TokenLogo from \"./TokenLogo\";\nimport TokenSymbol from \"./TokenSymbol\";\n\nexport type LPTokenSelectFilter = \"balance\" | \"amountDeposited\" | \"\";\n\nexport interface LPTokenSelectProps {\n    state: LPTokensState;\n    title: string;\n    emptyText: string;\n    showFilter?: boolean;\n    filter?: LPTokenSelectFilter;\n    onFilterChanged?: (filter: LPTokenSelectFilter) => void;\n    Item: FC<LPTokenItemProps>;\n    style?: ViewStyle;\n}\n\nexport interface LPTokenItemProps {\n    token: LPToken;\n    selected: boolean;\n    filter?: LPTokenSelectFilter;\n    onSelectToken: (token: LPToken) => void;\n}\n\nconst LPTokenSelect: FC<LPTokenSelectProps> = props => {\n    const onUnselectToken = () => props.state.setSelectedLPToken();\n    return (\n        <View style={props.style}>\n            <Expandable\n                title={props.title}\n                expanded={!props.state.selectedLPToken}\n                onExpand={() => props.state.setSelectedLPToken()}>\n                <LPTokenList state={props.state} filter={props.filter} emptyText={props.emptyText} Item={props.Item} />\n            </Expandable>\n            {props.state.selectedLPToken && (\n                <LPTokenItem token={props.state.selectedLPToken} selected={true} onSelectToken={onUnselectToken} />\n            )}\n        </View>\n    );\n};\n\nconst Filter = ({ filter, onFilterChanged }) => {\n    const handler = (f: string) => () => onFilterChanged(f);\n    return (\n        <FlexView style={{ width: \"100%\", justifyContent: \"flex-end\" }}>\n            <CheckBox checked={filter === \"balance\"} onPress={handler(\"balance\")} title={\"with balance\"} />\n            <CheckBox\n                checked={filter === \"amountDeposited\"}\n                onPress={handler(\"amountDeposited\")}\n                title={\"with deposit\"}\n            />\n            <CheckBox checked={!filter} onPress={handler(\"\")} title={\"all\"} />\n        </FlexView>\n    );\n};\n\n// tslint:disable-next-line:max-func-body-length\nconst LPTokenList = ({\n    state,\n    emptyText,\n    filter,\n    Item\n}: {\n    state: LPTokensState;\n    emptyText: string;\n    filter?: LPTokenSelectFilter;\n    Item: FC<LPTokenItemProps>;\n}) => {\n    const renderItem = useCallback(\n        ({ item }) => {\n            return (\n                <Item\n                    key={item.address}\n                    token={item}\n                    selected={false}\n                    filter={filter}\n                    onSelectToken={state.setSelectedLPToken}\n                />\n            );\n        },\n        [filter, state.setSelectedLPToken]\n    );\n    let data = state.lpTokens.sort((t1, t2) => {\n        return (t2.totalDeposited || ethers.constants.Zero)\n            .sub(t1.totalDeposited || ethers.constants.Zero)\n            .div(pow10(14))\n            .toNumber();\n    });\n    if (filter === \"amountDeposited\") {\n        data = data.filter(token => token.amountDeposited?.gt(0));\n    } else if (filter === \"balance\") {\n        data = data.filter(token => token.balance.gt(0));\n    }\n    return state.loading ? (\n        <Loading />\n    ) : data.length === 0 ? (\n        <EmptyList text={emptyText} />\n    ) : (\n        <FlatList keyExtractor={item => JSON.stringify(item)} data={data} renderItem={renderItem} />\n    );\n};\n\nconst EmptyList = ({ text }: { text: string }) => {\n    return (\n        <View style={{ margin: Spacing.normal }}>\n            <Text disabled={true} style={{ textAlign: \"center\", width: \"100%\" }}>\n                {text}\n            </Text>\n        </View>\n    );\n};\n\nexport const LPTokenItem: FC<LPTokenItemProps> = props => {\n    const { textMedium, textLight } = useColors();\n    const balance = formatBalance(props.token.balance, props.token.decimals, 8);\n    const onPress = useCallback(() => {\n        props.onSelectToken(props.token);\n    }, [props.onSelectToken, props.token]);\n    return (\n        <Selectable selected={props.selected} onPress={onPress} style={{ marginBottom: ITEM_SEPARATOR_HEIGHT }}>\n            <FlexView style={{ alignItems: \"center\" }}>\n                <TokenLogo token={props.token.tokenA} small={true} replaceWETH={true} />\n                <TokenLogo token={props.token.tokenB} small={true} replaceWETH={true} style={{ marginLeft: 4 }} />\n                <TokenSymbol token={props.token} />\n                <View style={{ flex: 1, marginLeft: Spacing.tiny }}>\n                    {/*<Text note={true} style={{ textAlign: \"right\", color: textLight }}>*/}\n                    {/*    My Balance*/}\n                    {/*</Text>*/}\n                    <Text caption={true} light={true} style={{ textAlign: \"right\", color: textMedium }}>\n                        {balance}\n                    </Text>\n                </View>\n            </FlexView>\n        </Selectable>\n    );\n};\n\nexport default LPTokenSelect;\n","import { useCallback, useContext, useState } from \"react\";\n\nimport { ethers } from \"ethers\";\nimport useAsyncEffect from \"use-async-effect\";\nimport { ROUTER } from \"../constants/contracts\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport { convertToken, formatBalance, parseBalance, parseCurrencyAmount } from \"../utils\";\nimport useLPTokensState, { LPTokensState } from \"./useLPTokensState\";\nimport useSDK from \"./useSDK\";\n\nexport interface RemoveLiquidityState extends LPTokensState {\n    onRemove: () => Promise<void>;\n    removing: boolean;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst useRemoveLiquidityState: () => RemoveLiquidityState = () => {\n    const state = useLPTokensState(\"my-lp-tokens\");\n    const { provider, signer, getTokenAllowance, updateTokens } = useContext(EthersContext);\n    const { removeLiquidity, removeLiquidityETH } = useSDK();\n    const [loading, setLoading] = useState(false);\n    const [removing, setRemoving] = useState(false);\n\n    useAsyncEffect(async () => {\n        if (provider && signer && state.selectedLPToken) {\n            state.setFromSymbol(state.selectedLPToken.tokenA.symbol);\n            state.setToSymbol(state.selectedLPToken.tokenB.symbol);\n\n            setLoading(true);\n            state.setSelectedLPTokenAllowed(false);\n            try {\n                const minAllowance = ethers.BigNumber.from(2)\n                    .pow(96)\n                    .sub(1);\n                const allowance = await getTokenAllowance(state.selectedLPToken.address, ROUTER);\n                state.setSelectedLPTokenAllowed(ethers.BigNumber.from(allowance).gte(minAllowance));\n            } finally {\n                setLoading(false);\n            }\n        }\n    }, [provider, signer, state.selectedLPToken]);\n\n    // tslint:disable-next-line:max-func-body-length\n    useAsyncEffect(async () => {\n        if (\n            state.selectedLPToken &&\n            state.selectedLPToken.totalSupply &&\n            state.pair &&\n            state.fromToken &&\n            state.toToken\n        ) {\n            if (state.pair.liquidityToken.address === state.selectedLPToken.address) {\n                const fromReserve = parseCurrencyAmount(\n                    state.pair.reserveOf(convertToken(state.fromToken)),\n                    state.fromToken.decimals\n                );\n                const toReserve = parseCurrencyAmount(\n                    state.pair.reserveOf(convertToken(state.toToken)),\n                    state.toToken.decimals\n                );\n                state.setFromAmount(\n                    formatBalance(\n                        parseBalance(state.amount, state.selectedLPToken.decimals)\n                            .mul(fromReserve)\n                            .div(state.selectedLPToken.totalSupply)\n                            .toString(),\n                        state.selectedLPToken.tokenA.decimals\n                    )\n                );\n                state.setToAmount(\n                    formatBalance(\n                        parseBalance(state.amount, state.selectedLPToken.decimals)\n                            .mul(toReserve)\n                            .div(state.selectedLPToken.totalSupply)\n                            .toString(),\n                        state.selectedLPToken.tokenB.decimals\n                    )\n                );\n            }\n        }\n    }, [state.selectedLPToken, state.amount, state.pair, state.fromToken, state.toToken, signer]);\n\n    const onRemove = useCallback(async () => {\n        if (state.fromAmount && state.toAmount && state.selectedLPToken && state.amount && signer) {\n            setRemoving(true);\n            try {\n                const fromAmount = parseBalance(state.fromAmount, state.fromToken!.decimals);\n                const toAmount = parseBalance(state.toAmount, state.toToken!.decimals);\n                const liquidity = parseBalance(state.amount, state.selectedLPToken.decimals);\n                if (state.fromSymbol === \"WETH\" || state.toSymbol === \"WETH\") {\n                    const token = state.fromSymbol === \"WETH\" ? state.toToken! : state.fromToken!;\n                    const amountToRemove = state.fromSymbol === \"WETH\" ? toAmount : fromAmount;\n                    const amountToRemoveETH = state.fromSymbol === \"WETH\" ? fromAmount : toAmount;\n                    const tx = await removeLiquidityETH(token, liquidity, amountToRemove, amountToRemoveETH, signer);\n                    await tx.wait();\n                } else {\n                    const tx = await removeLiquidity(\n                        state.fromToken!,\n                        state.toToken!,\n                        liquidity,\n                        fromAmount,\n                        toAmount,\n                        signer\n                    );\n                    await tx.wait();\n                }\n                await updateTokens();\n                await state.updateLPTokens();\n                state.setSelectedLPToken(undefined);\n            } finally {\n                setRemoving(false);\n            }\n        }\n    }, [state.fromAmount, state.toAmount, state.selectedLPToken, state.amount, signer, state.updateLPTokens]);\n\n    return {\n        ...state,\n        loading: state.loading || loading,\n        onRemove,\n        removing\n    };\n};\n\nexport default useRemoveLiquidityState;\n","import React, { useCallback, useState } from \"react\";\nimport { Platform, View } from \"react-native\";\n\nimport useAsyncEffect from \"use-async-effect\";\nimport ApproveButton from \"../components/ApproveButton\";\nimport Border from \"../components/Border\";\nimport Button from \"../components/Button\";\nimport Container from \"../components/Container\";\nimport Content from \"../components/Content\";\nimport ErrorMessage from \"../components/ErrorMessage\";\nimport FetchingButton from \"../components/FetchingButton\";\nimport Heading from \"../components/Heading\";\nimport InfoBox from \"../components/InfoBox\";\nimport InsufficientBalanceButton from \"../components/InsufficientBalanceButton\";\nimport LPTokenSelect, { LPTokenItem } from \"../components/LPTokenSelect\";\nimport Meta from \"../components/Meta\";\nimport Text from \"../components/Text\";\nimport Title from \"../components/Title\";\nimport TokenInput from \"../components/TokenInput\";\nimport WebFooter from \"../components/web/WebFooter\";\nimport { LiquiditySubMenu } from \"../components/web/WebSubMenu\";\nimport { ROUTER } from \"../constants/contracts\";\nimport { Spacing } from \"../constants/dimension\";\nimport useRemoveLiquidityState, { RemoveLiquidityState } from \"../hooks/useRemoveLiquidityState\";\nimport MetamaskError from \"../types/MetamaskError\";\nimport { isEmptyValue, parseBalance } from \"../utils\";\nimport Screen from \"./Screen\";\n\nconst RemoveLiquidityScreen = () => {\n    return (\n        <Screen>\n            <LiquiditySubMenu />\n            <Container>\n                <Content>\n                    <Title text={\"Remove Liquidity\"} />\n                    <Text light={true}>Scan your liquidity and remove one if needed.</Text>\n                    <RemoveLiquidity />\n                    {Platform.OS === \"web\" && <WebFooter />}\n                </Content>\n            </Container>\n        </Screen>\n    );\n};\n\nconst RemoveLiquidity = () => {\n    const state = useRemoveLiquidityState();\n    return (\n        <View style={{ marginTop: Spacing.large }}>\n            <LPTokenSelect\n                state={state}\n                title={\"Your Liquidity\"}\n                emptyText={\"You don't have any liquidity.\"}\n                Item={LPTokenItem}\n            />\n            <Border />\n            <AmountInput state={state} />\n            <AmountInfo state={state} />\n        </View>\n    );\n};\n\nconst AmountInput = ({ state }: { state: RemoveLiquidityState }) => {\n    if (!state.selectedLPToken) {\n        return <Heading text={\"Amount of Tokens\"} disabled={true} />;\n    }\n    return (\n        <TokenInput\n            title={\"Amount of Tokens\"}\n            token={state.selectedLPToken}\n            amount={state.amount}\n            onAmountChanged={state.setAmount}\n        />\n    );\n};\n\nconst AmountInfo = ({ state }: { state: RemoveLiquidityState }) => {\n    const disabled = !state.selectedLPToken || !state.fromToken || !state.toToken;\n    return (\n        <InfoBox>\n            <Meta\n                label={state.fromToken ? \"Amount of \" + state.fromToken.symbol : \"Amount of Token 1\"}\n                text={state.fromAmount}\n                disabled={disabled}\n            />\n            <Meta\n                label={state.toToken ? \"Amount of \" + state.toToken.symbol : \"Amount of Token 2\"}\n                text={state.toAmount}\n                disabled={disabled}\n            />\n            <Controls state={state} />\n        </InfoBox>\n    );\n};\n\n// tslint:disable-next-line:max-func-body-length\nconst Controls = ({ state }: { state: RemoveLiquidityState }) => {\n    const [error, setError] = useState<MetamaskError>({});\n    useAsyncEffect(() => setError({}), [state.fromSymbol, state.toSymbol, state.fromAmount]);\n    const approveRequired = !state.selectedLPTokenAllowed;\n    const disabled = approveRequired || isEmptyValue(state.amount);\n    return (\n        <View style={{ marginTop: Spacing.normal }}>\n            {!state.selectedLPToken || isEmptyValue(state.amount) ? (\n                <RemoveButton state={state} onError={setError} disabled={true} />\n            ) : parseBalance(state.amount, state.selectedLPToken.decimals).gt(state.selectedLPToken.balance) ? (\n                <InsufficientBalanceButton symbol={state.selectedLPToken.symbol} />\n            ) : state.loading || !state.pair ? (\n                <FetchingButton />\n            ) : (\n                <>\n                    <ApproveButton\n                        token={state.selectedLPToken}\n                        spender={ROUTER}\n                        onSuccess={() => state.setSelectedLPTokenAllowed(true)}\n                        onError={setError}\n                        hidden={!approveRequired}\n                    />\n                    <RemoveButton state={state} onError={setError} disabled={disabled} />\n                </>\n            )}\n            {error.message && error.code !== 4001 && <ErrorMessage error={error} />}\n        </View>\n    );\n};\n\nconst RemoveButton = ({\n    state,\n    onError,\n    disabled\n}: {\n    state: RemoveLiquidityState;\n    onError: (e) => void;\n    disabled: boolean;\n}) => {\n    const onPress = useCallback(() => {\n        onError({});\n        state.onRemove().catch(onError);\n    }, [state.onRemove, onError]);\n    return <Button title={\"Remove Liquidity\"} disabled={disabled} loading={state.removing} onPress={onPress} />;\n};\n\nexport default RemoveLiquidityScreen;\n"],"sourceRoot":""}