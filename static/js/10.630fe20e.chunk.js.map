{"version":3,"sources":["src/components/InsufficientBalanceButton.tsx","src/components/AmountMeta.tsx","src/components/ApproveButton.tsx","src/components/Notice.tsx","src/components/LPTokenSelect.tsx","src/hooks/useLPTokensState.tsx","src/hooks/useFarmingState.tsx","src/screens/FarmingScreen.tsx"],"names":["InsufficientBalanceButton","symbol","title","disabled","AmountMeta","props","useColors","textDark","textLight","placeholder","style","fontSize","IS_DESKTOP","marginBottom","Spacing","normal","color","amount","suffix","ApproveButton","approveToken","useContext","EthersContext","useState","loading","setLoading","onPress","useCallback","a","async","token","onError","address","spender","tx","wait","onSuccess","hidden","containerStyle","tiny","Notice","borderStyle","border","useStyles","clear","note","text","buttonText","onPressButton","type","size","fontWeight","titleStyle","buttonStyle","paddingHorizontal","paddingVertical","alignSelf","marginTop","LPTokenList","state","emptyText","Item","renderItem","item","key","selected","onSelectToken","setSelectedLPToken","data","lpTokens","sort","p1","p2","apy","length","EmptyList","keyExtractor","margin","textAlign","width","LPTokenItem","textMedium","balance","formatBalance","decimals","ITEM_SEPARATOR_HEIGHT","alignItems","tokenA","small","replaceWETH","tokenB","marginLeft","medium","caption","flex","light","LPTokenSelect","expanded","selectedLPToken","onExpand","updatingLPTokens","useLPTokensState","mode","useTokenPairState","provider","tokens","lastTimeRefreshed","setLastTimeRefreshed","setLPTokens","selectedLPTokenAllowed","setSelectedLPTokenAllowed","pair","setPair","setAmount","getPair","useSDK","updateLPTokens","fetchMyPools","fetchPools","fetchMyLPTokens","fetchMyUniswapLPTokens","useEffect","useAsyncEffect","undefined","useDelayedOnBlockEffect","block","fromToken","toToken","updateLastTimeRefreshed","Date","now","useFarmingState","myPools","signer","getTokenAllowance","deposit","withdraw","depositing","setDepositing","withdrawing","setWithdrawing","setFromAmount","setToAmount","minAllowance","ethers","BigNumber","from","pow","sub","MASTER_CHEF","allowance","gte","totalSupply","amountDeposited","lpToken","convertToken","TokenAmount","toString","lpTokenAmount","tokenAAmount","involvesToken","getLiquidityValue","toFixed","tokenBAmount","onDeposit","id","parseBalance","onWithdraw","Farming","large","TokenItem","Deposit","DepositInfo","marginRight","formatPercentage","isZero","AddLiquidityNotice","onAmountChanged","autoFocus","green","useLinker","isEmptyValue","sushiRewardedPerYear","sushiPerYear","mul","div","pow10","label","formatUSD","totalValueUSD","DepositControls","error","setError","approveRequired","DepositButton","gt","message","code","catch","FarmingScreen","Platform","OS"],"mappings":"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","file":"static/js/10.630fe20e.chunk.js","sourcesContent":["import React from \"react\";\n\nimport Button from \"./Button\";\n\nconst InsufficientBalanceButton = ({ symbol }: { symbol: string }) => {\n    return <Button title={\"Insufficient \" + (symbol ? symbol : \"Balance\")} disabled={true} />;\n};\nexport default InsufficientBalanceButton;\n","import React, { FC } from \"react\";\n\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport Text from \"./Text\";\n\nexport interface AmountMetaProps {\n    amount?: string;\n    suffix?: string;\n    disabled?: boolean;\n}\n\nconst AmountMeta: FC<AmountMetaProps> = props => {\n    const { textDark, textLight, placeholder } = useColors();\n    return (\n        <Text\n            style={{\n                fontSize: IS_DESKTOP ? 28 : 20,\n                marginBottom: Spacing.normal,\n                color: props.disabled ? placeholder : props.amount ? textDark : textLight\n            }}>\n            {props.disabled ? \"N/A\" : props.amount ? props.amount + \" \" + (props.suffix || \"\") : \"Fetching…\"}\n        </Text>\n    );\n};\n\nexport default AmountMeta;\n","import React, { FC, useCallback, useContext, useState } from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport Token from \"../types/Token\";\nimport Button from \"./Button\";\n\nexport interface ApproveButtonProps {\n    token: Token;\n    spender: string;\n    onSuccess: () => void;\n    onError: (e) => void;\n    hidden?: boolean;\n}\n\nconst ApproveButton: FC<ApproveButtonProps> = props => {\n    const { approveToken } = useContext(EthersContext);\n    const [loading, setLoading] = useState(false);\n    const onPress = useCallback(async () => {\n        if (props.token) {\n            props.onError({});\n            setLoading(true);\n            try {\n                const tx = await approveToken(props.token.address, props.spender);\n                if (tx) {\n                    await tx.wait();\n                    props.onSuccess();\n                }\n            } catch (e) {\n                props.onError(e);\n            } finally {\n                setLoading(false);\n            }\n        }\n    }, [props.token]);\n    if (props.hidden) return <View />;\n    return (\n        <Button\n            title={\"Approve \" + (props.token?.symbol || \"\")}\n            onPress={onPress}\n            loading={loading}\n            containerStyle={{ marginBottom: Spacing.tiny }}\n        />\n    );\n};\n\nexport default ApproveButton;\n","import React from \"react\";\nimport { View, ViewStyle } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport useStyles from \"../hooks/useStyles\";\nimport Button from \"./Button\";\nimport Text from \"./Text\";\n\nexport interface NoticeProps {\n    text: string;\n    clear?: boolean;\n    color?: string;\n    buttonText?: string;\n    onPressButton?: () => void;\n    style?: ViewStyle;\n}\n\nconst Notice = (props: NoticeProps) => {\n    const { textLight } = useColors();\n    const { border } = useStyles();\n    const borderStyle = border({ color: props.color });\n    const color = props.color || textLight;\n    return (\n        <View style={[props.clear ? {} : borderStyle, props.style]}>\n            <Text note={true} style={{ color }}>\n                {props.text}\n            </Text>\n            {props.buttonText && props.onPressButton && (\n                <Button\n                    title={props.buttonText}\n                    type={\"clear\"}\n                    size={\"small\"}\n                    fontWeight={\"bold\"}\n                    onPress={props.onPressButton}\n                    titleStyle={{ color }}\n                    buttonStyle={{ paddingHorizontal: 0, paddingVertical: 0 }}\n                    style={{ alignSelf: \"flex-end\", marginTop: Spacing.tiny }}\n                />\n            )}\n        </View>\n    );\n};\n\nexport default Notice;\n","import React, { FC, useCallback } from \"react\";\nimport { FlatList, View, ViewStyle } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport { LPTokensState } from \"../hooks/useLPTokensState\";\nimport LPToken from \"../types/LPToken\";\nimport { formatBalance } from \"../utils\";\nimport CloseIcon from \"./CloseIcon\";\nimport Expandable from \"./Expandable\";\nimport FlexView from \"./FlexView\";\nimport { ITEM_SEPARATOR_HEIGHT } from \"./ItemSeparator\";\nimport Loading from \"./Loading\";\nimport Selectable from \"./Selectable\";\nimport SelectIcon from \"./SelectIcon\";\nimport Text from \"./Text\";\nimport TokenLogo from \"./TokenLogo\";\n\nexport type LPTokenSelectFilter = \"balance\" | \"amountDeposited\" | \"\";\n\nexport interface LPTokenSelectProps {\n    state: LPTokensState;\n    title: string;\n    emptyText: string;\n    Item: FC<LPTokenItemProps>;\n    style?: ViewStyle;\n}\n\nexport interface LPTokenItemProps {\n    token: LPToken;\n    selected: boolean;\n    onSelectToken: (token: LPToken) => void;\n}\n\nconst LPTokenSelect: FC<LPTokenSelectProps> = props => {\n    const onUnselectToken = () => props.state.setSelectedLPToken();\n    return (\n        <View style={props.style}>\n            <Expandable\n                title={props.title}\n                expanded={!props.state.selectedLPToken}\n                onExpand={() => props.state.setSelectedLPToken()}>\n                <LPTokenList state={props.state} emptyText={props.emptyText} Item={props.Item} />\n            </Expandable>\n            {props.state.selectedLPToken && (\n                <props.Item token={props.state.selectedLPToken} selected={true} onSelectToken={onUnselectToken} />\n            )}\n        </View>\n    );\n};\n\n// tslint:disable-next-line:max-func-body-length\nconst LPTokenList = ({\n    state,\n    emptyText,\n    Item\n}: {\n    state: LPTokensState;\n    emptyText: string;\n    Item: FC<LPTokenItemProps>;\n}) => {\n    const renderItem = useCallback(\n        ({ item }) => {\n            return <Item key={item.symbol} token={item} selected={false} onSelectToken={state.setSelectedLPToken} />;\n        },\n        [state.setSelectedLPToken]\n    );\n    const data = state.lpTokens.sort((p1, p2) => (p2.apy || 0) - (p1.apy || 0));\n    return state.loading ? (\n        <Loading />\n    ) : data.length === 0 ? (\n        <EmptyList text={emptyText} />\n    ) : (\n        <FlatList keyExtractor={item => item.symbol} data={data} renderItem={renderItem} />\n    );\n};\n\nconst EmptyList = ({ text }: { text: string }) => {\n    return (\n        <View style={{ margin: Spacing.normal }}>\n            <Text disabled={true} style={{ textAlign: \"center\", width: \"100%\" }}>\n                {text}\n            </Text>\n        </View>\n    );\n};\n\nexport const LPTokenItem: FC<LPTokenItemProps> = props => {\n    const { textMedium } = useColors();\n    const balance = formatBalance(props.token.balance, props.token.decimals, 6);\n    const onPress = useCallback(() => {\n        props.onSelectToken(props.token);\n    }, [props.onSelectToken, props.token]);\n    return (\n        <Selectable\n            selected={props.selected}\n            onPress={onPress}\n            containerStyle={{ marginBottom: ITEM_SEPARATOR_HEIGHT }}>\n            <FlexView style={{ alignItems: \"center\" }}>\n                <TokenLogo token={props.token.tokenA} small={true} replaceWETH={true} />\n                <TokenLogo token={props.token.tokenB} small={true} replaceWETH={true} style={{ marginLeft: 4 }} />\n                <Text medium={true} caption={true} style={{ marginLeft: Spacing.tiny }}>\n                    {props.token.tokenA.symbol}-{props.token.tokenB.symbol}\n                </Text>\n                <View style={{ flex: 1, marginLeft: Spacing.tiny }}>\n                    <Text caption={true} light={true} style={{ textAlign: \"right\", color: textMedium }}>\n                        {balance}\n                    </Text>\n                </View>\n                {props.selected ? <CloseIcon /> : <SelectIcon />}\n            </FlexView>\n        </Selectable>\n    );\n};\n\nexport default LPTokenSelect;\n","import { useContext, useEffect, useState } from \"react\";\n\nimport { Pair } from \"@sushiswap/sdk\";\nimport useAsyncEffect from \"use-async-effect\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport LPToken from \"../types/LPToken\";\nimport { fetchMyLPTokens, fetchMyPools, fetchMyUniswapLPTokens, fetchPools } from \"../utils/fetch-utils\";\nimport useDelayedOnBlockEffect from \"./useDelayedOnBlockEffect\";\nimport useSDK from \"./useSDK\";\nimport useTokenPairState, { TokenPairState } from \"./useTokenPairState\";\n\nexport interface LPTokensState extends TokenPairState {\n    updateLPTokens: () => Promise<void>;\n    lastTimeRefreshed: number;\n    updateLastTimeRefreshed: () => void;\n    lpTokens: LPToken[];\n    selectedLPToken?: LPToken;\n    setSelectedLPToken: (token?: LPToken) => void;\n    selectedLPTokenAllowed: boolean;\n    setSelectedLPTokenAllowed: (allowed: boolean) => void;\n    pair?: Pair;\n    amount: string;\n    setAmount: (amount: string) => void;\n}\n\ntype Mode = \"pools\" | \"my-pools\" | \"my-lp-tokens\" | \"my-uniswap-lp-tokens\";\n\nlet updatingLPTokens = false;\n\n// tslint:disable-next-line:max-func-body-length\nconst useLPTokensState: (mode: Mode) => LPTokensState = mode => {\n    const state = useTokenPairState();\n    const { provider, address, tokens } = useContext(EthersContext);\n    const [lastTimeRefreshed, setLastTimeRefreshed] = useState(0);\n    const [loading, setLoading] = useState(true);\n    const [lpTokens, setLPTokens] = useState<LPToken[]>([]);\n    const [selectedLPToken, setSelectedLPToken] = useState<LPToken>();\n    const [selectedLPTokenAllowed, setSelectedLPTokenAllowed] = useState(false);\n    const [pair, setPair] = useState<Pair>();\n    const [amount, setAmount] = useState(\"\");\n    const { getPair } = useSDK();\n\n    const updateLPTokens = async () => {\n        if (address && provider && tokens.length > 0 && !updatingLPTokens) {\n            try {\n                updatingLPTokens = true;\n                const data = await (mode === \"my-pools\"\n                    ? fetchMyPools(address, tokens, provider)\n                    : mode === \"pools\"\n                    ? fetchPools(address, tokens, provider)\n                    : mode === \"my-lp-tokens\"\n                    ? fetchMyLPTokens(address, tokens, provider)\n                    : fetchMyUniswapLPTokens(address, tokens, provider));\n                if (data) {\n                    setLPTokens(data);\n                }\n            } finally {\n                updatingLPTokens = false;\n                setLoading(false);\n            }\n        }\n    };\n\n    useEffect(() => {\n        if (!selectedLPToken) {\n            setAmount(\"\");\n        }\n    }, [selectedLPToken]);\n\n    useAsyncEffect(async () => {\n        setLoading(true);\n        setPair(undefined);\n        if (selectedLPToken && provider) {\n            try {\n                setPair(await getPair(selectedLPToken.tokenA, selectedLPToken.tokenB, provider));\n            } catch (e) {\n            } finally {\n                setLoading(false);\n            }\n        } else {\n            setLoading(false);\n        }\n    }, [selectedLPToken, provider]);\n\n    useDelayedOnBlockEffect(\n        async block => {\n            if (address && (mode === \"pools\" || tokens.length > 0)) {\n                if (!block) {\n                    setLoading(true);\n                }\n                await updateLPTokens();\n            }\n        },\n        () => \"updateLPTokens()\",\n        [tokens.length, address, lastTimeRefreshed],\n        0\n    );\n\n    return {\n        ...state,\n        fromToken: state.fromToken || selectedLPToken?.tokenA,\n        toToken: state.toToken || selectedLPToken?.tokenB,\n        updateLPTokens,\n        loading: state.loading || loading,\n        lastTimeRefreshed,\n        updateLastTimeRefreshed: () => {\n            setLastTimeRefreshed(Date.now());\n        },\n        lpTokens,\n        selectedLPToken,\n        setSelectedLPToken,\n        selectedLPTokenAllowed,\n        setSelectedLPTokenAllowed,\n        pair,\n        amount,\n        setAmount\n    };\n};\n\nexport default useLPTokensState;\n","import { useCallback, useContext, useEffect, useState } from \"react\";\n\nimport { TokenAmount } from \"@sushiswap/sdk\";\nimport { ethers } from \"ethers\";\nimport useAsyncEffect from \"use-async-effect\";\nimport { MASTER_CHEF } from \"../constants/contracts\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport { convertToken, parseBalance } from \"../utils\";\nimport useLPTokensState, { LPTokensState } from \"./useLPTokensState\";\nimport useSDK from \"./useSDK\";\n\nexport interface FarmingState extends LPTokensState {\n    onDeposit: () => Promise<void>;\n    depositing: boolean;\n    onWithdraw: () => Promise<void>;\n    withdrawing: boolean;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst useFarmingState: (myPools: boolean) => FarmingState = myPools => {\n    const state = useLPTokensState(myPools ? \"my-pools\" : \"pools\");\n    const { signer, getTokenAllowance } = useContext(EthersContext);\n    const { deposit, withdraw } = useSDK();\n    const [loading, setLoading] = useState(false);\n    const [depositing, setDepositing] = useState(false);\n    const [withdrawing, setWithdrawing] = useState(false);\n\n    useEffect(() => {\n        setLoading(false);\n        setDepositing(false);\n        setWithdrawing(false);\n        state.setFromAmount(\"\");\n        state.setToAmount(\"\");\n    }, [state.selectedLPToken]);\n\n    useAsyncEffect(async () => {\n        if (signer && state.selectedLPToken) {\n            setLoading(true);\n            state.setSelectedLPTokenAllowed(false);\n            try {\n                const minAllowance = ethers.BigNumber.from(2)\n                    .pow(96)\n                    .sub(1);\n                const allowance = await getTokenAllowance(state.selectedLPToken.address, MASTER_CHEF);\n                state.setSelectedLPTokenAllowed(ethers.BigNumber.from(allowance).gte(minAllowance));\n            } finally {\n                setLoading(false);\n            }\n        }\n    }, [signer, state.selectedLPToken]);\n\n    useAsyncEffect(() => {\n        if (\n            state.pair &&\n            state.selectedLPToken &&\n            state.selectedLPToken.totalSupply &&\n            state.selectedLPToken.amountDeposited\n        ) {\n            const lpToken = convertToken(state.selectedLPToken);\n            const tokenA = convertToken(state.selectedLPToken.tokenA);\n            const tokenB = convertToken(state.selectedLPToken.tokenB);\n            const totalSupply = new TokenAmount(lpToken, state.selectedLPToken.totalSupply.toString());\n            const lpTokenAmount = new TokenAmount(lpToken, state.selectedLPToken.amountDeposited.toString());\n            const tokenAAmount = state.pair.involvesToken(tokenA)\n                ? state.pair.getLiquidityValue(tokenA, totalSupply, lpTokenAmount)\n                : null;\n            state.setFromAmount(tokenAAmount?.toFixed() || \"\");\n            const tokenBAmount = state.pair.involvesToken(tokenA)\n                ? state.pair.getLiquidityValue(tokenB, totalSupply, lpTokenAmount)\n                : null;\n            state.setToAmount(tokenBAmount?.toFixed() || \"\");\n        }\n    }, [state.pair, state.selectedLPToken]);\n\n    const onDeposit = useCallback(async () => {\n        if (state.selectedLPToken?.id && state.amount && signer) {\n            setDepositing(true);\n            try {\n                const amount = parseBalance(state.amount, state.selectedLPToken.decimals);\n                const tx = await deposit(state.selectedLPToken.id, amount, signer);\n                await tx.wait();\n                state.setSelectedLPToken(undefined);\n                await state.updateLastTimeRefreshed();\n            } finally {\n                setDepositing(false);\n            }\n        }\n    }, [state.selectedLPToken, state.amount, signer]);\n\n    const onWithdraw = useCallback(async () => {\n        if (state.selectedLPToken?.id && state.amount && signer) {\n            setWithdrawing(true);\n            try {\n                const amount = parseBalance(state.amount, state.selectedLPToken.decimals);\n                const tx = await withdraw(state.selectedLPToken.id, amount, signer);\n                await tx.wait();\n                state.setSelectedLPToken(undefined);\n                await state.updateLastTimeRefreshed();\n            } finally {\n                setWithdrawing(false);\n            }\n        }\n    }, [state.selectedLPToken, state.amount, signer]);\n\n    return {\n        ...state,\n        loading: state.loading || loading,\n        onDeposit,\n        depositing,\n        onWithdraw,\n        withdrawing\n    };\n};\n\nexport default useFarmingState;\n","import React, { FC, useCallback, useState } from \"react\";\nimport { Platform, View } from \"react-native\";\n\nimport useAsyncEffect from \"use-async-effect\";\nimport AmountMeta from \"../components/AmountMeta\";\nimport ApproveButton from \"../components/ApproveButton\";\nimport BackgroundImage from \"../components/BackgroundImage\";\nimport Border from \"../components/Border\";\nimport Button from \"../components/Button\";\nimport CloseIcon from \"../components/CloseIcon\";\nimport Container from \"../components/Container\";\nimport Content from \"../components/Content\";\nimport ErrorMessage from \"../components/ErrorMessage\";\nimport FetchingButton from \"../components/FetchingButton\";\nimport FlexView from \"../components/FlexView\";\nimport Heading from \"../components/Heading\";\nimport InfoBox from \"../components/InfoBox\";\nimport InsufficientBalanceButton from \"../components/InsufficientBalanceButton\";\nimport { ITEM_SEPARATOR_HEIGHT } from \"../components/ItemSeparator\";\nimport LPTokenSelect, { LPTokenItemProps } from \"../components/LPTokenSelect\";\nimport Meta from \"../components/Meta\";\nimport Notice from \"../components/Notice\";\nimport Selectable from \"../components/Selectable\";\nimport SelectIcon from \"../components/SelectIcon\";\nimport Text from \"../components/Text\";\nimport Title from \"../components/Title\";\nimport TokenInput from \"../components/TokenInput\";\nimport TokenLogo from \"../components/TokenLogo\";\nimport WebFooter from \"../components/web/WebFooter\";\nimport { FarmingSubMenu } from \"../components/web/WebSubMenu\";\nimport { MASTER_CHEF } from \"../constants/contracts\";\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport useFarmingState, { FarmingState } from \"../hooks/useFarmingState\";\nimport useLinker from \"../hooks/useLinker\";\nimport MetamaskError from \"../types/MetamaskError\";\nimport { formatBalance, formatPercentage, formatUSD, isEmptyValue, parseBalance, pow10 } from \"../utils\";\nimport Screen from \"./Screen\";\n\nconst FarmingScreen = () => {\n    return (\n        <Screen>\n            <Container>\n                <BackgroundImage />\n                <Content>\n                    <Title text={\"Plant LP Tokens\"} />\n                    <Text light={true}>Deposit your LP tokens and earn additional SUSHI rewards.</Text>\n                    <Farming />\n                </Content>\n                {Platform.OS === \"web\" && <WebFooter />}\n            </Container>\n            <FarmingSubMenu />\n        </Screen>\n    );\n};\n\nconst Farming = () => {\n    const state = useFarmingState(false);\n    const emptyText = \"Temporarily unable to load pools.\";\n    return (\n        <View style={{ marginTop: Spacing.large }}>\n            <LPTokenSelect state={state} title={\"Active Pools\"} emptyText={emptyText} Item={TokenItem} />\n            <Border />\n            <Deposit state={state} />\n            <DepositInfo state={state} />\n            <Notice\n                text={\n                    \"⚠️ 2/3 of your SUSHI rewards are vested for 6 months. You can harvest 1/3 immediately and the remaining 2/3 after 6 months of waiting.\"\n                }\n                clear={true}\n                style={{ marginTop: Spacing.normal }}\n            />\n        </View>\n    );\n};\n\n// tslint:disable-next-line:max-func-body-length\nconst TokenItem: FC<LPTokenItemProps> = props => {\n    const apy = props.token.apy || 0;\n    const onPress = useCallback(() => {\n        props.onSelectToken(props.token);\n    }, [props.onSelectToken, props.token]);\n    return (\n        <Selectable\n            selected={props.selected}\n            onPress={onPress}\n            containerStyle={{ marginBottom: ITEM_SEPARATOR_HEIGHT }}>\n            <FlexView style={{ alignItems: \"center\" }}>\n                <TokenLogo token={props.token.tokenA} small={true} replaceWETH={true} />\n                <TokenLogo token={props.token.tokenB} small={true} replaceWETH={true} style={{ marginLeft: 4 }} />\n                <Text medium={true} caption={true} style={{ marginLeft: Spacing.tiny }}>\n                    {props.token.tokenA.symbol}-{props.token.tokenB.symbol}\n                </Text>\n                <Text caption={IS_DESKTOP} medium={true} style={{ flex: 1, textAlign: \"right\", marginRight: 4 }}>\n                    {formatPercentage(apy)}%\n                </Text>\n                <Text caption={IS_DESKTOP} light={true} fontWeight={\"light\"}>\n                    APY\n                </Text>\n                {props.selected ? <CloseIcon /> : <SelectIcon />}\n            </FlexView>\n        </Selectable>\n    );\n};\n\nconst Deposit = ({ state }: { state: FarmingState }) => {\n    if (!state.selectedLPToken) {\n        return <Heading text={\"Amount\"} disabled={true} />;\n    }\n    return (\n        <View>\n            <Heading text={state.selectedLPToken.symbol + \" Amount\"} />\n            {state.selectedLPToken.balance.isZero() ? (\n                <AddLiquidityNotice state={state} />\n            ) : (\n                <TokenInput\n                    token={state.selectedLPToken}\n                    amount={state.amount}\n                    onAmountChanged={state.setAmount}\n                    autoFocus={IS_DESKTOP}\n                />\n            )}\n        </View>\n    );\n};\n\nconst AddLiquidityNotice = ({ state }: { state: FarmingState }) => {\n    const { green } = useColors();\n    const onPress = useLinker(\"/liquidity\", \"Liquidity\");\n    return (\n        <>\n            <Notice\n                color={green}\n                text={\n                    \"You need some \" +\n                    state.selectedLPToken!.symbol +\n                    \" token to start farming. Add liquidity to get the LP token.\"\n                }\n            />\n            <Button\n                color={green}\n                title={\"Add Liquidity\"}\n                containerStyle={{ marginTop: Spacing.normal }}\n                onPress={onPress}\n            />\n        </>\n    );\n};\n\nconst DepositInfo = ({ state }: { state: FarmingState }) => {\n    const disabled = isEmptyValue(state.amount) || !state.selectedLPToken?.sushiRewardedPerYear;\n    const sushiPerYear = disabled\n        ? 0\n        : parseBalance(state.amount)\n              .mul(state.selectedLPToken!.sushiRewardedPerYear!)\n              .div(pow10(18));\n    return (\n        <InfoBox>\n            <AmountMeta amount={formatBalance(sushiPerYear, 18, 8)} suffix={\"SUSHI / 1y\"} disabled={disabled} />\n            <Meta\n                label={\"My Balance\"}\n                text={formatBalance(state.selectedLPToken?.balance || 0)}\n                disabled={!state.selectedLPToken}\n            />\n            <Meta\n                label={\"Annual Percentage Yield\"}\n                text={formatPercentage(state.selectedLPToken?.apy || 0)}\n                suffix={\"%\"}\n                disabled={!state.selectedLPToken}\n            />\n            <Meta\n                label={\"Total Value Locked\"}\n                text={formatUSD(state.selectedLPToken?.totalValueUSD || 0)}\n                disabled={!state.selectedLPToken}\n            />\n            <DepositControls state={state} />\n        </InfoBox>\n    );\n};\n\nconst DepositControls = ({ state }: { state: FarmingState }) => {\n    const [error, setError] = useState<MetamaskError>({});\n    useAsyncEffect(() => setError({}), [state.selectedLPToken]);\n    const approveRequired = !state.selectedLPTokenAllowed;\n    const disabled = approveRequired || isEmptyValue(state.amount);\n    return (\n        <View style={{ marginTop: Spacing.normal }}>\n            {!state.selectedLPToken || state.selectedLPToken.balance.isZero() ? (\n                <DepositButton state={state} onError={setError} disabled={true} />\n            ) : parseBalance(state.amount, state.selectedLPToken!.decimals).gt(state.selectedLPToken!.balance) ? (\n                <InsufficientBalanceButton symbol={state.selectedLPToken!.symbol} />\n            ) : state.loading ? (\n                <FetchingButton />\n            ) : (\n                <>\n                    <ApproveButton\n                        token={state.selectedLPToken!}\n                        spender={MASTER_CHEF}\n                        onSuccess={() => state.setSelectedLPTokenAllowed(true)}\n                        onError={setError}\n                        hidden={isEmptyValue(state.amount) || !approveRequired}\n                    />\n                    <DepositButton state={state} onError={setError} disabled={disabled} />\n                </>\n            )}\n            {error.message && error.code !== 4001 && <ErrorMessage error={error} />}\n        </View>\n    );\n};\n\nconst DepositButton = ({\n    state,\n    onError,\n    disabled\n}: {\n    state: FarmingState;\n    onError: (e) => void;\n    disabled: boolean;\n}) => {\n    const onPress = useCallback(() => {\n        onError({});\n        state.onDeposit().catch(onError);\n    }, [state.onDeposit, onError]);\n    return <Button title={\"Deposit\"} disabled={disabled} loading={state.depositing} onPress={onPress} />;\n};\n\nexport default FarmingScreen;\n"],"sourceRoot":""}