{"version":3,"sources":["src/components/Meta.tsx","src/components/Notice.tsx","src/components/InfoBox.tsx","src/components/Border.tsx","src/hooks/useDelayedEffect.tsx","src/components/TokenAmount.tsx","src/components/UnsupportedButton.tsx","src/components/TokenName.tsx","src/components/TokenSearch.tsx","src/components/TokenSelect.tsx","src/hooks/useAddLiquidityState.tsx","src/screens/LiquidityScreen.tsx"],"names":["Meta","props","useColors","textMedium","textLight","placeholder","onPress","useLinker","url","text","disabled","suffix","style","justifyContent","marginTop","fontWeight","fontSize","color","label","undefined","textDecorationLine","Notice","borderStyle","border","useStyles","borderColor","clear","paddingHorizontal","Spacing","tiny","note","buttonText","onPressButton","title","type","size","titleStyle","buttonStyle","paddingVertical","alignSelf","InfoBox","backgroundLight","backgroundColor","normal","small","padding","Border","height","width","marginBottom","handles","useDelayedEffect","effect","timeout","inputs","key","toString","useAsyncEffect","handle","setTimeout","clearTimeout","TokenAmount","caption","formatBalance","amount","token","balance","decimals","UnsupportedButton","state","fromSymbol","toSymbol","TokenName","Text","numberOfLines","ellipsizeMode","marginLeft","name","TokenSearch","tokens","FlexView","Input","value","onChangeText","autoFocus","inputStyle","marginHorizontal","inputContainerStyle","borderBottomWidth","marginRight","labelStyle","containerStyle","paddingTop","paddingBottom","View","TokenList","useContext","EthersContext","loadingTokens","renderItem","useCallback","item","address","selected","onSelectToken","data","useMemo","filter","hidden","sort","t1","t2","isZero","symbol","localeCompare","Loading","length","FlatList","keyExtractor","EmptyList","margin","textAlign","TokenItem","Selectable","selectable","ITEM_SEPARATOR_HEIGHT","alignItems","TokenLogo","flex","TokenSymbol","TokenSelect","useState","search","setSearch","query","setQuery","find","t","useEffect","trim","toLowerCase","Expandable","expanded","onExpand","onChangeSymbol","onAddToken","hide","ethers","utils","isAddress","includes","useAddLiquidityState","useLiquidityState","signer","updateTokens","adding","setAdding","useSDK","addLiquidity","addLiquidityETH","onAdd","a","async","fromToken","toToken","fromAmount","toAmount","parseBalance","amountETH","tx","wait","setFromSymbol","AddLiquidity","large","ItemSeparator","ToTokenSelect","setToSymbol","Heading","FromTokenInput","TokenInput","onAmountChanged","newAmount","setFromAmount","pair","priceOf","convertToken","quote","convertAmount","toExact","setToAmount","isEmptyValue","hideMaxButton","loading","ToTokenInput","PriceInfo","FirstProviderInfo","green","noAmount","initialPrice","Fraction","from","price","PairPriceInfo","setAmount","textDark","calculateAmountOfLPTokenMinted","minted","toFixed","PriceMeta","Controls","error","setError","fromApproveRequired","fromTokenAllowed","toApproveRequired","toTokenAllowed","onError","FetchingButton","gt","InsufficientBalanceButton","ApproveButton","spender","ROUTER","onSuccess","setFromTokenAllowed","setToTokenAllowed","message","code","ErrorMessage","SupplyButton","catch","Button","LiquidityScreen","Screen","Container","Content","Title","light","Platform","OS","WebFooter"],"mappings":"sFAAA,sDAyCeA,IA1Ba,SAAAC,GAAU,IAAD,EACcC,cAAvCC,EADyB,EACzBA,WAAYC,EADa,EACbA,UAAWC,EADE,EACFA,YACzBC,EAAUC,YAAUN,EAAMO,KAAO,GAAI,GAAI,UACzCC,EAAOR,EAAMS,SACb,MACAT,EAAMQ,KACNR,EAAMQ,MAAQR,EAAMU,OAAS,IAAMV,EAAMU,OAAS,IAClD,iBACN,OACI,kBAAC,IAAD,CAAUC,MAAO,CAAEC,eAAgB,gBAAiBC,UAAW,IAC3D,kBAAC,IAAD,CAAMC,WAAY,OAAQH,MAAO,CAAEI,SAAU,GAAIC,MAAOhB,EAAMS,SAAWL,EAAcF,IAClFF,EAAMiB,OAEX,kBAAC,IAAD,CACIZ,QAASL,EAAMO,IAAMF,OAAUa,EAC/BP,MAAO,CACHI,SAAU,GACVC,MAAOhB,EAAMS,SAAWL,EAAcJ,EAAMQ,KAAON,EAAaC,EAChEgB,mBAAoBnB,EAAMO,IAAM,YAAc,SAEjDC,M,iCCnCjB,6DA8CeY,IA7BA,SAACpB,GAAwB,IAE9BqB,GAAcC,EADDC,cAAXD,QACmB,CAAEN,MAAOhB,EAAMgB,QACpCA,EAAQhB,EAAMgB,OAASK,EAAYG,YACzC,OACI,kBAAC,IAAD,CAAMb,MAAO,CAACX,EAAMyB,MAAQ,CAAEC,kBAAmBC,IAAQC,MAASP,EAAarB,EAAMW,QACjF,kBAAC,IAAD,CACIkB,MAAM,EACNlB,MAAO,CACHK,UAEHhB,EAAMQ,MAEVR,EAAM8B,YAAc9B,EAAM+B,eACvB,kBAAC,IAAD,CACIC,MAAOhC,EAAM8B,WACbG,KAAM,QACNC,KAAM,QACNpB,WAAY,OACZT,QAASL,EAAM+B,cACfI,WAAY,CAAEnB,SACdoB,YAAa,CAAEV,kBAAmB,EAAGW,gBAAiB,GACtD1B,MAAO,CAAE2B,UAAW,WAAYzB,UAAWc,IAAQC,W,urBCbxDW,IAnBC,SAACvC,GAAyC,IAC9CwC,EAAoBvC,cAApBuC,gBACAlB,EAAWC,cAAXD,OACR,OACI,kBAAC,IAAD,OACQtB,EADR,CAEIW,MAAO,CAAC,EAAD,KAEIW,EAAO,CAAEN,MAAOwB,KAFpB,IAGCC,gBAAiBD,EACjB3B,UAAWc,IAAQe,OAASf,IAAQgB,MACpCC,QAASjB,IAAQgB,MAAQhB,IAAQC,OAErC5B,EAAMW,Y,iCCpBtB,2CAqBekC,IAfA,WAAO,IACVvB,EAAWrB,cAAXqB,OACR,OACI,kBAAC,IAAD,CACIX,MAAO,CACHmC,OAAQ,EACRC,MAAO,OACPN,gBAAiBnB,EACjBT,UAAWc,IAAQgB,MACnBK,aAAcrB,IAAQgB,MAAQhB,IAAQC,U,iCCftD,sBAEMqB,EAAU,GAoBDC,IAlBU,SACrBC,EACAC,EACAC,GAEA,IAAMC,EAAMH,EAAOI,WACnBC,KACI,WACI,IAAMC,EAASC,WAAWP,EAAQC,GAElC,OADAH,EAAQK,GAAOG,EACRA,KAEX,SAAAA,GACIE,aAAaF,KAEjBJ,K,iCCnBR,oCAceO,IANK,SAAC5D,GAAD,OAChB,kBAAC,IAAD,CAAM6D,SAAS,EAAMpD,SAAUT,EAAMS,SAAUE,MAAOX,EAAMW,OACvDmD,YAAc9D,EAAM+D,QAAU/D,EAAMgE,MAAMC,QAASjE,EAAMgE,MAAME,SAAU,M,iCCVlF,6BASeC,IAJW,SAAC,GAA0C,IAAxCC,EAAuC,EAAvCA,MACzB,OAAO,kBAAC,IAAD,CAAQpC,MAAOoC,EAAMC,WAAa,IAAMD,EAAME,SAAW,iBAAkB7D,UAAU,M,+LCWjF8D,EAXG,SAACvE,GAAD,OACd,kBAACwE,EAAA,EAAD,CACIX,SAAS,EACTY,cAAe,EACfC,cAAe,OACf/D,MAAO,CAAEgE,WAAYhD,IAAQgB,MAAOI,MAAO,KAC3CtC,SAAUT,EAAMS,UACfT,EAAMgE,MAAMY,O,yoBCSrB,IAyDeC,EAzD2B,SAAA7E,GAAU,IACxCsB,EAAWC,cAAXD,OACR,OAAKtB,EAAM8E,OAKP,kBAACC,EAAA,EAAD,CAAUpE,MAAO,CAAEqC,aAAcrB,IAAQgB,QACrC,kBAACqC,EAAA,EAAD,CACIC,MAAOjF,EAAMQ,KACb0E,aAAclF,EAAMkF,aACpB9E,YAAa,4CACb+E,WAAW,EACXC,WAAY,CAAEC,iBAAkB1D,IAAQC,KAAMb,SAAUf,EAAMQ,KAAO,GAAK,IAC1E8E,oBAAqB,CAAEC,kBAAmB,EAAGC,YAAa,IAC1DC,WAAY,CAAE3C,OAAQ,GACtB4C,eAAc,OACPpE,KADO,IAEVI,kBAAmBC,IAAQC,KAC3B+D,WAAY,GACZC,cAAe,OAjBpB,kBAACC,EAAA,EAAD,O,SCiCTC,EAAY,SAAC9F,GAIZ,IAAD,EACgC+F,qBAAWC,KAArCC,EADN,EACMA,cAAenB,EADrB,EACqBA,OACjBoB,EAAaC,uBACf,YAAe,IAAZC,EAAW,EAAXA,KACC,OACI,kBAAC,EAAD,CACI9C,IAAK8C,EAAKC,QACVrC,MAAOoC,EACPE,UAAU,EACVC,cAAevG,EAAMuG,cACrB9F,SAAQ,MAAET,EAAMS,cAAR,EAAET,EAAMS,SAAW2F,OAIvC,CAACpG,EAAMuG,cAAevG,EAAMS,WAE1B+F,EAAOC,mBACT,kBACI3B,EACK4B,QAAO,SAAA1C,GAAK,OAAKhE,EAAM2G,SAAU3G,EAAM2G,OAAO3C,MAC9C4C,MACG,SAACC,EAAIC,GAAL,OACKA,EAAG7C,QAAQ8C,SAAW,EAAI,OAC1BF,EAAG5C,QAAQ8C,SAAW,EAAI,MAC3BF,EAAGG,OAAOC,cAAcH,EAAGE,aAE3C,CAAClC,EAAQ9E,EAAM2G,SAEnB,OAAOV,EACH,kBAACiB,EAAA,EAAD,MACgB,IAAhBV,EAAKW,OACL,kBAAC,EAAD,MAEA,kBAACC,EAAA,EAAD,CAAUC,aAAc,SAAAjB,GAAI,OAAIA,EAAKC,SAASG,KAAMA,EAAMN,WAAYA,KAIxEoB,EAAY,WACd,OACI,kBAACzB,EAAA,EAAD,CAAMlF,MAAO,CAAE4G,OAAQ5F,IAAQe,SAC3B,kBAAC8B,EAAA,EAAD,CAAM/D,UAAU,EAAME,MAAO,CAAE6G,UAAW,SAAUzE,MAAO,SACtD,yCAMX0E,EAAY,SAACzH,GAOf,IAAMK,EAAU8F,uBAAY,WACxBnG,EAAMuG,cAAcvG,EAAMgE,SAC3B,CAAChE,EAAMuG,cAAevG,EAAMgE,QAC/B,OACI,kBAAC0D,EAAA,EAAD,CACIpB,SAAUtG,EAAMsG,SAChBjG,QAASA,EACTI,SAAUT,EAAMS,UAAYT,EAAM2H,WAClChH,MAAO,CACHqC,aAAc4E,MAElB,kBAAC7C,EAAA,EAAD,CAAUpE,MAAO,CAAEkH,WAAY,WAC3B,kBAACC,EAAA,EAAD,CAAW9D,MAAOhE,EAAMgE,MAAOvD,SAAUT,EAAMS,WAC/C,kBAAC,EAAD,CAAWuD,MAAOhE,EAAMgE,MAAOvD,SAAUT,EAAMS,WAC/C,kBAACmD,EAAA,EAAD,CAAaI,MAAOhE,EAAMgE,MAAOvD,SAAUT,EAAMS,SAAUE,MAAO,CAAEoH,KAAM,EAAGP,UAAW,WACxF,kBAACQ,EAAA,EAAD,CAAahE,MAAOhE,EAAMgE,MAAOvD,SAAUT,EAAMS,cAMlDwH,IA3G2B,SAAAjI,GAAU,IACxC8E,EAAWiB,qBAAWC,KAAtBlB,OADuC,EAEnBoD,mBAAS,IAFU,WAExCC,EAFwC,KAEhCC,EAFgC,OAGrBF,mBAAS,IAHY,WAGxCG,EAHwC,KAGjCC,EAHiC,KAIzCtE,EAAQyC,mBAAQ,kBAAM3B,EAAOyD,MAAK,SAAAC,GAAC,OAAIA,EAAExB,SAAWhH,EAAMgH,YAAS,CAAClC,EAAQ9E,EAAMgH,SAYxF,OAFAyB,qBAAU,kBAAML,EAAU,MAAK,CAACpI,EAAMgH,SACtC9D,aAAiB,kBAAMoF,EAASH,EAAOO,OAAOC,iBAAgB,IAAK,CAACR,IAEhE,kBAACtC,EAAA,EAAD,CAAMlF,MAAOX,EAAMW,OACf,kBAACiI,EAAA,EAAD,CAAY5G,MAAOhC,EAAMgC,MAAO6G,UAAW7I,EAAMgH,OAAQ8B,SAAU,kBAAM9I,EAAM+I,eAAe,MAC1F,kBAAC,EAAD,CAAavI,KAAM2H,EAAQjD,aAAckD,EAAWtD,OAAQA,EAAQkE,WAAYhJ,EAAMgJ,aACtF,kBAAC,EAAD,CAAWvI,SAAUT,EAAMS,SAAUkG,OAblC,SAAC6B,GACZ,IAAIS,GAAO,MAAAjJ,EAAM2G,YAAN,EAAA3G,EAAM2G,OAAS6B,MAAM,EAIhC,OAHKS,GAAQZ,EAAMlB,OAAS,IAAM+B,SAAOC,MAAMC,UAAUf,KACrDY,GAAQT,EAAExB,OAAO2B,cAAcU,SAAShB,KAAWG,EAAE5D,KAAK+D,cAAcU,SAAShB,IAE9EY,GAQsD1C,cAf3C,SAAAiC,GAAC,OAAIxI,EAAM+I,eAAeP,EAAExB,YAiBzChD,GAAS,kBAAC,EAAD,CAAWA,MAAOA,EAAOsC,UAAU,EAAMC,cAhBnC,kBAAMvG,EAAM+I,eAAe,KAgBwCpB,YAAY,O,+7BCvC3G,IAsCe2B,EAtCuC,WAClD,IAAMlF,EAAQmF,cAD0C,EAEvBxD,qBAAWC,KAApCwD,EAFgD,EAEhDA,OAAQC,EAFwC,EAExCA,aAFwC,EAG5BvB,oBAAS,GAHmB,WAGjDwB,EAHiD,KAGzCC,EAHyC,OAIdC,cAAlCC,EAJgD,EAIhDA,aAAcC,EAJkC,EAIlCA,gBAEhBC,EAAQ5D,uBAAY,0CAAA6D,EAAAC,OAAA,qDAClB7F,EAAM8F,WAAa9F,EAAM+F,SAAW/F,EAAMgG,YAAchG,EAAMiG,UAAYb,GADxD,oBAElBG,GAAU,GAFQ,SAIRS,EAAaE,YAAalG,EAAMgG,WAAYhG,EAAM8F,UAAUhG,UAC5DmG,EAAWC,YAAalG,EAAMiG,SAAUjG,EAAM+F,QAAQjG,UACnC,QAArBE,EAAMC,YAA2C,QAAnBD,EAAME,SAN1B,0BAQe,QAArBF,EAAMC,WACA,CAACD,EAAM+F,QAASE,EAAUD,GAC1B,CAAChG,EAAM8F,UAAWE,EAAYC,GAV9B,WAOHrG,EAPG,KAOID,EAPJ,KAOYwG,EAPZ,gBAAAP,EAAA,MAWOF,EAAgB9F,EAAOD,EAAQwG,EAAWf,IAXjD,cAWJgB,EAXI,mBAAAR,EAAA,MAYJQ,EAAGC,QAZC,mDAAAT,EAAA,MAcOH,EAAazF,EAAM8F,UAAW9F,EAAM+F,QAASC,EAAYC,EAAUb,IAd1E,eAcJgB,EAdI,mBAAAR,EAAA,MAeJQ,EAAGC,QAfC,2BAAAT,EAAA,MAiBRP,KAjBQ,QAkBdrF,EAAMsG,cAAc,IAlBN,yBAoBdf,GAAU,GApBI,oFAuBvB,CAACvF,EAAM8F,UAAW9F,EAAM+F,QAAS/F,EAAMgG,WAAYhG,EAAMiG,SAAUb,IAEtE,OAAO,EAAP,KACOpF,GADP,IAEI2F,QACAL,Y,iBCGFiB,EAAe,WACjB,IAAMvG,EAAQkF,IACd,OACI,kBAACzD,EAAA,EAAD,CAAMlF,MAAO,CAAEE,UAAWc,IAAQiJ,QAC9B,kBAAC3C,EAAA,EAAD,CACIjG,MAAO,YACPgF,OAAQ5C,EAAMC,WACd0E,eAAgB3E,EAAMsG,cACtB/D,OAAQ,SAAA3C,GAAK,OAAIA,EAAMC,QAAQ8C,YAEnC,kBAAClE,EAAA,EAAD,MACA,kBAAC,EAAD,CAAeuB,MAAOA,IACtB,kBAACvB,EAAA,EAAD,MACA,kBAAC,EAAD,CAAgBuB,MAAOA,IACvB,kBAACyG,EAAA,EAAD,MACA,kBAAC,EAAD,CAAczG,MAAOA,IACrB,kBAACyG,EAAA,EAAD,MACA,kBAAC,EAAD,CAAWzG,MAAOA,MAKxB0G,EAAgB,SAAC,GAA6C,IAA3C1G,EAA0C,EAA1CA,MACrB,OAAKA,EAAMC,WAIP,kBAACwB,EAAA,EAAD,KACI,kBAACoC,EAAA,EAAD,CACIjG,MAAO,YACPgF,OAAQ5C,EAAME,SACdyE,eAAgB3E,EAAM2G,YACtBpE,OAAQ,SAAA3C,GAAK,OAAIA,EAAMgD,SAAW5C,EAAMC,YAAcL,EAAMC,QAAQ8C,aARrE,kBAACiE,EAAA,EAAD,CAASxK,KAAM,YAAaC,UAAU,KAc/CwK,EAAiB,SAAC,GAA6C,IAA3C7G,EAA0C,EAA1CA,MACtB,IAAKA,EAAMC,aAAeD,EAAME,SAC5B,OAAO,kBAAC0G,EAAA,EAAD,CAASxK,KAAM,mBAAoBC,UAAU,IAUxD,OACI,kBAACyK,EAAA,EAAD,CACIlJ,MAAO,mBACPgC,MAAOI,EAAM8F,UACbnG,OAAQK,EAAMgG,WACde,gBAbgB,SAACC,GAErB,GADAhH,EAAMiH,cAAcD,GAChBhH,EAAMkH,MAAQlH,EAAM8F,UAAW,CAC/B,IACMG,EADYjG,EAAMkH,KAAKC,QAAQC,YAAapH,EAAM8F,YAC7BuB,MAAMC,YAActH,EAAM8F,UAAWkB,IAAYO,UAC5EvH,EAAMwH,YAAYC,YAAaxB,GAAY,GAAKA,KAShDyB,cAAe1H,EAAM2H,UAAY3H,EAAMkH,QAK7CU,EAAe,SAAC,GAA6C,IAA3C5H,EAA0C,EAA1CA,MACpB,IAAKA,EAAMC,aAAeD,EAAME,SAC5B,OAAO,kBAACuB,EAAA,EAAD,MAUX,OACI,kBAACqF,EAAA,EAAD,CACIlH,MAAOI,EAAM+F,QACbpG,OAAQK,EAAMiG,SACdc,gBAZgB,SAACC,GAErB,GADAhH,EAAMwH,YAAYR,GACdhH,EAAMkH,MAAQlH,EAAM+F,QAAS,CAC7B,IACMC,EADUhG,EAAMkH,KAAKC,QAAQC,YAAapH,EAAM+F,UAC3BsB,MAAMC,YAActH,EAAM+F,QAASiB,IAAYO,UAC1EvH,EAAMiH,cAAcQ,YAAazB,GAAc,GAAKA,KAQpD0B,cAAe1H,EAAM2H,UAAY3H,EAAMkH,QAK7CW,EAAY,SAAC,GAA6C,IAA3C7H,EAA0C,EAA1CA,MACjB,OAAIA,EAAM8F,WAAa9F,EAAM+F,UAAY/F,EAAM2H,UAAY3H,EAAMkH,KACtD,kBAAC,EAAD,CAAmBlH,MAAOA,IAE1B,kBAAC,EAAD,CAAeA,MAAOA,KAI/B8H,EAAoB,SAAC,GAA6C,IAA3C9H,EAA0C,EAA1CA,MACjB+H,EAAUlM,cAAVkM,MACFC,EAAWP,YAAazH,EAAMgG,aAAeyB,YAAazH,EAAMiG,UAChEgC,EAAeC,IAASC,KAC1BjC,YAAalG,EAAMiG,SAAUjG,EAAM+F,QAASjG,UAC5CoG,YAAalG,EAAMgG,WAAYhG,EAAM8F,UAAWhG,WAClDX,SAAS,GACX,OACI,kBAACsC,EAAA,EAAD,KACI,kBAACtD,EAAA,EAAD,CAAS5B,MAAO,CAAEE,UAAWc,IAAQe,SACjC,kBAAC,GAAD,CAAW0B,MAAOA,EAAOoI,MAAOH,EAAc5L,SAAU2L,KAE5D,kBAAChL,EAAA,EAAD,CACIZ,KACI,sGAGJQ,MAAOmL,EACPxL,MAAO,CAAEE,UAAWc,IAAQgB,WAMtC8J,EAAgB,SAAC,GAA6C,IAA3CrI,EAA0C,EAA1CA,MAA0C,EACnC8D,qBADmC,WACxDnE,EADwD,KAChD2I,EADgD,OAElBzM,cAArC0M,EAFuD,EAEvDA,SAAUxM,EAF6C,EAE7CA,UAAWC,EAFkC,EAElCA,YACrBwM,EAAmChD,cAAnCgD,+BACRpJ,KAAe,0BAAAwG,EAAAC,OAAA,oDACP7F,EAAMkH,MAASO,YAAazH,EAAMgG,aAAgByB,YAAazH,EAAMiG,UAD9D,kCAAAL,EAAA,MAEc4C,EACjBxI,EAAMkH,KACNI,YAActH,EAAM8F,UAAY9F,EAAMgG,YACtCsB,YAActH,EAAM+F,QAAU/F,EAAMiG,YALjC,OAEDwC,EAFC,OAOPH,EAAS,MAACG,OAAD,EAACA,EAAQC,QAAQ,IAPnB,8DASZ,CAAC1I,EAAMkH,KAAMlH,EAAMgG,WAAYhG,EAAMiG,WACxC,IAAM5J,EAAWoL,YAAazH,EAAMgG,aAAeyB,YAAazH,EAAMiG,UAChEmC,EACFpI,EAAMkH,MAAQlH,EAAM8F,UAAY9F,EAAMkH,KAAKC,QAAQC,YAAapH,EAAM8F,YAAY4C,QAAQ,QAAK5L,EAC7FF,EAAQP,EAAWL,EAAc2D,EAAS4I,EAAWxM,EACrD6G,EAAS5C,EAAMC,WAAa,IAAMD,EAAME,SAC9C,OACI,kBAAC/B,EAAA,EAAD,KACI,kBAACiC,EAAA,EAAD,CAAM7D,MAAO,CAAEI,SAAU,GAAIiC,aAAcrB,IAAQe,OAAQ1B,UACtDP,EAAW,MAAQsD,EAASA,EAAS,IAAMiD,EAAS,kBAEzD,kBAAC,GAAD,CAAW5C,MAAOA,EAAOoI,MAAOA,EAAO/L,UAAW2D,EAAMC,aAAeD,EAAME,WAC7E,kBAAC,GAAD,CAAUF,MAAOA,MAKvB2I,GAAY,SAAC,GAAD,IAAG3I,EAAH,EAAGA,MAAOoI,EAAV,EAAUA,MAAO/L,EAAjB,EAAiBA,SAAjB,OACd,kBAACV,EAAA,EAAD,CAAMkB,MAAO,QAAST,KAAMgM,EAAO9L,OAAQ0D,EAAME,SAAW,QAAUF,EAAMC,WAAY5D,SAAUA,KAIhGuM,GAAW,SAAC,GAA6C,IAA3C5I,EAA0C,EAA1CA,MAA0C,EAChC8D,mBAAwB,IADQ,WACnD+E,EADmD,KAC5CC,EAD4C,KAE1D1J,KAAe,kBAAM0J,EAAS,MAAK,CAAC9I,EAAMC,WAAYD,EAAME,SAAUF,EAAMgG,aAC5E,IAAM+C,EAA2C,QAArB/I,EAAMC,aAAyBD,EAAMgJ,iBAC3DC,EAAuC,QAAnBjJ,EAAME,WAAuBF,EAAMkJ,eACvD7M,EACF0M,GAAuBE,GAAqBxB,YAAazH,EAAMgG,aAAeyB,YAAazH,EAAMiG,UACrG,OACI,kBAACxE,EAAA,EAAD,CAAMlF,MAAO,CAAEE,UAAWc,IAAQe,UAC5B0B,EAAM8F,YACP9F,EAAM+F,SACP/F,EAAM2H,SACNF,YAAazH,EAAMgG,aACnByB,YAAazH,EAAMiG,UACf,kBAAC,GAAD,CAAcjG,MAAOA,EAAOmJ,QAASL,EAAUzM,UAAU,IACzD2D,EAAM2H,UAAY3H,EAAMkH,KACxB,kBAACkC,EAAA,EAAD,MACAlD,YAAalG,EAAMgG,WAAYhG,EAAM8F,UAAUhG,UAAUuJ,GAAGrJ,EAAM8F,UAAUjG,SAC5E,kBAACyJ,EAAA,EAAD,CAA2B1G,OAAQ5C,EAAMC,aACzCiG,YAAalG,EAAMiG,SAAUjG,EAAM+F,QAAQjG,UAAUuJ,GAAGrJ,EAAM+F,QAAQlG,SACtE,kBAACyJ,EAAA,EAAD,CAA2B1G,OAAQ5C,EAAME,WACnB,QAArBF,EAAMC,YAA2C,SAAnBD,EAAME,UACjB,SAArBF,EAAMC,YAA4C,QAAnBD,EAAME,SACpC,kBAACH,EAAA,EAAD,CAAmBC,MAAOA,IAE1B,oCACI,kBAACuJ,EAAA,EAAD,CACI3J,MAAOI,EAAM8F,UACb0D,QAASC,IACTC,UAAW,kBAAM1J,EAAM2J,qBAAoB,IAC3CR,QAASL,EACTvG,QAASwG,IAEb,kBAACQ,EAAA,EAAD,CACI3J,MAAOI,EAAM+F,QACbyD,QAASC,IACTC,UAAW,kBAAM1J,EAAM4J,mBAAkB,IACzCT,QAASL,EACTvG,QAAS0G,IAEb,kBAAC,GAAD,CAAcjJ,MAAOA,EAAOmJ,QAASL,EAAUzM,SAAUA,KAGhEwM,EAAMgB,SAA0B,OAAfhB,EAAMiB,MAAiB,kBAACC,EAAA,EAAD,CAAclB,MAAOA,MAKpEmB,GAAe,SAAC,GAQf,IAPHhK,EAOE,EAPFA,MACAmJ,EAME,EANFA,QACA9M,EAKE,EALFA,SAMMJ,EAAU8F,uBAAY,WACxBoH,EAAQ,IACRnJ,EAAM2F,QAAQsE,MAAMd,KACrB,CAACnJ,EAAM2F,MAAOwD,IACjB,OACI,kBAACe,EAAA,EAAD,CACItM,MAAOoC,EAAMC,YAAcD,EAAME,SAAW,UAAYF,EAAMC,WAAa,IAAMD,EAAME,SAAW,SAClG7D,SAAUA,EACVsL,QAAS3H,EAAMsF,OACfrJ,QAASA,KAKNkO,UA7OS,WACpB,OACI,kBAACC,EAAA,EAAD,KACI,kBAAC,IAAD,MACA,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAOnO,KAAM,kBACb,kBAACgE,EAAA,EAAD,CAAMoK,OAAO,GAAb,0DACA,kBAAC,EAAD,MACiB,QAAhBC,IAASC,IAAgB,kBAACC,EAAA,EAAD","file":"static/js/8.a13f65b8.chunk.js","sourcesContent":["import React, { FC } from \"react\";\n\nimport useColors from \"../hooks/useColors\";\nimport useLinker from \"../hooks/useLinker\";\nimport FlexView from \"./FlexView\";\nimport Text from \"./Text\";\n\nexport interface MetaProps {\n    label: string;\n    text?: string;\n    suffix?: string;\n    url?: string;\n    disabled?: boolean;\n}\n\nconst Meta: FC<MetaProps> = props => {\n    const { textMedium, textLight, placeholder } = useColors();\n    const onPress = useLinker(props.url || \"\", \"\", \"_blank\");\n    const text = props.disabled\n        ? \"N/A\"\n        : props.text\n        ? props.text + (props.suffix ? \" \" + props.suffix : \"\")\n        : \"Fetching…\";\n    return (\n        <FlexView style={{ justifyContent: \"space-between\", marginTop: 4 }}>\n            <Text fontWeight={\"bold\"} style={{ fontSize: 13, color: props.disabled ? placeholder : textMedium }}>\n                {props.label}\n            </Text>\n            <Text\n                onPress={props.url ? onPress : undefined}\n                style={{\n                    fontSize: 13,\n                    color: props.disabled ? placeholder : props.text ? textMedium : textLight,\n                    textDecorationLine: props.url ? \"underline\" : \"none\"\n                }}>\n                {text}\n            </Text>\n        </FlexView>\n    );\n};\n\nexport default Meta;\n","import React from \"react\";\nimport { View, ViewStyle } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useStyles from \"../hooks/useStyles\";\nimport Button from \"./Button\";\nimport Text from \"./Text\";\n\nexport interface NoticeProps {\n    text: string;\n    clear?: boolean;\n    color?: string;\n    buttonText?: string;\n    onPressButton?: () => void;\n    style?: ViewStyle;\n}\n\nconst Notice = (props: NoticeProps) => {\n    const { border } = useStyles();\n    const borderStyle = border({ color: props.color });\n    const color = props.color || borderStyle.borderColor;\n    return (\n        <View style={[props.clear ? { paddingHorizontal: Spacing.tiny } : borderStyle, props.style]}>\n            <Text\n                note={true}\n                style={{\n                    color\n                }}>\n                {props.text}\n            </Text>\n            {props.buttonText && props.onPressButton && (\n                <Button\n                    title={props.buttonText}\n                    type={\"clear\"}\n                    size={\"small\"}\n                    fontWeight={\"bold\"}\n                    onPress={props.onPressButton}\n                    titleStyle={{ color }}\n                    buttonStyle={{ paddingHorizontal: 0, paddingVertical: 0 }}\n                    style={{ alignSelf: \"flex-end\", marginTop: Spacing.tiny }}\n                />\n            )}\n        </View>\n    );\n};\n\nexport default Notice;\n","import React, { PropsWithChildren } from \"react\";\nimport { View, ViewProps } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport useStyles from \"../hooks/useStyles\";\n\nconst InfoBox = (props: PropsWithChildren<ViewProps>) => {\n    const { backgroundLight } = useColors();\n    const { border } = useStyles();\n    return (\n        <View\n            {...props}\n            style={[\n                {\n                    ...border({ color: backgroundLight }),\n                    backgroundColor: backgroundLight,\n                    marginTop: Spacing.normal + Spacing.small,\n                    padding: Spacing.small + Spacing.tiny\n                },\n                props.style\n            ]}\n        />\n    );\n};\n\nexport default InfoBox;\n","import React from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\n\nconst Border = () => {\n    const { border } = useColors();\n    return (\n        <View\n            style={{\n                height: 1,\n                width: \"100%\",\n                backgroundColor: border,\n                marginTop: Spacing.small,\n                marginBottom: Spacing.small + Spacing.tiny\n            }}\n        />\n    );\n};\n\nexport default Border;\n","import useAsyncEffect from \"use-async-effect\";\n\nconst handles = {};\n\nconst useDelayedEffect = (\n    effect: (isMounted: () => boolean) => unknown | Promise<unknown>,\n    timeout: number,\n    inputs?: any[]\n) => {\n    const key = effect.toString();\n    useAsyncEffect<number>(\n        () => {\n            const handle = setTimeout(effect, timeout);\n            handles[key] = handle;\n            return handle;\n        },\n        handle => {\n            clearTimeout(handle);\n        },\n        inputs\n    );\n};\nexport default useDelayedEffect;\n","import React from \"react\";\nimport { TextStyle } from \"react-native\";\n\nimport { ethers } from \"ethers\";\nimport Token from \"../types/Token\";\nimport { formatBalance } from \"../utils\";\nimport Text from \"./Text\";\n\nconst TokenAmount = (props: { token: Token; amount?: ethers.BigNumber; disabled?: boolean; style?: TextStyle }) => (\n    <Text caption={true} disabled={props.disabled} style={props.style}>\n        {formatBalance(props.amount || props.token.balance, props.token.decimals, 8)}\n    </Text>\n);\n\nexport default TokenAmount;\n","import React from \"react\";\n\nimport { TokenPairState } from \"../hooks/useTokenPairState\";\nimport Button from \"./Button\";\n\nconst UnsupportedButton = ({ state }: { state: TokenPairState }) => {\n    return <Button title={state.fromSymbol + \"-\" + state.toSymbol + \" Not Supported\"} disabled={true} />;\n};\n\nexport default UnsupportedButton;\n","import React from \"react\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport Token from \"../types/Token\";\nimport Text from \"./Text\";\n\nconst TokenName = (props: { token: Token; disabled?: boolean }) => (\n    <Text\n        caption={true}\n        numberOfLines={1}\n        ellipsizeMode={\"tail\"}\n        style={{ marginLeft: Spacing.small, width: 180 }}\n        disabled={props.disabled}>\n        {props.token.name}\n    </Text>\n);\n\nexport default TokenName;\n","import React, { FC, useCallback, useContext } from \"react\";\nimport { Platform, View } from \"react-native\";\n\nimport { ethers } from \"ethers\";\nimport { Spacing } from \"../constants/dimension\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport useColors from \"../hooks/useColors\";\nimport useStyles from \"../hooks/useStyles\";\nimport Token from \"../types/Token\";\nimport { findOrFetchToken } from \"../utils/fetch-utils\";\nimport Button from \"./Button\";\nimport FlexView from \"./FlexView\";\nimport Input from \"./Input\";\n\nexport interface TokenSearchProps {\n    tokens?: Token[];\n    text: string;\n    onChangeText: (text: string) => void;\n    onAddToken?: (token: Token) => void;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst TokenSearch: FC<TokenSearchProps> = props => {\n    const { border } = useStyles();\n    if (!props.tokens) {\n        return <View />;\n    }\n    // const isAddress = ethers.utils.isAddress(props.text.trim());\n    return (\n        <FlexView style={{ marginBottom: Spacing.small }}>\n            <Input\n                value={props.text}\n                onChangeText={props.onChangeText}\n                placeholder={\"Search for a token… (name or symbol)\"}\n                autoFocus={true}\n                inputStyle={{ marginHorizontal: Spacing.tiny, fontSize: props.text ? 20 : 16 }}\n                inputContainerStyle={{ borderBottomWidth: 0, marginRight: 40 }}\n                labelStyle={{ height: 0 }}\n                containerStyle={{\n                    ...border(),\n                    paddingHorizontal: Spacing.tiny,\n                    paddingTop: 12,\n                    paddingBottom: 0\n                }}\n            />\n            {/*{isAddress && <AddButton address={props.text} onAddToken={props.onAddToken} />}*/}\n        </FlexView>\n    );\n};\n\nconst AddButton = (props: { address: string; onAddToken? }) => {\n    const { provider, signer, getTokenBalance } = useContext(EthersContext);\n    const { accent } = useColors();\n    const onPress = useCallback(async () => {\n        const address = props.address.trim();\n        if (provider && signer && ethers.utils.isAddress(address)) {\n            const token = await findOrFetchToken(provider, address);\n            const balance = await getTokenBalance(address, await signer.getAddress());\n            props.onAddToken?.({\n                ...token,\n                balance\n            } as Token);\n        }\n    }, [provider, signer, props.address]);\n    return (\n        <View style={{ position: \"absolute\", right: 12, bottom: Platform.OS === \"web\" ? 10 : 20 }}>\n            <Button\n                type={\"clear\"}\n                size={\"small\"}\n                color={accent}\n                title={\"Add\"}\n                fontWeight={\"bold\"}\n                onPress={onPress}\n                buttonStyle={{ paddingHorizontal: 4 }}\n            />\n        </View>\n    );\n};\n\nexport default TokenSearch;\n","import React, { FC, useCallback, useContext, useEffect, useMemo, useState } from \"react\";\nimport { FlatList, View, ViewStyle } from \"react-native\";\n\nimport { ethers } from \"ethers\";\nimport { Spacing } from \"../constants/dimension\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport useDelayedEffect from \"../hooks/useDelayedEffect\";\nimport Token from \"../types/Token\";\nimport Expandable from \"./Expandable\";\nimport FlexView from \"./FlexView\";\nimport { ITEM_SEPARATOR_HEIGHT } from \"./ItemSeparator\";\nimport Loading from \"./Loading\";\nimport Selectable from \"./Selectable\";\nimport Text from \"./Text\";\nimport TokenAmount from \"./TokenAmount\";\nimport TokenLogo from \"./TokenLogo\";\nimport TokenName from \"./TokenName\";\nimport TokenSearch from \"./TokenSearch\";\nimport TokenSymbol from \"./TokenSymbol\";\n\nexport interface TokenSelectProps {\n    title: string;\n    symbol: string;\n    onChangeSymbol: (symbol: string) => void;\n    disabled?: (token: Token) => boolean;\n    hidden?: (token: Token) => boolean;\n    onAddToken?: (token: Token) => void;\n    style?: ViewStyle;\n}\n\nconst TokenSelect: FC<TokenSelectProps> = props => {\n    const { tokens } = useContext(EthersContext);\n    const [search, setSearch] = useState(\"\");\n    const [query, setQuery] = useState(\"\");\n    const token = useMemo(() => tokens.find(t => t.symbol === props.symbol), [tokens, props.symbol]);\n    const onSelectToken = t => props.onChangeSymbol(t.symbol);\n    const onUnselectToken = () => props.onChangeSymbol(\"\");\n    const hidden = (t: Token) => {\n        let hide = props.hidden?.(t) || false;\n        if (!hide && query.length > 0 && !ethers.utils.isAddress(query)) {\n            hide = !t.symbol.toLowerCase().includes(query) && !t.name.toLowerCase().includes(query);\n        }\n        return hide;\n    };\n    useEffect(() => setSearch(\"\"), [props.symbol]);\n    useDelayedEffect(() => setQuery(search.trim().toLowerCase()), 300, [search]);\n    return (\n        <View style={props.style}>\n            <Expandable title={props.title} expanded={!props.symbol} onExpand={() => props.onChangeSymbol(\"\")}>\n                <TokenSearch text={search} onChangeText={setSearch} tokens={tokens} onAddToken={props.onAddToken} />\n                <TokenList disabled={props.disabled} hidden={hidden} onSelectToken={onSelectToken} />\n            </Expandable>\n            {token && <TokenItem token={token} selected={true} onSelectToken={onUnselectToken} selectable={true} />}\n        </View>\n    );\n};\n\n// tslint:disable-next-line:max-func-body-length\nconst TokenList = (props: {\n    onSelectToken: (token: Token) => void;\n    disabled?: (token: Token) => boolean;\n    hidden?: (token: Token) => boolean;\n}) => {\n    const { loadingTokens, tokens } = useContext(EthersContext);\n    const renderItem = useCallback(\n        ({ item }) => {\n            return (\n                <TokenItem\n                    key={item.address}\n                    token={item}\n                    selected={false}\n                    onSelectToken={props.onSelectToken}\n                    disabled={props.disabled?.(item)}\n                />\n            );\n        },\n        [props.onSelectToken, props.disabled]\n    );\n    const data = useMemo(\n        () =>\n            tokens\n                .filter(token => (props.hidden ? !props.hidden(token) : true))\n                .sort(\n                    (t1, t2) =>\n                        (t2.balance.isZero() ? 0 : 10000000000) -\n                        (t1.balance.isZero() ? 0 : 10000000000) +\n                        t1.symbol.localeCompare(t2.symbol)\n                ),\n        [tokens, props.hidden]\n    );\n    return loadingTokens ? (\n        <Loading />\n    ) : data.length === 0 ? (\n        <EmptyList />\n    ) : (\n        <FlatList keyExtractor={item => item.address} data={data} renderItem={renderItem} />\n    );\n};\n\nconst EmptyList = () => {\n    return (\n        <View style={{ margin: Spacing.normal }}>\n            <Text disabled={true} style={{ textAlign: \"center\", width: \"100%\" }}>\n                {\"You don't have any matching tokens.\"}\n            </Text>\n        </View>\n    );\n};\n\nconst TokenItem = (props: {\n    token: Token;\n    selected: boolean;\n    onSelectToken: (token: Token) => void;\n    disabled?: boolean;\n    selectable?: boolean;\n}) => {\n    const onPress = useCallback(() => {\n        props.onSelectToken(props.token);\n    }, [props.onSelectToken, props.token]);\n    return (\n        <Selectable\n            selected={props.selected}\n            onPress={onPress}\n            disabled={props.disabled || props.selectable}\n            style={{\n                marginBottom: ITEM_SEPARATOR_HEIGHT\n            }}>\n            <FlexView style={{ alignItems: \"center\" }}>\n                <TokenLogo token={props.token} disabled={props.disabled} />\n                <TokenName token={props.token} disabled={props.disabled} />\n                <TokenAmount token={props.token} disabled={props.disabled} style={{ flex: 1, textAlign: \"right\" }} />\n                <TokenSymbol token={props.token} disabled={props.disabled} />\n            </FlexView>\n        </Selectable>\n    );\n};\n\nexport default TokenSelect;\n","import { useCallback, useContext, useState } from \"react\";\n\nimport { EthersContext } from \"../context/EthersContext\";\nimport { parseBalance } from \"../utils\";\nimport useLiquidityState, { LiquidityState } from \"./useLiquidityState\";\nimport useSDK from \"./useSDK\";\n\nexport interface AddLiquidityState extends LiquidityState {\n    onAdd: () => Promise<void>;\n    adding: boolean;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst useAddLiquidityState: () => AddLiquidityState = () => {\n    const state = useLiquidityState();\n    const { signer, updateTokens } = useContext(EthersContext);\n    const [adding, setAdding] = useState(false);\n    const { addLiquidity, addLiquidityETH } = useSDK();\n\n    const onAdd = useCallback(async () => {\n        if (state.fromToken && state.toToken && state.fromAmount && state.toAmount && signer) {\n            setAdding(true);\n            try {\n                const fromAmount = parseBalance(state.fromAmount, state.fromToken.decimals);\n                const toAmount = parseBalance(state.toAmount, state.toToken.decimals);\n                if (state.fromSymbol === \"ETH\" || state.toSymbol === \"ETH\") {\n                    const [token, amount, amountETH] =\n                        state.fromSymbol === \"ETH\"\n                            ? [state.toToken, toAmount, fromAmount]\n                            : [state.fromToken, fromAmount, toAmount];\n                    const tx = await addLiquidityETH(token, amount, amountETH, signer);\n                    await tx.wait();\n                } else {\n                    const tx = await addLiquidity(state.fromToken, state.toToken, fromAmount, toAmount, signer);\n                    await tx.wait();\n                }\n                await updateTokens();\n                state.setFromSymbol(\"\");\n            } finally {\n                setAdding(false);\n            }\n        }\n    }, [state.fromToken, state.toToken, state.fromAmount, state.toAmount, signer]);\n\n    return {\n        ...state,\n        onAdd,\n        adding\n    };\n};\n\nexport default useAddLiquidityState;\n","import React, { useCallback, useState } from \"react\";\nimport { Platform, View } from \"react-native\";\n\nimport useAsyncEffect from \"use-async-effect\";\nimport ApproveButton from \"../components/ApproveButton\";\nimport Border from \"../components/Border\";\nimport Button from \"../components/Button\";\nimport Container from \"../components/Container\";\nimport Content from \"../components/Content\";\nimport ErrorMessage from \"../components/ErrorMessage\";\nimport FetchingButton from \"../components/FetchingButton\";\nimport Heading from \"../components/Heading\";\nimport InfoBox from \"../components/InfoBox\";\nimport InsufficientBalanceButton from \"../components/InsufficientBalanceButton\";\nimport ItemSeparator from \"../components/ItemSeparator\";\nimport Meta from \"../components/Meta\";\nimport Notice from \"../components/Notice\";\nimport Text from \"../components/Text\";\nimport Title from \"../components/Title\";\nimport TokenInput from \"../components/TokenInput\";\nimport TokenSelect from \"../components/TokenSelect\";\nimport UnsupportedButton from \"../components/UnsupportedButton\";\nimport WebFooter from \"../components/web/WebFooter\";\nimport { LiquiditySubMenu } from \"../components/web/WebSubMenu\";\nimport { ROUTER } from \"../constants/contracts\";\nimport { Spacing } from \"../constants/dimension\";\nimport Fraction from \"../constants/Fraction\";\nimport useAddLiquidityState, { AddLiquidityState } from \"../hooks/useAddLiquidityState\";\nimport useColors from \"../hooks/useColors\";\nimport useSDK from \"../hooks/useSDK\";\nimport MetamaskError from \"../types/MetamaskError\";\nimport { convertAmount, convertToken, isEmptyValue, parseBalance } from \"../utils\";\nimport Screen from \"./Screen\";\n\nconst LiquidityScreen = () => {\n    return (\n        <Screen>\n            <LiquiditySubMenu />\n            <Container>\n                <Content>\n                    <Title text={\"Add Liquidity\"} />\n                    <Text light={true}>Add liquidity to a pool and get LP tokens of the pair.</Text>\n                    <AddLiquidity />\n                    {Platform.OS === \"web\" && <WebFooter />}\n                </Content>\n            </Container>\n        </Screen>\n    );\n};\n\nconst AddLiquidity = () => {\n    const state = useAddLiquidityState();\n    return (\n        <View style={{ marginTop: Spacing.large }}>\n            <TokenSelect\n                title={\"1st Token\"}\n                symbol={state.fromSymbol}\n                onChangeSymbol={state.setFromSymbol}\n                hidden={token => token.balance.isZero()}\n            />\n            <Border />\n            <ToTokenSelect state={state} />\n            <Border />\n            <FromTokenInput state={state} />\n            <ItemSeparator />\n            <ToTokenInput state={state} />\n            <ItemSeparator />\n            <PriceInfo state={state} />\n        </View>\n    );\n};\n\nconst ToTokenSelect = ({ state }: { state: AddLiquidityState }) => {\n    if (!state.fromSymbol) {\n        return <Heading text={\"2nd Token\"} disabled={true} />;\n    }\n    return (\n        <View>\n            <TokenSelect\n                title={\"2nd Token\"}\n                symbol={state.toSymbol}\n                onChangeSymbol={state.setToSymbol}\n                hidden={token => token.symbol === state.fromSymbol || token.balance.isZero()}\n            />\n        </View>\n    );\n};\n\nconst FromTokenInput = ({ state }: { state: AddLiquidityState }) => {\n    if (!state.fromSymbol || !state.toSymbol) {\n        return <Heading text={\"Amount of Tokens\"} disabled={true} />;\n    }\n    const onAmountChanged = (newAmount: string) => {\n        state.setFromAmount(newAmount);\n        if (state.pair && state.fromToken) {\n            const fromPrice = state.pair.priceOf(convertToken(state.fromToken));\n            const toAmount = fromPrice.quote(convertAmount(state.fromToken, newAmount)).toExact();\n            state.setToAmount(isEmptyValue(toAmount) ? \"\" : toAmount);\n        }\n    };\n    return (\n        <TokenInput\n            title={\"Amount of Tokens\"}\n            token={state.fromToken}\n            amount={state.fromAmount}\n            onAmountChanged={onAmountChanged}\n            hideMaxButton={state.loading && !state.pair}\n        />\n    );\n};\n\nconst ToTokenInput = ({ state }: { state: AddLiquidityState }) => {\n    if (!state.fromSymbol || !state.toSymbol) {\n        return <View />;\n    }\n    const onAmountChanged = (newAmount: string) => {\n        state.setToAmount(newAmount);\n        if (state.pair && state.toToken) {\n            const toPrice = state.pair.priceOf(convertToken(state.toToken));\n            const fromAmount = toPrice.quote(convertAmount(state.toToken, newAmount)).toExact();\n            state.setFromAmount(isEmptyValue(fromAmount) ? \"\" : fromAmount);\n        }\n    };\n    return (\n        <TokenInput\n            token={state.toToken}\n            amount={state.toAmount}\n            onAmountChanged={onAmountChanged}\n            hideMaxButton={state.loading && !state.pair}\n        />\n    );\n};\n\nconst PriceInfo = ({ state }: { state: AddLiquidityState }) => {\n    if (state.fromToken && state.toToken && !state.loading && !state.pair) {\n        return <FirstProviderInfo state={state} />;\n    } else {\n        return <PairPriceInfo state={state} />;\n    }\n};\n\nconst FirstProviderInfo = ({ state }: { state: AddLiquidityState }) => {\n    const { green } = useColors();\n    const noAmount = isEmptyValue(state.fromAmount) || isEmptyValue(state.toAmount);\n    const initialPrice = Fraction.from(\n        parseBalance(state.toAmount, state.toToken!.decimals),\n        parseBalance(state.fromAmount, state.fromToken!.decimals)\n    ).toString(8);\n    return (\n        <View>\n            <InfoBox style={{ marginTop: Spacing.normal }}>\n                <PriceMeta state={state} price={initialPrice} disabled={noAmount} />\n            </InfoBox>\n            <Notice\n                text={\n                    \"You are the first liquidity provider.\\n\" +\n                    \"The ratio of tokens you add will set the price of this pool.\"\n                }\n                color={green}\n                style={{ marginTop: Spacing.small }}\n            />\n        </View>\n    );\n};\n\nconst PairPriceInfo = ({ state }: { state: AddLiquidityState }) => {\n    const [amount, setAmount] = useState<string>();\n    const { textDark, textLight, placeholder } = useColors();\n    const { calculateAmountOfLPTokenMinted } = useSDK();\n    useAsyncEffect(async () => {\n        if (state.pair && !isEmptyValue(state.fromAmount) && !isEmptyValue(state.toAmount)) {\n            const minted = await calculateAmountOfLPTokenMinted(\n                state.pair,\n                convertAmount(state.fromToken!, state.fromAmount),\n                convertAmount(state.toToken!, state.toAmount)\n            );\n            setAmount(minted?.toFixed(8));\n        }\n    }, [state.pair, state.fromAmount, state.toAmount]);\n    const disabled = isEmptyValue(state.fromAmount) || isEmptyValue(state.toAmount);\n    const price =\n        state.pair && state.fromToken ? state.pair.priceOf(convertToken(state.fromToken)).toFixed(8) : undefined;\n    const color = disabled ? placeholder : amount ? textDark : textLight;\n    const symbol = state.fromSymbol + \"-\" + state.toSymbol;\n    return (\n        <InfoBox>\n            <Text style={{ fontSize: 28, marginBottom: Spacing.normal, color }}>\n                {disabled ? \"N/A\" : amount ? amount + \" \" + symbol : \"Fetching…\"}\n            </Text>\n            <PriceMeta state={state} price={price} disabled={!state.fromSymbol || !state.toSymbol} />\n            <Controls state={state} />\n        </InfoBox>\n    );\n};\n\nconst PriceMeta = ({ state, price, disabled }) => (\n    <Meta label={\"Price\"} text={price} suffix={state.toSymbol + \" = 1 \" + state.fromSymbol} disabled={disabled} />\n);\n\n// tslint:disable-next-line:max-func-body-length\nconst Controls = ({ state }: { state: AddLiquidityState }) => {\n    const [error, setError] = useState<MetamaskError>({});\n    useAsyncEffect(() => setError({}), [state.fromSymbol, state.toSymbol, state.fromAmount]);\n    const fromApproveRequired = state.fromSymbol !== \"ETH\" && !state.fromTokenAllowed;\n    const toApproveRequired = state.toSymbol !== \"ETH\" && !state.toTokenAllowed;\n    const disabled =\n        fromApproveRequired || toApproveRequired || isEmptyValue(state.fromAmount) || isEmptyValue(state.toAmount);\n    return (\n        <View style={{ marginTop: Spacing.normal }}>\n            {!state.fromToken ||\n            !state.toToken ||\n            state.loading ||\n            isEmptyValue(state.fromAmount) ||\n            isEmptyValue(state.toAmount) ? (\n                <SupplyButton state={state} onError={setError} disabled={true} />\n            ) : state.loading || !state.pair ? (\n                <FetchingButton />\n            ) : parseBalance(state.fromAmount, state.fromToken.decimals).gt(state.fromToken.balance) ? (\n                <InsufficientBalanceButton symbol={state.fromSymbol} />\n            ) : parseBalance(state.toAmount, state.toToken.decimals).gt(state.toToken.balance) ? (\n                <InsufficientBalanceButton symbol={state.toSymbol} />\n            ) : (state.fromSymbol === \"ETH\" && state.toSymbol === \"WETH\") ||\n              (state.fromSymbol === \"WETH\" && state.toSymbol === \"ETH\") ? (\n                <UnsupportedButton state={state} />\n            ) : (\n                <>\n                    <ApproveButton\n                        token={state.fromToken}\n                        spender={ROUTER}\n                        onSuccess={() => state.setFromTokenAllowed(true)}\n                        onError={setError}\n                        hidden={!fromApproveRequired}\n                    />\n                    <ApproveButton\n                        token={state.toToken}\n                        spender={ROUTER}\n                        onSuccess={() => state.setToTokenAllowed(true)}\n                        onError={setError}\n                        hidden={!toApproveRequired}\n                    />\n                    <SupplyButton state={state} onError={setError} disabled={disabled} />\n                </>\n            )}\n            {error.message && error.code !== 4001 && <ErrorMessage error={error} />}\n        </View>\n    );\n};\n\nconst SupplyButton = ({\n    state,\n    onError,\n    disabled\n}: {\n    state: AddLiquidityState;\n    onError: (e) => void;\n    disabled: boolean;\n}) => {\n    const onPress = useCallback(() => {\n        onError({});\n        state.onAdd().catch(onError);\n    }, [state.onAdd, onError]);\n    return (\n        <Button\n            title={state.fromSymbol && state.toSymbol ? \"Supply \" + state.fromSymbol + \"-\" + state.toSymbol : \"Supply\"}\n            disabled={disabled}\n            loading={state.adding}\n            onPress={onPress}\n        />\n    );\n};\n\nexport default LiquidityScreen;\n"],"sourceRoot":""}