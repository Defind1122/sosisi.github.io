{"version":3,"sources":["src/constants/dimension.ts","src/constants/linking.ts","src/constants/tokens.ts","src/utils/index.ts","src/context/EthersContext.tsx","src/hooks/useSDK.tsx","src/context/GlobalContext.tsx","src/constants/colors.ts","src/hooks/useColors.tsx","src/components/FlexView.tsx","src/components/Text.tsx","src/components/Header.tsx","src/components/MobileNotSupported.tsx","src/context/index.tsx","src/hooks/useStyles.tsx","src/components/Button.tsx","src/components/ApproveButton.tsx","src/components/ButtonGroup.tsx","src/components/CloseIcon.tsx","src/components/Column.tsx","src/components/Container.tsx","src/components/Content.tsx","src/components/ErrorMessage.tsx","src/components/FetchingButton.tsx","src/components/InsufficientBalanceButton.tsx","src/components/Border.tsx","src/components/Subtitle.tsx","src/components/LPTokenSelect.tsx","src/components/Meta.tsx","src/components/Notice.tsx","src/components/SelectIcon.tsx","src/components/Input.tsx","src/components/TokenInput.tsx","src/hooks/useTokenPairState.tsx","src/hooks/useLiquidityState.tsx","src/hooks/useLPTokensState.tsx","src/hooks/useFarmingState.tsx","src/components/ConnectToWallet.tsx","src/components/Footer.tsx","src/components/Status.tsx","src/screens/Screen.tsx","src/screens/FarmingScreen.tsx","src/components/TokenSelect.tsx","src/components/UnsupportedButton.tsx","src/components/AddLiquidity.tsx","src/components/RemoveLiquidity.tsx","src/hooks/useAddLiquidityState.tsx","src/hooks/useRemoveLiquidityState.tsx","src/screens/LiquidityScreen.tsx","src/hooks/useSwapState.tsx","src/screens/SwapScreen.tsx","App.tsx","web-build/register-service-worker.js","node_modules/@levx/sushiswap-core/build/contracts sync /^/.//.*/.json$","assets/levx-typography-dark.png","assets/levx-typography.png","assets/sushiswap.jpg","assets/metamask-dark.png","assets/metamask.png"],"names":["SCREEN_HEIGHT","Math","round","Dimensions","get","width","height","Spacing","tiny","small","normal","large","huge","content","linking","prefixes","config","screens","Home","Liquidity","Farming","ETH","address","ethers","constants","AddressZero","decimals","symbol","logoURI","balance","BigNumber","from","formatBalance","value","maxFraction","formatted","utils","formatUnits","split","length","substr","parseBalance","parseUnits","isEmptyValue","text","isBigNumber","isZero","replaceAll","convertToken","token","WETH","SDKToken","ChainId","MAINNET","convertAmount","amount","TokenAmount","toString","parseCurrencyAmount","toExact","getContract","name","signer","abi","require","ContractFactory","EthersContext","React","createContext","provider","undefined","chainId","addOnBlockListener","listener","removeOnBlockListener","getToken","a","async","approveToken","spender","getTokenAllowance","Zero","EthersContextProvider","children","useState","setProvider","setSigner","setChainId","setAddress","onBlockListeners","setOnBlockListeners","useAsyncEffect","window","ethereum","web3","providers","Web3Provider","alchemy","AlchemyProvider","network","process","API_KEY","getSigner","useEffect","onAccountsChanged","selectedAddress","onChainChanged","getNetwork","on","off","useCallback","send","meta","logo","MaxUint256","erc20","estimateGas","approve","gasLimit","getAddress","contract","owner","old","onBlock","block","Object","entries","Provider","Consumer","ROUTER","MASTER_CHEF","findOrGetToken","tokens","find","t","toLowerCase","minAmount","percent","sub","mul","numerator","div","denominator","useSDK","useContext","GlobalContext","allowedSlippage","Percent","getTrade","fromToken","toToken","fromAmount","isETH","to","Fetcher","fetchPairData","pair","route","Route","ETHER","CurrencyAmount","ether","Trade","exactIn","swap","trade","Router","feeOnTransfer","recipient","ttl","params","swapCallParameters","router","methodName","args","functions","tx","wrapETH","weth","deposit","unwrapETH","withdraw","getPair","addLiquidity","toAmount","deadline","floor","Date","getTime","removeLiquidityETH","liquidity","amountETH","removeLiquidity","addLiquidityETH","getExpectedSushiRewardPerBlock","masterChef","totalAllocPoint","sushiPerBlock","poolInfo","id","allocPoint","lpTokenId","getTokens","fetch","response","json","account","map","balances","getBalance","i","tokenBalances","tokenBalance","sort","t1","t2","pow","toNumber","getMyLPTokens","factory","FACTORY_ADDRESS","allPairsLength","Promise","all","Array","_","allPairs","pairs","Number","totalSupply","token0","tokenA","token1","tokenB","result","filter","getPools","pools","pool","poolToken","balanceOf","totalDeposited","calculateFee","load","clear","darkMode","setDarkMode","updateTokens","loadingTokens","tradeHistory","addToTradeHistory","GlobalContextProvider","colorScheme","useColorScheme","setTokens","setLoadingTokens","setTradeHistory","data","AsyncStorage","getItem","mode","JSON","parse","removeItem","setItem","String","list","push","newHistory","stringify","Colors","common","white","transparent","primary","secondary","green","twitter","facebook","light","background","backgroundHovered","border","borderDark","textDark","textMedium","textLight","disabled","shadow","placeholder","underlay","dark","useColors","FlexView","props","flexDirection","direction","View","style","Text","fontFamily","fontWeight","h1Style","h2Style","h3Style","h4Style","fontSize","note","caption","color","medium","Title","alignSelf","alignItems","Image","source","Menu","title","routeName","MenuItem","current","setCurrent","useRoute","marginLeft","marginBottom","padding","position","left","right","bottom","backgroundColor","Stats","target","type","size","marginTop","DarkModeSwitch","onChange","transform","scale","Header","top","paddingBottom","flex","justifyContent","paddingTop","paddingHorizontal","Social","onPressTwitter","Linking","onPressGithub","onPressDiscord","reverseColor","reverse","raised","onPress","MobileNotSupported","ContextProvider","useStyles","shadowColor","borderRadius","elevation","shadowOffset","shadowOpacity","shadowRadius","overflow","Button","buttonStyle","borderColor","titleStyle","containerStyle","ApproveButton","loading","setLoading","onError","wait","onSuccess","hidden","ButtonGroup","selectedButtonStyle","marginHorizontal","marginVertical","CloseIcon","Column","noTopMargin","Container","ScrollView","nestedScrollEnabled","contentContainerStyle","Content","multiplier","contentPadding","paddingVertical","ErrorMessage","error","borderWidth","code","message","FetchingButton","InsufficientBalanceButton","Border","Subtitle","LPTokenList","state","emptyText","Item","renderItem","item","key","selected","onSelectToken","setSelectedLPToken","lpTokens","ActivityIndicator","FlatList","keyExtractor","ItemSeparatorComponent","EmptyList","margin","textAlign","LPTokenSelect","onUnselectToken","selectedLPToken","Meta","label","Notice","SelectIcon","Input","onChangeText","errors","forbidden","forEach","validation","match","regexp","allowed","join","inputStyle","outline","labelStyle","placeholderTextColor","errorStyle","MaxButton","onPressMax","fee","gt","updateAmount","TokenInput","onAmountChanged","e","endsWith","indexOf","useTokenPairState","fromSymbol","setFromSymbol","toSymbol","setToSymbol","setFromAmount","setToAmount","fromTokenAllowed","setFromTokenAllowed","toTokenAllowed","setToTokenAllowed","wrapping","setWrapping","unwrapping","setUnwrapping","minAllowance","fromAllowance","gte","toAllowance","onWrap","onUnwrap","useLiquidityState","setPair","updatePair","useLPTokensState","loadPools","setLPTokens","selectedLPTokenAllowed","setSelectedLPTokenAllowed","setAmount","updateLPTokens","method","useFarmingState","action","setAction","expectedSushiRewardPerBlock","setExpectedSushiRewardPerBlock","amountDeposited","setAmountDeposited","pendingSushi","setPendingSushi","depositing","setDepositing","withdrawing","setWithdrawing","userInfo","pending","allowance","onDeposit","onWithdraw","ConnectWallet","enable","Link","textDecorationLine","marginRight","Footer","Status","connected","Screen","ConnectToWallet","h4","TokenItem","hovered","TouchableHighlight","LogoSymbol","uri","ActionSelect","actions","index","radius","selectedIndex","buttons","borderTopLeftRadius","borderBottomLeftRadius","borderTopRightRadius","borderBottomRightRadius","Deposit","AddLiquidityNotice","DepositInfo","sushiReward","DepositControls","setError","approveRequired","AddLiquidityButton","navigate","useNavigation","DepositButton","catch","Withdraw","NoLPTokenNotice","WithdrawInfo","WithdrawControls","WithdrawButton","FarmingScreen","TokenList","useMemo","filterTokens","localeCompare","TokenSelect","onChangeSymbol","UnsupportedButton","FromTokenInput","newAmount","fromPrice","priceOf","quote","ToTokenInput","toPrice","PriceInfo","initialPrice","price","toSignificant","Price","Controls","insufficientFromToken","insufficientToToken","fromApproveRequired","toApproveRequired","SupplyButton","onAdd","adding","AddLiquidity","AmountInfo","ArrowDown","Amount","RemoveButton","onRemove","removing","RemoveLiquidity","useAddLiquidityState","setAdding","useRemoveLiquidityState","setRemoving","liquidityToken","fromReserve","reserveOf","toReserve","amountToRemove","amountToRemoveETH","OR","Line","LiquidityScreen","addLiquidityState","removeLiquidityState","useSwapState","setTrade","unsupported","setUnsupported","swapping","setSwapping","updateTrade","onSwap","Swap","TradeInfo","WrapInfo","SwapInfo","outputAmount","executionPrice","impact","priceImpact","SwapButton","WrapButton","UnwrapButton","SwapScreen","Stack","createStackNavigator","Main","Navigation","theme","DefaultTheme","colors","card","notification","NavigationContainer","Navigator","screenOptions","header","component","App","deviceType","setDeviceType","useFonts","UnicaOne_400Regular","OpenSans_300Light","regular","OpenSans_400Regular","bold","OpenSans_700Bold","fontsLoaded","getDeviceTypeAsync","DeviceType","PHONE","AppLoading","navigator","addEventListener","serviceWorker","register","scope","then","info","console","webpackContext","req","webpackContextResolve","__webpack_require__","o","Error","keys","resolve","module","exports"],"mappings":"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","file":"static/js/app.be718fa4.chunk.js","sourcesContent":["import { Dimensions } from \"react-native\";\n\nexport const SCREEN_WIDTH = Math.round(Dimensions.get(\"window\").width);\nexport const SCREEN_HEIGHT = Math.round(Dimensions.get(\"window\").height);\nexport const IS_HIGH_RESOLUTION = SCREEN_HEIGHT > 667;\nexport const HEADER_HEIGHT = 96;\n\nexport const Spacing = IS_HIGH_RESOLUTION\n    ? {\n          tiny: 8,\n          small: 16,\n          normal: 32,\n          large: 48,\n          huge: 64,\n          content: 40\n      }\n    : {\n          tiny: 6,\n          small: 12,\n          normal: 24,\n          large: 32,\n          huge: 48,\n          content: 30\n      };\n","const linking = {\n    prefixes: [\"https://sushiswap.levx.io\"],\n    config: {\n        screens: {\n            Home: \"\",\n            Liquidity: \"liquidity\",\n            Farming: \"farming\"\n        }\n    }\n};\n\nexport default linking;\n","import { ethers } from \"ethers\";\nimport Token from \"../types/Token\";\n\nexport const ETH: Token = {\n    address: ethers.constants.AddressZero,\n    decimals: 18,\n    symbol: \"ETH\",\n    logoURI: \"/images/tokens/ETH.png\",\n    balance: ethers.BigNumber.from(0)\n};\n","import { ChainId, CurrencyAmount, Token as SDKToken, TokenAmount, WETH } from \"@levx/sushiswap-sdk\";\nimport { ethers } from \"ethers\";\nimport Token from \"../types/Token\";\n\nexport const formatBalance = (value: ethers.BigNumberish, decimals = 18, maxFraction = 0) => {\n    const formatted = ethers.utils.formatUnits(value, decimals);\n    if (maxFraction > 0) {\n        const split = formatted.split(\".\");\n        if (split.length > 1) {\n            return split[0] + \".\" + split[1].substr(0, maxFraction);\n        }\n    }\n    return formatted;\n};\n\nexport const parseBalance = (value: string, decimals = 18) => {\n    return ethers.utils.parseUnits(value || \"0\", decimals);\n};\n\nexport const isEmptyValue = (text: string) =>\n    ethers.BigNumber.isBigNumber(text)\n        ? ethers.BigNumber.from(text).isZero()\n        : text === \"\" || text.replaceAll(\"0\", \"\").replaceAll(\".\", \"\") === \"\";\n\nexport const convertToken = (token: Token) => {\n    return token.symbol === \"ETH\" ? WETH[\"1\"] : new SDKToken(ChainId.MAINNET, token.address, token.decimals);\n};\n\nexport const convertAmount = (token: Token, amount: string) => {\n    return new TokenAmount(convertToken(token), parseBalance(amount, token.decimals).toString());\n};\n\nexport const parseCurrencyAmount = (value: CurrencyAmount, decimals = 18) => {\n    return ethers.BigNumber.from(parseBalance(value.toExact(), decimals));\n};\n\nexport const getContract = (name: string, address: string, signer: ethers.Signer) => {\n    const { abi } = require(\"@levx/sushiswap-core/build/contracts/\" + name + \".json\");\n    return ethers.ContractFactory.getContract(address, abi, signer);\n};\n","import React, { useCallback, useEffect, useState } from \"react\";\n\nimport { EventType, Listener } from \"@ethersproject/abstract-provider\";\nimport { ethers } from \"ethers\";\nimport useAsyncEffect from \"use-async-effect\";\nimport Token from \"../types/Token\";\nimport { getContract } from \"../utils\";\n\nexport type OnBlockListener = (block: number) => Promise<void>;\n\nexport const EthersContext = React.createContext({\n    provider: undefined as ethers.providers.JsonRpcProvider | undefined,\n    signer: undefined as ethers.providers.JsonRpcSigner | undefined,\n    chainId: 0,\n    address: null as string | null,\n    addOnBlockListener: (name: string, listener: OnBlockListener) => {},\n    removeOnBlockListener: (name: string) => {},\n    getToken: async (token: string) => {\n        return {} as Token | undefined;\n    },\n    approveToken: async (token: string, spender: string, amount?: ethers.BigNumber) => {\n        return {} as ethers.providers.TransactionResponse;\n    },\n    getTokenAllowance: async (token: string, spender: string) => {\n        return ethers.constants.Zero as ethers.BigNumber | undefined;\n    }\n});\n\n// tslint:disable-next-line:max-func-body-length\nexport const EthersContextProvider = ({ children }) => {\n    const [provider, setProvider] = useState<ethers.providers.JsonRpcProvider>();\n    const [signer, setSigner] = useState<ethers.providers.JsonRpcSigner>();\n    const [chainId, setChainId] = useState<number>(1);\n    const [address, setAddress] = useState<string | null>(ethers.constants.AddressZero);\n    const [onBlockListeners, setOnBlockListeners] = useState<{ [name: string]: OnBlockListener }>({});\n\n    useAsyncEffect(async () => {\n        if (window.ethereum) {\n            const web3 = new ethers.providers.Web3Provider(window.ethereum);\n            const alchemy = new ethers.providers.AlchemyProvider(web3.network, process.env.API_KEY);\n            setProvider(alchemy);\n            setSigner(await web3.getSigner());\n        }\n    }, [window.ethereum]);\n\n    useEffect(() => {\n        if (window.ethereum) {\n            const onAccountsChanged = () => {\n                setAddress(window.ethereum.selectedAddress);\n            };\n            const onChainChanged = async () => {\n                const network = await signer?.provider?.getNetwork();\n                if (network) {\n                    setChainId(network.chainId);\n                }\n            };\n            onAccountsChanged();\n            onChainChanged();\n            window.ethereum.on(\"accountsChanged\", onAccountsChanged);\n            window.ethereum.on(\"chainChanged\", onChainChanged);\n            return () => {\n                window.ethereum.off(\"accountsChanged\", onAccountsChanged);\n                window.ethereum.off(\"chainChanged\", onAccountsChanged);\n            };\n        }\n    }, [window.ethereum, signer]);\n\n    const getToken = useCallback(\n        async (token: string) => {\n            if (provider && signer) {\n                const meta = await provider.send(\"alchemy_getTokenMetadata\", [token]);\n                return {\n                    address: token,\n                    symbol: meta.symbol,\n                    decimals: meta.decimals,\n                    logoURI: meta.logo,\n                    balance: ethers.constants.Zero\n                } as Token;\n            }\n        },\n        [provider, signer]\n    );\n\n    const approveToken = useCallback(\n        async (token: string, spender: string, amount?: ethers.BigNumber) => {\n            if (signer) {\n                amount = amount || ethers.constants.MaxUint256;\n                const erc20 = getContract(\"ERC20\", token, signer);\n                const gasLimit = await erc20.estimateGas.approve(spender, amount);\n                return await erc20.approve(spender, amount, {\n                    gasLimit\n                });\n            }\n        },\n        [signer]\n    );\n\n    const getTokenAllowance = useCallback(\n        async (token: string, spender: string) => {\n            if (provider && signer) {\n                return await provider.send(\"alchemy_getTokenAllowance\", [\n                    {\n                        contract: token,\n                        owner: await signer.getAddress(),\n                        spender\n                    }\n                ]);\n            }\n        },\n        [provider, signer]\n    );\n\n    const addOnBlockListener = useCallback(\n        (name, listener) => {\n            setOnBlockListeners(old => ({ ...old, [name]: listener }));\n        },\n        [setOnBlockListeners]\n    );\n\n    const removeOnBlockListener = useCallback(\n        name => {\n            setOnBlockListeners(old => {\n                delete old[name];\n                return old;\n            });\n        },\n        [setOnBlockListeners]\n    );\n\n    useEffect(() => {\n        if (provider && signer && chainId === 1) {\n            const onBlock = async (block: number) => {\n                for (const listener of Object.entries(onBlockListeners)) {\n                    await listener[1]?.(block);\n                }\n            };\n            provider.on(\"block\", onBlock);\n            return () => {\n                provider.off(\"block\", onBlock);\n            };\n        }\n    }, [provider, signer, chainId, onBlockListeners]);\n\n    return (\n        <EthersContext.Provider\n            value={{\n                provider,\n                signer,\n                chainId,\n                address,\n                getToken,\n                approveToken,\n                getTokenAllowance,\n                addOnBlockListener,\n                removeOnBlockListener\n            }}>\n            {children}\n        </EthersContext.Provider>\n    );\n};\n\ninterface JsonRPCRequest {\n    jsonrpc: string;\n    method: string;\n    params: any[];\n    id: number;\n}\n\ninterface JsonRPCResponse {\n    jsonrpc: string;\n    id: number;\n    result?: any;\n    error?: string;\n}\n\ninterface Callback<ResultType> {\n    (error: Error): void;\n    (error: null, val: ResultType): void;\n}\n\ndeclare global {\n    interface Window {\n        ethereum: {\n            enable(): void;\n            send(payload: any, callback: any): any;\n            send(payload: JsonRPCRequest, callback: Callback<JsonRPCResponse>): any;\n            selectedAddress: string;\n            on(eventName: EventType, listener: Listener);\n            off(eventName: EventType, listener: Listener);\n        };\n    }\n}\n\nexport const EthersContextConsumer = EthersContext.Consumer;\n","import { useCallback, useContext } from \"react\";\n\nimport {\n    CurrencyAmount,\n    ETHER,\n    FACTORY_ADDRESS,\n    Fetcher,\n    Percent,\n    Route,\n    Router,\n    TokenAmount,\n    Trade,\n    WETH\n} from \"@levx/sushiswap-sdk\";\nimport { ethers } from \"ethers\";\nimport { ETH } from \"../constants/tokens\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport { GlobalContext } from \"../context/GlobalContext\";\nimport LPToken from \"../types/LPToken\";\nimport Token from \"../types/Token\";\nimport { convertToken, getContract } from \"../utils\";\n\n// export const UNISWAP_ROUTER = \"0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\";\nexport const SUSHISWAP_ROUTER = \"0xd9e1ce17f2641f24ae83637ab66a2cca9c378b9f\";\nexport const ROUTER = SUSHISWAP_ROUTER;\nexport const MASTER_CHEF = \"0xc2edad668740f1aa35e4d8f227fb8e17dca888cd\";\n\n// tslint:disable-next-line:max-func-body-length\nconst useSDK = () => {\n    const { provider, signer, getToken } = useContext(EthersContext);\n    const { tokens } = useContext(GlobalContext);\n    const allowedSlippage = new Percent(\"50\", \"10000\"); // 0.05%\n    const ttl = 60 * 20;\n\n    const getTokens = async () => {\n        if (provider && signer) {\n            const response = await fetch(\"/tokens.json\");\n            const json = await response.json();\n\n            const account = await signer.getAddress();\n            const balances = await provider.send(\"alchemy_getTokenBalances\", [\n                account,\n                json.tokens.map(token => token.address)\n            ]);\n            return [\n                {\n                    ...ETH,\n                    balance: await provider.getBalance(account)\n                },\n                ...json.tokens.map((token, i) => ({\n                    ...token,\n                    balance: ethers.BigNumber.from(balances.tokenBalances[i].tokenBalance || 0)\n                }))\n            ].sort((t1, t2) => {\n                return t2.balance\n                    .sub(t1.balance)\n                    .div(ethers.BigNumber.from(10).pow(10))\n                    .toNumber();\n            });\n        }\n    };\n\n    const getMyLPTokens = async () => {\n        if (provider && signer && tokens) {\n            const factory = getContract(\"IUniswapV2Factory\", FACTORY_ADDRESS, signer);\n            const length = await factory.allPairsLength();\n            const pairs = await Promise.all(\n                Array.from({ length }).map((_, i) => {\n                    return factory.allPairs(i);\n                })\n            );\n            const balances = await provider.send(\"alchemy_getTokenBalances\", [await signer.getAddress(), pairs]);\n            const result = await Promise.all(\n                pairs.map(async (address, i) => {\n                    const balance = ethers.BigNumber.from(balances.tokenBalances[i].tokenBalance);\n                    if (balance.isZero()) {\n                        return null;\n                    }\n                    const pair = getContract(\"IUniswapV2Pair\", address, signer);\n                    const erc20 = getContract(\"ERC20\", address, signer);\n                    const decimals = Number(await erc20.decimals());\n                    const totalSupply = await erc20.totalSupply();\n                    const tokenA = await findOrGetToken(await pair.token0(), tokens, getToken);\n                    const tokenB = await findOrGetToken(await pair.token1(), tokens, getToken);\n                    return { address, decimals, balance, totalSupply, tokenA, tokenB } as LPToken;\n                })\n            );\n            return result.filter(token => !!token) as LPToken[];\n        }\n    };\n\n    const getPools = async () => {\n        if (provider && signer) {\n            const response = await fetch(\"/pools.json\");\n            const pools = await response.json();\n            const address = await signer.getAddress();\n            const balances = await provider.send(\"alchemy_getTokenBalances\", [\n                address,\n                pools.map(pool => pool.address)\n            ]);\n            return (await Promise.all(\n                pools.map(async (pool, i) => {\n                    const poolToken = getContract(\"ERC20\", pool.address, signer);\n                    const totalDeposited = await poolToken.balanceOf(MASTER_CHEF);\n                    return {\n                        ...pool,\n                        id: i,\n                        symbol: pool.tokenA.symbol + \"-\" + pool.tokenB.symbol + \" LP\",\n                        balance: ethers.BigNumber.from(balances.tokenBalances[i].tokenBalance || 0),\n                        totalDeposited\n                    };\n                })\n            )) as LPToken[];\n        }\n    };\n\n    const getTrade = useCallback(\n        async (fromToken: Token, toToken: Token, fromAmount: ethers.BigNumber) => {\n            if (provider) {\n                const isETH = fromToken.symbol === \"ETH\";\n                const from = convertToken(fromToken);\n                const to = convertToken(toToken);\n                const pair = await Fetcher.fetchPairData(from, to, provider);\n                const route = new Route([pair], isETH ? ETHER : from, to);\n                const amount = isETH\n                    ? CurrencyAmount.ether(fromAmount.toString())\n                    : new TokenAmount(from, fromAmount.toString());\n                return Trade.exactIn(route, amount);\n            }\n        },\n        [provider]\n    );\n\n    const swap = useCallback(\n        async (trade: Trade) => {\n            if (signer) {\n                if (trade) {\n                    const params = Router.swapCallParameters(trade, {\n                        feeOnTransfer: false,\n                        allowedSlippage,\n                        recipient: await signer.getAddress(),\n                        ttl\n                    });\n                    const router = getContract(\"IUniswapV2Router02\", ROUTER, signer);\n                    const gasLimit = await router.estimateGas[params.methodName](...params.args, {\n                        value: params.value\n                    });\n                    const tx = await router.functions[params.methodName](...params.args, {\n                        value: params.value,\n                        gasLimit: gasLimit.mul(120).div(100)\n                    });\n                    return {\n                        trade,\n                        tx\n                    };\n                }\n            }\n        },\n        [signer]\n    );\n\n    const wrapETH = useCallback(\n        async (amount: ethers.BigNumber) => {\n            if (signer) {\n                const weth = getContract(\"IWETH\", WETH[1].address, signer);\n                const gasLimit = await weth.estimateGas.deposit({\n                    value: amount\n                });\n                return await weth.deposit({\n                    value: amount,\n                    gasLimit\n                });\n            }\n        },\n        [signer]\n    );\n\n    const unwrapETH = useCallback(\n        async (amount: ethers.BigNumber) => {\n            if (signer) {\n                const weth = getContract(\"IWETH\", WETH[1].address, signer);\n                const gasLimit = await weth.estimateGas.withdraw(amount);\n                return await weth.withdraw(amount, {\n                    gasLimit\n                });\n            }\n        },\n        [signer]\n    );\n\n    const getPair = useCallback(\n        async (fromToken: Token, toToken: Token) => {\n            if (provider) {\n                const from = convertToken(fromToken);\n                const to = convertToken(toToken);\n                return await Fetcher.fetchPairData(from, to, provider);\n            }\n        },\n        [provider]\n    );\n\n    const addLiquidity = useCallback(\n        async (fromToken: Token, toToken: Token, fromAmount: ethers.BigNumber, toAmount: ethers.BigNumber) => {\n            if (signer) {\n                const router = getContract(\"IUniswapV2Router02\", ROUTER, signer);\n                const deadline = `0x${(Math.floor(new Date().getTime() / 1000) + ttl).toString(16)}`;\n                const args = [\n                    fromToken.address,\n                    toToken.address,\n                    fromAmount,\n                    toAmount,\n                    minAmount(fromAmount, allowedSlippage),\n                    minAmount(toAmount, allowedSlippage),\n                    await signer.getAddress(),\n                    deadline\n                ];\n                const gasLimit = await router.estimateGas.addLiquidity(...args);\n                return await router.functions.addLiquidity(...args, {\n                    gasLimit: gasLimit.mul(120).div(100)\n                });\n            }\n        },\n        [signer]\n    );\n\n    const removeLiquidityETH = useCallback(\n        async (token: Token, liquidity: ethers.BigNumber, amount: ethers.BigNumber, amountETH: ethers.BigNumber) => {\n            if (signer) {\n                const router = getContract(\"IUniswapV2Router02\", ROUTER, signer);\n                const deadline = `0x${(Math.floor(new Date().getTime() / 1000) + ttl).toString(16)}`;\n                const args = [\n                    token.address,\n                    liquidity,\n                    minAmount(amount, allowedSlippage),\n                    minAmount(amountETH, allowedSlippage),\n                    await signer.getAddress(),\n                    deadline\n                ];\n                const gasLimit = await router.estimateGas.removeLiquidityETH(...args);\n                return await router.functions.removeLiquidityETH(...args, {\n                    gasLimit: gasLimit.mul(120).div(100)\n                });\n            }\n        },\n        [signer]\n    );\n\n    const removeLiquidity = useCallback(\n        async (\n            fromToken: Token,\n            toToken: Token,\n            liquidity: ethers.BigNumber,\n            fromAmount: ethers.BigNumber,\n            toAmount: ethers.BigNumber\n        ) => {\n            if (signer) {\n                const router = getContract(\"IUniswapV2Router02\", ROUTER, signer);\n                const deadline = `0x${(Math.floor(new Date().getTime() / 1000) + ttl).toString(16)}`;\n                const args = [\n                    fromToken.address,\n                    toToken.address,\n                    liquidity,\n                    minAmount(fromAmount, allowedSlippage),\n                    minAmount(toAmount, allowedSlippage),\n                    await signer.getAddress(),\n                    deadline\n                ];\n                const gasLimit = await router.estimateGas.removeLiquidity(...args);\n                return await router.functions.removeLiquidity(...args, {\n                    gasLimit: gasLimit.mul(120).div(100)\n                });\n            }\n        },\n        [signer]\n    );\n\n    const addLiquidityETH = useCallback(\n        async (token: Token, amount: ethers.BigNumber, amountETH: ethers.BigNumber) => {\n            if (signer) {\n                const router = getContract(\"IUniswapV2Router02\", ROUTER, signer);\n                const deadline = `0x${(Math.floor(new Date().getTime() / 1000) + ttl).toString(16)}`;\n                const args = [\n                    token.address,\n                    amount,\n                    minAmount(amount, allowedSlippage),\n                    minAmount(amountETH, allowedSlippage),\n                    await signer.getAddress(),\n                    deadline\n                ];\n                const gasLimit = await router.estimateGas.addLiquidityETH(...args, {\n                    value: amountETH\n                });\n                return await router.functions.addLiquidityETH(...args, {\n                    gasLimit: gasLimit.mul(120).div(100),\n                    value: amountETH\n                });\n            }\n        },\n        [signer]\n    );\n\n    const getExpectedSushiRewardPerBlock = useCallback(\n        async (token: LPToken) => {\n            if (signer) {\n                const masterChef = getContract(\"MasterChef\", MASTER_CHEF, signer);\n                const totalAllocPoint = await masterChef.totalAllocPoint();\n                const sushiPerBlock = await masterChef.sushiPerBlock();\n                const { allocPoint } = await masterChef.poolInfo(token.id);\n                return ethers.BigNumber.from(sushiPerBlock)\n                    .mul(allocPoint)\n                    .div(totalAllocPoint);\n            }\n        },\n        [signer]\n    );\n\n    const deposit = useCallback(\n        async (lpTokenId: number, amount: ethers.BigNumber) => {\n            if (signer) {\n                const masterChef = getContract(\"MasterChef\", MASTER_CHEF, signer);\n                const gasLimit = await masterChef.estimateGas.deposit(lpTokenId, amount);\n                return await masterChef.deposit(lpTokenId, amount, {\n                    gasLimit: gasLimit.mul(120).div(100)\n                });\n            }\n        },\n        [signer]\n    );\n\n    const withdraw = useCallback(\n        async (lpTokenId: number, amount: ethers.BigNumber) => {\n            if (signer) {\n                const masterChef = getContract(\"MasterChef\", MASTER_CHEF, signer);\n                const gasLimit = await masterChef.estimateGas.withdraw(lpTokenId, amount);\n                return await masterChef.withdraw(lpTokenId, amount, {\n                    gasLimit: gasLimit.mul(120).div(100)\n                });\n            }\n        },\n        [signer]\n    );\n\n    const calculateFee = (fromAmount: ethers.BigNumber) => {\n        return fromAmount.mul(3).div(1000);\n    };\n\n    return {\n        allowedSlippage,\n        getTokens,\n        getMyLPTokens,\n        getPools,\n        getTrade,\n        swap,\n        wrapETH,\n        unwrapETH,\n        getPair,\n        addLiquidity,\n        addLiquidityETH,\n        removeLiquidity,\n        removeLiquidityETH,\n        getExpectedSushiRewardPerBlock,\n        deposit,\n        withdraw,\n        calculateFee\n    };\n};\n\nconst findOrGetToken = async (\n    address: string,\n    tokens: Token[],\n    getToken: (address: string) => Promise<Token | undefined>\n) => {\n    const token = tokens.find(t => t.address.toLowerCase() === address.toLowerCase());\n    return token || (await getToken(address));\n};\n\nconst minAmount = (amount: ethers.BigNumber, percent: Percent) => {\n    return amount.sub(amount.mul(percent.numerator.toString()).div(percent.denominator.toString()));\n};\nexport default useSDK;\n","import React, { useContext, useState } from \"react\";\nimport { useColorScheme } from \"react-native-appearance\";\n\nimport { Trade } from \"@levx/sushiswap-sdk\";\nimport AsyncStorage from \"@react-native-community/async-storage\";\nimport useAsyncEffect from \"use-async-effect\";\nimport { ETH } from \"../constants/tokens\";\nimport useSDK from \"../hooks/useSDK\";\nimport Token from \"../types/Token\";\nimport { EthersContext } from \"./EthersContext\";\n\nexport const GlobalContext = React.createContext({\n    load: async () => {},\n    clear: async () => {},\n    darkMode: false as boolean,\n    setDarkMode: async darkMode => {},\n    tokens: [ETH] as Token[],\n    updateTokens: async () => {},\n    loadingTokens: false,\n    tradeHistory: {},\n    addToTradeHistory: async trade => {}\n});\n\n// tslint:disable-next-line:max-func-body-length\nexport const GlobalContextProvider = ({ children }) => {\n    const { provider, signer, address, addOnBlockListener, removeOnBlockListener } = useContext(EthersContext);\n    const { getTokens } = useSDK();\n    const colorScheme = useColorScheme();\n    const [darkMode, setDarkMode] = useState(colorScheme === \"dark\");\n    const [tokens, setTokens] = useState<Token[]>([]);\n    const [loadingTokens, setLoadingTokens] = useState(true);\n    const [tradeHistory, setTradeHistory] = useState([] as Trade[]);\n    const updateTokens = async () => {\n        try {\n            const data = await getTokens();\n            if (data) {\n                await setTokens(data);\n            }\n        } finally {\n            setLoadingTokens(false);\n        }\n    };\n    // useEffect(() => {\n    //     updateTokens();\n    //     addOnBlockListener(\"updateTokens()\", updateTokens);\n    //     return () => {\n    //         removeOnBlockListener(\"updateTokens()\");\n    //     };\n    // }, [updateTokens]);\n    useAsyncEffect(async () => {\n        if (provider && signer) {\n            setLoadingTokens(true);\n            await updateTokens();\n        }\n    }, [provider, signer, address]);\n    return (\n        <GlobalContext.Provider\n            value={{\n                load: async () => {\n                    const mode = await AsyncStorage.getItem(\"dark_mode\");\n                    setDarkMode(mode === \"true\");\n                    setTradeHistory(JSON.parse((await AsyncStorage.getItem(\"trade_history\")) || \"[]\"));\n                },\n                clear: async () => {\n                    setDarkMode(false);\n                    await AsyncStorage.removeItem(\"dark_mode\");\n                    await AsyncStorage.removeItem(\"trade_history\");\n                },\n                darkMode,\n                setDarkMode: async (mode: boolean) => {\n                    await AsyncStorage.setItem(\"dark_mode\", String(mode));\n                    setDarkMode(mode);\n                },\n                tokens,\n                updateTokens,\n                loadingTokens,\n                tradeHistory,\n                addToTradeHistory: async (trade: Trade) => {\n                    if (address) {\n                        const list = tradeHistory[address] || [];\n                        list.push(trade);\n                        const newHistory = {\n                            ...tradeHistory,\n                            [address]: list\n                        };\n                        await AsyncStorage.setItem(\"trade_history\", JSON.stringify(newHistory));\n                        setTradeHistory(newHistory);\n                    }\n                }\n            }}>\n            {children}\n        </GlobalContext.Provider>\n    );\n};\n\nexport const GlobalContextConsumer = GlobalContext.Consumer;\n","export const Colors = {\n    common: {\n        white: \"#ffffff\",\n        transparent: \"#ffffff00\",\n        primary: \"#291C64\",\n        secondary: \"#9BECEE\",\n        green: \"#32CD32\",\n        twitter: \"#1da1f2\",\n        facebook: \"#3B5998\"\n    },\n    light: {\n        background: \"#ffffff\",\n        backgroundHovered: \"#f0f0f0\",\n        border: \"#e5e5e5\",\n        borderDark: \"#cccccc\",\n        textDark: \"#000000\",\n        textMedium: \"#121212\",\n        textLight: \"#888888\",\n        disabled: \"#b4b4b4\",\n        shadow: \"#444444\",\n        placeholder: \"#d8d8d8\",\n        underlay: \"#b4b4b4\"\n    },\n    dark: {\n        background: \"#121212\",\n        backgroundHovered: \"#202020\",\n        border: \"#ffffff33\",\n        borderDark: \"#666666\",\n        textDark: \"#ffffff\",\n        textMedium: \"#ededed\",\n        textLight: \"#aaaaaa\",\n        disabled: \"#aaaaaa80\",\n        shadow: \"#03080c\",\n        placeholder: \"#666666\",\n        underlay: \"#aaaaaa80\"\n    }\n};\n","import { useContext } from \"react\";\n\nimport { Colors } from \"../constants/colors\";\nimport { GlobalContext } from \"../context/GlobalContext\";\n\nconst useColors = () => {\n    const { darkMode } = useContext(GlobalContext);\n    return {\n        ...Colors[darkMode ? \"dark\" : \"light\"],\n        ...Colors.common\n    };\n};\n\nexport default useColors;\n","import React, { FunctionComponent } from \"react\";\nimport { View, ViewProps } from \"react-native\";\n\ninterface FlexViewProps extends ViewProps {\n    direction?: \"row\" | \"column\";\n}\n\nconst FlexView: FunctionComponent<FlexViewProps> = props => {\n    const flexDirection = props.direction || \"row\";\n    return <View {...props} style={[{ flexDirection }, props.style]} />;\n};\nexport default FlexView;\n","import React, { FC } from \"react\";\nimport { Text as NativeText, TextProps as NativeTextProps } from \"react-native-elements\";\n\nimport useColors from \"../hooks/useColors\";\n\nexport interface TextProps extends NativeTextProps {\n    note?: boolean;\n    caption?: boolean;\n    dark?: boolean;\n    medium?: boolean;\n    light?: boolean;\n    fontWeight?: \"light\" | \"regular\" | \"bold\";\n}\n\nconst Text: FC<TextProps> = props => {\n    const { textDark, textMedium, textLight } = useColors();\n    const fontFamily = props.fontWeight || \"regular\";\n    return (\n        <NativeText\n            {...props}\n            h1Style={[{ fontFamily }, props.h1Style]}\n            h2Style={[{ fontFamily }, props.h2Style]}\n            h3Style={[{ fontFamily }, props.h3Style]}\n            h4Style={[{ fontFamily }, props.h4Style]}\n            style={[\n                {\n                    fontFamily,\n                    fontSize: props.note ? 15 : props.caption ? 22 : 18,\n                    color: props.note || props.light ? textLight : props.medium ? textMedium : textDark\n                },\n                props.style\n            ]}\n        />\n    );\n};\nexport default Text;\n","import React, { useCallback, useContext, useEffect, useState } from \"react\";\nimport { Image, View } from \"react-native\";\nimport { Icon } from \"react-native-elements\";\n\nimport Switch from \"expo-dark-mode-switch\";\n\nimport { Link, useRoute } from \"@react-navigation/native\";\nimport { HEADER_HEIGHT, Spacing } from \"../constants/dimension\";\nimport linking from \"../constants/linking\";\nimport { GlobalContext } from \"../context/GlobalContext\";\nimport useColors from \"../hooks/useColors\";\nimport FlexView from \"./FlexView\";\nimport Text from \"./Text\";\n\nconst Header = () => {\n    const { background } = useColors();\n    return (\n        <View\n            // @ts-ignore\n            style={{\n                position: \"fixed\",\n                top: 0,\n                width: \"100%\",\n                height: HEADER_HEIGHT,\n                paddingBottom: 16,\n                backgroundColor: background\n            }}>\n            <FlexView\n                style={{\n                    flex: 1,\n                    justifyContent: \"space-between\",\n                    alignItems: \"flex-end\",\n                    paddingTop: Spacing.small,\n                    paddingHorizontal: Spacing.content\n                }}>\n                <Title />\n                <Menu />\n            </FlexView>\n        </View>\n    );\n};\n\nexport const Title = () => {\n    const { darkMode } = useContext(GlobalContext);\n    const { primary, white } = useColors();\n    return (\n        <View style={{ alignSelf: \"flex-end\", alignItems: \"center\" }}>\n            <Link to={\"/\"}>\n                <Text style={{ fontFamily: \"title\", fontSize: 40, color: darkMode ? white : primary }}>SushiSwap</Text>\n            </Link>\n            <Image\n                source={\n                    darkMode\n                        ? require(\"../../assets/levx-typography-dark.png\")\n                        : require(\"../../assets/levx-typography.png\")\n                }\n                style={{ width: 76, height: 13 }}\n            />\n        </View>\n    );\n};\n\nconst Menu = () => {\n    return (\n        <FlexView\n            style={{\n                height: \"100%\",\n                alignItems: \"flex-end\"\n            }}>\n            <MenuItem title={\"SWAP\"} routeName={\"Home\"} />\n            <MenuItem title={\"LIQUIDITY\"} routeName={\"Liquidity\"} />\n            <MenuItem title={\"FARMING\"} routeName={\"Farming\"} />\n            <Stats />\n            <DarkModeSwitch />\n        </FlexView>\n    );\n};\n\nconst MenuItem = ({ title, routeName }) => {\n    const { textDark } = useColors();\n    const [current, setCurrent] = useState(false);\n    const route = useRoute();\n    useEffect(() => {\n        setCurrent(route.name === routeName);\n    }, [route]);\n    return (\n        <Link to={\"/\" + linking.config.screens[routeName]} style={{ marginLeft: Spacing.small, marginBottom: 4 }}>\n            <View>\n                <Text style={{ fontFamily: \"regular\", fontSize: 20, color: textDark, padding: 4 }}>{title}</Text>\n                {current && (\n                    <View\n                        style={{\n                            position: \"absolute\",\n                            height: 2,\n                            left: 0,\n                            right: 0,\n                            bottom: 0,\n                            backgroundColor: textDark\n                        }}\n                    />\n                )}\n            </View>\n        </Link>\n    );\n};\n\nconst Stats = () => {\n    const { textDark } = useColors();\n    return (\n        <Link to={\"https://sushiswap.vision\"} target={\"_blank\"} style={{ marginLeft: Spacing.small, marginBottom: 4 }}>\n            <FlexView style={{ alignItems: \"flex-start\" }}>\n                <Text style={{ fontFamily: \"regular\", fontSize: 20, color: textDark, padding: 4 }}>{\"STATS\"}</Text>\n                <Icon\n                    name={\"arrow-top-right\"}\n                    type={\"material-community\"}\n                    size={18}\n                    color={textDark}\n                    style={{ marginTop: 6 }}\n                />\n            </FlexView>\n        </Link>\n    );\n};\n\nconst DarkModeSwitch = () => {\n    const { darkMode, setDarkMode } = useContext(GlobalContext);\n    const onChange = useCallback(\n        async dark => {\n            await setDarkMode(dark);\n        },\n        [setDarkMode]\n    );\n    return (\n        <View style={{ marginLeft: Spacing.small, marginBottom: 4 }}>\n            <Switch\n                value={darkMode}\n                onChange={onChange}\n                style={{\n                    transform: [\n                        {\n                            scale: 0.7\n                        }\n                    ]\n                }}\n            />\n        </View>\n    );\n};\n\nexport default Header;\n","import React, { useCallback } from \"react\";\nimport { Image, View } from \"react-native\";\nimport { Icon, SocialIcon } from \"react-native-elements\";\n\nimport * as Linking from \"expo-linking\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport FlexView from \"./FlexView\";\nimport { Title } from \"./Header\";\nimport Text from \"./Text\";\n\nconst MobileNotSupported = () => {\n    const { background } = useColors();\n    return (\n        <View\n            style={{\n                justifyContent: \"center\",\n                alignItems: \"center\",\n                backgroundColor: background,\n                height: \"100%\",\n                padding: Spacing.normal\n            }}>\n            <Title />\n            <Image source={require(\"../../assets/sushiswap.jpg\")} style={{ width: 192, height: 192 }} />\n            <Text style={{ marginTop: Spacing.normal }}>Mobile devices not supported yet.</Text>\n            <Social />\n        </View>\n    );\n};\n\nconst Social = () => {\n    const onPressTwitter = useCallback(() => Linking.openURL(\"https://twitter.com/LevxApp\"), []);\n    const onPressGithub = useCallback(() => Linking.openURL(\"https://github.com/lev-x\"), []);\n    const onPressDiscord = useCallback(() => Linking.openURL(\"https://discord.gg/3QKsgf\"), []);\n    return (\n        <FlexView style={{ marginTop: Spacing.large, marginBottom: Spacing.huge, justifyContent: \"center\" }}>\n            <Icon\n                type={\"material-community\"}\n                name={\"github-face\"}\n                color={\"white\"}\n                reverseColor={\"black\"}\n                reverse={true}\n                raised={true}\n                onPress={onPressGithub}\n            />\n            <SocialIcon type=\"twitter\" onPress={onPressTwitter} />\n            <Icon\n                type={\"material-community\"}\n                name={\"discord\"}\n                color={\"#7289da\"}\n                reverse={true}\n                raised={true}\n                onPress={onPressDiscord}\n            />\n        </FlexView>\n    );\n};\n\nexport default MobileNotSupported;\n","import React from \"react\";\n\nimport { EthersContextConsumer, EthersContextProvider } from \"./EthersContext\";\nimport { GlobalContextConsumer, GlobalContextProvider } from \"./GlobalContext\";\n\nexport const ContextProvider = ({ children }) => {\n    return (\n        <EthersContextProvider>\n            <GlobalContextProvider>{children}</GlobalContextProvider>\n        </EthersContextProvider>\n    );\n};\n\nexport const ContextConsumer = ({ children }) => {\n    return (\n        <EthersContextConsumer>\n            {ethersContext => (\n                <GlobalContextConsumer>\n                    {globalContext =>\n                        children({\n                            ...globalContext,\n                            ...ethersContext\n                        })\n                    }\n                </GlobalContextConsumer>\n            )}\n        </EthersContextConsumer>\n    );\n};\n","import { ViewStyle } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"./useColors\";\n\nconst useStyles = () => {\n    const { shadow: shadowColor } = useColors();\n    const shadow: ViewStyle = {\n        borderRadius: Spacing.tiny,\n        elevation: Spacing.small,\n        shadowColor,\n        shadowOffset: { width: 0, height: 4 },\n        shadowOpacity: 0.5,\n        shadowRadius: 4,\n        overflow: \"visible\"\n    };\n    return { shadow };\n};\n\nexport default useStyles;\n","import React, { FC } from \"react\";\nimport { Button as NativeButton, ButtonProps as NativeButtonProps } from \"react-native-elements\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport useStyles from \"../hooks/useStyles\";\n\nexport interface ButtonProps extends NativeButtonProps {\n    color?: string;\n    size?: \"small\" | \"normal\" | \"large\";\n    fontWeight?: \"light\" | \"regular\" | \"bold\";\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst Button: FC<ButtonProps> = props => {\n    const { primary, borderDark, textMedium } = useColors();\n    const { shadow } = useStyles();\n    const type = props.type || \"solid\";\n    const size = props.size || \"normal\";\n    const height = props.size === \"small\" ? 40 : size === \"normal\" ? 48 : 56;\n    const fontSize = props.size === \"small\" ? 14 : size === \"normal\" ? 16 : 18;\n    const fontFamily = props.fontWeight || \"regular\";\n    const color = type === \"solid\" ? \"white\" : props.color || textMedium;\n    return (\n        <NativeButton\n            {...props}\n            type={type}\n            buttonStyle={[\n                {\n                    height,\n                    paddingHorizontal: Spacing.small,\n                    backgroundColor: type === \"solid\" ? props.color || primary : \"transparent\",\n                    borderColor: borderDark\n                },\n                props.buttonStyle\n            ]}\n            titleStyle={[{ fontSize, fontFamily, color }, props.titleStyle]}\n            containerStyle={[type === \"solid\" || type === \"outline\" ? shadow : {}, props.containerStyle]}\n        />\n    );\n};\nexport default Button;\n","import React, { FC, useCallback, useContext, useState } from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport Token from \"../types/Token\";\nimport Button from \"./Button\";\n\nexport interface ApproveButtonProps {\n    token: Token;\n    spender: string;\n    onSuccess: () => void;\n    onError: (e) => void;\n    hidden?: boolean;\n}\n\nconst ApproveButton: FC<ApproveButtonProps> = props => {\n    const { approveToken } = useContext(EthersContext);\n    const [loading, setLoading] = useState(false);\n    const onPress = useCallback(async () => {\n        if (props.token) {\n            props.onError({});\n            setLoading(true);\n            try {\n                const tx = await approveToken(props.token.address, props.spender);\n                await tx.wait();\n                props.onSuccess();\n            } catch (e) {\n                props.onError(e);\n            } finally {\n                setLoading(false);\n            }\n        }\n    }, [props.token]);\n    if (props.hidden) {\n        return <View />;\n    }\n    return (\n        <Button\n            size={\"large\"}\n            title={\"Approve \" + (props.token?.symbol || \"\")}\n            onPress={onPress}\n            loading={loading}\n            containerStyle={{ marginBottom: Spacing.small }}\n        />\n    );\n};\n\nexport default ApproveButton;\n","import React, { FC } from \"react\";\nimport { ButtonGroup as NativeButtonGroup, ButtonGroupProps } from \"react-native-elements\";\n\nimport useColors from \"../hooks/useColors\";\nimport useStyles from \"../hooks/useStyles\";\n\n// tslint:disable-next-line:max-func-body-length\nconst ButtonGroup: FC<ButtonGroupProps> = props => {\n    const { borderDark } = useColors();\n    const { shadow } = useStyles();\n    return (\n        <NativeButtonGroup\n            {...props}\n            selectedButtonStyle={[\n                {\n                    backgroundColor: borderDark\n                },\n                props.selectedButtonStyle\n            ]}\n            containerStyle={[\n                {\n                    marginHorizontal: 0,\n                    marginVertical: 0,\n                    height: 56,\n                    ...shadow\n                },\n                props.containerStyle\n            ]}\n        />\n    );\n};\n\nexport default ButtonGroup;\n","import React from \"react\";\nimport { Icon } from \"react-native-elements\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\n\nconst CloseIcon = () => {\n    const { textLight } = useColors();\n    return <Icon type={\"material-community\"} name={\"close\"} color={textLight} style={{ marginLeft: Spacing.tiny }} />;\n};\n\nexport default CloseIcon;\n","import React, { FC } from \"react\";\nimport { View, ViewProps } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\n\ninterface ColumnProps extends ViewProps {\n    noTopMargin?: boolean;\n}\n\nconst Column: FC<ColumnProps> = props => (\n    <View {...props} style={{ width: 440, marginTop: props.noTopMargin ? 0 : Spacing.large }} />\n);\n\nexport default Column;\n","import React, { FC } from \"react\";\nimport { ScrollView, ViewProps } from \"react-native\";\n\nimport { HEADER_HEIGHT } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\n\nexport interface ContainerProps extends ViewProps {\n    scrollToBottomLength?: number;\n    showScrollToBottomButton?: boolean;\n}\n\nconst Container: FC<ContainerProps> = props => {\n    const { background } = useColors();\n    return (\n        <ScrollView\n            nestedScrollEnabled={true}\n            contentContainerStyle={{ flex: 1 }}\n            style={[{ backgroundColor: background, marginTop: HEADER_HEIGHT }, props.style]}\n            {...props}\n        />\n    );\n};\n\nexport default Container;\n","import React from \"react\";\nimport { View, ViewProps } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\n\ninterface ContentProps extends ViewProps {\n    contentPadding?: \"small\" | \"normal\" | \"large\";\n}\n\nconst Content: React.FunctionComponent<ContentProps> = props => {\n    const { background } = useColors();\n    const multiplier = {\n        small: 0.75,\n        normal: 1,\n        large: 1.5\n    }[props.contentPadding || \"normal\"];\n    return (\n        <View style={{ alignItems: \"center\", flex: 1, backgroundColor: background }}>\n            <View style={{ width: 1280, flex: 1 }}>\n                <View\n                    {...props}\n                    style={[\n                        {\n                            paddingHorizontal: Spacing.content * multiplier,\n                            paddingVertical: Spacing.normal * multiplier,\n                            backgroundColor: background\n                        },\n                        props.style\n                    ]}\n                />\n            </View>\n        </View>\n    );\n};\nexport default Content;\n","import React from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport MetamaskError from \"../types/MetamaskError\";\nimport Text from \"./Text\";\n\nconst ErrorMessage = ({ error }: { error: MetamaskError }) => (\n    <View\n        style={{\n            borderColor: \"red\",\n            borderWidth: 1,\n            width: \"100%\",\n            padding: Spacing.tiny,\n            marginTop: Spacing.small\n        }}>\n        {error.code && (\n            <Text fontWeight={\"bold\"} style={{ color: \"red\", fontSize: 14 }}>\n                Error Code {error.code}\n            </Text>\n        )}\n        <Text note={true} style={{ color: \"red\", fontSize: 14 }}>\n            {error.message}\n        </Text>\n    </View>\n);\n\nexport default ErrorMessage;\n","import React from \"react\";\n\nimport Button from \"./Button\";\n\nconst FetchingButton = () => {\n    return <Button size={\"large\"} title={\"Fetching…\"} disabled={true} />;\n};\nexport default FetchingButton;\n","import React from \"react\";\n\nimport Button from \"./Button\";\n\nconst InsufficientBalanceButton = ({ symbol }: { symbol: string }) => {\n    return <Button size={\"large\"} title={\"Insufficient \" + symbol + \" Balance\"} disabled={true} />;\n};\nexport default InsufficientBalanceButton;\n","import React from \"react\";\nimport { View } from \"react-native\";\n\nimport useColors from \"../hooks/useColors\";\n\nconst Border = () => {\n    const { border } = useColors();\n    return <View style={{ height: 1, width: \"100%\", backgroundColor: border }} />;\n};\n\nexport default Border;\n","import React, { FC } from \"react\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport Text from \"./Text\";\n\ninterface SubtitleProps {\n    text: string;\n}\n\nconst Subtitle: FC<SubtitleProps> = props => {\n    return (\n        <Text fontWeight={\"bold\"} medium={true} style={{ marginBottom: Spacing.normal, fontSize: 20 }}>\n            {props.text}\n        </Text>\n    );\n};\n\nexport default Subtitle;\n","import React, { FC, useCallback } from \"react\";\nimport { ActivityIndicator, FlatList, View } from \"react-native\";\n\nimport { ethers } from \"ethers\";\nimport { Spacing } from \"../constants/dimension\";\nimport { LPTokensState } from \"../hooks/useLPTokensState\";\nimport LPToken from \"../types/LPToken\";\nimport Border from \"./Border\";\nimport Column from \"./Column\";\nimport Subtitle from \"./Subtitle\";\nimport Text from \"./Text\";\n\nexport interface LPTokenSelectProps {\n    state: LPTokensState;\n    title: string;\n    emptyText: string;\n    Item: FC<LPTokenItemProps>;\n}\n\nexport interface LPTokenItemProps {\n    token: LPToken;\n    selected: boolean;\n    onSelectToken: (token: LPToken) => void;\n}\n\nconst LPTokenSelect: FC<LPTokenSelectProps> = props => {\n    const onUnselectToken = useCallback(() => {\n        props.state.setSelectedLPToken(undefined);\n    }, [props.state.setSelectedLPToken]);\n    return (\n        <Column>\n            <Subtitle text={props.title} />\n            {props.state.selectedLPToken ? (\n                <props.Item token={props.state.selectedLPToken} selected={true} onSelectToken={onUnselectToken} />\n            ) : (\n                <LPTokenList state={props.state} emptyText={props.emptyText} Item={props.Item} />\n            )}\n        </Column>\n    );\n};\n\nconst LPTokenList = ({\n    state,\n    emptyText,\n    Item\n}: {\n    state: LPTokensState;\n    emptyText: string;\n    Item: FC<LPTokenItemProps>;\n}) => {\n    const renderItem = useCallback(({ item }) => {\n        return <Item key={item.address} token={item} selected={false} onSelectToken={state.setSelectedLPToken} />;\n    }, []);\n    const data = state.lpTokens.sort((t1, t2) => {\n        return (t2.totalDeposited || ethers.constants.Zero)\n            .sub(t1.totalDeposited || ethers.constants.Zero)\n            .div(ethers.BigNumber.from(10).pow(14))\n            .toNumber();\n    });\n    return state.loading ? (\n        <ActivityIndicator size={\"large\"} style={{ marginTop: Spacing.large }} />\n    ) : state.lpTokens.length === 0 ? (\n        <EmptyList text={emptyText} />\n    ) : (\n        <FlatList\n            keyExtractor={item => JSON.stringify(item)}\n            data={data}\n            renderItem={renderItem}\n            ItemSeparatorComponent={Border}\n        />\n    );\n};\n\nconst EmptyList = ({ text }: { text: string }) => {\n    return (\n        <View style={{ margin: Spacing.normal }}>\n            <Text light={true} style={{ textAlign: \"center\", width: \"100%\" }}>\n                {text}\n            </Text>\n        </View>\n    );\n};\n\nexport default LPTokenSelect;\n","import React from \"react\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport FlexView from \"./FlexView\";\nimport Text from \"./Text\";\n\nconst Meta = ({ label, text }: { label: string; text: string }) => {\n    return (\n        <FlexView style={{ justifyContent: \"space-between\", marginTop: Spacing.tiny, marginHorizontal: Spacing.small }}>\n            <Text fontWeight={\"bold\"} style={{ fontSize: 14 }}>\n                {label}\n            </Text>\n            <Text style={{ fontSize: 14 }}>{text}</Text>\n        </FlexView>\n    );\n};\n\nexport default Meta;\n","import React, { useContext } from \"react\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport { GlobalContext } from \"../context/GlobalContext\";\nimport useColors from \"../hooks/useColors\";\nimport Text from \"./Text\";\n\nconst Notice = (props: { text: string; color?: string }) => {\n    const { darkMode } = useContext(GlobalContext);\n    const { primary, secondary } = useColors();\n    const color = props.color || (darkMode ? secondary : primary);\n    return (\n        <Text\n            note={true}\n            style={{\n                color,\n                borderColor: color,\n                borderWidth: 1,\n                borderRadius: 4,\n                padding: Spacing.small\n            }}>\n            {props.text}\n        </Text>\n    );\n};\n\nexport default Notice;\n","import React, { useContext } from \"react\";\nimport { Icon } from \"react-native-elements\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport { GlobalContext } from \"../context/GlobalContext\";\nimport useColors from \"../hooks/useColors\";\n\nconst SelectIcon = () => {\n    const { darkMode } = useContext(GlobalContext);\n    const { primary, secondary } = useColors();\n    return (\n        <Icon\n            type={\"material-community\"}\n            name={\"chevron-right\"}\n            color={darkMode ? secondary : primary}\n            style={{ marginLeft: Spacing.tiny }}\n        />\n    );\n};\n\nexport default SelectIcon;\n","import React, { FC, useCallback } from \"react\";\nimport { Input as NativeInput, InputProps as NativeInputProps } from \"react-native-elements\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\n\nexport interface Validation {\n    regexp: RegExp;\n    error: string;\n}\n\nexport interface InputProps extends NativeInputProps {\n    color?: string;\n    size?: \"small\" | \"normal\" | \"large\";\n    allowed?: Validation[];\n    forbidden?: Validation[];\n    onError?: (error: string) => void;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst Input: FC<InputProps> = props => {\n    const { textDark, textMedium, textLight } = useColors();\n    const size = props.size || \"normal\";\n    const color = props.color || textDark;\n    const fontSize = size === \"small\" ? 24 : size === \"large\" ? 36 : 30;\n    const onChangeText = useCallback(\n        (text: string) => {\n            props.onChangeText?.(text);\n            props.onError?.(\"\");\n            const errors = [] as string[];\n            if (text !== \"\" && props.forbidden) {\n                props.forbidden.forEach(validation => {\n                    if (text.match(validation.regexp)) {\n                        errors.push(validation.error);\n                    }\n                });\n            }\n            if (text !== \"\" && props.allowed) {\n                props.allowed.forEach(validation => {\n                    if (!text.match(validation.regexp)) {\n                        errors.push(validation.error);\n                    }\n                });\n            }\n            if (errors.length > 0) {\n                props.onError?.(errors.join(\"\\n\"));\n            }\n        },\n        [props.onChangeText, props.onError, props.forbidden, props.allowed]\n    );\n    return (\n        <NativeInput\n            {...props}\n            inputStyle={[\n                // @ts-ignore\n                { fontSize, fontFamily: \"regular\", paddingBottom: 4, color, outline: \"none\", marginTop: 0 },\n                props.inputStyle\n            ]}\n            labelStyle={[{ color: textMedium }, props.labelStyle]}\n            placeholderTextColor={props.placeholderTextColor || textLight}\n            errorStyle={props.onError ? { height: 0 } : props.errorStyle}\n            containerStyle={[{ paddingHorizontal: 0, marginTop: Spacing.tiny }, props.containerStyle]}\n            onChangeText={onChangeText}\n        />\n    );\n};\n\nexport default Input;\n","import React, { FC, useCallback, useContext } from \"react\";\nimport { View } from \"react-native\";\n\nimport { ethers } from \"ethers\";\nimport { Spacing } from \"../constants/dimension\";\nimport { GlobalContext } from \"../context/GlobalContext\";\nimport useColors from \"../hooks/useColors\";\nimport Token from \"../types/Token\";\nimport { formatBalance, parseBalance } from \"../utils\";\nimport Button from \"./Button\";\nimport Column from \"./Column\";\nimport Input from \"./Input\";\nimport Subtitle from \"./Subtitle\";\n\nexport interface TokenInputProps {\n    title?: string;\n    token?: Token;\n    hidden: boolean;\n    amount: string;\n    onAmountChanged: (amount: string) => void;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst TokenInput: FC<TokenInputProps> = props => {\n    const onChangeText = useCallback(\n        (text: string) => {\n            if (props.token && props.onAmountChanged) {\n                try {\n                    parseBalance(text, props.token.decimals);\n                    props.onAmountChanged(text);\n                } catch (e) {\n                    if (text.endsWith(\".\") && text.indexOf(\".\") === text.length - 1) {\n                        props.onAmountChanged(text);\n                    }\n                }\n            }\n        },\n        [props.token, props.onAmountChanged]\n    );\n    if (props.hidden) {\n        return <Column noTopMargin={true} />;\n    }\n    const label = props.token?.symbol;\n    return (\n        <Column noTopMargin={!props.title}>\n            {props.title && <Subtitle text={props.title} />}\n            <View style={{ marginHorizontal: Spacing.small }}>\n                <Input label={label} value={props.amount} onChangeText={onChangeText} placeholder={\"0.0\"} />\n                {props.token?.balance?.gt(0) && <MaxButton token={props.token} updateAmount={props.onAmountChanged} />}\n            </View>\n        </Column>\n    );\n};\n\nconst MaxButton = (props: { token: Token; updateAmount }) => {\n    const { darkMode } = useContext(GlobalContext);\n    const { primary, secondary } = useColors();\n    const onPressMax = useCallback(() => {\n        if (props.token) {\n            let balance = props.token.balance;\n            if (props.token.symbol === \"ETH\") {\n                // Subtract 0.01 ETH for gas fee\n                const fee = ethers.BigNumber.from(10).pow(16);\n                balance = balance.gt(fee) ? balance.sub(fee) : ethers.constants.Zero;\n            }\n            props.updateAmount(formatBalance(balance, props.token.decimals));\n        }\n    }, [props.token, props.updateAmount]);\n    return (\n        <View style={{ position: \"absolute\", right: 0, bottom: 12 }}>\n            <Button\n                type={\"clear\"}\n                color={darkMode ? secondary : primary}\n                title={\"MAX\"}\n                fontWeight={\"bold\"}\n                onPress={onPressMax}\n                buttonStyle={{ paddingHorizontal: 0 }}\n            />\n        </View>\n    );\n};\n\nexport default TokenInput;\n","import { useCallback, useContext, useEffect, useState } from \"react\";\n\nimport { ethers } from \"ethers\";\nimport useAsyncEffect from \"use-async-effect\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport { GlobalContext } from \"../context/GlobalContext\";\nimport Token from \"../types/Token\";\nimport { parseBalance } from \"../utils\";\nimport useSDK, { ROUTER } from \"./useSDK\";\n\nexport interface TokenPairState {\n    fromSymbol: string;\n    setFromSymbol: (symbol: string) => void;\n    toSymbol: string;\n    setToSymbol: (symbol: string) => void;\n    fromToken?: Token;\n    toToken?: Token;\n    fromAmount: string;\n    setFromAmount: (amount: string) => void;\n    toAmount: string;\n    setToAmount: (amount: string) => void;\n    fromTokenAllowed: boolean;\n    setFromTokenAllowed: (allowed: boolean) => void;\n    toTokenAllowed: boolean;\n    setToTokenAllowed: (allowed: boolean) => void;\n    loading: boolean;\n    onWrap: () => Promise<void>;\n    wrapping: boolean;\n    onUnwrap: () => Promise<void>;\n    unwrapping: boolean;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst useTokenPairState: () => TokenPairState = () => {\n    const { tokens, updateTokens } = useContext(GlobalContext);\n    const { provider, signer, address, getTokenAllowance } = useContext(EthersContext);\n    const { wrapETH, unwrapETH } = useSDK();\n    const [fromSymbol, setFromSymbol] = useState(\"\");\n    const [toSymbol, setToSymbol] = useState(\"\");\n    const [fromAmount, setFromAmount] = useState(\"\");\n    const [toAmount, setToAmount] = useState(\"\");\n    const [fromTokenAllowed, setFromTokenAllowed] = useState(false);\n    const [toTokenAllowed, setToTokenAllowed] = useState(false);\n    const [loading, setLoading] = useState(false);\n    const [wrapping, setWrapping] = useState(false);\n    const [unwrapping, setUnwrapping] = useState(false);\n\n    const fromToken = tokens.find(token => token.symbol === fromSymbol);\n    const toToken = tokens.find(token => token.symbol === toSymbol);\n\n    useEffect(() => {\n        if (fromSymbol === \"\") {\n            setToSymbol(\"\");\n        }\n        setFromAmount(\"\");\n        setToAmount(\"\");\n    }, [fromSymbol, toSymbol]);\n\n    useEffect(() => {\n        setFromSymbol(\"\");\n    }, [address]);\n\n    useAsyncEffect(async () => {\n        if (fromToken && toToken && provider && signer) {\n            setFromTokenAllowed(false);\n            setToTokenAllowed(false);\n            setLoading(true);\n            try {\n                const minAllowance = ethers.BigNumber.from(2)\n                    .pow(96)\n                    .sub(1);\n                if (fromToken.symbol !== \"ETH\") {\n                    const fromAllowance = await getTokenAllowance(fromToken.address, ROUTER);\n                    setFromTokenAllowed(ethers.BigNumber.from(fromAllowance).gte(minAllowance));\n                }\n                if (toToken.symbol !== \"ETH\") {\n                    const toAllowance = await getTokenAllowance(toToken.address, ROUTER);\n                    setToTokenAllowed(ethers.BigNumber.from(toAllowance).gte(minAllowance));\n                }\n            } finally {\n                setLoading(false);\n            }\n        }\n    }, [fromToken, toToken, provider, signer]);\n\n    const onWrap = useCallback(async () => {\n        if (fromAmount && signer) {\n            setWrapping(true);\n            try {\n                const tx = await wrapETH(parseBalance(fromAmount));\n                if (tx) {\n                    await tx.wait();\n                    await updateTokens();\n                    setFromSymbol(\"\");\n                }\n            } finally {\n                setWrapping(false);\n            }\n        }\n    }, [fromAmount, signer]);\n\n    const onUnwrap = useCallback(async () => {\n        if (fromAmount && signer) {\n            setUnwrapping(true);\n            try {\n                const tx = await unwrapETH(parseBalance(fromAmount));\n                if (tx) {\n                    await tx.wait();\n                    await updateTokens();\n                    setFromSymbol(\"\");\n                }\n            } finally {\n                setUnwrapping(false);\n            }\n        }\n    }, [fromAmount, signer]);\n\n    return {\n        fromSymbol,\n        setFromSymbol,\n        toSymbol,\n        setToSymbol,\n        fromToken,\n        toToken,\n        fromAmount,\n        setFromAmount,\n        toAmount,\n        setToAmount,\n        fromTokenAllowed,\n        setFromTokenAllowed,\n        toTokenAllowed,\n        setToTokenAllowed,\n        loading,\n        onWrap,\n        wrapping,\n        onUnwrap,\n        unwrapping\n    };\n};\n\nexport default useTokenPairState;\n","import { useContext, useEffect, useState } from \"react\";\n\nimport { Pair } from \"@levx/sushiswap-sdk\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport useSDK from \"./useSDK\";\nimport useTokenPairState, { TokenPairState } from \"./useTokenPairState\";\n\nexport interface LiquidityState extends TokenPairState {\n    pair?: Pair;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst useLiquidityState: () => LiquidityState = () => {\n    const state = useTokenPairState();\n    const { provider, addOnBlockListener, removeOnBlockListener } = useContext(EthersContext);\n    const [loading, setLoading] = useState(false);\n    const [pair, setPair] = useState<Pair>();\n    const { getPair } = useSDK();\n\n    useEffect(() => {\n        if (state.fromSymbol && state.toSymbol) {\n            const updatePair = async () => {\n                if (state.fromToken && state.toToken && provider) {\n                    setLoading(true);\n                    setPair(undefined);\n                    try {\n                        setPair(await getPair(state.fromToken, state.toToken));\n                    } catch (e) {\n                    } finally {\n                        setLoading(false);\n                    }\n                }\n            };\n\n            updatePair();\n            const name = \"updatePair(\" + state.fromSymbol + \",\" + state.toSymbol + \")\";\n\n            addOnBlockListener(name, updatePair);\n            return () => {\n                removeOnBlockListener(name);\n            };\n        }\n    }, [state.fromSymbol, state.toSymbol]);\n\n    return {\n        ...state,\n        loading: loading || state.loading,\n        pair\n    };\n};\n\nexport default useLiquidityState;\n","import { useContext, useEffect, useState } from \"react\";\n\nimport { EthersContext } from \"../context/EthersContext\";\nimport { GlobalContext } from \"../context/GlobalContext\";\nimport LPToken from \"../types/LPToken\";\nimport useLiquidityState, { LiquidityState } from \"./useLiquidityState\";\nimport useSDK from \"./useSDK\";\n\nexport interface LPTokensState extends LiquidityState {\n    lpTokens: LPToken[];\n    updateLPTokens: () => Promise<void>;\n    selectedLPToken?: LPToken;\n    setSelectedLPToken: (token?: LPToken) => void;\n    selectedLPTokenAllowed: boolean;\n    setSelectedLPTokenAllowed: (allowed: boolean) => void;\n    amount: string;\n    setAmount: (amount: string) => void;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst useLPTokensState: (loadPools: boolean) => LPTokensState = loadPools => {\n    const state = useLiquidityState();\n    const { provider, signer, address, addOnBlockListener, removeOnBlockListener } = useContext(EthersContext);\n    const { tokens } = useContext(GlobalContext);\n    const { getMyLPTokens, getPools } = useSDK();\n    const [loading, setLoading] = useState(true);\n    const [lpTokens, setLPTokens] = useState<LPToken[]>([]);\n    const [selectedLPToken, setSelectedLPToken] = useState<LPToken>();\n    const [selectedLPTokenAllowed, setSelectedLPTokenAllowed] = useState(false);\n    const [amount, setAmount] = useState(\"\");\n\n    const updateLPTokens = async () => {\n        try {\n            const method = loadPools ? getPools : getMyLPTokens;\n            const data = await method();\n            if (data) {\n                setLPTokens(data);\n            }\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    useEffect(() => {\n        if (!selectedLPToken) {\n            setAmount(\"\");\n        }\n    }, [selectedLPToken]);\n\n    useEffect(() => {\n        if (provider && signer && (loadPools || tokens.length > 0)) {\n            updateLPTokens();\n\n            const name = \"updateLPTokens()\";\n            addOnBlockListener(name, updateLPTokens);\n            return () => {\n                removeOnBlockListener(name);\n            };\n        }\n    }, [provider, signer, tokens.length, address]);\n\n    return {\n        ...state,\n        loading: state.loading || loading,\n        lpTokens,\n        updateLPTokens,\n        selectedLPToken,\n        setSelectedLPToken,\n        selectedLPTokenAllowed,\n        setSelectedLPTokenAllowed,\n        amount,\n        setAmount\n    };\n};\n\nexport default useLPTokensState;\n","import { useCallback, useContext, useEffect, useState } from \"react\";\n\nimport { ethers } from \"ethers\";\nimport useAsyncEffect from \"use-async-effect\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport { getContract, parseBalance } from \"../utils\";\nimport useLPTokensState, { LPTokensState } from \"./useLPTokensState\";\nimport useSDK, { MASTER_CHEF } from \"./useSDK\";\n\nexport interface FarmingState extends LPTokensState {\n    action?: Action;\n    setAction: (action?: Action) => void;\n    expectedSushiRewardPerBlock?: ethers.BigNumber;\n    amountDeposited?: ethers.BigNumber;\n    pendingSushi?: ethers.BigNumber;\n    onDeposit: () => Promise<void>;\n    depositing: boolean;\n    onWithdraw: () => Promise<void>;\n    withdrawing: boolean;\n}\n\nexport type Action = \"deposit\" | \"withdraw\";\n\n// tslint:disable-next-line:max-func-body-length\nconst useFarmingState: () => FarmingState = () => {\n    const state = useLPTokensState(true);\n    const { provider, signer, getTokenAllowance } = useContext(EthersContext);\n    const { getExpectedSushiRewardPerBlock, deposit, withdraw } = useSDK();\n    const [action, setAction] = useState<Action>();\n    const [loading, setLoading] = useState(false);\n    const [expectedSushiRewardPerBlock, setExpectedSushiRewardPerBlock] = useState<ethers.BigNumber>();\n    const [amountDeposited, setAmountDeposited] = useState<ethers.BigNumber>();\n    const [pendingSushi, setPendingSushi] = useState<ethers.BigNumber>();\n    const [depositing, setDepositing] = useState(false);\n    const [withdrawing, setWithdrawing] = useState(false);\n\n    useEffect(() => {\n        setAction(undefined);\n        setLoading(false);\n        setDepositing(false);\n        setWithdrawing(false);\n        setExpectedSushiRewardPerBlock(undefined);\n    }, [state.selectedLPToken]);\n\n    useAsyncEffect(async () => {\n        if (signer && state.selectedLPToken) {\n            setLoading(true);\n            try {\n                setExpectedSushiRewardPerBlock(await getExpectedSushiRewardPerBlock(state.selectedLPToken));\n\n                const address = await signer.getAddress();\n                const masterChef = getContract(\"MasterChef\", MASTER_CHEF, signer);\n                const id = state.selectedLPToken.id!;\n                const { amount } = await masterChef.userInfo(id, address);\n                const pending = await masterChef.pendingSushi(id, address);\n                setAmountDeposited(amount);\n                setPendingSushi(pending);\n            } finally {\n                setLoading(false);\n            }\n        }\n    }, [signer, state.selectedLPToken]);\n\n    useAsyncEffect(async () => {\n        if (provider && signer && state.selectedLPToken) {\n            setLoading(true);\n            state.setSelectedLPTokenAllowed(false);\n            try {\n                const minAllowance = ethers.BigNumber.from(2)\n                    .pow(96)\n                    .sub(1);\n                const allowance = await getTokenAllowance(state.selectedLPToken.address, MASTER_CHEF);\n                state.setSelectedLPTokenAllowed(ethers.BigNumber.from(allowance).gte(minAllowance));\n            } finally {\n                setLoading(false);\n            }\n        }\n    }, [provider, signer, state.selectedLPToken]);\n\n    const onDeposit = useCallback(async () => {\n        if (state.selectedLPToken?.id && state.amount && signer) {\n            setDepositing(true);\n            try {\n                const amount = parseBalance(state.amount, state.selectedLPToken.decimals);\n                const tx = await deposit(state.selectedLPToken.id, amount);\n                await tx.wait();\n                await state.updateLPTokens();\n                state.setSelectedLPToken(undefined);\n            } finally {\n                setDepositing(false);\n            }\n        }\n    }, [state.selectedLPToken, state.amount, signer]);\n\n    const onWithdraw = useCallback(async () => {\n        if (state.selectedLPToken?.id && state.amount && signer) {\n            setWithdrawing(true);\n            try {\n                const amount = parseBalance(state.amount, state.selectedLPToken.decimals);\n                const tx = await withdraw(state.selectedLPToken.id, amount);\n                await tx.wait();\n                await state.updateLPTokens();\n                state.setSelectedLPToken(undefined);\n            } finally {\n                setWithdrawing(false);\n            }\n        }\n    }, [state.selectedLPToken, state.amount, signer]);\n\n    return {\n        ...state,\n        loading: state.loading || loading,\n        action,\n        setAction,\n        expectedSushiRewardPerBlock,\n        amountDeposited,\n        pendingSushi,\n        onDeposit,\n        depositing,\n        onWithdraw,\n        withdrawing\n    };\n};\n\nexport default useFarmingState;\n","import React, { useCallback, useContext } from \"react\";\nimport { Image, View } from \"react-native\";\n\nimport * as Linking from \"expo-linking\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport { GlobalContext } from \"../context/GlobalContext\";\nimport Button from \"./Button\";\n\nconst ConnectWallet = () => {\n    const { darkMode } = useContext(GlobalContext);\n    const onPress = useCallback(async () => {\n        if (window.ethereum) {\n            await window.ethereum.enable();\n        } else {\n            await Linking.openURL(\"https://metamask.io/\");\n        }\n    }, [window.ethereum]);\n    const title = window.ethereum ? \"Connect\" : \"Install MetaMask\";\n    return (\n        <View style={{ flex: 1, alignItems: \"center\", justifyContent: \"center\" }}>\n            <Image\n                source={darkMode ? require(\"../../assets/metamask-dark.png\") : require(\"../../assets/metamask.png\")}\n                style={{ width: 223, height: 183, marginBottom: Spacing.huge }}\n            />\n            <Button type={\"outline\"} size={\"large\"} onPress={onPress} title={title} containerStyle={{ width: 440 }} />\n        </View>\n    );\n};\nexport default ConnectWallet;\n","import React from \"react\";\nimport { View } from \"react-native\";\n\nimport { Link as NativeLink } from \"@react-navigation/native\";\nimport { Spacing } from \"../constants/dimension\";\nimport FlexView from \"./FlexView\";\nimport Text from \"./Text\";\n\nconst Footer = () => (\n    <View\n        // @ts-ignore\n        style={{\n            position: \"fixed\",\n            bottom: 0,\n            width: \"100%\",\n            margin: Spacing.content\n        }}>\n        <Text note={true}>\n            © 2020 Built by <Link to={\"https://levx.io\"} text={\"Team LevX\"} />\n        </Text>\n        <FlexView style={{ marginLeft: Spacing.small }}>\n            <Link to={\"https://github.com/lev-x\"} text={\"GitHub\"} />\n            <Link to={\"https://twitter.com/LevxApp\"} text={\"Twitter\"} />\n            <Link to={\"mailto:team@levx.io\"} text={\"Email\"} />\n        </FlexView>\n    </View>\n);\n\nconst Link = ({ to, text }) => (\n    <NativeLink to={to} target={\"_blank\"}>\n        <Text note={true} style={{ textDecorationLine: \"underline\", marginRight: 8 }}>\n            {text}\n        </Text>\n    </NativeLink>\n);\n\nexport default Footer;\n","import React, { useContext } from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport useColors from \"../hooks/useColors\";\nimport FlexView from \"./FlexView\";\nimport Text from \"./Text\";\n\nconst Status = () => {\n    const { shadow, textMedium, textLight, green } = useColors();\n    const { chainId } = useContext(EthersContext);\n    const connected = chainId === 1;\n    const title = connected ? \"Connected\" : \"Not connected\";\n    const color = connected ? green : textLight;\n    return (\n        <FlexView\n            // @ts-ignore\n            style={{\n                position: \"fixed\",\n                right: Spacing.content,\n                bottom: Spacing.normal,\n                height: 40,\n                alignItems: \"center\",\n                justifyContent: \"center\",\n                paddingHorizontal: Spacing.small,\n                borderRadius: 16,\n                shadowColor: shadow,\n                shadowOffset: { width: 0, height: 4 },\n                shadowOpacity: 0.5,\n                shadowRadius: 8\n            }}>\n            <View style={{ backgroundColor: color, width: 6, height: 6, borderRadius: 3, marginRight: 12 }} />\n            <Text style={{ fontSize: 16, color: textMedium, marginRight: 2 }}>{title}</Text>\n            {/*<Icon type={\"material-community\"} name={\"chevron-down\"} color={textLight} size={22} />*/}\n        </FlexView>\n    );\n};\n\nexport default Status;\n","import React, { useContext } from \"react\";\nimport { View } from \"react-native\";\n\nimport ConnectToWallet from \"../components/ConnectToWallet\";\nimport Footer from \"../components/Footer\";\nimport Status from \"../components/Status\";\nimport Text from \"../components/Text\";\nimport { EthersContext } from \"../context/EthersContext\";\n\nconst Screen = props => {\n    const { address, chainId } = useContext(EthersContext);\n    if (!address) {\n        return <ConnectToWallet />;\n    }\n    if (chainId !== 1) {\n        return (\n            <View style={{ flex: 1, alignItems: \"center\", justifyContent: \"center\" }}>\n                <Text light={true} style={{ textAlign: \"center\" }}>\n                    {\"Please switch network to\\n'Ethereum Mainnet'\"}\n                </Text>\n            </View>\n        );\n    }\n    return (\n        <View style={{ flex: 1 }}>\n            <View {...props} />\n            <Status />\n            <Footer />\n        </View>\n    );\n};\n\nexport default Screen;\n","import React, { FC, useCallback, useState } from \"react\";\nimport { Image, TouchableHighlight, View } from \"react-native\";\nimport { Hoverable } from \"react-native-web-hover\";\n\nimport { useNavigation } from \"@react-navigation/native\";\nimport { ethers } from \"ethers\";\nimport useAsyncEffect from \"use-async-effect\";\nimport ApproveButton from \"../components/ApproveButton\";\nimport Button from \"../components/Button\";\nimport ButtonGroup from \"../components/ButtonGroup\";\nimport CloseIcon from \"../components/CloseIcon\";\nimport Column from \"../components/Column\";\nimport Container from \"../components/Container\";\nimport Content from \"../components/Content\";\nimport ErrorMessage from \"../components/ErrorMessage\";\nimport FetchingButton from \"../components/FetchingButton\";\nimport FlexView from \"../components/FlexView\";\nimport InsufficientBalanceButton from \"../components/InsufficientBalanceButton\";\nimport LPTokenSelect, { LPTokenItemProps } from \"../components/LPTokenSelect\";\nimport Meta from \"../components/Meta\";\nimport Notice from \"../components/Notice\";\nimport SelectIcon from \"../components/SelectIcon\";\nimport Subtitle from \"../components/Subtitle\";\nimport Text from \"../components/Text\";\nimport TokenInput from \"../components/TokenInput\";\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport useFarmingState, { Action, FarmingState } from \"../hooks/useFarmingState\";\nimport { MASTER_CHEF } from \"../hooks/useSDK\";\nimport LPToken from \"../types/LPToken\";\nimport MetamaskError from \"../types/MetamaskError\";\nimport { formatBalance, isEmptyValue, parseBalance } from \"../utils\";\nimport Screen from \"./Screen\";\n\nconst FarmingScreen = () => {\n    return (\n        <Screen>\n            <Container>\n                <Content>\n                    <View style={{ alignItems: \"center\", marginBottom: Spacing.large }}>\n                        <Farming />\n                    </View>\n                </Content>\n            </Container>\n        </Screen>\n    );\n};\n\nconst Farming = () => {\n    const state = useFarmingState();\n    return (\n        <>\n            <Column>\n                <Text h4={true} style={{ textAlign: \"center\" }}>\n                    🌾 Farming\n                </Text>\n            </Column>\n            <LPTokenSelect\n                state={state}\n                title={\"1. Select a pool for yield farming:\"}\n                emptyText={\"Temporarily unable to load pools.\"}\n                Item={TokenItem}\n            />\n            <ActionSelect state={state} />\n            <Deposit state={state} />\n            <Withdraw state={state} />\n        </>\n    );\n};\n\nconst TokenItem: FC<LPTokenItemProps> = props => {\n    const { background, backgroundHovered, textMedium } = useColors();\n    const amount = formatBalance(props.token.totalDeposited || \"0\", props.token.decimals, 4);\n    const onPress = useCallback(() => {\n        props.onSelectToken(props.token);\n    }, [props.onSelectToken, props.token]);\n    return (\n        <Hoverable>\n            {({ hovered }) => (\n                <TouchableHighlight onPress={onPress}>\n                    <View style={{ backgroundColor: hovered ? backgroundHovered : background }}>\n                        <FlexView style={{ alignItems: \"center\", margin: Spacing.small }}>\n                            <View>\n                                <LogoSymbol token={props.token.tokenA} />\n                                <LogoSymbol token={props.token.tokenB} />\n                            </View>\n                            <View style={{ flex: 1 }}>\n                                <Text style={{ textAlign: \"right\", fontSize: 15 }}>Total Deposited</Text>\n                                <Text light={true} style={{ textAlign: \"right\", fontSize: 22, color: textMedium }}>\n                                    {amount}\n                                </Text>\n                            </View>\n                            {props.selected ? <CloseIcon /> : <SelectIcon />}\n                        </FlexView>\n                    </View>\n                </TouchableHighlight>\n            )}\n        </Hoverable>\n    );\n};\n\nconst LogoSymbol = ({ token }) => {\n    const { textMedium } = useColors();\n    return (\n        <FlexView style={{ alignItems: \"center\", marginBottom: Spacing.tiny }}>\n            <Image\n                source={{ uri: token.logoURI }}\n                style={{ width: 24, height: 24, backgroundColor: \"white\", borderRadius: 12 }}\n            />\n            <Text light={true} style={{ fontSize: 22, color: textMedium, marginLeft: Spacing.small }}>\n                {token.symbol}\n            </Text>\n        </FlexView>\n    );\n};\n\nconst ActionSelect = ({ state }: { state: FarmingState }) => {\n    if (!state.selectedLPToken) {\n        return <Column noTopMargin={true} />;\n    }\n    const actions = [\"deposit\", \"withdraw\"];\n    const index = state.action ? actions.indexOf(state.action) : null;\n    const onPress = useCallback((i: number) => {\n        state.setAction(actions[i] as Action);\n    }, []);\n    const radius = Spacing.tiny;\n    return (\n        <Column>\n            <Subtitle text={\"2. What do you want to do with this pool?\"} />\n            <ButtonGroup\n                selectedIndex={index}\n                onPress={onPress}\n                buttons={[\"☘️ Deposit\", \"🚜 Withdraw\"]}\n                buttonStyle={{\n                    borderTopLeftRadius: index === 0 ? radius : 0,\n                    borderBottomLeftRadius: index === 0 ? radius : 0,\n                    borderTopRightRadius: index === 1 ? radius : 0,\n                    borderBottomRightRadius: index === 1 ? radius : 0\n                }}\n                containerStyle={{ marginHorizontal: Spacing.small }}\n            />\n        </Column>\n    );\n};\n\nconst Deposit = ({ state }: { state: FarmingState }) => {\n    if (!state.selectedLPToken || state.action !== \"deposit\") {\n        return <Column noTopMargin={true} />;\n    }\n    return (\n        <>\n            <AddLiquidityNotice state={state} />\n            <TokenInput\n                title={\"3. How many tokens would you DEPOSIT?\"}\n                token={state.selectedLPToken}\n                hidden={state.selectedLPToken.balance.isZero()}\n                amount={state.amount}\n                onAmountChanged={state.setAmount}\n            />\n            <DepositInfo state={state} />\n            <DepositControls state={state} />\n        </>\n    );\n};\n\nconst AddLiquidityNotice = ({ state }: { state: FarmingState }) => {\n    if (!state.selectedLPToken!.balance.isZero()) {\n        return <Column noTopMargin={true} />;\n    }\n    return (\n        <Column noTopMargin={true}>\n            <View style={{ marginTop: Spacing.large, marginHorizontal: Spacing.small }}>\n                <Notice\n                    color={\"red\"}\n                    text={\n                        \"You need some \" +\n                        state.selectedLPToken!.symbol +\n                        \" token to start farming. Add liquidity to get the LP token.\"\n                    }\n                />\n            </View>\n            <AddLiquidityButton />\n        </Column>\n    );\n};\n\nconst DepositInfo = ({ state }: { state: FarmingState }) => {\n    if (state.selectedLPToken!.balance.isZero()) {\n        return <Column noTopMargin={true} />;\n    }\n    const balance = formatBalance(state.selectedLPToken!.balance, state.selectedLPToken!.decimals);\n    const sushiReward =\n        state.expectedSushiRewardPerBlock && state.amount\n            ? formatBalance(\n                  state.expectedSushiRewardPerBlock\n                      .mul(parseBalance(state.amount, 18))\n                      .div(ethers.BigNumber.from(10).pow(18)),\n                  18\n              )\n            : null;\n    return (\n        <Column noTopMargin={true}>\n            <Meta label={\"My Balance\"} text={balance} />\n            {!isEmptyValue(state.amount) && <Meta label={\"SUSHI Reward per Block\"} text={sushiReward || \"…\"} />}\n        </Column>\n    );\n};\n\nconst DepositControls = ({ state }: { state: FarmingState }) => {\n    const [error, setError] = useState<MetamaskError>({});\n    useAsyncEffect(() => setError({}), [state.selectedLPToken]);\n    if (state.selectedLPToken!.balance.isZero()) {\n        return <Column noTopMargin={true} />;\n    }\n    const approveRequired = !state.selectedLPTokenAllowed;\n    const disabled = approveRequired || isEmptyValue(state.amount);\n    return (\n        <Column>\n            {parseBalance(state.amount, state.selectedLPToken!.decimals).gt(state.selectedLPToken!.balance) ? (\n                <InsufficientBalanceButton symbol={state.selectedLPToken!.symbol} />\n            ) : state.loading ? (\n                <FetchingButton />\n            ) : (\n                <>\n                    <ApproveButton\n                        token={state.selectedLPToken!}\n                        spender={MASTER_CHEF}\n                        onSuccess={() => state.setSelectedLPTokenAllowed(true)}\n                        onError={setError}\n                        hidden={isEmptyValue(state.amount) || !approveRequired}\n                    />\n                    <DepositButton state={state} onError={setError} disabled={disabled} />\n                </>\n            )}\n            {error.message && error.code !== 4001 && <ErrorMessage error={error} />}\n        </Column>\n    );\n};\n\nconst AddLiquidityButton = () => {\n    const { navigate } = useNavigation();\n    const onPress = useCallback(() => {\n        navigate(\"Liquidity\");\n    }, [navigate]);\n    return (\n        <Button\n            color={\"red\"}\n            title={\"Add Liquidity\"}\n            containerStyle={{ marginTop: Spacing.normal }}\n            onPress={onPress}\n        />\n    );\n};\n\nconst DepositButton = ({\n    state,\n    onError,\n    disabled\n}: {\n    state: FarmingState;\n    onError: (e) => void;\n    disabled: boolean;\n}) => {\n    const onPress = useCallback(() => {\n        onError({});\n        state.onDeposit().catch(onError);\n    }, [state.onDeposit, onError]);\n    return <Button size={\"large\"} title={\"Deposit\"} disabled={disabled} loading={state.depositing} onPress={onPress} />;\n};\n\nconst Withdraw = ({ state }: { state: FarmingState }) => {\n    if (!state.selectedLPToken || state.action !== \"withdraw\") {\n        return <Column noTopMargin={true} />;\n    }\n    const token: LPToken = {\n        ...state.selectedLPToken,\n        balance: state.amountDeposited || ethers.constants.Zero\n    };\n    return (\n        <Column>\n            <NoLPTokenNotice state={state} />\n            <TokenInput\n                title={\"3. How many tokens would you WITHDRAW?\"}\n                token={token}\n                hidden={state.loading || state.amountDeposited?.isZero() || false}\n                amount={state.amount}\n                onAmountChanged={state.setAmount}\n            />\n            <WithdrawInfo state={state} />\n            <WithdrawControls state={state} />\n        </Column>\n    );\n};\n\nconst NoLPTokenNotice = ({ state }: { state: FarmingState }) => {\n    if (state.loading || !state.amountDeposited?.isZero()) {\n        return <Column noTopMargin={true} />;\n    }\n    return (\n        <Column noTopMargin={true}>\n            <View style={{ marginHorizontal: Spacing.small }}>\n                <Notice\n                    text={\"You don't have any \" + state.selectedLPToken!.symbol + \" token deposited. Deposit it first.\"}\n                />\n            </View>\n        </Column>\n    );\n};\n\nconst WithdrawInfo = ({ state }: { state: FarmingState }) => {\n    if (state.loading || !state.amountDeposited || state.amountDeposited.isZero()) {\n        return <Column noTopMargin={true} />;\n    }\n    const deposit = formatBalance(state.amountDeposited, state.selectedLPToken!.decimals);\n    const pendingSushi = formatBalance(state.pendingSushi || ethers.constants.Zero, state.selectedLPToken!.decimals);\n    return (\n        <Column noTopMargin={true}>\n            <Meta label={\"My Deposit\"} text={deposit} />\n            <Meta label={\"Pending Sushi Reward\"} text={pendingSushi} />\n            <View style={{ marginTop: Spacing.normal, marginHorizontal: Spacing.small }}>\n                <Notice text={\"All pending sushi reward will be transferred to you if you withdraw.\"} />\n            </View>\n        </Column>\n    );\n};\n\nconst WithdrawControls = ({ state }: { state: FarmingState }) => {\n    const [error, setError] = useState<MetamaskError>({});\n    useAsyncEffect(() => setError({}), [state.selectedLPToken]);\n    if (state.loading) {\n        return (\n            <Column>\n                <FetchingButton />\n            </Column>\n        );\n    }\n    if (!state.amountDeposited || state.amountDeposited.isZero()) {\n        return <Column noTopMargin={true} />;\n    }\n    return (\n        <Column>\n            {parseBalance(state.amount, state.selectedLPToken!.decimals).gt(state.amountDeposited) ? (\n                <InsufficientBalanceButton symbol={state.selectedLPToken!.symbol} />\n            ) : (\n                <WithdrawButton state={state} onError={setError} disabled={isEmptyValue(state.amount)} />\n            )}\n            {error.message && error.code !== 4001 && <ErrorMessage error={error} />}\n        </Column>\n    );\n};\n\nconst WithdrawButton = ({\n    state,\n    onError,\n    disabled\n}: {\n    state: FarmingState;\n    onError: (e) => void;\n    disabled: boolean;\n}) => {\n    const onPress = useCallback(() => {\n        onError({});\n        state.onWithdraw().catch(onError);\n    }, [state.onWithdraw, onError]);\n    return (\n        <Button size={\"large\"} title={\"Withdraw\"} disabled={disabled} loading={state.withdrawing} onPress={onPress} />\n    );\n};\n\nexport default FarmingScreen;\n","import React, { FC, useCallback, useContext, useMemo } from \"react\";\nimport { ActivityIndicator, FlatList, Image, TouchableHighlight, View } from \"react-native\";\nimport { Hoverable } from \"react-native-web-hover\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport { GlobalContext } from \"../context/GlobalContext\";\nimport useColors from \"../hooks/useColors\";\nimport Token from \"../types/Token\";\nimport { formatBalance } from \"../utils\";\nimport Border from \"./Border\";\nimport CloseIcon from \"./CloseIcon\";\nimport Column from \"./Column\";\nimport FlexView from \"./FlexView\";\nimport SelectIcon from \"./SelectIcon\";\nimport Subtitle from \"./Subtitle\";\nimport Text from \"./Text\";\n\ninterface TokenSelectProps {\n    title: string;\n    hidden: boolean;\n    symbol: string;\n    onChangeSymbol: (symbol: string) => void;\n    filterTokens: (token: Token) => boolean;\n}\n\nconst TokenSelect: FC<TokenSelectProps> = props => {\n    const { tokens } = useContext(GlobalContext);\n    const token = tokens.find(t => t.symbol === props.symbol);\n    const onSelectToken = useCallback(\n        t => {\n            props.onChangeSymbol(t.symbol);\n        },\n        [props.onChangeSymbol]\n    );\n    const onUnselectToken = useCallback(() => {\n        props.onChangeSymbol(\"\");\n    }, [props.onChangeSymbol]);\n    if (/*!props.from && props.oppositeSymbol === \"\"*/ props.hidden) {\n        return <Column noTopMargin={true} />;\n    }\n    return (\n        <Column>\n            <Subtitle text={props.title} />\n            {token ? (\n                <TokenItem token={token} selected={true} onSelectToken={onUnselectToken} />\n            ) : (\n                <TokenList filterTokens={props.filterTokens} onSelectToken={onSelectToken} />\n            )}\n        </Column>\n    );\n};\n\nconst TokenList = (props: { filterTokens: (token: Token) => boolean; onSelectToken: (token: Token) => void }) => {\n    const { loadingTokens } = useContext(GlobalContext);\n    const { tokens } = useContext(GlobalContext);\n    const renderItem = useCallback(({ item }) => {\n        return <TokenItem key={item.address} token={item} selected={false} onSelectToken={props.onSelectToken} />;\n    }, []);\n    const data = useMemo(\n        () =>\n            tokens\n                .filter(props.filterTokens)\n                .sort(\n                    (t1, t2) =>\n                        (t2.balance.isZero() ? 0 : 10000000000) -\n                        (t1.balance.isZero() ? 0 : 10000000000) +\n                        t1.symbol.localeCompare(t2.symbol)\n                ),\n        [tokens]\n    );\n    return loadingTokens ? (\n        <ActivityIndicator size={\"large\"} style={{ marginTop: Spacing.large }} />\n    ) : data.length === 0 ? (\n        <EmptyList />\n    ) : (\n        <FlatList\n            keyExtractor={item => JSON.stringify(item)}\n            data={data}\n            renderItem={renderItem}\n            ItemSeparatorComponent={Border}\n        />\n    );\n};\n\nconst EmptyList = () => {\n    return (\n        <View style={{ margin: Spacing.normal }}>\n            <Text light={true} style={{ textAlign: \"center\", width: \"100%\" }}>\n                {\"You don't have any token with balance.\\nTransfer tokens to your address first.\"}\n            </Text>\n        </View>\n    );\n};\n\nconst TokenItem = (props: { token: Token; selected: boolean; onSelectToken: (token: Token) => void }) => {\n    const { background, backgroundHovered, textMedium } = useColors();\n    const onPress = useCallback(() => {\n        props.onSelectToken(props.token);\n    }, [props.onSelectToken, props.token]);\n    return (\n        <Hoverable>\n            {({ hovered }) => (\n                <TouchableHighlight onPress={onPress}>\n                    <View style={{ backgroundColor: hovered ? backgroundHovered : background }}>\n                        <FlexView style={{ alignItems: \"center\", margin: Spacing.small }}>\n                            <Image\n                                source={{ uri: props.token.logoURI }}\n                                style={{ width: 24, height: 24, backgroundColor: \"white\", borderRadius: 12 }}\n                            />\n                            <Text light={true} style={{ marginLeft: Spacing.small, fontSize: 22, color: textMedium }}>\n                                {props.token.symbol}\n                            </Text>\n                            <Text light={true} style={{ flex: 1, textAlign: \"right\", fontSize: 22, color: textMedium }}>\n                                {formatBalance(props.token.balance, props.token.decimals, 8)}\n                            </Text>\n                            {props.selected ? <CloseIcon /> : <SelectIcon />}\n                        </FlexView>\n                    </View>\n                </TouchableHighlight>\n            )}\n        </Hoverable>\n    );\n};\n\nexport default TokenSelect;\n","import React from \"react\";\n\nimport { TokenPairState } from \"../hooks/useTokenPairState\";\nimport Button from \"./Button\";\n\nconst UnsupportedButton = ({ state }: { state: TokenPairState }) => {\n    return <Button size={\"large\"} title={state.fromSymbol + \"-\" + state.toSymbol + \" Not Supported\"} disabled={true} />;\n};\n\nexport default UnsupportedButton;\n","import React, { useCallback, useState } from \"react\";\n\nimport { ethers } from \"ethers\";\nimport useAsyncEffect from \"use-async-effect\";\nimport { AddLiquidityState } from \"../hooks/useAddLiquidityState\";\nimport { ROUTER } from \"../hooks/useSDK\";\nimport MetamaskError from \"../types/MetamaskError\";\nimport { convertAmount, convertToken, formatBalance, isEmptyValue, parseBalance } from \"../utils\";\nimport ApproveButton from \"./ApproveButton\";\nimport Button from \"./Button\";\nimport Column from \"./Column\";\nimport ErrorMessage from \"./ErrorMessage\";\nimport FetchingButton from \"./FetchingButton\";\nimport InsufficientBalanceButton from \"./InsufficientBalanceButton\";\nimport Meta from \"./Meta\";\nimport Notice from \"./Notice\";\nimport Text from \"./Text\";\nimport TokenInput from \"./TokenInput\";\nimport TokenSelect from \"./TokenSelect\";\nimport UnsupportedButton from \"./UnsupportedButton\";\n\nconst AddLiquidity = ({ state }: { state: AddLiquidityState }) => (\n    <>\n        <Column>\n            <Text h4={true} style={{ textAlign: \"center\" }}>\n                🔥 Add Liquidity\n            </Text>\n        </Column>\n        <TokenSelect\n            title={\"1. Select the 1st token you want to ADD:\"}\n            hidden={false}\n            symbol={state.fromSymbol}\n            onChangeSymbol={state.setFromSymbol}\n            filterTokens={token => token.balance && !token.balance.isZero()}\n        />\n        <TokenSelect\n            title={\"2. Select the 2nd token you want to ADD:\"}\n            hidden={state.fromSymbol === \"\"}\n            symbol={state.toSymbol}\n            onChangeSymbol={state.setToSymbol}\n            filterTokens={token => token.symbol !== state.fromSymbol && token.balance && !token.balance.isZero()}\n        />\n        <FromTokenInput state={state} />\n        <ToTokenInput state={state} />\n        <PriceInfo state={state} />\n        <Controls state={state} />\n    </>\n);\n\nconst FromTokenInput = ({ state }: { state: AddLiquidityState }) => {\n    const onAmountChanged = useCallback(\n        (newAmount: string) => {\n            state.setFromAmount(newAmount);\n            if (state.pair && state.fromToken) {\n                const fromPrice = state.pair.priceOf(convertToken(state.fromToken));\n                state.setToAmount(fromPrice.quote(convertAmount(state.fromToken, newAmount)).toExact());\n            }\n        },\n        [state.pair, state.fromToken]\n    );\n    return (\n        <TokenInput\n            title={\"3. How many \" + state.fromSymbol + \"-\" + state.toSymbol + \" do you want to supply?\"}\n            token={state.fromToken}\n            hidden={!state.fromToken || !state.toToken}\n            amount={state.fromAmount}\n            onAmountChanged={onAmountChanged}\n        />\n    );\n};\n\nconst ToTokenInput = ({ state }: { state: AddLiquidityState }) => {\n    const onAmountChanged = useCallback(\n        (newAmount: string) => {\n            state.setToAmount(newAmount);\n            if (state.pair && state.toToken) {\n                const toPrice = state.pair.priceOf(convertToken(state.toToken));\n                state.setFromAmount(toPrice.quote(convertAmount(state.toToken, newAmount)).toExact());\n            }\n        },\n        [state.pair, state.toToken]\n    );\n    return (\n        <TokenInput\n            token={state.toToken}\n            hidden={!state.fromToken || !state.toToken}\n            amount={state.toAmount}\n            onAmountChanged={onAmountChanged}\n        />\n    );\n};\n\nconst PriceInfo = ({ state }: { state: AddLiquidityState }) => {\n    if (!isEmptyValue(state.fromAmount) && !state.loading && !state.pair) {\n        const initialPrice = formatBalance(\n            parseBalance(state.toAmount, state.toToken?.decimals)\n                .mul(ethers.BigNumber.from(10).pow(8))\n                .div(parseBalance(state.fromAmount, state.fromToken?.decimals)),\n            8\n        );\n        return (\n            <Column noTopMargin={true}>\n                <Notice\n                    text={\n                        \"You are the first liquidity provider.\\n\" +\n                        \"The ratio of tokens you add will set the price of this pool.\"\n                    }\n                />\n                {!!state.fromAmount && !!state.toAmount && (\n                    <Price price={initialPrice} fromSymbol={state.fromSymbol} toSymbol={state.toSymbol} />\n                )}\n            </Column>\n        );\n    }\n    if (!state.fromToken || !state.toToken) {\n        return <Column noTopMargin={true} />;\n    }\n    const price = state.pair ? state.pair.priceOf(convertToken(state.fromToken)).toSignificant(8) : \"…\";\n    return (\n        <Column noTopMargin={true}>\n            <Price price={price} fromSymbol={state.fromSymbol} toSymbol={state.toSymbol} />\n        </Column>\n    );\n};\n\nconst Price = ({ price, fromSymbol, toSymbol }) => (\n    <Meta label={\"Price\"} text={price + \" \" + toSymbol + \" = 1 \" + fromSymbol} />\n);\n\n// tslint:disable-next-line:max-func-body-length\nconst Controls = ({ state }: { state: AddLiquidityState }) => {\n    const [error, setError] = useState<MetamaskError>({});\n    useAsyncEffect(() => setError({}), [state.fromSymbol, state.toSymbol, state.fromAmount]);\n    if (!state.fromToken || !state.toToken) {\n        return <Column noTopMargin={true} />;\n    }\n    const insufficientFromToken = parseBalance(state.fromAmount, state.fromToken.decimals).gt(state.fromToken.balance);\n    const insufficientToToken = parseBalance(state.toAmount, state.toToken.decimals).gt(state.toToken.balance);\n    const fromApproveRequired = state.fromSymbol !== \"ETH\" && !state.fromTokenAllowed;\n    const toApproveRequired = state.toSymbol !== \"ETH\" && !state.toTokenAllowed;\n    const disabled =\n        fromApproveRequired || toApproveRequired || isEmptyValue(state.fromAmount) || isEmptyValue(state.toAmount);\n    return (\n        <Column>\n            {insufficientFromToken ? (\n                <InsufficientBalanceButton symbol={state.fromSymbol} />\n            ) : insufficientToToken ? (\n                <InsufficientBalanceButton symbol={state.toSymbol} />\n            ) : state.loading || !state.pair ? (\n                <FetchingButton />\n            ) : (state.fromSymbol === \"ETH\" && state.toSymbol === \"WETH\") ||\n              (state.fromSymbol === \"WETH\" && state.toSymbol === \"ETH\") ? (\n                <UnsupportedButton state={state} />\n            ) : (\n                <>\n                    <ApproveButton\n                        token={state.fromToken}\n                        spender={ROUTER}\n                        onSuccess={() => state.setFromTokenAllowed(true)}\n                        onError={setError}\n                        hidden={!fromApproveRequired}\n                    />\n                    <ApproveButton\n                        token={state.toToken}\n                        spender={ROUTER}\n                        onSuccess={() => state.setToTokenAllowed(true)}\n                        onError={setError}\n                        hidden={!toApproveRequired}\n                    />\n                    <SupplyButton state={state} onError={setError} disabled={disabled} />\n                </>\n            )}\n            {error.message && error.code !== 4001 && <ErrorMessage error={error} />}\n        </Column>\n    );\n};\n\nconst SupplyButton = ({\n    state,\n    onError,\n    disabled\n}: {\n    state: AddLiquidityState;\n    onError: (e) => void;\n    disabled: boolean;\n}) => {\n    const onPress = useCallback(() => {\n        onError({});\n        state.onAdd().catch(onError);\n    }, [state.onAdd, onError]);\n    return (\n        <Button\n            size={\"large\"}\n            title={\"Supply \" + state.fromSymbol + \"-\" + state.toSymbol}\n            disabled={disabled}\n            loading={state.adding}\n            onPress={onPress}\n        />\n    );\n};\n\nexport default AddLiquidity;\n","import React, { FC, useCallback, useState } from \"react\";\nimport { Image, TouchableHighlight, View } from \"react-native\";\nimport { Icon } from \"react-native-elements\";\nimport { Hoverable } from \"react-native-web-hover\";\n\nimport useAsyncEffect from \"use-async-effect\";\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport { RemoveLiquidityState } from \"../hooks/useRemoveLiquidityState\";\nimport { ROUTER } from \"../hooks/useSDK\";\nimport MetamaskError from \"../types/MetamaskError\";\nimport { formatBalance, isEmptyValue, parseBalance } from \"../utils\";\nimport ApproveButton from \"./ApproveButton\";\nimport Button from \"./Button\";\nimport CloseIcon from \"./CloseIcon\";\nimport Column from \"./Column\";\nimport ErrorMessage from \"./ErrorMessage\";\nimport FetchingButton from \"./FetchingButton\";\nimport FlexView from \"./FlexView\";\nimport InsufficientBalanceButton from \"./InsufficientBalanceButton\";\nimport LPTokenSelect, { LPTokenItemProps } from \"./LPTokenSelect\";\nimport SelectIcon from \"./SelectIcon\";\nimport Text from \"./Text\";\nimport TokenInput from \"./TokenInput\";\n\nconst RemoveLiquidity = ({ state }: { state: RemoveLiquidityState }) => (\n    <>\n        <Column>\n            <Text h4={true} style={{ textAlign: \"center\" }}>\n                🎉 Remove Liquidity\n            </Text>\n        </Column>\n        <LPTokenSelect\n            state={state}\n            title={\"1. Select the pool to REMOVE liquidity from:\"}\n            emptyText={\"You don't have any liquidity.\"}\n            Item={TokenItem}\n        />\n        <TokenInput\n            title={\"2. How many tokens do you want to REMOVE?\"}\n            token={state.selectedLPToken}\n            hidden={!state.selectedLPToken}\n            amount={state.amount}\n            onAmountChanged={state.setAmount}\n        />\n        <AmountInfo state={state} />\n        <Controls state={state} />\n    </>\n);\n\nconst TokenItem: FC<LPTokenItemProps> = props => {\n    const { background, backgroundHovered, textMedium } = useColors();\n    const balance = formatBalance(props.token.balance, props.token.decimals, 18);\n    const onPress = useCallback(() => {\n        props.onSelectToken(props.token);\n    }, [props.onSelectToken, props.token]);\n    return (\n        <Hoverable>\n            {({ hovered }) => (\n                <TouchableHighlight onPress={onPress}>\n                    <View style={{ backgroundColor: hovered ? backgroundHovered : background }}>\n                        <FlexView style={{ alignItems: \"center\", margin: Spacing.small }}>\n                            <View>\n                                <LogoSymbol token={props.token.tokenA} />\n                                <LogoSymbol token={props.token.tokenB} />\n                            </View>\n                            <View style={{ flex: 1 }}>\n                                <Text note={true} style={{ textAlign: \"right\" }}>\n                                    My Balance\n                                </Text>\n                                <Text light={true} style={{ textAlign: \"right\", fontSize: 22, color: textMedium }}>\n                                    {balance}\n                                </Text>\n                            </View>\n                            {props.selected ? <CloseIcon /> : <SelectIcon />}\n                        </FlexView>\n                    </View>\n                </TouchableHighlight>\n            )}\n        </Hoverable>\n    );\n};\n\nconst LogoSymbol = ({ token }) => {\n    const { textMedium } = useColors();\n    return (\n        <FlexView style={{ alignItems: \"center\", marginBottom: Spacing.tiny }}>\n            <Image\n                source={{ uri: token.logoURI }}\n                style={{ width: 24, height: 24, backgroundColor: \"white\", borderRadius: 12 }}\n            />\n            <Text light={true} style={{ fontSize: 22, color: textMedium, marginLeft: Spacing.small }}>\n                {token.symbol}\n            </Text>\n        </FlexView>\n    );\n};\n\nconst AmountInfo = ({ state }: { state: RemoveLiquidityState }) => {\n    if (!state.selectedLPToken || isEmptyValue(state.fromAmount) || isEmptyValue(state.toAmount)) {\n        return <Column noTopMargin={true} />;\n    }\n    return (\n        <Column noTopMargin={true}>\n            <ArrowDown />\n            <Amount amount={state.fromAmount} token={state.fromToken} />\n            <Amount amount={state.toAmount} token={state.toToken} />\n        </Column>\n    );\n};\n\nconst ArrowDown = () => {\n    const { textLight } = useColors();\n    return <Icon type={\"material-community\"} name={\"arrow-down\"} color={textLight} style={{ margin: Spacing.small }} />;\n};\n\nconst Amount = ({ amount, token }) => {\n    const symbol = token.symbol === \"WETH\" ? \"ETH\" : token.symbol;\n    return (\n        <Text style={{ fontSize: 22, textAlign: \"center\" }}>\n            {amount} {symbol}\n        </Text>\n    );\n};\n\n// tslint:disable-next-line:max-func-body-length\nconst Controls = ({ state }: { state: RemoveLiquidityState }) => {\n    const [error, setError] = useState<MetamaskError>({});\n    useAsyncEffect(() => setError({}), [state.fromSymbol, state.toSymbol, state.fromAmount]);\n    if (!state.selectedLPToken) {\n        return <Column noTopMargin={true} />;\n    }\n    const approveRequired = !state.selectedLPTokenAllowed;\n    const disabled = approveRequired || isEmptyValue(state.amount);\n    return (\n        <Column>\n            {parseBalance(state.amount, state.selectedLPToken.decimals).gt(state.selectedLPToken.balance) ? (\n                <InsufficientBalanceButton symbol={state.selectedLPToken.symbol} />\n            ) : state.loading || !state.pair ? (\n                <FetchingButton />\n            ) : (\n                <>\n                    <ApproveButton\n                        token={state.selectedLPToken}\n                        spender={ROUTER}\n                        onSuccess={() => state.setSelectedLPTokenAllowed(true)}\n                        onError={setError}\n                        hidden={!approveRequired}\n                    />\n                    <RemoveButton state={state} onError={setError} disabled={disabled} />\n                </>\n            )}\n            {error.message && error.code !== 4001 && <ErrorMessage error={error} />}\n        </Column>\n    );\n};\n\nconst RemoveButton = ({\n    state,\n    onError,\n    disabled\n}: {\n    state: RemoveLiquidityState;\n    onError: (e) => void;\n    disabled: boolean;\n}) => {\n    const onPress = useCallback(() => {\n        onError({});\n        state.onRemove().catch(onError);\n    }, [state.onRemove, onError]);\n    return <Button size={\"large\"} title={\"Remove\"} disabled={disabled} loading={state.removing} onPress={onPress} />;\n};\n\nexport default RemoveLiquidity;\n","import { useCallback, useContext, useState } from \"react\";\n\nimport { EthersContext } from \"../context/EthersContext\";\nimport { GlobalContext } from \"../context/GlobalContext\";\nimport { parseBalance } from \"../utils\";\nimport useLiquidityState, { LiquidityState } from \"./useLiquidityState\";\nimport useSDK from \"./useSDK\";\n\nexport interface AddLiquidityState extends LiquidityState {\n    onAdd: () => Promise<void>;\n    adding: boolean;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst useAddLiquidityState: () => AddLiquidityState = () => {\n    const state = useLiquidityState();\n    const { signer } = useContext(EthersContext);\n    const { updateTokens } = useContext(GlobalContext);\n    const [adding, setAdding] = useState(false);\n    const { addLiquidity, addLiquidityETH } = useSDK();\n\n    const onAdd = useCallback(async () => {\n        if (state.fromToken && state.toToken && state.fromAmount && state.toAmount && signer) {\n            setAdding(true);\n            try {\n                const fromAmount = parseBalance(state.fromAmount, state.fromToken.decimals);\n                const toAmount = parseBalance(state.toAmount, state.toToken.decimals);\n                if (state.fromSymbol === \"ETH\" || state.toSymbol === \"ETH\") {\n                    const [token, amount, amountETH] =\n                        state.fromSymbol === \"ETH\"\n                            ? [state.toToken, toAmount, fromAmount]\n                            : [state.fromToken, fromAmount, toAmount];\n                    const tx = await addLiquidityETH(token, amount, amountETH);\n                    await tx.wait();\n                } else {\n                    const tx = await addLiquidity(state.fromToken, state.toToken, fromAmount, toAmount);\n                    await tx.wait();\n                }\n                await updateTokens();\n                state.setFromSymbol(\"\");\n            } finally {\n                setAdding(false);\n            }\n        }\n    }, [state.fromToken, state.toToken, state.fromAmount, state.toAmount, signer, updateTokens]);\n\n    return {\n        ...state,\n        onAdd,\n        adding\n    };\n};\n\nexport default useAddLiquidityState;\n","import { useCallback, useContext, useState } from \"react\";\n\nimport { ethers } from \"ethers\";\nimport useAsyncEffect from \"use-async-effect\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport { GlobalContext } from \"../context/GlobalContext\";\nimport { convertToken, formatBalance, parseBalance, parseCurrencyAmount } from \"../utils\";\nimport useLPTokensState, { LPTokensState } from \"./useLPTokensState\";\nimport useSDK, { ROUTER } from \"./useSDK\";\n\nexport interface RemoveLiquidityState extends LPTokensState {\n    onRemove: () => Promise<void>;\n    removing: boolean;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst useRemoveLiquidityState: () => RemoveLiquidityState = () => {\n    const state = useLPTokensState(false);\n    const { provider, signer, getTokenAllowance } = useContext(EthersContext);\n    const { updateTokens } = useContext(GlobalContext);\n    const { removeLiquidity, removeLiquidityETH } = useSDK();\n    const [loading, setLoading] = useState(false);\n    const [removing, setRemoving] = useState(false);\n\n    useAsyncEffect(async () => {\n        if (provider && signer && state.selectedLPToken) {\n            state.setFromSymbol(state.selectedLPToken.tokenA.symbol);\n            state.setToSymbol(state.selectedLPToken.tokenB.symbol);\n\n            setLoading(true);\n            state.setSelectedLPTokenAllowed(false);\n            try {\n                const minAllowance = ethers.BigNumber.from(2)\n                    .pow(96)\n                    .sub(1);\n                const allowance = await getTokenAllowance(state.selectedLPToken.address, ROUTER);\n                state.setSelectedLPTokenAllowed(ethers.BigNumber.from(allowance).gte(minAllowance));\n            } finally {\n                setLoading(false);\n            }\n        }\n    }, [provider, signer, state.selectedLPToken]);\n\n    // tslint:disable-next-line:max-func-body-length\n    useAsyncEffect(async () => {\n        if (\n            state.selectedLPToken &&\n            state.selectedLPToken.totalSupply &&\n            state.pair &&\n            state.fromToken &&\n            state.toToken\n        ) {\n            if (state.pair.liquidityToken.address === state.selectedLPToken.address) {\n                const fromReserve = parseCurrencyAmount(\n                    state.pair.reserveOf(convertToken(state.fromToken)),\n                    state.fromToken.decimals\n                );\n                const toReserve = parseCurrencyAmount(\n                    state.pair.reserveOf(convertToken(state.toToken)),\n                    state.toToken.decimals\n                );\n                state.setFromAmount(\n                    formatBalance(\n                        parseBalance(state.amount, state.selectedLPToken.decimals)\n                            .mul(fromReserve)\n                            .div(state.selectedLPToken.totalSupply)\n                            .toString(),\n                        state.selectedLPToken.tokenA.decimals\n                    )\n                );\n                state.setToAmount(\n                    formatBalance(\n                        parseBalance(state.amount, state.selectedLPToken.decimals)\n                            .mul(toReserve)\n                            .div(state.selectedLPToken.totalSupply)\n                            .toString(),\n                        state.selectedLPToken.tokenB.decimals\n                    )\n                );\n            }\n        }\n    }, [state.selectedLPToken, state.amount, state.pair, state.fromToken, state.toToken, signer]);\n\n    const onRemove = useCallback(async () => {\n        if (state.fromAmount && state.toAmount && state.selectedLPToken && state.amount && signer) {\n            setRemoving(true);\n            try {\n                const fromAmount = parseBalance(state.fromAmount, state.fromToken!.decimals);\n                const toAmount = parseBalance(state.toAmount, state.toToken!.decimals);\n                const liquidity = parseBalance(state.amount, state.selectedLPToken.decimals);\n                if (state.fromSymbol === \"WETH\" || state.toSymbol === \"WETH\") {\n                    const [token, amountToRemove, amountToRemoveETH] =\n                        state.fromSymbol === \"WETH\"\n                            ? [state.toToken!, toAmount, fromAmount]\n                            : [state.fromToken!, fromAmount, toAmount];\n                    const tx = await removeLiquidityETH(token, liquidity, amountToRemove, amountToRemoveETH);\n                    await tx.wait();\n                } else {\n                    const tx = await removeLiquidity(state.fromToken!, state.toToken!, liquidity, fromAmount, toAmount);\n                    await tx.wait();\n                }\n                await updateTokens();\n                state.setSelectedLPToken(undefined);\n            } finally {\n                setRemoving(false);\n            }\n        }\n    }, [state.fromAmount, state.toAmount, state.selectedLPToken, state.amount, signer, updateTokens]);\n\n    return {\n        ...state,\n        loading: state.loading || loading,\n        onRemove,\n        removing\n    };\n};\n\nexport default useRemoveLiquidityState;\n","import React from \"react\";\nimport { View } from \"react-native\";\n\nimport AddLiquidity from \"../components/AddLiquidity\";\nimport Column from \"../components/Column\";\nimport Container from \"../components/Container\";\nimport Content from \"../components/Content\";\nimport FlexView from \"../components/FlexView\";\nimport RemoveLiquidity from \"../components/RemoveLiquidity\";\nimport Text from \"../components/Text\";\nimport { Spacing } from \"../constants/dimension\";\nimport useAddLiquidityState from \"../hooks/useAddLiquidityState\";\nimport useColors from \"../hooks/useColors\";\nimport useRemoveLiquidityState from \"../hooks/useRemoveLiquidityState\";\nimport Screen from \"./Screen\";\n\nconst LiquidityScreen = () => {\n    const addLiquidityState = useAddLiquidityState();\n    const removeLiquidityState = useRemoveLiquidityState();\n    return (\n        <Screen>\n            <Container>\n                <Content>\n                    <View style={{ alignItems: \"center\", marginBottom: Spacing.huge * 2 }}>\n                        {!removeLiquidityState.selectedLPToken && <AddLiquidity state={addLiquidityState} />}\n                        {!removeLiquidityState.selectedLPToken && <OR />}\n                        <RemoveLiquidity state={removeLiquidityState} />\n                    </View>\n                </Content>\n            </Container>\n        </Screen>\n    );\n};\n\nconst OR = () => {\n    const { background } = useColors();\n    return (\n        <Column>\n            <FlexView\n                style={{\n                    width: \"100%\",\n                    paddingHorizontal: Spacing.small,\n                    paddingVertical: Spacing.huge,\n                    alignItems: \"center\"\n                }}>\n                <Line />\n                <Text h4={true} light={true} style={{ paddingHorizontal: Spacing.small, backgroundColor: background }}>\n                    or\n                </Text>\n                <Line />\n            </FlexView>\n        </Column>\n    );\n};\n\nconst Line = () => {\n    const { border } = useColors();\n    return <View style={{ height: 1, flex: 1, backgroundColor: border }} />;\n};\n\nexport default LiquidityScreen;\n","import { useCallback, useContext, useEffect, useState } from \"react\";\n\nimport { Trade } from \"@levx/sushiswap-sdk\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport { GlobalContext } from \"../context/GlobalContext\";\nimport { parseBalance } from \"../utils\";\nimport useSDK from \"./useSDK\";\nimport useTokenPairState, { TokenPairState } from \"./useTokenPairState\";\n\nexport interface SwapState extends TokenPairState {\n    trade?: Trade;\n    unsupported: boolean;\n    onSwap: () => Promise<void>;\n    swapping: boolean;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst useSwapState: () => SwapState = () => {\n    const state = useTokenPairState();\n    const { addToTradeHistory, updateTokens } = useContext(GlobalContext);\n    const { provider, signer, addOnBlockListener, removeOnBlockListener } = useContext(EthersContext);\n    const { getTrade, swap } = useSDK();\n    const [loading, setLoading] = useState(true);\n    const [trade, setTrade] = useState<Trade>();\n    const [unsupported, setUnsupported] = useState(false);\n    const [swapping, setSwapping] = useState(false);\n\n    useEffect(() => {\n        if (state.fromSymbol && state.toSymbol && state.fromAmount) {\n            const updateTrade = async () => {\n                if (state.fromToken && state.toToken && state.fromAmount && provider) {\n                    const amount = parseBalance(state.fromAmount, state.fromToken.decimals);\n                    if (!amount.isZero()) {\n                        setLoading(true);\n                        setTrade(undefined);\n                        setUnsupported(false);\n                        try {\n                            setTrade(await getTrade(state.fromToken, state.toToken, amount));\n                        } catch (e) {\n                            setUnsupported(true);\n                        } finally {\n                            setLoading(false);\n                        }\n                    }\n                }\n            };\n\n            updateTrade();\n            const name = \"updateTrade(\" + state.fromSymbol + \",\" + state.toSymbol + \",\" + state.fromAmount + \")\";\n\n            addOnBlockListener(name, updateTrade);\n            return () => {\n                removeOnBlockListener(name);\n            };\n        }\n    }, [state.fromSymbol, state.toSymbol, state.fromAmount]);\n\n    const onSwap = useCallback(async () => {\n        if (state.fromToken && state.toToken && state.fromAmount && signer && trade) {\n            setSwapping(true);\n            try {\n                const result = await swap(trade);\n                if (result) {\n                    await result.tx.wait();\n                    await addToTradeHistory(result.trade);\n                    await updateTokens();\n                    state.setFromSymbol(\"\");\n                }\n            } finally {\n                setSwapping(false);\n            }\n        }\n    }, [state.fromToken, state.toToken, state.fromAmount, signer, trade]);\n\n    return {\n        ...state,\n        loading: loading || state.loading,\n        trade,\n        unsupported,\n        onSwap,\n        swapping\n    };\n};\n\nexport default useSwapState;\n","import React, { useCallback, useState } from \"react\";\nimport { View } from \"react-native\";\nimport { Icon } from \"react-native-elements\";\n\nimport useAsyncEffect from \"use-async-effect\";\nimport ApproveButton from \"../components/ApproveButton\";\nimport Button from \"../components/Button\";\nimport Column from \"../components/Column\";\nimport Container from \"../components/Container\";\nimport Content from \"../components/Content\";\nimport ErrorMessage from \"../components/ErrorMessage\";\nimport FetchingButton from \"../components/FetchingButton\";\nimport InsufficientBalanceButton from \"../components/InsufficientBalanceButton\";\nimport Meta from \"../components/Meta\";\nimport Text from \"../components/Text\";\nimport TokenInput from \"../components/TokenInput\";\nimport TokenSelect from \"../components/TokenSelect\";\nimport UnsupportedButton from \"../components/UnsupportedButton\";\nimport { Spacing } from \"../constants/dimension\";\nimport { ETH } from \"../constants/tokens\";\nimport useColors from \"../hooks/useColors\";\nimport useSDK, { ROUTER } from \"../hooks/useSDK\";\nimport useSwapState, { SwapState } from \"../hooks/useSwapState\";\nimport MetamaskError from \"../types/MetamaskError\";\nimport { formatBalance, isEmptyValue, parseBalance } from \"../utils\";\nimport Screen from \"./Screen\";\n\nconst SwapScreen = () => {\n    return (\n        <Screen>\n            <Container>\n                <Content>\n                    <View style={{ alignItems: \"center\", marginBottom: Spacing.large }}>\n                        <Column>\n                            <Text h4={true} style={{ textAlign: \"center\" }}>\n                                🍣 Swap Tokens\n                            </Text>\n                        </Column>\n                        <Swap />\n                    </View>\n                </Content>\n            </Container>\n        </Screen>\n    );\n};\n\nconst Swap = () => {\n    const state = useSwapState();\n    return (\n        <>\n            <TokenSelect\n                title={\"1. Select the token you want to SELL:\"}\n                hidden={false}\n                symbol={state.fromSymbol}\n                onChangeSymbol={state.setFromSymbol}\n                filterTokens={token => token.balance && !token.balance.isZero()}\n            />\n            <TokenSelect\n                title={\"2. Select the token you want to BUY:\"}\n                hidden={state.fromSymbol === \"\"}\n                symbol={state.toSymbol}\n                onChangeSymbol={state.setToSymbol}\n                filterTokens={token => token.symbol !== state.fromSymbol}\n            />\n            <TokenInput\n                title={\"3. How many \" + (state.fromSymbol || \"tokens\") + \" do you want to SELL?\"}\n                token={state.fromToken}\n                hidden={!state.fromToken}\n                amount={state.fromAmount}\n                onAmountChanged={state.setFromAmount}\n            />\n            <TradeInfo state={state} />\n            <Controls state={state} />\n        </>\n    );\n};\n\nconst TradeInfo = ({ state }: { state: SwapState }) => {\n    if (\n        !isEmptyValue(state.fromAmount) &&\n        ((state.fromSymbol === \"ETH\" && state.toSymbol === \"WETH\") ||\n            (state.fromSymbol === \"WETH\" && state.toSymbol === \"ETH\"))\n    ) {\n        return <WrapInfo state={state} />;\n    }\n    if (state.fromSymbol === \"\" || state.toSymbol === \"\" || isEmptyValue(state.fromAmount)) {\n        return <Column noTopMargin={true} />;\n    }\n    return <SwapInfo state={state} />;\n};\n\nconst WrapInfo = ({ state }: { state: SwapState }) => {\n    return (\n        <Column noTopMargin={true}>\n            <ArrowDown />\n            <Text style={{ fontSize: 30, textAlign: \"center\" }}>\n                {state.fromAmount} {state.toSymbol}\n            </Text>\n        </Column>\n    );\n};\n\nconst SwapInfo = ({ state }: { state: SwapState }) => {\n    const { calculateFee } = useSDK();\n    const amount = state.trade?.outputAmount?.toSignificant(8);\n    const price = state.trade?.executionPrice?.toSignificant(8);\n    const impact = state.trade?.priceImpact?.toSignificant(2);\n    const fee = state.fromToken\n        ? formatBalance(\n              calculateFee(parseBalance(state.fromAmount, state.fromToken.decimals)),\n              state.fromToken.decimals,\n              8\n          )\n        : \"\";\n    return (\n        <Column noTopMargin={true}>\n            <ArrowDown />\n            <Text style={{ fontSize: 30, textAlign: \"center\", marginBottom: Spacing.normal }}>\n                {amount || \"…\"} {state.toSymbol}\n            </Text>\n            <Meta label={\"Price\"} text={price ? price + \" \" + state.toSymbol + \"  = 1 \" + state.fromSymbol : \"…\"} />\n            <Meta label={\"Price Impact\"} text={impact ? impact + \"%\" : \"…\"} />\n            <Meta label={\"Fee (0.30%)\"} text={fee ? fee + \" \" + state.fromSymbol : \"…\"} />\n        </Column>\n    );\n};\n\nconst ArrowDown = () => {\n    const { textLight } = useColors();\n    return <Icon type={\"material-community\"} name={\"arrow-down\"} color={textLight} style={{ margin: Spacing.tiny }} />;\n};\n\n// tslint:disable-next-line:max-func-body-length\nconst Controls = ({ state }: { state: SwapState }) => {\n    const [error, setError] = useState<MetamaskError>({});\n    useAsyncEffect(() => setError({}), [state.fromSymbol, state.toSymbol, state.fromAmount]);\n    if (state.toSymbol === \"\" || isEmptyValue(state.fromAmount) || !state.fromToken) {\n        return <Column noTopMargin={true} />;\n    }\n    const approveRequired = state.fromSymbol !== \"ETH\" && !state.fromTokenAllowed;\n    return (\n        <Column>\n            {parseBalance(state.fromAmount, state.fromToken.decimals).gt(state.fromToken.balance) ? (\n                <InsufficientBalanceButton symbol={state.fromSymbol} />\n            ) : state.fromSymbol === \"WETH\" && state.toSymbol === \"ETH\" ? (\n                <UnwrapButton state={state} onError={setError} />\n            ) : state.fromSymbol === \"ETH\" && state.toSymbol === \"WETH\" ? (\n                <WrapButton state={state} onError={setError} />\n            ) : state.unsupported ? (\n                <UnsupportedButton state={state} />\n            ) : state.loading || !state.trade ? (\n                <FetchingButton />\n            ) : (\n                <>\n                    <ApproveButton\n                        token={state.fromToken}\n                        spender={ROUTER}\n                        onSuccess={() => state.setFromTokenAllowed(true)}\n                        onError={setError}\n                        hidden={!approveRequired}\n                    />\n                    <SwapButton state={state} onError={setError} disabled={approveRequired} />\n                </>\n            )}\n            {error.message && error.code !== 4001 && <ErrorMessage error={error} />}\n        </Column>\n    );\n};\n\nconst SwapButton = ({ state, onError, disabled }: { state: SwapState; onError: (e) => void; disabled: boolean }) => {\n    const onPress = useCallback(() => {\n        onError({});\n        state.onSwap().catch(onError);\n    }, [state.onSwap, onError]);\n    return (\n        <Button\n            size={\"large\"}\n            title={\"Swap \" + state.fromSymbol + \"-\" + state.toSymbol}\n            disabled={disabled}\n            loading={state.swapping}\n            onPress={onPress}\n        />\n    );\n};\n\nconst WrapButton = ({ state, onError }: { state: SwapState; onError: (e) => void }) => {\n    const onPress = useCallback(async () => {\n        onError({});\n        state.onWrap().catch(onError);\n    }, []);\n    return <Button size={\"large\"} title={\"Wrap\"} loading={state.wrapping} onPress={onPress} />;\n};\n\nconst UnwrapButton = ({ state, onError }: { state: SwapState; onError: (e) => void }) => {\n    const onPress = useCallback(async () => {\n        onError({});\n        state.onUnwrap().catch(onError);\n    }, []);\n    return <Button size={\"large\"} title={\"Unwrap\"} loading={state.unwrapping} onPress={onPress} />;\n};\n\nexport default SwapScreen;\n","import React, { useContext, useState } from \"react\";\n\nimport { OpenSans_300Light, OpenSans_400Regular, OpenSans_700Bold } from \"@expo-google-fonts/open-sans\";\nimport { UnicaOne_400Regular } from \"@expo-google-fonts/unica-one\";\nimport { AppLoading } from \"expo\";\nimport { DeviceType, getDeviceTypeAsync } from \"expo-device\";\nimport { useFonts } from \"expo-font\";\n\nimport { DefaultTheme, NavigationContainer, Theme } from \"@react-navigation/native\";\nimport { createStackNavigator } from \"@react-navigation/stack\";\nimport \"dotenv/config\";\nimport useAsyncEffect from \"use-async-effect\";\nimport Header from \"./src/components/Header\";\nimport MobileNotSupported from \"./src/components/MobileNotSupported\";\nimport linking from \"./src/constants/linking\";\nimport { ContextProvider } from \"./src/context\";\nimport { GlobalContext } from \"./src/context/GlobalContext\";\nimport useColors from \"./src/hooks/useColors\";\nimport FarmingScreen from \"./src/screens/FarmingScreen\";\nimport LiquidityScreen from \"./src/screens/LiquidityScreen\";\nimport SwapScreen from \"./src/screens/SwapScreen\";\n\nconst Stack = createStackNavigator();\n\nconst App = () => {\n    const [deviceType, setDeviceType] = useState(null as DeviceType | null);\n    const [fontsLoaded] = useFonts({\n        title: UnicaOne_400Regular,\n        light: OpenSans_300Light,\n        regular: OpenSans_400Regular,\n        bold: OpenSans_700Bold\n    });\n    useAsyncEffect(async () => {\n        setDeviceType(await getDeviceTypeAsync());\n    }, []);\n    if (!deviceType || !fontsLoaded) {\n        return <AppLoading />;\n    }\n    return <ContextProvider>{deviceType === DeviceType.PHONE ? <MobileNotSupported /> : <Main />}</ContextProvider>;\n};\n\nconst Main = () => {\n    const { load } = useContext(GlobalContext);\n    useAsyncEffect(load, []);\n    return <Navigation />;\n};\n\nconst Navigation = () => {\n    const { primary, background, border, textDark } = useColors();\n    const theme: Theme = {\n        ...DefaultTheme,\n        colors: {\n            primary,\n            background,\n            border,\n            card: background,\n            notification: background,\n            text: textDark\n        }\n    };\n    return (\n        <NavigationContainer theme={theme} linking={linking}>\n            <Stack.Navigator\n                screenOptions={{\n                    header: Header,\n                    title: \"SushiSwap | LevX\"\n                }}>\n                <Stack.Screen name=\"Home\" component={SwapScreen} />\n                <Stack.Screen name=\"Liquidity\" component={LiquidityScreen} />\n                <Stack.Screen name=\"Farming\" component={FarmingScreen} />\n            </Stack.Navigator>\n        </NavigationContainer>\n    );\n};\n\nexport default App;\n","/* eslint-env browser */\n\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', function () {\n    navigator.serviceWorker\n      .register('/expo-service-worker.js', { scope: '/' })\n      .then(function (info) {\n        // console.info('Registered service-worker', info);\n      })\n      .catch(function (error) {\n        console.info('Failed to register service-worker', error);\n      });\n  });\n}\n","var map = {\n\t\"./Address.json\": 650,\n\t\"./Context.json\": 651,\n\t\"./ERC20.json\": 652,\n\t\"./EnumerableSet.json\": 653,\n\t\"./GovernorAlpha.json\": 654,\n\t\"./IERC20.json\": 655,\n\t\"./IERC20Uniswap.json\": 656,\n\t\"./IMigrator.json\": 657,\n\t\"./IMigratorChef.json\": 658,\n\t\"./IUniswapV2Callee.json\": 659,\n\t\"./IUniswapV2ERC20.json\": 660,\n\t\"./IUniswapV2Factory.json\": 661,\n\t\"./IUniswapV2Pair.json\": 662,\n\t\"./IUniswapV2Router01.json\": 663,\n\t\"./IUniswapV2Router02.json\": 664,\n\t\"./IWETH.json\": 665,\n\t\"./MasterChef.json\": 666,\n\t\"./Math.json\": 667,\n\t\"./Migrations.json\": 668,\n\t\"./Migrator.json\": 669,\n\t\"./MockERC20.json\": 670,\n\t\"./Ownable.json\": 671,\n\t\"./SafeERC20.json\": 672,\n\t\"./SafeMath.json\": 673,\n\t\"./SafeMathUniswap.json\": 674,\n\t\"./SushiBar.json\": 675,\n\t\"./SushiMaker.json\": 676,\n\t\"./SushiRestaurant.json\": 677,\n\t\"./SushiToken.json\": 678,\n\t\"./Timelock.json\": 679,\n\t\"./TimelockInterface.json\": 680,\n\t\"./TransferHelper.json\": 681,\n\t\"./UQ112x112.json\": 682,\n\t\"./UniswapV2ERC20.json\": 683,\n\t\"./UniswapV2Factory.json\": 684,\n\t\"./UniswapV2Library.json\": 685,\n\t\"./UniswapV2Pair.json\": 686,\n\t\"./UniswapV2Router02.json\": 687\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 649;","module.exports = __webpack_public_path__ + \"static/media/levx-typography-dark.859ceaa3.png\";","module.exports = __webpack_public_path__ + \"static/media/levx-typography.5d37ed2a.png\";","module.exports = __webpack_public_path__ + \"static/media/sushiswap.ef005f32.jpg\";","module.exports = __webpack_public_path__ + \"static/media/metamask-dark.2137a831.png\";","module.exports = __webpack_public_path__ + \"static/media/metamask.15e22fef.png\";"],"sourceRoot":""}