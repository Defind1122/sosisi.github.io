{"version":3,"sources":["src/hooks/useStyles.tsx","src/components/Heading.tsx","src/components/InfoBox.tsx","src/components/ErrorMessage.tsx","src/components/Notice.tsx","src/components/web/WebFooter.tsx","src/components/Meta.tsx","src/components/Column.tsx","src/components/FetchingButton.tsx","src/components/InsufficientBalanceButton.tsx","src/components/TokenInput.tsx","src/components/Input.tsx","src/components/ApproveButton.tsx","src/hooks/useStakingState.tsx","src/screens/StakeScreen.tsx"],"names":["useStyles","useColors","shadowColor","shadow","borderDark","border","useCallback","attrs","borderColor","color","borderWidth","borderRadius","radius","padding","Spacing","small","tiny","elevation","shadowOffset","width","height","shadowOpacity","shadowRadius","overflow","Heading","props","accent","style","alignItems","marginBottom","disabled","medium","fontWeight","flex","fontSize","paddingBottom","text","buttonText","type","size","title","onPress","onPressButton","InfoBox","backgroundLight","backgroundColor","marginTop","normal","ErrorMessage","error","code","note","message","Notice","borderStyle","clear","paddingHorizontal","titleStyle","buttonStyle","paddingVertical","alignSelf","Link","to","window","open","textDecorationLine","WebFooter","noTopMargin","huge","textAlign","Meta","textMedium","textLight","placeholder","useLinker","url","suffix","justifyContent","label","undefined","Column","Platform","OS","large","FetchingButton","InsufficientBalanceButton","symbol","MaxButton","onPressMax","token","balance","fee","pow10","gt","sub","ethers","constants","Zero","updateAmount","formatBalance","decimals","position","right","bottom","maxButtonText","TokenInput","onChangeText","onAmountChanged","parseBalance","e","endsWith","indexOf","length","value","amount","autoFocus","inputStyle","marginHorizontal","inputContainerStyle","borderBottomWidth","labelStyle","fontFamily","containerStyle","paddingTop","hideMaxButton","Input","textDark","onError","errors","forbidden","forEach","validation","match","regexp","push","allowed","join","minHeight","outline","placeholderTextColor","errorStyle","ApproveButton","approveToken","useContext","EthersContext","useState","loading","setLoading","a","async","address","spender","tx","wait","onSuccess","hidden","useStakingState","provider","signer","getTokenAllowance","tokens","updateTokens","useSDK","enterSushiBar","leaveSushiBar","sushiStaked","setSushiStaked","sushiSupply","setSushiSupply","xSushiSupply","setXSushiSupply","setAmount","sushiAllowed","setSushiAllowed","xSushiAllowed","setXSushiAllowed","entering","setEntering","leaving","setLeaving","sushi","useMemo","find","xSushi","useEffect","useAsyncEffect","minAllowance","BigNumber","from","pow","SUSHI_BAR","sushiAllowance","gte","xSushiAllowance","sushiContract","getContract","balanceOf","totalSupply","xSushiContract","onEnter","parsed","onLeave","Staking","state","SushiBalance","AmountInput","isZero","StakeInfo","isEmptyValue","xSushiAmount","mul","div","xSushiTotal","xSushiBalance","add","share","Fraction","toString","Controls","setError","StakeButton","StakeScreen","light"],"mappings":"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","file":"static/js/7.112b3188.chunk.js","sourcesContent":["import { useCallback } from \"react\";\nimport { ViewStyle } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"./useColors\";\n\nconst useStyles = () => {\n    const { shadow: shadowColor, borderDark } = useColors();\n    const border = useCallback(\n        (attrs?: { color?: string; radius?: number }) => ({\n            borderColor: attrs?.color || borderDark,\n            borderWidth: 1,\n            borderRadius: attrs?.radius || 8,\n            padding: Spacing.small\n        }),\n        []\n    );\n    const shadow = () =>\n        ({\n            borderRadius: Spacing.tiny,\n            elevation: Spacing.small,\n            shadowColor,\n            shadowOffset: { width: 0, height: 2 },\n            shadowOpacity: 0.5,\n            shadowRadius: 4,\n            overflow: \"visible\"\n        } as ViewStyle);\n    return { border, shadow };\n};\n\nexport default useStyles;\n","import React, { FC } from \"react\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport Button from \"./Button\";\nimport FlexView from \"./FlexView\";\nimport Text from \"./Text\";\n\ninterface HeadingProps {\n    text: string;\n    disabled?: boolean;\n    buttonText?: string;\n    onPressButton?: () => void | Promise<void>;\n}\n\nconst Heading: FC<HeadingProps> = props => {\n    const { accent } = useColors();\n    return (\n        <FlexView style={{ alignItems: \"flex-end\", height: 32, marginBottom: props.disabled ? 0 : Spacing.small }}>\n            <Text\n                medium={true}\n                fontWeight={\"bold\"}\n                disabled={props.disabled}\n                style={{ flex: 1, fontSize: 18, paddingBottom: Spacing.tiny }}>\n                {props.text}\n            </Text>\n            {props.buttonText && (\n                <Button\n                    type={\"clear\"}\n                    size={\"small\"}\n                    title={props.buttonText}\n                    onPress={props.onPressButton}\n                    color={accent}\n                />\n            )}\n        </FlexView>\n    );\n};\n\nexport default Heading;\n","import React, { PropsWithChildren } from \"react\";\nimport { View, ViewProps } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport useStyles from \"../hooks/useStyles\";\n\nconst InfoBox = (props: PropsWithChildren<ViewProps>) => {\n    const { backgroundLight } = useColors();\n    const { border } = useStyles();\n    return (\n        <View\n            {...props}\n            style={[\n                {\n                    ...border({ color: backgroundLight }),\n                    backgroundColor: backgroundLight,\n                    marginTop: Spacing.normal + Spacing.small,\n                    padding: Spacing.small + Spacing.tiny\n                },\n                props.style\n            ]}\n        />\n    );\n};\n\nexport default InfoBox;\n","import React from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport MetamaskError from \"../types/MetamaskError\";\nimport Text from \"./Text\";\n\nconst ErrorMessage = ({ error }: { error: MetamaskError }) => (\n    <View\n        style={{\n            borderColor: \"red\",\n            borderWidth: 1,\n            width: \"100%\",\n            padding: Spacing.tiny,\n            marginTop: Spacing.small\n        }}>\n        {error.code && (\n            <Text fontWeight={\"bold\"} style={{ color: \"red\", fontSize: 14 }}>\n                Error Code {error.code}\n            </Text>\n        )}\n        <Text note={true} style={{ color: \"red\", fontSize: 14 }}>\n            {error.message}\n        </Text>\n    </View>\n);\n\nexport default ErrorMessage;\n","import React from \"react\";\nimport { View, ViewStyle } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useStyles from \"../hooks/useStyles\";\nimport Button from \"./Button\";\nimport Text from \"./Text\";\n\nexport interface NoticeProps {\n    text: string;\n    clear?: boolean;\n    color?: string;\n    buttonText?: string;\n    onPressButton?: () => void;\n    style?: ViewStyle;\n}\n\nconst Notice = (props: NoticeProps) => {\n    const { border } = useStyles();\n    const borderStyle = border({ color: props.color });\n    const color = props.color || borderStyle.borderColor;\n    return (\n        <View style={[props.clear ? { paddingHorizontal: Spacing.tiny } : borderStyle, props.style]}>\n            <Text\n                note={true}\n                style={{\n                    color\n                }}>\n                {props.text}\n            </Text>\n            {props.buttonText && props.onPressButton && (\n                <Button\n                    title={props.buttonText}\n                    type={\"clear\"}\n                    size={\"small\"}\n                    fontWeight={\"bold\"}\n                    onPress={props.onPressButton}\n                    titleStyle={{ color }}\n                    buttonStyle={{ paddingHorizontal: 0, paddingVertical: 0 }}\n                    style={{ alignSelf: \"flex-end\", marginTop: Spacing.tiny }}\n                />\n            )}\n        </View>\n    );\n};\n\nexport default Notice;\n","import React, { useCallback } from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../../constants/dimension\";\nimport Column from \"../Column\";\nimport SocialIcons from \"../SocialIcons\";\nimport Text from \"../Text\";\n\nconst WebFooter = () => (\n    <Column noTopMargin={true}>\n        <View\n            style={{\n                width: \"100%\",\n                padding: Spacing.normal,\n                marginTop: Spacing.huge\n            }}>\n            <SocialIcons />\n            <Text note={true} style={{ marginTop: Spacing.tiny, textAlign: \"center\", width: \"100%\" }}>\n                2020 Built by <Link to={\"https://levx.io\"} text={\"LevX Team\"} />\n            </Text>\n        </View>\n    </Column>\n);\n\nconst Link = ({ to, text }) => {\n    const onPress = useCallback(() => {\n        window.open(to, \"_blank\");\n    }, []);\n    return (\n        <Text note={true} style={{ textDecorationLine: \"underline\" }} onPress={onPress}>\n            {text}\n        </Text>\n    );\n};\n\nexport default WebFooter;\n","import React, { FC } from \"react\";\n\nimport useColors from \"../hooks/useColors\";\nimport useLinker from \"../hooks/useLinker\";\nimport FlexView from \"./FlexView\";\nimport Text from \"./Text\";\n\nexport interface MetaProps {\n    label: string;\n    text?: string;\n    suffix?: string;\n    url?: string;\n    disabled?: boolean;\n}\n\nconst Meta: FC<MetaProps> = props => {\n    const { textMedium, textLight, placeholder } = useColors();\n    const onPress = useLinker(props.url || \"\", \"\", \"_blank\");\n    const text = props.disabled\n        ? \"N/A\"\n        : props.text\n        ? props.text + (props.suffix ? \" \" + props.suffix : \"\")\n        : \"Fetching…\";\n    return (\n        <FlexView style={{ justifyContent: \"space-between\", marginTop: 4 }}>\n            <Text fontWeight={\"bold\"} style={{ fontSize: 13, color: props.disabled ? placeholder : textMedium }}>\n                {props.label}\n            </Text>\n            <Text\n                onPress={props.url ? onPress : undefined}\n                style={{\n                    fontSize: 13,\n                    color: props.disabled ? placeholder : props.text ? textMedium : textLight,\n                    textDecorationLine: props.url ? \"underline\" : \"none\"\n                }}>\n                {text}\n            </Text>\n        </FlexView>\n    );\n};\n\nexport default Meta;\n","import React, { FC } from \"react\";\nimport { Platform, View, ViewProps, ViewStyle } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\n\ninterface ColumnProps extends ViewProps {\n    noTopMargin?: boolean;\n    style?: ViewStyle;\n}\n\nconst Column: FC<ColumnProps> = props => (\n    <View\n        {...props}\n        style={[\n            {\n                width: \"100%\",\n                marginTop: props.noTopMargin ? 0 : Platform.OS === \"web\" ? Spacing.large : Spacing.normal\n            },\n            props.style\n        ]}\n    />\n);\n\nexport default Column;\n","import React from \"react\";\n\nimport Button from \"./Button\";\n\nconst FetchingButton = () => {\n    return <Button title={\"Fetching…\"} disabled={true} />;\n};\nexport default FetchingButton;\n","import React from \"react\";\n\nimport Button from \"./Button\";\n\nconst InsufficientBalanceButton = ({ symbol }: { symbol: string }) => {\n    return <Button title={\"Insufficient \" + (symbol ? symbol : \"Balance\")} disabled={true} />;\n};\nexport default InsufficientBalanceButton;\n","import React, { FC, useCallback } from \"react\";\nimport { Platform, View } from \"react-native\";\n\nimport { ethers } from \"ethers\";\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport useStyles from \"../hooks/useStyles\";\nimport Token from \"../types/Token\";\nimport { formatBalance, parseBalance, pow10 } from \"../utils\";\nimport Button from \"./Button\";\nimport Heading from \"./Heading\";\nimport Input from \"./Input\";\n\nexport interface TokenInputProps {\n    title?: string;\n    token?: Token;\n    amount: string;\n    onAmountChanged: (amount: string) => void;\n    label?: string;\n    hideMaxButton?: boolean;\n    maxButtonText?: string;\n    autoFocus?: boolean;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst TokenInput: FC<TokenInputProps> = props => {\n    const { border } = useStyles();\n    const onChangeText = useCallback(\n        (text: string) => {\n            if (props.token && props.onAmountChanged) {\n                try {\n                    parseBalance(text, props.token.decimals);\n                    props.onAmountChanged(text);\n                } catch (e) {\n                    if (text.endsWith(\".\") && text.indexOf(\".\") === text.length - 1) {\n                        props.onAmountChanged(text);\n                    }\n                }\n            }\n        },\n        [props.token, props.onAmountChanged]\n    );\n    return (\n        <View>\n            {props.title && <Heading text={props.title} />}\n            <View>\n                <Input\n                    label={props.label}\n                    value={props.amount}\n                    onChangeText={onChangeText}\n                    placeholder={\"0.0\"}\n                    autoFocus={props.autoFocus || false}\n                    inputStyle={{ marginHorizontal: 4 }}\n                    inputContainerStyle={{ borderBottomWidth: 0 }}\n                    labelStyle={{ fontFamily: \"light\", height: props.label ? \"auto\" : 0 }}\n                    containerStyle={{\n                        ...border(),\n                        paddingHorizontal: Spacing.tiny,\n                        paddingTop: 12,\n                        paddingBottom: 0\n                    }}\n                />\n                {props.token?.balance?.gt(0) && !props.hideMaxButton && (\n                    <MaxButton\n                        token={props.token}\n                        maxButtonText={props.maxButtonText}\n                        updateAmount={props.onAmountChanged}\n                    />\n                )}\n            </View>\n        </View>\n    );\n};\n\nconst MaxButton = (props: { token: Token; updateAmount; maxButtonText?: string }) => {\n    const { accent } = useColors();\n    const onPressMax = useCallback(() => {\n        if (props.token) {\n            let balance = props.token.balance;\n            if (props.token.symbol === \"ETH\") {\n                // Subtract 0.01 ETH for gas fee\n                const fee = pow10(16);\n                balance = balance.gt(fee) ? balance.sub(fee) : ethers.constants.Zero;\n            }\n            props.updateAmount(formatBalance(balance, props.token.decimals));\n        }\n    }, [props.token, props.updateAmount]);\n    return (\n        <View style={{ position: \"absolute\", right: 12, bottom: Platform.OS === \"web\" ? 10 : 20 }}>\n            <Button\n                type={\"clear\"}\n                size={\"small\"}\n                color={accent}\n                title={props.maxButtonText || \"MAX\"}\n                fontWeight={\"bold\"}\n                onPress={onPressMax}\n                buttonStyle={{ paddingHorizontal: 4 }}\n            />\n        </View>\n    );\n};\n\nexport default TokenInput;\n","import React, { FC, useCallback } from \"react\";\nimport { Platform } from \"react-native\";\nimport { Input as NativeInput, InputProps as NativeInputProps } from \"react-native-elements\";\n\nimport useColors from \"../hooks/useColors\";\n\nexport interface Validation {\n    regexp: RegExp;\n    error: string;\n}\n\nexport interface InputProps extends NativeInputProps {\n    color?: string;\n    size?: \"small\" | \"normal\" | \"large\";\n    allowed?: Validation[];\n    forbidden?: Validation[];\n    onError?: (error: string) => void;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst Input: FC<InputProps> = props => {\n    const { textDark, textMedium, textLight } = useColors();\n    const size = props.size || \"normal\";\n    const color = props.color || textDark;\n    const fontSize = size === \"small\" ? 16 : size === \"large\" ? 24 : 20;\n    const onChangeText = useCallback(\n        (text: string) => {\n            props.onChangeText?.(text);\n            props.onError?.(\"\");\n            const errors = [] as string[];\n            if (text !== \"\" && props.forbidden) {\n                props.forbidden.forEach(validation => {\n                    if (text.match(validation.regexp)) {\n                        errors.push(validation.error);\n                    }\n                });\n            }\n            if (text !== \"\" && props.allowed) {\n                props.allowed.forEach(validation => {\n                    if (!text.match(validation.regexp)) {\n                        errors.push(validation.error);\n                    }\n                });\n            }\n            if (errors.length > 0) {\n                props.onError?.(errors.join(\"\\n\"));\n            }\n        },\n        [props.onChangeText, props.onError, props.forbidden, props.allowed]\n    );\n    return (\n        <NativeInput\n            {...props}\n            inputStyle={[\n                { fontSize, fontFamily: \"regular\", paddingBottom: 4, color, marginTop: 0, minHeight: 32 },\n                // @ts-ignore\n                Platform.OS === \"web\" ? { outline: \"none\" } : {},\n                props.inputStyle\n            ]}\n            labelStyle={[{ color: textMedium }, props.labelStyle]}\n            placeholderTextColor={props.placeholderTextColor || textLight}\n            errorStyle={props.onError ? { height: 0 } : props.errorStyle}\n            containerStyle={[{ paddingHorizontal: 0 }, props.containerStyle]}\n            onChangeText={onChangeText}\n        />\n    );\n};\n\nexport default Input;\n","import React, { FC, useCallback, useContext, useState } from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport Token from \"../types/Token\";\nimport Button from \"./Button\";\n\nexport interface ApproveButtonProps {\n    token: Token;\n    spender: string;\n    onSuccess: () => void;\n    onError: (e) => void;\n    hidden?: boolean;\n}\n\nconst ApproveButton: FC<ApproveButtonProps> = props => {\n    const { approveToken } = useContext(EthersContext);\n    const [loading, setLoading] = useState(false);\n    const onPress = useCallback(async () => {\n        if (props.token) {\n            props.onError({});\n            setLoading(true);\n            try {\n                const tx = await approveToken(props.token.address, props.spender);\n                if (tx) {\n                    await tx.wait();\n                    props.onSuccess();\n                }\n            } catch (e) {\n                props.onError(e);\n            } finally {\n                setLoading(false);\n            }\n        }\n    }, [props.token]);\n    if (props.hidden) return <View />;\n    return (\n        <Button\n            title={\"Approve \" + (props.token?.symbol || \"\")}\n            onPress={onPress}\n            loading={loading}\n            containerStyle={{ marginBottom: Spacing.tiny }}\n        />\n    );\n};\n\nexport default ApproveButton;\n","import { useCallback, useContext, useEffect, useMemo, useState } from \"react\";\n\nimport { ethers } from \"ethers\";\nimport useAsyncEffect from \"use-async-effect\";\nimport { SUSHI_BAR } from \"../constants/contracts\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport Token from \"../types/Token\";\nimport { getContract, parseBalance } from \"../utils\";\nimport useSDK from \"./useSDK\";\n\nexport type StakeAction = \"sushi-balance\" | \"stake\";\nexport type UnstakeAction = \"xsushi-balance\" | \"unstake\";\n\nexport interface StakingState {\n    sushi?: Token;\n    xSushi?: Token;\n    sushiStaked?: ethers.BigNumber;\n    sushiSupply?: ethers.BigNumber;\n    xSushiSupply?: ethers.BigNumber;\n    amount: string;\n    setAmount: (amount: string) => void;\n    sushiAllowed: boolean;\n    setSushiAllowed: (allowed: boolean) => void;\n    xSushiAllowed: boolean;\n    setXSushiAllowed: (allowed: boolean) => void;\n    loading: boolean;\n    onEnter: () => Promise<void>;\n    entering: boolean;\n    onLeave: () => Promise<void>;\n    leaving: boolean;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst useStakingState: () => StakingState = () => {\n    const { provider, signer, address, getTokenAllowance, tokens, updateTokens } = useContext(EthersContext);\n    const { enterSushiBar, leaveSushiBar } = useSDK();\n    const [sushiStaked, setSushiStaked] = useState<ethers.BigNumber>();\n    const [sushiSupply, setSushiSupply] = useState<ethers.BigNumber>();\n    const [xSushiSupply, setXSushiSupply] = useState<ethers.BigNumber>();\n    const [amount, setAmount] = useState(\"\");\n    const [sushiAllowed, setSushiAllowed] = useState(false);\n    const [xSushiAllowed, setXSushiAllowed] = useState(false);\n    const [loading, setLoading] = useState(false);\n    const [entering, setEntering] = useState(false);\n    const [leaving, setLeaving] = useState(false);\n\n    const sushi = useMemo(() => tokens.find(token => token.symbol === \"SUSHI\"), [tokens]);\n    const xSushi = useMemo(() => tokens.find(token => token.symbol === \"xSUSHI\"), [tokens]);\n\n    useEffect(() => {\n        setAmount(\"\");\n    }, [address]);\n\n    useAsyncEffect(async () => {\n        if (sushi && xSushi && provider && signer) {\n            setSushiAllowed(false);\n            setXSushiAllowed(false);\n            setLoading(true);\n            try {\n                const minAllowance = ethers.BigNumber.from(2)\n                    .pow(96)\n                    .sub(1);\n                const sushiAllowance = await getTokenAllowance(sushi.address, SUSHI_BAR);\n                setSushiAllowed(ethers.BigNumber.from(sushiAllowance).gte(minAllowance));\n                const xSushiAllowance = await getTokenAllowance(xSushi.address, SUSHI_BAR);\n                setXSushiAllowed(ethers.BigNumber.from(xSushiAllowance).gte(minAllowance));\n\n                const sushiContract = getContract(\"ERC20\", sushi.address, signer);\n                setSushiStaked(await sushiContract.balanceOf(SUSHI_BAR));\n                setSushiSupply(await sushiContract.totalSupply());\n                const xSushiContract = getContract(\"ERC20\", xSushi.address, signer);\n                setXSushiSupply(await xSushiContract.totalSupply());\n            } finally {\n                setLoading(false);\n            }\n        }\n    }, [sushi, xSushi, provider, signer]);\n\n    const onEnter = useCallback(async () => {\n        if (amount && sushi && signer) {\n            setEntering(true);\n            try {\n                const parsed = parseBalance(amount, sushi.decimals);\n                const tx = await enterSushiBar(parsed, signer);\n                if (tx) {\n                    await tx.wait();\n                    await updateTokens();\n                    setAmount(\"\");\n                }\n            } finally {\n                setEntering(false);\n            }\n        }\n    }, [amount, sushi, signer]);\n\n    const onLeave = useCallback(async () => {\n        if (amount && xSushi && signer) {\n            setLeaving(true);\n            try {\n                const parsed = parseBalance(amount, xSushi.decimals);\n                const tx = await leaveSushiBar(parsed, signer);\n                if (tx) {\n                    await tx.wait();\n                    await updateTokens();\n                    setAmount(\"\");\n                }\n            } finally {\n                setLeaving(false);\n            }\n        }\n    }, [amount, xSushi, signer]);\n\n    return {\n        sushi,\n        xSushi,\n        sushiStaked,\n        sushiSupply,\n        xSushiSupply,\n        amount,\n        setAmount,\n        sushiAllowed,\n        setSushiAllowed,\n        xSushiAllowed,\n        setXSushiAllowed,\n        loading,\n        onEnter,\n        entering,\n        onLeave,\n        leaving\n    };\n};\n\nexport default useStakingState;\n","import React, { useState } from \"react\";\nimport { Platform, View } from \"react-native\";\n\nimport ApproveButton from \"../components/ApproveButton\";\nimport Button from \"../components/Button\";\nimport Container from \"../components/Container\";\nimport Content from \"../components/Content\";\nimport ErrorMessage from \"../components/ErrorMessage\";\nimport FetchingButton from \"../components/FetchingButton\";\nimport Heading from \"../components/Heading\";\nimport InfoBox from \"../components/InfoBox\";\nimport InsufficientBalanceButton from \"../components/InsufficientBalanceButton\";\nimport Meta from \"../components/Meta\";\nimport Notice from \"../components/Notice\";\nimport Text from \"../components/Text\";\nimport Title from \"../components/Title\";\nimport TokenInput from \"../components/TokenInput\";\nimport WebFooter from \"../components/web/WebFooter\";\nimport { StakingSubMenu } from \"../components/web/WebSubMenu\";\nimport { SUSHI_BAR } from \"../constants/contracts\";\nimport { Spacing } from \"../constants/dimension\";\nimport Fraction from \"../constants/Fraction\";\nimport useStakingState, { StakingState } from \"../hooks/useStakingState\";\nimport MetamaskError from \"../types/MetamaskError\";\nimport { formatBalance, isEmptyValue, parseBalance } from \"../utils\";\nimport Screen from \"./Screen\";\n\nconst StakeScreen = () => {\n    return (\n        <Screen>\n            <StakingSubMenu />\n            <Container>\n                <Content>\n                    <Title text={\"Stake\"} />\n                    <Text light={true}>Earn recurring income by staking your SUSHI.</Text>\n                    <Staking />\n                    {Platform.OS === \"web\" && <WebFooter />}\n                </Content>\n            </Container>\n        </Screen>\n    );\n};\n\nconst Staking = () => {\n    const state = useStakingState();\n    return (\n        <View style={{ marginTop: Spacing.large }}>\n            <SushiBalance state={state} />\n            <AmountInput state={state} />\n            {state.sushi && state.sushi.balance.isZero() && (\n                <Notice text={\"You don't have any SUSHI.\"} color={\"orange\"} style={{ marginTop: Spacing.small }} />\n            )}\n            <StakeInfo state={state} />\n        </View>\n    );\n};\n\nconst SushiBalance = ({ state }: { state: StakingState }) => {\n    return (\n        <View>\n            <Heading text={\"Your SUSHI\"} />\n            <Text disabled={!state.sushi} style={{ fontSize: 28, marginBottom: Spacing.normal }}>\n                {!state.sushi ? \"Fetching...\" : formatBalance(state.sushi.balance, state.sushi.decimals)}\n            </Text>\n        </View>\n    );\n};\n\nconst AmountInput = ({ state }: { state: StakingState }) => {\n    if (!state.sushi || state.sushi.balance.isZero()) {\n        return <Heading text={\"Amount To Stake\"} disabled={true} />;\n    }\n    return (\n        <View>\n            <Heading text={\"Amount To Stake\"} />\n            <TokenInput token={state.sushi} amount={state.amount} onAmountChanged={state.setAmount} autoFocus={true} />\n        </View>\n    );\n};\n\n// tslint:disable-next-line:max-func-body-length\nconst StakeInfo = ({ state }: { state: StakingState }) => {\n    const disabled =\n        !state.sushi ||\n        state.sushi.balance.isZero() ||\n        !state.xSushi ||\n        !state.sushiStaked ||\n        !state.xSushiSupply ||\n        isEmptyValue(state.amount);\n    const xSushiAmount = disabled\n        ? undefined\n        : parseBalance(state.amount, state.sushi!.decimals)\n              .mul(state.xSushiSupply!)\n              .div(state.sushiStaked!);\n    const xSushiTotal = disabled ? undefined : formatBalance(state.xSushiSupply!, state.xSushi!.decimals);\n    const xSushiBalance = disabled ? undefined : state.xSushi!.balance.add(xSushiAmount!);\n    const share = disabled\n        ? undefined\n        : Fraction.from(xSushiAmount!.add(xSushiBalance!), state.xSushiSupply!).toString();\n    return (\n        <InfoBox>\n            <Text disabled={disabled} style={{ fontSize: 28, marginBottom: Spacing.normal }}>\n                {!xSushiAmount ? \"N/A\" : formatBalance(xSushiAmount, state.xSushi!.decimals, 8) + \" xSUSHI\"}\n            </Text>\n            <Meta label={\"Total xSUSHI Supply\"} text={xSushiTotal} disabled={disabled} />\n            <Meta\n                label={\"Your xSUSHI Balance\"}\n                text={xSushiBalance ? formatBalance(xSushiBalance, state.xSushi!.decimals) : undefined}\n                disabled={disabled}\n            />\n            <Meta label={\"Your xSUSHI Share\"} text={share} suffix={\"%\"} disabled={disabled} />\n            <Controls state={state} />\n        </InfoBox>\n    );\n};\n\nconst Controls = ({ state }: { state: StakingState }) => {\n    const [error, setError] = useState<MetamaskError>({});\n    return (\n        <View style={{ marginTop: Spacing.normal }}>\n            {!state.sushi || state.sushi.balance.isZero() || isEmptyValue(state.amount) ? (\n                <StakeButton state={state} onError={setError} disabled={true} />\n            ) : parseBalance(state.amount, state.sushi.decimals).gt(state.sushi.balance) ? (\n                <InsufficientBalanceButton symbol={state.sushi.symbol} />\n            ) : state.loading ? (\n                <FetchingButton />\n            ) : (\n                <>\n                    <ApproveButton\n                        token={state.sushi}\n                        spender={SUSHI_BAR}\n                        onSuccess={() => state.setSushiAllowed(true)}\n                        onError={setError}\n                        hidden={state.sushiAllowed}\n                    />\n                    <StakeButton state={state} onError={setError} disabled={!state.sushiAllowed} />\n                </>\n            )}\n            {error.message && error.code !== 4001 && <ErrorMessage error={error} />}\n        </View>\n    );\n};\n\nconst StakeButton = ({\n    state,\n    onError,\n    disabled\n}: {\n    state: StakingState;\n    onError: (e) => void;\n    disabled: boolean;\n}) => {\n    const onPress = async () => {\n        onError({});\n        try {\n            await state.onEnter();\n            state.setAmount(\"\");\n        } catch (e) {\n            onError(e);\n        }\n    };\n    return <Button title={\"Stake\"} loading={state.entering} onPress={onPress} disabled={disabled} />;\n};\n\nexport default StakeScreen;\n"],"sourceRoot":""}