{"version":3,"sources":["src/components/ApproveButton.tsx","src/hooks/useLPTokensState.tsx","src/components/LPTokenSelect.tsx","src/hooks/useRemoveLiquidityState.tsx","src/screens/RemoveLiquidityScreen.tsx"],"names":["ApproveButton","props","approveToken","useContext","EthersContext","useState","loading","setLoading","onPress","useCallback","a","async","token","onError","address","spender","tx","wait","onSuccess","hidden","title","symbol","containerStyle","marginBottom","Spacing","tiny","useLPTokensState","mode","state","useTokenPairState","provider","signer","tokens","lastTimeRefreshed","setLastTimeRefreshed","lpTokens","setLPTokens","selectedLPToken","setSelectedLPToken","pair","setPair","amount","setAmount","getPair","useSDK","updateLPTokens","fetchPools","fetchMyLPTokens","fetchMyUniswapLPTokens","data","useEffect","useAsyncEffect","undefined","tokenA","tokenB","useDelayedOnBlockEffect","block","length","fromToken","toToken","updateLastTimeRefreshed","Date","now","LPTokenList","emptyText","filter","Item","renderItem","item","key","selected","onSelectToken","sort","t1","t2","totalDeposited","ethers","constants","Zero","sub","div","pow10","toNumber","amountDeposited","gt","balance","Loading","text","FlatList","keyExtractor","JSON","stringify","EmptyList","View","style","margin","normal","Text","disabled","textAlign","width","LPTokenItem","textMedium","useColors","formatBalance","decimals","Selectable","ITEM_SEPARATOR_HEIGHT","FlexView","alignItems","TokenLogo","small","replaceWETH","marginLeft","medium","caption","flex","light","color","LPTokenSelect","Expandable","expanded","onExpand","useRemoveLiquidityState","getTokenAllowance","updateTokens","removeLiquidity","removeLiquidityETH","removing","setRemoving","setFromSymbol","setToSymbol","setSelectedLPTokenAllowed","minAllowance","BigNumber","from","pow","ROUTER","allowance","gte","totalSupply","liquidityToken","fromReserve","parseCurrencyAmount","reserveOf","convertToken","toReserve","setFromAmount","parseBalance","mul","toString","setToAmount","onRemove","fromAmount","toAmount","liquidity","fromSymbol","toSymbol","amountToRemove","amountToRemoveETH","RemoveLiquidity","marginTop","large","Border","AmountInput","TokenInput","onAmountChanged","Heading","AmountInfo","InfoBox","Meta","label","Controls","error","setError","approveRequired","selectedLPTokenAllowed","isEmptyValue","InsufficientBalanceButton","FetchingButton","message","code","ErrorMessage","RemoveButton","catch","Button","RemoveLiquidityScreen","Screen","Container","Content","Title","Platform","OS","WebFooter"],"mappings":"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","file":"static/js/11.f07bef11.chunk.js","sourcesContent":["import React, { FC, useCallback, useContext, useState } from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport Token from \"../types/Token\";\nimport Button from \"./Button\";\n\nexport interface ApproveButtonProps {\n    token: Token;\n    spender: string;\n    onSuccess: () => void;\n    onError: (e) => void;\n    hidden?: boolean;\n}\n\nconst ApproveButton: FC<ApproveButtonProps> = props => {\n    const { approveToken } = useContext(EthersContext);\n    const [loading, setLoading] = useState(false);\n    const onPress = useCallback(async () => {\n        if (props.token) {\n            props.onError({});\n            setLoading(true);\n            try {\n                const tx = await approveToken(props.token.address, props.spender);\n                if (tx) {\n                    await tx.wait();\n                    props.onSuccess();\n                }\n            } catch (e) {\n                props.onError(e);\n            } finally {\n                setLoading(false);\n            }\n        }\n    }, [props.token]);\n    if (props.hidden) return <View />;\n    return (\n        <Button\n            title={\"Approve \" + (props.token?.symbol || \"\")}\n            onPress={onPress}\n            loading={loading}\n            containerStyle={{ marginBottom: Spacing.tiny }}\n        />\n    );\n};\n\nexport default ApproveButton;\n","import { useContext, useEffect, useState } from \"react\";\n\nimport { Pair } from \"@sushiswap/sdk\";\nimport useAsyncEffect from \"use-async-effect\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport LPToken from \"../types/LPToken\";\nimport { fetchMyLPTokens, fetchMyUniswapLPTokens, fetchPools } from \"../utils/fetch-utils\";\nimport useDelayedOnBlockEffect from \"./useDelayedOnBlockEffect\";\nimport useSDK from \"./useSDK\";\nimport useTokenPairState, { TokenPairState } from \"./useTokenPairState\";\n\nexport interface LPTokensState extends TokenPairState {\n    updateLPTokens: () => Promise<void>;\n    lastTimeRefreshed: number;\n    updateLastTimeRefreshed: () => void;\n    lpTokens: LPToken[];\n    selectedLPToken?: LPToken;\n    setSelectedLPToken: (token?: LPToken) => void;\n    pair?: Pair;\n    amount: string;\n    setAmount: (amount: string) => void;\n}\n\ntype Mode = \"pools\" | \"my-lp-tokens\" | \"my-uniswap-lp-tokens\";\n\n// tslint:disable-next-line:max-func-body-length\nconst useLPTokensState: (mode: Mode) => LPTokensState = mode => {\n    const state = useTokenPairState();\n    const { provider, signer, address, tokens } = useContext(EthersContext);\n    const [lastTimeRefreshed, setLastTimeRefreshed] = useState(0);\n    const [loading, setLoading] = useState(true);\n    const [lpTokens, setLPTokens] = useState<LPToken[]>([]);\n    const [selectedLPToken, setSelectedLPToken] = useState<LPToken>();\n    const [pair, setPair] = useState<Pair>();\n    const [amount, setAmount] = useState(\"\");\n    const { getPair } = useSDK();\n\n    const updateLPTokens = async () => {\n        if (provider && signer) {\n            try {\n                const data = await (mode === \"pools\"\n                    ? fetchPools(provider, signer)\n                    : mode === \"my-lp-tokens\"\n                    ? fetchMyLPTokens(tokens, provider, signer)\n                    : fetchMyUniswapLPTokens(tokens, provider, signer));\n                if (data) {\n                    setLPTokens(data);\n                }\n            } finally {\n                setLoading(false);\n            }\n        }\n    };\n\n    useEffect(() => {\n        if (!selectedLPToken) {\n            setAmount(\"\");\n        }\n    }, [selectedLPToken]);\n\n    useAsyncEffect(async () => {\n        setLoading(true);\n        setPair(undefined);\n        if (selectedLPToken && provider) {\n            try {\n                setPair(await getPair(selectedLPToken.tokenA, selectedLPToken.tokenB, provider));\n            } catch (e) {\n            } finally {\n                setLoading(false);\n            }\n        } else {\n            setLoading(false);\n        }\n    }, [selectedLPToken, provider]);\n\n    useDelayedOnBlockEffect(\n        async block => {\n            if (address && (mode === \"pools\" || tokens.length > 0)) {\n                if (!block) {\n                    setLoading(true);\n                }\n                await updateLPTokens();\n            }\n        },\n        () => \"updateLPTokens()\",\n        [tokens.length, address, lastTimeRefreshed],\n        0\n    );\n\n    return {\n        ...state,\n        fromToken: state.fromToken || selectedLPToken?.tokenA,\n        toToken: state.toToken || selectedLPToken?.tokenB,\n        updateLPTokens,\n        loading: state.loading || loading,\n        lastTimeRefreshed,\n        updateLastTimeRefreshed: () => {\n            setLastTimeRefreshed(Date.now());\n        },\n        lpTokens,\n        selectedLPToken,\n        setSelectedLPToken,\n        pair,\n        amount,\n        setAmount\n    };\n};\n\nexport default useLPTokensState;\n","import React, { FC, useCallback } from \"react\";\nimport { FlatList, View, ViewStyle } from \"react-native\";\n\nimport { ethers } from \"ethers\";\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport { LPTokensState } from \"../hooks/useLPTokensState\";\nimport LPToken from \"../types/LPToken\";\nimport { formatBalance, pow10 } from \"../utils\";\nimport CheckBox from \"./CheckBox\";\nimport Expandable from \"./Expandable\";\nimport FlexView from \"./FlexView\";\nimport { ITEM_SEPARATOR_HEIGHT } from \"./ItemSeparator\";\nimport Loading from \"./Loading\";\nimport Selectable from \"./Selectable\";\nimport Text from \"./Text\";\nimport TokenLogo from \"./TokenLogo\";\n\nexport type LPTokenSelectFilter = \"balance\" | \"amountDeposited\" | \"\";\n\nexport interface LPTokenSelectProps {\n    state: LPTokensState;\n    title: string;\n    emptyText: string;\n    showFilter?: boolean;\n    filter?: LPTokenSelectFilter;\n    onFilterChanged?: (filter: LPTokenSelectFilter) => void;\n    Item: FC<LPTokenItemProps>;\n    style?: ViewStyle;\n}\n\nexport interface LPTokenItemProps {\n    token: LPToken;\n    selected: boolean;\n    filter?: LPTokenSelectFilter;\n    onSelectToken: (token: LPToken) => void;\n}\n\nconst LPTokenSelect: FC<LPTokenSelectProps> = props => {\n    const onUnselectToken = () => props.state.setSelectedLPToken();\n    return (\n        <View style={props.style}>\n            <Expandable\n                title={props.title}\n                expanded={!props.state.selectedLPToken}\n                onExpand={() => props.state.setSelectedLPToken()}>\n                <LPTokenList state={props.state} filter={props.filter} emptyText={props.emptyText} Item={props.Item} />\n            </Expandable>\n            {props.state.selectedLPToken && (\n                <LPTokenItem token={props.state.selectedLPToken} selected={true} onSelectToken={onUnselectToken} />\n            )}\n        </View>\n    );\n};\n\nconst Filter = ({ filter, onFilterChanged }) => {\n    const handler = (f: string) => () => onFilterChanged(f);\n    return (\n        <FlexView style={{ width: \"100%\", justifyContent: \"flex-end\" }}>\n            <CheckBox checked={filter === \"balance\"} onPress={handler(\"balance\")} title={\"with balance\"} />\n            <CheckBox\n                checked={filter === \"amountDeposited\"}\n                onPress={handler(\"amountDeposited\")}\n                title={\"with deposit\"}\n            />\n            <CheckBox checked={!filter} onPress={handler(\"\")} title={\"all\"} />\n        </FlexView>\n    );\n};\n\n// tslint:disable-next-line:max-func-body-length\nconst LPTokenList = ({\n    state,\n    emptyText,\n    filter,\n    Item\n}: {\n    state: LPTokensState;\n    emptyText: string;\n    filter?: LPTokenSelectFilter;\n    Item: FC<LPTokenItemProps>;\n}) => {\n    const renderItem = useCallback(\n        ({ item }) => {\n            return (\n                <Item\n                    key={item.address}\n                    token={item}\n                    selected={false}\n                    filter={filter}\n                    onSelectToken={state.setSelectedLPToken}\n                />\n            );\n        },\n        [filter, state.setSelectedLPToken]\n    );\n    let data = state.lpTokens.sort((t1, t2) => {\n        return (t2.totalDeposited || ethers.constants.Zero)\n            .sub(t1.totalDeposited || ethers.constants.Zero)\n            .div(pow10(14))\n            .toNumber();\n    });\n    if (filter === \"amountDeposited\") {\n        data = data.filter(token => token.amountDeposited?.gt(0));\n    } else if (filter === \"balance\") {\n        data = data.filter(token => token.balance.gt(0));\n    }\n    return state.loading ? (\n        <Loading />\n    ) : data.length === 0 ? (\n        <EmptyList text={emptyText} />\n    ) : (\n        <FlatList keyExtractor={item => JSON.stringify(item)} data={data} renderItem={renderItem} />\n    );\n};\n\nconst EmptyList = ({ text }: { text: string }) => {\n    return (\n        <View style={{ margin: Spacing.normal }}>\n            <Text disabled={true} style={{ textAlign: \"center\", width: \"100%\" }}>\n                {text}\n            </Text>\n        </View>\n    );\n};\n\nexport const LPTokenItem: FC<LPTokenItemProps> = props => {\n    const { textMedium } = useColors();\n    const balance = formatBalance(props.token.balance, props.token.decimals, 8);\n    const onPress = useCallback(() => {\n        props.onSelectToken(props.token);\n    }, [props.onSelectToken, props.token]);\n    return (\n        <Selectable\n            selected={props.selected}\n            onPress={onPress}\n            containerStyle={{ marginBottom: ITEM_SEPARATOR_HEIGHT }}>\n            <FlexView style={{ alignItems: \"center\" }}>\n                <TokenLogo token={props.token.tokenA} small={true} replaceWETH={true} />\n                <TokenLogo token={props.token.tokenB} small={true} replaceWETH={true} style={{ marginLeft: 4 }} />\n                <Text medium={true} caption={true} style={{ marginLeft: Spacing.tiny }}>\n                    {props.token.tokenA.symbol}-{props.token.tokenB.symbol}\n                </Text>\n                <View style={{ flex: 1, marginLeft: Spacing.tiny }}>\n                    {/*<Text note={true} style={{ textAlign: \"right\", color: textLight }}>*/}\n                    {/*    My Balance*/}\n                    {/*</Text>*/}\n                    <Text caption={true} light={true} style={{ textAlign: \"right\", color: textMedium }}>\n                        {balance}\n                    </Text>\n                </View>\n            </FlexView>\n        </Selectable>\n    );\n};\n\nexport default LPTokenSelect;\n","import { useCallback, useContext, useState } from \"react\";\n\nimport { ethers } from \"ethers\";\nimport useAsyncEffect from \"use-async-effect\";\nimport { ROUTER } from \"../constants/contracts\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport { convertToken, formatBalance, parseBalance, parseCurrencyAmount } from \"../utils\";\nimport useLPTokensState, { LPTokensState } from \"./useLPTokensState\";\nimport useSDK from \"./useSDK\";\n\nexport interface RemoveLiquidityState extends LPTokensState {\n    onRemove: () => Promise<void>;\n    removing: boolean;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst useRemoveLiquidityState: () => RemoveLiquidityState = () => {\n    const state = useLPTokensState(\"my-lp-tokens\");\n    const { provider, signer, getTokenAllowance, updateTokens } = useContext(EthersContext);\n    const { removeLiquidity, removeLiquidityETH } = useSDK();\n    const [loading, setLoading] = useState(false);\n    const [removing, setRemoving] = useState(false);\n\n    useAsyncEffect(async () => {\n        if (provider && signer && state.selectedLPToken) {\n            state.setFromSymbol(state.selectedLPToken.tokenA.symbol);\n            state.setToSymbol(state.selectedLPToken.tokenB.symbol);\n\n            setLoading(true);\n            state.setSelectedLPTokenAllowed(false);\n            try {\n                const minAllowance = ethers.BigNumber.from(2)\n                    .pow(96)\n                    .sub(1);\n                const allowance = await getTokenAllowance(state.selectedLPToken.address, ROUTER);\n                state.setSelectedLPTokenAllowed(ethers.BigNumber.from(allowance).gte(minAllowance));\n            } finally {\n                setLoading(false);\n            }\n        }\n    }, [provider, signer, state.selectedLPToken]);\n\n    // tslint:disable-next-line:max-func-body-length\n    useAsyncEffect(async () => {\n        if (\n            state.selectedLPToken &&\n            state.selectedLPToken.totalSupply &&\n            state.pair &&\n            state.fromToken &&\n            state.toToken\n        ) {\n            if (state.pair.liquidityToken.address === state.selectedLPToken.address) {\n                const fromReserve = parseCurrencyAmount(\n                    state.pair.reserveOf(convertToken(state.fromToken)),\n                    state.fromToken.decimals\n                );\n                const toReserve = parseCurrencyAmount(\n                    state.pair.reserveOf(convertToken(state.toToken)),\n                    state.toToken.decimals\n                );\n                state.setFromAmount(\n                    formatBalance(\n                        parseBalance(state.amount, state.selectedLPToken.decimals)\n                            .mul(fromReserve)\n                            .div(state.selectedLPToken.totalSupply)\n                            .toString(),\n                        state.selectedLPToken.tokenA.decimals\n                    )\n                );\n                state.setToAmount(\n                    formatBalance(\n                        parseBalance(state.amount, state.selectedLPToken.decimals)\n                            .mul(toReserve)\n                            .div(state.selectedLPToken.totalSupply)\n                            .toString(),\n                        state.selectedLPToken.tokenB.decimals\n                    )\n                );\n            }\n        }\n    }, [state.selectedLPToken, state.amount, state.pair, state.fromToken, state.toToken, signer]);\n\n    const onRemove = useCallback(async () => {\n        if (state.fromAmount && state.toAmount && state.selectedLPToken && state.amount && signer) {\n            setRemoving(true);\n            try {\n                const fromAmount = parseBalance(state.fromAmount, state.fromToken!.decimals);\n                const toAmount = parseBalance(state.toAmount, state.toToken!.decimals);\n                const liquidity = parseBalance(state.amount, state.selectedLPToken.decimals);\n                if (state.fromSymbol === \"WETH\" || state.toSymbol === \"WETH\") {\n                    const token = state.fromSymbol === \"WETH\" ? state.toToken! : state.fromToken!;\n                    const amountToRemove = state.fromSymbol === \"WETH\" ? toAmount : fromAmount;\n                    const amountToRemoveETH = state.fromSymbol === \"WETH\" ? fromAmount : toAmount;\n                    const tx = await removeLiquidityETH(token, liquidity, amountToRemove, amountToRemoveETH, signer);\n                    await tx.wait();\n                } else {\n                    const tx = await removeLiquidity(\n                        state.fromToken!,\n                        state.toToken!,\n                        liquidity,\n                        fromAmount,\n                        toAmount,\n                        signer\n                    );\n                    await tx.wait();\n                }\n                await updateTokens();\n                await state.updateLPTokens();\n                state.setSelectedLPToken(undefined);\n            } finally {\n                setRemoving(false);\n            }\n        }\n    }, [state.fromAmount, state.toAmount, state.selectedLPToken, state.amount, signer, state.updateLPTokens]);\n\n    return {\n        ...state,\n        loading: state.loading || loading,\n        onRemove,\n        removing\n    };\n};\n\nexport default useRemoveLiquidityState;\n","import React, { useCallback, useState } from \"react\";\nimport { Platform, View } from \"react-native\";\n\nimport useAsyncEffect from \"use-async-effect\";\nimport ApproveButton from \"../components/ApproveButton\";\nimport Border from \"../components/Border\";\nimport Button from \"../components/Button\";\nimport Container from \"../components/Container\";\nimport Content from \"../components/Content\";\nimport ErrorMessage from \"../components/ErrorMessage\";\nimport FetchingButton from \"../components/FetchingButton\";\nimport Heading from \"../components/Heading\";\nimport InfoBox from \"../components/InfoBox\";\nimport InsufficientBalanceButton from \"../components/InsufficientBalanceButton\";\nimport LPTokenSelect, { LPTokenItem } from \"../components/LPTokenSelect\";\nimport Meta from \"../components/Meta\";\nimport Text from \"../components/Text\";\nimport Title from \"../components/Title\";\nimport TokenInput from \"../components/TokenInput\";\nimport WebFooter from \"../components/web/WebFooter\";\nimport { LiquiditySubMenu } from \"../components/web/WebSubMenu\";\nimport { ROUTER } from \"../constants/contracts\";\nimport { Spacing } from \"../constants/dimension\";\nimport useRemoveLiquidityState, { RemoveLiquidityState } from \"../hooks/useRemoveLiquidityState\";\nimport MetamaskError from \"../types/MetamaskError\";\nimport { isEmptyValue, parseBalance } from \"../utils\";\nimport Screen from \"./Screen\";\n\nconst RemoveLiquidityScreen = () => {\n    return (\n        <Screen>\n            <LiquiditySubMenu />\n            <Container>\n                <Content>\n                    <Title text={\"Remove Liquidity\"} />\n                    <Text light={true}>Scan your liquidity and remove one if needed.</Text>\n                    <RemoveLiquidity />\n                    {Platform.OS === \"web\" && <WebFooter />}\n                </Content>\n            </Container>\n        </Screen>\n    );\n};\n\nconst RemoveLiquidity = () => {\n    const state = useRemoveLiquidityState();\n    return (\n        <View style={{ marginTop: Spacing.large }}>\n            <LPTokenSelect\n                state={state}\n                title={\"Your Liquidity\"}\n                emptyText={\"You don't have any liquidity.\"}\n                Item={LPTokenItem}\n            />\n            <Border />\n            <AmountInput state={state} />\n            <AmountInfo state={state} />\n        </View>\n    );\n};\n\nconst AmountInput = ({ state }: { state: RemoveLiquidityState }) => {\n    if (!state.selectedLPToken) {\n        return <Heading text={\"Amount of Tokens\"} disabled={true} />;\n    }\n    return (\n        <TokenInput\n            title={\"Amount of Tokens\"}\n            token={state.selectedLPToken}\n            amount={state.amount}\n            onAmountChanged={state.setAmount}\n        />\n    );\n};\n\nconst AmountInfo = ({ state }: { state: RemoveLiquidityState }) => {\n    const disabled = !state.selectedLPToken || !state.fromToken || !state.toToken;\n    return (\n        <InfoBox>\n            <Meta\n                label={state.fromToken ? \"Amount of \" + state.fromToken.symbol : \"Amount of Token 1\"}\n                text={state.fromAmount}\n                disabled={disabled}\n            />\n            <Meta\n                label={state.toToken ? \"Amount of \" + state.toToken.symbol : \"Amount of Token 2\"}\n                text={state.toAmount}\n                disabled={disabled}\n            />\n            <Controls state={state} />\n        </InfoBox>\n    );\n};\n\n// tslint:disable-next-line:max-func-body-length\nconst Controls = ({ state }: { state: RemoveLiquidityState }) => {\n    const [error, setError] = useState<MetamaskError>({});\n    useAsyncEffect(() => setError({}), [state.fromSymbol, state.toSymbol, state.fromAmount]);\n    const approveRequired = !state.selectedLPTokenAllowed;\n    const disabled = approveRequired || isEmptyValue(state.amount);\n    return (\n        <View style={{ marginTop: Spacing.normal }}>\n            {!state.selectedLPToken || isEmptyValue(state.amount) ? (\n                <RemoveButton state={state} onError={setError} disabled={true} />\n            ) : parseBalance(state.amount, state.selectedLPToken.decimals).gt(state.selectedLPToken.balance) ? (\n                <InsufficientBalanceButton symbol={state.selectedLPToken.symbol} />\n            ) : state.loading || !state.pair ? (\n                <FetchingButton />\n            ) : (\n                <>\n                    <ApproveButton\n                        token={state.selectedLPToken}\n                        spender={ROUTER}\n                        onSuccess={() => state.setSelectedLPTokenAllowed(true)}\n                        onError={setError}\n                        hidden={!approveRequired}\n                    />\n                    <RemoveButton state={state} onError={setError} disabled={disabled} />\n                </>\n            )}\n            {error.message && error.code !== 4001 && <ErrorMessage error={error} />}\n        </View>\n    );\n};\n\nconst RemoveButton = ({\n    state,\n    onError,\n    disabled\n}: {\n    state: RemoveLiquidityState;\n    onError: (e) => void;\n    disabled: boolean;\n}) => {\n    const onPress = useCallback(() => {\n        onError({});\n        state.onRemove().catch(onError);\n    }, [state.onRemove, onError]);\n    return <Button title={\"Remove Liquidity\"} disabled={disabled} loading={state.removing} onPress={onPress} />;\n};\n\nexport default RemoveLiquidityScreen;\n"],"sourceRoot":""}