{"version":3,"sources":["src/components/Meta.tsx","src/components/InfoBox.tsx","src/components/Title.tsx","src/components/Border.tsx","src/hooks/useLPTokensState.tsx","src/components/LPTokenSelect.tsx","src/hooks/useRemoveLiquidityState.tsx","src/screens/RemoveLiquidityScreen.tsx"],"names":["Meta","props","useColors","textMedium","textLight","placeholder","onPress","useLinker","url","text","disabled","suffix","style","justifyContent","marginTop","fontWeight","fontSize","color","label","undefined","textDecorationLine","InfoBox","backgroundLight","border","useStyles","backgroundColor","Spacing","normal","small","padding","tiny","Title","marginBottom","Border","height","width","useLPTokensState","mode","state","useLiquidityState","useContext","EthersContext","provider","signer","address","tokens","useState","lastTimeRefreshed","setLastTimeRefreshed","loading","setLoading","lpTokens","setLPTokens","selectedLPToken","setSelectedLPToken","selectedLPTokenAllowed","setSelectedLPTokenAllowed","amount","setAmount","updateLPTokens","a","async","fetchPools","fetchMyLPTokens","fetchMyUniswapLPTokens","data","useEffect","useDelayedOnBlockEffect","block","length","updateLastTimeRefreshed","Date","now","LPTokenList","emptyText","filter","Item","renderItem","useCallback","item","key","token","selected","onSelectToken","sort","t1","t2","totalDeposited","ethers","constants","Zero","sub","div","pow10","toNumber","amountDeposited","gt","balance","Loading","FlatList","keyExtractor","JSON","stringify","EmptyList","View","margin","Text","textAlign","LPTokenItem","formatBalance","decimals","Selectable","ITEM_SEPARATOR_HEIGHT","FlexView","alignItems","TokenLogo","tokenA","replaceWETH","tokenB","marginLeft","TokenSymbol","flex","caption","light","LPTokenSelect","Expandable","title","expanded","onExpand","useRemoveLiquidityState","getTokenAllowance","updateTokens","useSDK","removeLiquidity","removeLiquidityETH","removing","setRemoving","useAsyncEffect","setFromSymbol","symbol","setToSymbol","minAllowance","BigNumber","from","pow","ROUTER","allowance","gte","totalSupply","pair","fromToken","toToken","liquidityToken","fromReserve","parseCurrencyAmount","reserveOf","convertToken","toReserve","setFromAmount","parseBalance","mul","toString","setToAmount","onRemove","fromAmount","toAmount","liquidity","fromSymbol","toSymbol","amountToRemove","amountToRemoveETH","tx","wait","RemoveLiquidity","large","AmountInput","TokenInput","onAmountChanged","Heading","AmountInfo","Controls","error","setError","approveRequired","isEmptyValue","InsufficientBalanceButton","FetchingButton","ApproveButton","spender","onSuccess","onError","hidden","message","code","ErrorMessage","RemoveButton","catch","Button","RemoveLiquidityScreen","Screen","Container","Content","Platform","OS","WebFooter"],"mappings":"uFAAA,sDAyCeA,IA1Ba,SAAAC,GAAU,IAAD,EACcC,cAAvCC,EADyB,EACzBA,WAAYC,EADa,EACbA,UAAWC,EADE,EACFA,YACzBC,EAAUC,YAAUN,EAAMO,KAAO,GAAI,GAAI,UACzCC,EAAOR,EAAMS,SACb,MACAT,EAAMQ,KACNR,EAAMQ,MAAQR,EAAMU,OAAS,IAAMV,EAAMU,OAAS,IAClD,iBACN,OACI,kBAAC,IAAD,CAAUC,MAAO,CAAEC,eAAgB,gBAAiBC,UAAW,IAC3D,kBAAC,IAAD,CAAMC,WAAY,OAAQH,MAAO,CAAEI,SAAU,GAAIC,MAAOhB,EAAMS,SAAWL,EAAcF,IAClFF,EAAMiB,OAEX,kBAAC,IAAD,CACIZ,QAASL,EAAMO,IAAMF,OAAUa,EAC/BP,MAAO,CACHI,SAAU,GACVC,MAAOhB,EAAMS,SAAWL,EAAcJ,EAAMQ,KAAON,EAAaC,EAChEgB,mBAAoBnB,EAAMO,IAAM,YAAc,SAEjDC,M,urBCTFY,IAnBC,SAACpB,GAAyC,IAC9CqB,EAAoBpB,cAApBoB,gBACAC,EAAWC,cAAXD,OACR,OACI,kBAAC,IAAD,OACQtB,EADR,CAEIW,MAAO,CAAC,EAAD,KAEIW,EAAO,CAAEN,MAAOK,KAFpB,IAGCG,gBAAiBH,EACjBR,UAAWY,IAAQC,OAASD,IAAQE,MACpCC,QAASH,IAAQE,MAAQF,IAAQI,OAErC7B,EAAMW,Y,iCCpBtB,oCAiBemB,IARe,SAAA9B,GAC1B,OACI,kBAAC,IAAD,CAAMc,WAAY,OAAQH,MAAO,CAAEoB,aAAcN,IAAQI,KAAMd,SAAU,KACpEf,EAAMQ,Q,iCCZnB,2CAqBewB,IAfA,WAAO,IACVV,EAAWrB,cAAXqB,OACR,OACI,kBAAC,IAAD,CACIX,MAAO,CACHsB,OAAQ,EACRC,MAAO,OACPV,gBAAiBF,EACjBT,UAAWY,IAAQE,MACnBI,aAAcN,IAAQE,MAAQF,IAAQI,U,msBCwEvCM,IA/DyC,SAAAC,GACpD,IAAMC,EAAQC,cAD8C,EAEdC,qBAAWC,KAAjDC,EAFoD,EAEpDA,SAAUC,EAF0C,EAE1CA,OAAQC,EAFkC,EAElCA,QAASC,EAFyB,EAEzBA,OAFyB,EAGVC,mBAAS,GAHC,WAGrDC,EAHqD,KAGlCC,EAHkC,OAI9BF,oBAAS,GAJqB,WAIrDG,EAJqD,KAI5CC,EAJ4C,OAK5BJ,mBAAoB,IALQ,WAKrDK,EALqD,KAK3CC,EAL2C,OAMdN,qBANc,WAMrDO,EANqD,KAMpCC,EANoC,OAOAR,oBAAS,GAPT,WAOrDS,EAPqD,KAO7BC,EAP6B,OAQhCV,mBAAS,IARuB,WAQrDW,EARqD,KAQ7CC,EAR6C,KAUtDC,EAAiB,0BAAAC,EAAAC,OAAA,2EAAAD,EAAA,MAEc,UAATvB,EACdyB,YAAWpB,EAAUC,GACZ,iBAATN,EACA0B,YAAgBlB,EAAQH,EAAUC,GAClCqB,YAAuBnB,EAAQH,EAAUC,IANhC,QAETsB,EAFS,SAQXb,EAAYa,GARD,uBAWff,GAAW,GAXI,+EAmCvB,OApBAgB,qBAAU,WACDb,GACDK,EAAU,MAEf,CAACL,IAEJc,aACI,SAAMC,GAAN,SAAAR,EAAAC,OAAA,oDACQjB,KAAqB,UAATP,GAAoBQ,EAAOwB,OAAS,GADxD,uBAEaD,GACDlB,GAAW,GAHvB,WAAAU,EAAA,MAKcD,KALd,+DAQA,iBAAM,qBACN,CAACd,EAAOwB,OAAQzB,EAASG,GACzB,GAGG,EAAP,KACOT,GADP,IAEIqB,iBACAV,QAASX,EAAMW,SAAWA,EAC1BF,oBACAuB,wBAAyB,WACrBtB,EAAqBuB,KAAKC,QAE9BrB,WACAE,kBACAC,qBACAC,yBACAC,4BACAC,SACAC,gB,4NCXFe,EAAc,SAAC,GAUd,IATHnC,EASE,EATFA,MACAoC,EAQE,EARFA,UACAC,EAOE,EAPFA,OACAC,EAME,EANFA,KAOMC,EAAaC,uBACf,YAAe,IAAZC,EAAW,EAAXA,KACC,OACI,kBAACH,EAAD,CACII,IAAKD,EAAKnC,QACVqC,MAAOF,EACPG,UAAU,EACVP,OAAQA,EACRQ,cAAe7C,EAAMgB,uBAIjC,CAACqB,EAAQrC,EAAMgB,qBAEfW,EAAO3B,EAAMa,SAASiC,MAAK,SAACC,EAAIC,GAChC,OAAQA,EAAGC,gBAAkBC,SAAOC,UAAUC,MACzCC,IAAIN,EAAGE,gBAAkBC,SAAOC,UAAUC,MAC1CE,IAAIC,YAAM,KACVC,cAOT,MALe,oBAAXnB,EACAV,EAAOA,EAAKU,QAAO,SAAAM,GAAK,sBAAIA,EAAMc,sBAAV,EAAI,EAAuBC,GAAG,MACpC,YAAXrB,IACPV,EAAOA,EAAKU,QAAO,SAAAM,GAAK,OAAIA,EAAMgB,QAAQD,GAAG,OAE1C1D,EAAMW,QACT,kBAACiD,EAAA,EAAD,MACgB,IAAhBjC,EAAKI,OACL,kBAAC,EAAD,CAAW5D,KAAMiE,IAEjB,kBAACyB,EAAA,EAAD,CAAUC,aAAc,SAAArB,GAAI,OAAIsB,KAAKC,UAAUvB,IAAOd,KAAMA,EAAMY,WAAYA,KAIhF0B,EAAY,SAAC,GAAgC,IAA9B9F,EAA6B,EAA7BA,KACjB,OACI,kBAAC+F,EAAA,EAAD,CAAM5F,MAAO,CAAE6F,OAAQ/E,IAAQC,SAC3B,kBAAC+E,EAAA,EAAD,CAAMhG,UAAU,EAAME,MAAO,CAAE+F,UAAW,SAAUxE,MAAO,SACtD1B,KAMJmG,EAAoC,SAAA3G,GAAU,IAAD,EACpBC,cAA1BC,EAD8C,EAC9CA,WACF8F,GAFgD,EAClC7F,UACJyG,YAAc5G,EAAMgF,MAAMgB,QAAShG,EAAMgF,MAAM6B,SAAU,IACnExG,EAAUwE,uBAAY,WACxB7E,EAAMkF,cAAclF,EAAMgF,SAC3B,CAAChF,EAAMkF,cAAelF,EAAMgF,QAC/B,OACI,kBAAC8B,EAAA,EAAD,CAAY7B,SAAUjF,EAAMiF,SAAU5E,QAASA,EAASM,MAAO,CAAEoB,aAAcgF,MAC3E,kBAACC,EAAA,EAAD,CAAUrG,MAAO,CAAEsG,WAAY,WAC3B,kBAACC,EAAA,EAAD,CAAWlC,MAAOhF,EAAMgF,MAAMmC,OAAQxF,OAAO,EAAMyF,aAAa,IAChE,kBAACF,EAAA,EAAD,CAAWlC,MAAOhF,EAAMgF,MAAMqC,OAAQ1F,OAAO,EAAMyF,aAAa,EAAMzG,MAAO,CAAE2G,WAAY,KAC3F,kBAACC,EAAA,EAAD,CAAavC,MAAOhF,EAAMgF,QAC1B,kBAACuB,EAAA,EAAD,CAAM5F,MAAO,CAAE6G,KAAM,EAAGF,WAAY7F,IAAQI,OAIxC,kBAAC4E,EAAA,EAAD,CAAMgB,SAAS,EAAMC,OAAO,EAAM/G,MAAO,CAAE+F,UAAW,QAAS1F,MAAOd,IACjE8F,OAQV2B,IAjH+B,SAAA3H,GAE1C,OACI,kBAACuG,EAAA,EAAD,CAAM5F,MAAOX,EAAMW,OACf,kBAACiH,EAAA,EAAD,CACIC,MAAO7H,EAAM6H,MACbC,UAAW9H,EAAMqC,MAAMe,gBACvB2E,SAAU,kBAAM/H,EAAMqC,MAAMgB,uBAC5B,kBAAC,EAAD,CAAahB,MAAOrC,EAAMqC,MAAOqC,OAAQ1E,EAAM0E,OAAQD,UAAWzE,EAAMyE,UAAWE,KAAM3E,EAAM2E,QAElG3E,EAAMqC,MAAMe,iBACT,kBAAC,EAAD,CAAa4B,MAAOhF,EAAMqC,MAAMe,gBAAiB6B,UAAU,EAAMC,cAVrD,kBAAMlF,EAAMqC,MAAMgB,2B,m6BCxB9C,IA2Ge2E,EA3G6C,WACxD,IAAM3F,EAAQF,YAAiB,gBAD+B,EAEAI,qBAAWC,KAAjEC,EAFsD,EAEtDA,SAAUC,EAF4C,EAE5CA,OAAQuF,EAFoC,EAEpCA,kBAAmBC,EAFiB,EAEjBA,aAFiB,EAGdC,cAAxCC,EAHsD,EAGtDA,gBAAiBC,EAHqC,EAGrCA,mBAHqC,EAIhCxF,oBAAS,GAJuB,WAIvDG,EAJuD,KAI9CC,EAJ8C,OAK9BJ,oBAAS,GALqB,WAKvDyF,EALuD,KAK7CC,EAL6C,KAO9DC,KAAe,4BAAA7E,EAAAC,OAAA,qDACPnB,GAAYC,GAAUL,EAAMe,iBADrB,wBAEPf,EAAMoG,cAAcpG,EAAMe,gBAAgB+D,OAAOuB,QACjDrG,EAAMsG,YAAYtG,EAAMe,gBAAgBiE,OAAOqB,QAE/CzF,GAAW,GACXZ,EAAMkB,2BAA0B,GANzB,SAQGqF,EAAerD,SAAOsD,UAAUC,KAAK,GACtCC,IAAI,IACJrD,IAAI,GAVN,WAAA/B,EAAA,MAWqBsE,EAAkB5F,EAAMe,gBAAgBT,QAASqG,MAXtE,OAWGC,EAXH,OAYH5G,EAAMkB,0BAA0BgC,SAAOsD,UAAUC,KAAKG,GAAWC,IAAIN,IAZlE,yBAcH3F,GAAW,GAdR,oFAiBZ,CAACR,EAAUC,EAAQL,EAAMe,kBAG5BoF,KAAe,4BAAA7E,EAAAC,OAAA,gDAEPvB,EAAMe,iBACNf,EAAMe,gBAAgB+F,aACtB9G,EAAM+G,MACN/G,EAAMgH,WACNhH,EAAMiH,SAEFjH,EAAM+G,KAAKG,eAAe5G,UAAYN,EAAMe,gBAAgBT,UACtD6G,EAAcC,YAChBpH,EAAM+G,KAAKM,UAAUC,YAAatH,EAAMgH,YACxChH,EAAMgH,UAAUxC,UAEd+C,EAAYH,YACdpH,EAAM+G,KAAKM,UAAUC,YAAatH,EAAMiH,UACxCjH,EAAMiH,QAAQzC,UAElBxE,EAAMwH,cACFjD,YACIkD,YAAazH,EAAMmB,OAAQnB,EAAMe,gBAAgByD,UAC5CkD,IAAIP,GACJ7D,IAAItD,EAAMe,gBAAgB+F,aAC1Ba,WACL3H,EAAMe,gBAAgB+D,OAAON,WAGrCxE,EAAM4H,YACFrD,YACIkD,YAAazH,EAAMmB,OAAQnB,EAAMe,gBAAgByD,UAC5CkD,IAAIH,GACJjE,IAAItD,EAAMe,gBAAgB+F,aAC1Ba,WACL3H,EAAMe,gBAAgBiE,OAAOR,YAhClC,8DAqCZ,CAACxE,EAAMe,gBAAiBf,EAAMmB,OAAQnB,EAAM+G,KAAM/G,EAAMgH,UAAWhH,EAAMiH,QAAS5G,IAErF,IAAMwH,EAAWrF,uBAAY,wCAAAlB,EAAAC,OAAA,qDACrBvB,EAAM8H,YAAc9H,EAAM+H,UAAY/H,EAAMe,iBAAmBf,EAAMmB,QAAUd,GAD1D,oBAErB6F,GAAY,GAFS,SAIX4B,EAAaL,YAAazH,EAAM8H,WAAY9H,EAAMgH,UAAWxC,UAC7DuD,EAAWN,YAAazH,EAAM+H,SAAU/H,EAAMiH,QAASzC,UACvDwD,EAAYP,YAAazH,EAAMmB,OAAQnB,EAAMe,gBAAgByD,UAC1C,SAArBxE,EAAMiI,YAA4C,SAAnBjI,EAAMkI,SAPxB,wBAQPvF,EAA6B,SAArB3C,EAAMiI,WAAwBjI,EAAMiH,QAAWjH,EAAMgH,UAC7DmB,EAAsC,SAArBnI,EAAMiI,WAAwBF,EAAWD,EAC1DM,EAAyC,SAArBpI,EAAMiI,WAAwBH,EAAaC,EAVxD,YAAAzG,EAAA,MAWI0E,EAAmBrD,EAAOqF,EAAWG,EAAgBC,EAAmB/H,IAX5E,eAWPgI,EAXO,mBAAA/G,EAAA,MAYP+G,EAAGC,QAZI,mDAAAhH,EAAA,MAcIyE,EACb/F,EAAMgH,UACNhH,EAAMiH,QACNe,EACAF,EACAC,EACA1H,IApBS,eAcPgI,EAdO,mBAAA/G,EAAA,MAsBP+G,EAAGC,QAtBI,2BAAAhH,EAAA,MAwBXuE,KAxBW,2BAAAvE,EAAA,MAyBXtB,EAAMqB,kBAzBK,QA0BjBrB,EAAMgB,wBAAmBnC,GA1BR,yBA4BjBqH,GAAY,GA5BK,oFA+B1B,CAAClG,EAAM8H,WAAY9H,EAAM+H,SAAU/H,EAAMe,gBAAiBf,EAAMmB,OAAQd,EAAQL,EAAMqB,iBAEzF,OAAO,EAAP,KACOrB,GADP,IAEIW,QAASX,EAAMW,SAAWA,EAC1BkH,WACA5B,c,SC3EFsC,EAAkB,WACpB,IAAMvI,EAAQ2F,IACd,OACI,kBAACzB,EAAA,EAAD,CAAM5F,MAAO,CAAEE,UAAWY,IAAQoJ,QAC9B,kBAAClD,EAAA,EAAD,CACItF,MAAOA,EACPwF,MAAO,iBACPpD,UAAW,gCACXE,KAAMgC,MAEV,kBAAC3E,EAAA,EAAD,MACA,kBAAC,EAAD,CAAaK,MAAOA,IACpB,kBAAC,EAAD,CAAYA,MAAOA,MAKzByI,EAAc,SAAC,GAAgD,IAA9CzI,EAA6C,EAA7CA,MACnB,OAAKA,EAAMe,gBAIP,kBAAC2H,EAAA,EAAD,CACIlD,MAAO,mBACP7C,MAAO3C,EAAMe,gBACbI,OAAQnB,EAAMmB,OACdwH,gBAAiB3I,EAAMoB,YAPpB,kBAACwH,EAAA,EAAD,CAASzK,KAAM,mBAAoBC,UAAU,KAYtDyK,EAAa,SAAC,GAAgD,IAA9C7I,EAA6C,EAA7CA,MACZ5B,GAAY4B,EAAMe,kBAAoBf,EAAMgH,YAAchH,EAAMiH,QACtE,OACI,kBAAClI,EAAA,EAAD,KACI,kBAACrB,EAAA,EAAD,CACIkB,MAAOoB,EAAMgH,UAAY,aAAehH,EAAMgH,UAAUX,OAAS,oBACjElI,KAAM6B,EAAM8H,WACZ1J,SAAUA,IAEd,kBAACV,EAAA,EAAD,CACIkB,MAAOoB,EAAMiH,QAAU,aAAejH,EAAMiH,QAAQZ,OAAS,oBAC7DlI,KAAM6B,EAAM+H,SACZ3J,SAAUA,IAEd,kBAAC,EAAD,CAAU4B,MAAOA,MAMvB8I,EAAW,SAAC,GAAgD,IAA9C9I,EAA6C,EAA7CA,MAA6C,EACnCQ,mBAAwB,IADW,WACtDuI,EADsD,KAC/CC,EAD+C,KAE7D7C,KAAe,kBAAM6C,EAAS,MAAK,CAAChJ,EAAMiI,WAAYjI,EAAMkI,SAAUlI,EAAM8H,aAC5E,IAAMmB,GAAmBjJ,EAAMiB,uBACzB7C,EAAW6K,GAAmBC,YAAalJ,EAAMmB,QACvD,OACI,kBAAC+C,EAAA,EAAD,CAAM5F,MAAO,CAAEE,UAAWY,IAAQC,SAC5BW,EAAMe,gBAEJ0G,YAAazH,EAAMmB,OAAQnB,EAAMe,gBAAgByD,UAAUd,GAAG1D,EAAMe,gBAAgB4C,SACpF,kBAACwF,EAAA,EAAD,CAA2B9C,OAAQrG,EAAMe,gBAAgBsF,SACzDrG,EAAMW,UAAYX,EAAM+G,KACxB,kBAACqC,EAAA,EAAD,MAEA,oCACI,kBAACC,EAAA,EAAD,CACI1G,MAAO3C,EAAMe,gBACbuI,QAAS3C,IACT4C,UAAW,kBAAMvJ,EAAMkB,2BAA0B,IACjDsI,QAASR,EACTS,QAASR,IAEb,kBAAC,EAAD,CAAcjJ,MAAOA,EAAOwJ,QAASR,EAAU5K,SAAUA,KAd7D,kBAAC,EAAD,CAAc4B,MAAOA,EAAOwJ,QAASR,EAAU5K,UAAU,IAiB5D2K,EAAMW,SAA0B,OAAfX,EAAMY,MAAiB,kBAACC,EAAA,EAAD,CAAcb,MAAOA,MAKpEc,EAAe,SAAC,GAQf,IAPH7J,EAOE,EAPFA,MACAwJ,EAME,EANFA,QACApL,EAKE,EALFA,SAMMJ,EAAUwE,uBAAY,WACxBgH,EAAQ,IACRxJ,EAAM6H,WAAWiC,MAAMN,KACxB,CAACxJ,EAAM6H,SAAU2B,IACpB,OAAO,kBAACO,EAAA,EAAD,CAAQvE,MAAO,mBAAoBpH,SAAUA,EAAUuC,QAASX,EAAMiG,SAAUjI,QAASA,KAGrFgM,UAjHe,WAC1B,OACI,kBAACC,EAAA,EAAD,KACI,kBAAC,IAAD,MACA,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAAC1K,EAAA,EAAD,CAAOtB,KAAM,qBACb,kBAACiG,EAAA,EAAD,CAAMiB,OAAO,GAAb,iDACA,kBAAC,EAAD,MACiB,QAAhB+E,IAASC,IAAgB,kBAACC,EAAA,EAAD","file":"static/js/10.e836230b.chunk.js","sourcesContent":["import React, { FC } from \"react\";\n\nimport useColors from \"../hooks/useColors\";\nimport useLinker from \"../hooks/useLinker\";\nimport FlexView from \"./FlexView\";\nimport Text from \"./Text\";\n\nexport interface MetaProps {\n    label: string;\n    text?: string;\n    suffix?: string;\n    url?: string;\n    disabled?: boolean;\n}\n\nconst Meta: FC<MetaProps> = props => {\n    const { textMedium, textLight, placeholder } = useColors();\n    const onPress = useLinker(props.url || \"\", \"\", \"_blank\");\n    const text = props.disabled\n        ? \"N/A\"\n        : props.text\n        ? props.text + (props.suffix ? \" \" + props.suffix : \"\")\n        : \"Fetching…\";\n    return (\n        <FlexView style={{ justifyContent: \"space-between\", marginTop: 4 }}>\n            <Text fontWeight={\"bold\"} style={{ fontSize: 13, color: props.disabled ? placeholder : textMedium }}>\n                {props.label}\n            </Text>\n            <Text\n                onPress={props.url ? onPress : undefined}\n                style={{\n                    fontSize: 13,\n                    color: props.disabled ? placeholder : props.text ? textMedium : textLight,\n                    textDecorationLine: props.url ? \"underline\" : \"none\"\n                }}>\n                {text}\n            </Text>\n        </FlexView>\n    );\n};\n\nexport default Meta;\n","import React, { PropsWithChildren } from \"react\";\nimport { View, ViewProps } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport useStyles from \"../hooks/useStyles\";\n\nconst InfoBox = (props: PropsWithChildren<ViewProps>) => {\n    const { backgroundLight } = useColors();\n    const { border } = useStyles();\n    return (\n        <View\n            {...props}\n            style={[\n                {\n                    ...border({ color: backgroundLight }),\n                    backgroundColor: backgroundLight,\n                    marginTop: Spacing.normal + Spacing.small,\n                    padding: Spacing.small + Spacing.tiny\n                },\n                props.style\n            ]}\n        />\n    );\n};\n\nexport default InfoBox;\n","import React, { FC } from \"react\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport Text from \"./Text\";\n\ninterface TitleProps {\n    text: string;\n}\n\nconst Title: FC<TitleProps> = props => {\n    return (\n        <Text fontWeight={\"bold\"} style={{ marginBottom: Spacing.tiny, fontSize: 40 }}>\n            {props.text}\n        </Text>\n    );\n};\n\nexport default Title;\n","import React from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\n\nconst Border = () => {\n    const { border } = useColors();\n    return (\n        <View\n            style={{\n                height: 1,\n                width: \"100%\",\n                backgroundColor: border,\n                marginTop: Spacing.small,\n                marginBottom: Spacing.small + Spacing.tiny\n            }}\n        />\n    );\n};\n\nexport default Border;\n","import { useContext, useEffect, useState } from \"react\";\n\nimport { EthersContext } from \"../context/EthersContext\";\nimport LPToken from \"../types/LPToken\";\nimport { fetchMyLPTokens, fetchMyUniswapLPTokens, fetchPools } from \"../utils/fetch-utils\";\nimport useDelayedOnBlockEffect from \"./useDelayedOnBlockEffect\";\nimport useLiquidityState, { LiquidityState } from \"./useLiquidityState\";\n\nexport interface LPTokensState extends LiquidityState {\n    updateLPTokens: () => Promise<void>;\n    lastTimeRefreshed: number;\n    updateLastTimeRefreshed: () => void;\n    lpTokens: LPToken[];\n    selectedLPToken?: LPToken;\n    setSelectedLPToken: (token?: LPToken) => void;\n    selectedLPTokenAllowed: boolean;\n    setSelectedLPTokenAllowed: (allowed: boolean) => void;\n    amount: string;\n    setAmount: (amount: string) => void;\n}\n\ntype Mode = \"pools\" | \"my-lp-tokens\" | \"my-uniswap-lp-tokens\";\n\n// tslint:disable-next-line:max-func-body-length\nconst useLPTokensState: (mode: Mode) => LPTokensState = mode => {\n    const state = useLiquidityState();\n    const { provider, signer, address, tokens } = useContext(EthersContext);\n    const [lastTimeRefreshed, setLastTimeRefreshed] = useState(0);\n    const [loading, setLoading] = useState(true);\n    const [lpTokens, setLPTokens] = useState<LPToken[]>([]);\n    const [selectedLPToken, setSelectedLPToken] = useState<LPToken>();\n    const [selectedLPTokenAllowed, setSelectedLPTokenAllowed] = useState(false);\n    const [amount, setAmount] = useState(\"\");\n\n    const updateLPTokens = async () => {\n        try {\n            const data = await (mode === \"pools\"\n                ? fetchPools(provider, signer)\n                : mode === \"my-lp-tokens\"\n                ? fetchMyLPTokens(tokens, provider, signer)\n                : fetchMyUniswapLPTokens(tokens, provider, signer));\n            if (data) {\n                setLPTokens(data);\n            }\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    useEffect(() => {\n        if (!selectedLPToken) {\n            setAmount(\"\");\n        }\n    }, [selectedLPToken]);\n\n    useDelayedOnBlockEffect(\n        async block => {\n            if (address && (mode === \"pools\" || tokens.length > 0)) {\n                if (!block) {\n                    setLoading(true);\n                }\n                await updateLPTokens();\n            }\n        },\n        () => \"updateLPTokens()\",\n        [tokens.length, address, lastTimeRefreshed],\n        0\n    );\n\n    return {\n        ...state,\n        updateLPTokens,\n        loading: state.loading || loading,\n        lastTimeRefreshed,\n        updateLastTimeRefreshed: () => {\n            setLastTimeRefreshed(Date.now());\n        },\n        lpTokens,\n        selectedLPToken,\n        setSelectedLPToken,\n        selectedLPTokenAllowed,\n        setSelectedLPTokenAllowed,\n        amount,\n        setAmount\n    };\n};\n\nexport default useLPTokensState;\n","import React, { FC, useCallback } from \"react\";\nimport { FlatList, View, ViewStyle } from \"react-native\";\n\nimport { ethers } from \"ethers\";\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport { LPTokensState } from \"../hooks/useLPTokensState\";\nimport LPToken from \"../types/LPToken\";\nimport { formatBalance, pow10 } from \"../utils\";\nimport CheckBox from \"./CheckBox\";\nimport Expandable from \"./Expandable\";\nimport FlexView from \"./FlexView\";\nimport { ITEM_SEPARATOR_HEIGHT } from \"./ItemSeparator\";\nimport Loading from \"./Loading\";\nimport Selectable from \"./Selectable\";\nimport Text from \"./Text\";\nimport TokenLogo from \"./TokenLogo\";\nimport TokenSymbol from \"./TokenSymbol\";\n\nexport type LPTokenSelectFilter = \"balance\" | \"amountDeposited\" | \"\";\n\nexport interface LPTokenSelectProps {\n    state: LPTokensState;\n    title: string;\n    emptyText: string;\n    showFilter?: boolean;\n    filter?: LPTokenSelectFilter;\n    onFilterChanged?: (filter: LPTokenSelectFilter) => void;\n    Item: FC<LPTokenItemProps>;\n    style?: ViewStyle;\n}\n\nexport interface LPTokenItemProps {\n    token: LPToken;\n    selected: boolean;\n    filter?: LPTokenSelectFilter;\n    onSelectToken: (token: LPToken) => void;\n}\n\nconst LPTokenSelect: FC<LPTokenSelectProps> = props => {\n    const onUnselectToken = () => props.state.setSelectedLPToken();\n    return (\n        <View style={props.style}>\n            <Expandable\n                title={props.title}\n                expanded={!props.state.selectedLPToken}\n                onExpand={() => props.state.setSelectedLPToken()}>\n                <LPTokenList state={props.state} filter={props.filter} emptyText={props.emptyText} Item={props.Item} />\n            </Expandable>\n            {props.state.selectedLPToken && (\n                <LPTokenItem token={props.state.selectedLPToken} selected={true} onSelectToken={onUnselectToken} />\n            )}\n        </View>\n    );\n};\n\nconst Filter = ({ filter, onFilterChanged }) => {\n    const handler = (f: string) => () => onFilterChanged(f);\n    return (\n        <FlexView style={{ width: \"100%\", justifyContent: \"flex-end\" }}>\n            <CheckBox checked={filter === \"balance\"} onPress={handler(\"balance\")} title={\"with balance\"} />\n            <CheckBox\n                checked={filter === \"amountDeposited\"}\n                onPress={handler(\"amountDeposited\")}\n                title={\"with deposit\"}\n            />\n            <CheckBox checked={!filter} onPress={handler(\"\")} title={\"all\"} />\n        </FlexView>\n    );\n};\n\n// tslint:disable-next-line:max-func-body-length\nconst LPTokenList = ({\n    state,\n    emptyText,\n    filter,\n    Item\n}: {\n    state: LPTokensState;\n    emptyText: string;\n    filter?: LPTokenSelectFilter;\n    Item: FC<LPTokenItemProps>;\n}) => {\n    const renderItem = useCallback(\n        ({ item }) => {\n            return (\n                <Item\n                    key={item.address}\n                    token={item}\n                    selected={false}\n                    filter={filter}\n                    onSelectToken={state.setSelectedLPToken}\n                />\n            );\n        },\n        [filter, state.setSelectedLPToken]\n    );\n    let data = state.lpTokens.sort((t1, t2) => {\n        return (t2.totalDeposited || ethers.constants.Zero)\n            .sub(t1.totalDeposited || ethers.constants.Zero)\n            .div(pow10(14))\n            .toNumber();\n    });\n    if (filter === \"amountDeposited\") {\n        data = data.filter(token => token.amountDeposited?.gt(0));\n    } else if (filter === \"balance\") {\n        data = data.filter(token => token.balance.gt(0));\n    }\n    return state.loading ? (\n        <Loading />\n    ) : data.length === 0 ? (\n        <EmptyList text={emptyText} />\n    ) : (\n        <FlatList keyExtractor={item => JSON.stringify(item)} data={data} renderItem={renderItem} />\n    );\n};\n\nconst EmptyList = ({ text }: { text: string }) => {\n    return (\n        <View style={{ margin: Spacing.normal }}>\n            <Text disabled={true} style={{ textAlign: \"center\", width: \"100%\" }}>\n                {text}\n            </Text>\n        </View>\n    );\n};\n\nexport const LPTokenItem: FC<LPTokenItemProps> = props => {\n    const { textMedium, textLight } = useColors();\n    const balance = formatBalance(props.token.balance, props.token.decimals, 8);\n    const onPress = useCallback(() => {\n        props.onSelectToken(props.token);\n    }, [props.onSelectToken, props.token]);\n    return (\n        <Selectable selected={props.selected} onPress={onPress} style={{ marginBottom: ITEM_SEPARATOR_HEIGHT }}>\n            <FlexView style={{ alignItems: \"center\" }}>\n                <TokenLogo token={props.token.tokenA} small={true} replaceWETH={true} />\n                <TokenLogo token={props.token.tokenB} small={true} replaceWETH={true} style={{ marginLeft: 4 }} />\n                <TokenSymbol token={props.token} />\n                <View style={{ flex: 1, marginLeft: Spacing.tiny }}>\n                    {/*<Text note={true} style={{ textAlign: \"right\", color: textLight }}>*/}\n                    {/*    My Balance*/}\n                    {/*</Text>*/}\n                    <Text caption={true} light={true} style={{ textAlign: \"right\", color: textMedium }}>\n                        {balance}\n                    </Text>\n                </View>\n            </FlexView>\n        </Selectable>\n    );\n};\n\nexport default LPTokenSelect;\n","import { useCallback, useContext, useState } from \"react\";\n\nimport { ethers } from \"ethers\";\nimport useAsyncEffect from \"use-async-effect\";\nimport { ROUTER } from \"../constants/contracts\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport { convertToken, formatBalance, parseBalance, parseCurrencyAmount } from \"../utils\";\nimport useLPTokensState, { LPTokensState } from \"./useLPTokensState\";\nimport useSDK from \"./useSDK\";\n\nexport interface RemoveLiquidityState extends LPTokensState {\n    onRemove: () => Promise<void>;\n    removing: boolean;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst useRemoveLiquidityState: () => RemoveLiquidityState = () => {\n    const state = useLPTokensState(\"my-lp-tokens\");\n    const { provider, signer, getTokenAllowance, updateTokens } = useContext(EthersContext);\n    const { removeLiquidity, removeLiquidityETH } = useSDK();\n    const [loading, setLoading] = useState(false);\n    const [removing, setRemoving] = useState(false);\n\n    useAsyncEffect(async () => {\n        if (provider && signer && state.selectedLPToken) {\n            state.setFromSymbol(state.selectedLPToken.tokenA.symbol);\n            state.setToSymbol(state.selectedLPToken.tokenB.symbol);\n\n            setLoading(true);\n            state.setSelectedLPTokenAllowed(false);\n            try {\n                const minAllowance = ethers.BigNumber.from(2)\n                    .pow(96)\n                    .sub(1);\n                const allowance = await getTokenAllowance(state.selectedLPToken.address, ROUTER);\n                state.setSelectedLPTokenAllowed(ethers.BigNumber.from(allowance).gte(minAllowance));\n            } finally {\n                setLoading(false);\n            }\n        }\n    }, [provider, signer, state.selectedLPToken]);\n\n    // tslint:disable-next-line:max-func-body-length\n    useAsyncEffect(async () => {\n        if (\n            state.selectedLPToken &&\n            state.selectedLPToken.totalSupply &&\n            state.pair &&\n            state.fromToken &&\n            state.toToken\n        ) {\n            if (state.pair.liquidityToken.address === state.selectedLPToken.address) {\n                const fromReserve = parseCurrencyAmount(\n                    state.pair.reserveOf(convertToken(state.fromToken)),\n                    state.fromToken.decimals\n                );\n                const toReserve = parseCurrencyAmount(\n                    state.pair.reserveOf(convertToken(state.toToken)),\n                    state.toToken.decimals\n                );\n                state.setFromAmount(\n                    formatBalance(\n                        parseBalance(state.amount, state.selectedLPToken.decimals)\n                            .mul(fromReserve)\n                            .div(state.selectedLPToken.totalSupply)\n                            .toString(),\n                        state.selectedLPToken.tokenA.decimals\n                    )\n                );\n                state.setToAmount(\n                    formatBalance(\n                        parseBalance(state.amount, state.selectedLPToken.decimals)\n                            .mul(toReserve)\n                            .div(state.selectedLPToken.totalSupply)\n                            .toString(),\n                        state.selectedLPToken.tokenB.decimals\n                    )\n                );\n            }\n        }\n    }, [state.selectedLPToken, state.amount, state.pair, state.fromToken, state.toToken, signer]);\n\n    const onRemove = useCallback(async () => {\n        if (state.fromAmount && state.toAmount && state.selectedLPToken && state.amount && signer) {\n            setRemoving(true);\n            try {\n                const fromAmount = parseBalance(state.fromAmount, state.fromToken!.decimals);\n                const toAmount = parseBalance(state.toAmount, state.toToken!.decimals);\n                const liquidity = parseBalance(state.amount, state.selectedLPToken.decimals);\n                if (state.fromSymbol === \"WETH\" || state.toSymbol === \"WETH\") {\n                    const token = state.fromSymbol === \"WETH\" ? state.toToken! : state.fromToken!;\n                    const amountToRemove = state.fromSymbol === \"WETH\" ? toAmount : fromAmount;\n                    const amountToRemoveETH = state.fromSymbol === \"WETH\" ? fromAmount : toAmount;\n                    const tx = await removeLiquidityETH(token, liquidity, amountToRemove, amountToRemoveETH, signer);\n                    await tx.wait();\n                } else {\n                    const tx = await removeLiquidity(\n                        state.fromToken!,\n                        state.toToken!,\n                        liquidity,\n                        fromAmount,\n                        toAmount,\n                        signer\n                    );\n                    await tx.wait();\n                }\n                await updateTokens();\n                await state.updateLPTokens();\n                state.setSelectedLPToken(undefined);\n            } finally {\n                setRemoving(false);\n            }\n        }\n    }, [state.fromAmount, state.toAmount, state.selectedLPToken, state.amount, signer, state.updateLPTokens]);\n\n    return {\n        ...state,\n        loading: state.loading || loading,\n        onRemove,\n        removing\n    };\n};\n\nexport default useRemoveLiquidityState;\n","import React, { useCallback, useState } from \"react\";\nimport { Platform, View } from \"react-native\";\n\nimport useAsyncEffect from \"use-async-effect\";\nimport ApproveButton from \"../components/ApproveButton\";\nimport Border from \"../components/Border\";\nimport Button from \"../components/Button\";\nimport Container from \"../components/Container\";\nimport Content from \"../components/Content\";\nimport ErrorMessage from \"../components/ErrorMessage\";\nimport FetchingButton from \"../components/FetchingButton\";\nimport Heading from \"../components/Heading\";\nimport InfoBox from \"../components/InfoBox\";\nimport InsufficientBalanceButton from \"../components/InsufficientBalanceButton\";\nimport LPTokenSelect, { LPTokenItem } from \"../components/LPTokenSelect\";\nimport Meta from \"../components/Meta\";\nimport Text from \"../components/Text\";\nimport Title from \"../components/Title\";\nimport TokenInput from \"../components/TokenInput\";\nimport WebFooter from \"../components/web/WebFooter\";\nimport { LiquiditySubMenu } from \"../components/web/WebSubMenu\";\nimport { ROUTER } from \"../constants/contracts\";\nimport { Spacing } from \"../constants/dimension\";\nimport useRemoveLiquidityState, { RemoveLiquidityState } from \"../hooks/useRemoveLiquidityState\";\nimport MetamaskError from \"../types/MetamaskError\";\nimport { isEmptyValue, parseBalance } from \"../utils\";\nimport Screen from \"./Screen\";\n\nconst RemoveLiquidityScreen = () => {\n    return (\n        <Screen>\n            <LiquiditySubMenu />\n            <Container>\n                <Content>\n                    <Title text={\"Remove Liquidity\"} />\n                    <Text light={true}>Scan your liquidity and remove one if needed.</Text>\n                    <RemoveLiquidity />\n                    {Platform.OS === \"web\" && <WebFooter />}\n                </Content>\n            </Container>\n        </Screen>\n    );\n};\n\nconst RemoveLiquidity = () => {\n    const state = useRemoveLiquidityState();\n    return (\n        <View style={{ marginTop: Spacing.large }}>\n            <LPTokenSelect\n                state={state}\n                title={\"Your Liquidity\"}\n                emptyText={\"You don't have any liquidity.\"}\n                Item={LPTokenItem}\n            />\n            <Border />\n            <AmountInput state={state} />\n            <AmountInfo state={state} />\n        </View>\n    );\n};\n\nconst AmountInput = ({ state }: { state: RemoveLiquidityState }) => {\n    if (!state.selectedLPToken) {\n        return <Heading text={\"Amount of Tokens\"} disabled={true} />;\n    }\n    return (\n        <TokenInput\n            title={\"Amount of Tokens\"}\n            token={state.selectedLPToken}\n            amount={state.amount}\n            onAmountChanged={state.setAmount}\n        />\n    );\n};\n\nconst AmountInfo = ({ state }: { state: RemoveLiquidityState }) => {\n    const disabled = !state.selectedLPToken || !state.fromToken || !state.toToken;\n    return (\n        <InfoBox>\n            <Meta\n                label={state.fromToken ? \"Amount of \" + state.fromToken.symbol : \"Amount of Token 1\"}\n                text={state.fromAmount}\n                disabled={disabled}\n            />\n            <Meta\n                label={state.toToken ? \"Amount of \" + state.toToken.symbol : \"Amount of Token 2\"}\n                text={state.toAmount}\n                disabled={disabled}\n            />\n            <Controls state={state} />\n        </InfoBox>\n    );\n};\n\n// tslint:disable-next-line:max-func-body-length\nconst Controls = ({ state }: { state: RemoveLiquidityState }) => {\n    const [error, setError] = useState<MetamaskError>({});\n    useAsyncEffect(() => setError({}), [state.fromSymbol, state.toSymbol, state.fromAmount]);\n    const approveRequired = !state.selectedLPTokenAllowed;\n    const disabled = approveRequired || isEmptyValue(state.amount);\n    return (\n        <View style={{ marginTop: Spacing.normal }}>\n            {!state.selectedLPToken ? (\n                <RemoveButton state={state} onError={setError} disabled={true} />\n            ) : parseBalance(state.amount, state.selectedLPToken.decimals).gt(state.selectedLPToken.balance) ? (\n                <InsufficientBalanceButton symbol={state.selectedLPToken.symbol} />\n            ) : state.loading || !state.pair ? (\n                <FetchingButton />\n            ) : (\n                <>\n                    <ApproveButton\n                        token={state.selectedLPToken}\n                        spender={ROUTER}\n                        onSuccess={() => state.setSelectedLPTokenAllowed(true)}\n                        onError={setError}\n                        hidden={!approveRequired}\n                    />\n                    <RemoveButton state={state} onError={setError} disabled={disabled} />\n                </>\n            )}\n            {error.message && error.code !== 4001 && <ErrorMessage error={error} />}\n        </View>\n    );\n};\n\nconst RemoveButton = ({\n    state,\n    onError,\n    disabled\n}: {\n    state: RemoveLiquidityState;\n    onError: (e) => void;\n    disabled: boolean;\n}) => {\n    const onPress = useCallback(() => {\n        onError({});\n        state.onRemove().catch(onError);\n    }, [state.onRemove, onError]);\n    return <Button title={\"Remove Liquidity\"} disabled={disabled} loading={state.removing} onPress={onPress} />;\n};\n\nexport default RemoveLiquidityScreen;\n"],"sourceRoot":""}