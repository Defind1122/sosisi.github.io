{"version":3,"sources":["src/components/AmountMeta.tsx","src/components/InsufficientBalanceButton.tsx","src/components/ApproveButton.tsx","src/components/Notice.tsx","src/components/LPTokenSelect.tsx","src/hooks/useLPTokensState.tsx","src/hooks/useMasterChef.tsx","src/hooks/useFarmingState.tsx","src/screens/FarmingScreen.tsx"],"names":["AmountMeta","props","useColors","textDark","textLight","placeholder","style","fontSize","IS_DESKTOP","marginBottom","Spacing","normal","color","disabled","amount","suffix","InsufficientBalanceButton","symbol","title","ApproveButton","approveToken","useContext","EthersContext","useState","loading","setLoading","onPress","useCallback","a","async","token","onError","address","spender","tx","wait","onSuccess","hidden","containerStyle","tiny","Notice","borderStyle","border","useStyles","clear","note","text","buttonText","onPressButton","type","size","fontWeight","titleStyle","buttonStyle","paddingHorizontal","paddingVertical","alignSelf","marginTop","LPTokenList","state","emptyText","Item","renderItem","item","key","selected","onSelectToken","setSelectedLPToken","data","lpTokens","sort","p1","p2","m1","multiplier","m2","apy","length","EmptyList","keyExtractor","margin","textAlign","width","LPTokenItem","textMedium","balance","formatBalance","decimals","ITEM_SEPARATOR_HEIGHT","alignItems","tokenA","small","replaceWETH","tokenB","marginLeft","medium","caption","flex","light","LPTokenSelect","expanded","selectedLPToken","onExpand","updatingLPTokens","useLPTokensState","mode","useTokenPairState","provider","tokens","lastTimeRefreshed","setLastTimeRefreshed","setLPTokens","selectedLPTokenAllowed","setSelectedLPTokenAllowed","pair","setPair","setAmount","getPair","useSDK","updateLPTokens","fetchMyPools","fetchPools","fetchMyLPTokens","fetchMyUniswapLPTokens","useEffect","useAsyncEffect","undefined","useDelayedOnBlockEffect","block","fromToken","toToken","updateLastTimeRefreshed","Date","now","useMasterChef","deposit","lpTokenId","signer","masterChef","getContract","MASTER_CHEF","estimateGas","gasLimit","mul","div","logTransaction","toString","withdraw","useFarmingState","myPools","getTokenAllowance","depositing","setDepositing","withdrawing","setWithdrawing","setFromAmount","setToAmount","minAllowance","ethers","BigNumber","from","pow","sub","allowance","gte","totalSupply","amountDeposited","lpToken","convertToken","TokenAmount","lpTokenAmount","tokenAAmount","involvesToken","getLiquidityValue","toFixed","tokenBAmount","onDeposit","id","parseBalance","onWithdraw","Farming","large","TokenItem","Deposit","DepositInfo","formatPercentage","isZero","AddLiquidityNotice","onAmountChanged","autoFocus","green","useLinker","isEmptyValue","sushiRewardedPerYear","sushiPerYear","pow10","label","formatUSD","totalValueUSD","DepositControls","error","setError","approveRequired","DepositButton","gt","message","code","catch","FarmingScreen","Platform","OS"],"mappings":"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","file":"static/js/13.49a8c49a.chunk.js","sourcesContent":["import React, { FC } from \"react\";\n\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport Text from \"./Text\";\n\nexport interface AmountMetaProps {\n    amount?: string;\n    suffix?: string;\n    disabled?: boolean;\n}\n\nconst AmountMeta: FC<AmountMetaProps> = props => {\n    const { textDark, textLight, placeholder } = useColors();\n    return (\n        <Text\n            style={{\n                fontSize: IS_DESKTOP ? 28 : 20,\n                marginBottom: Spacing.normal,\n                color: props.disabled ? placeholder : props.amount ? textDark : textLight\n            }}>\n            {props.disabled ? \"N/A\" : props.amount ? props.amount + \" \" + (props.suffix || \"\") : \"Fetching…\"}\n        </Text>\n    );\n};\n\nexport default AmountMeta;\n","import React from \"react\";\n\nimport Button from \"./Button\";\n\nconst InsufficientBalanceButton = ({ symbol }: { symbol: string }) => {\n    return <Button title={\"Insufficient \" + (symbol ? symbol : \"Balance\")} disabled={true} />;\n};\nexport default InsufficientBalanceButton;\n","import React, { FC, useCallback, useContext, useState } from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport Token from \"../types/Token\";\nimport Button from \"./Button\";\n\nexport interface ApproveButtonProps {\n    token: Token;\n    spender: string;\n    onSuccess: () => void;\n    onError: (e) => void;\n    hidden?: boolean;\n}\n\nconst ApproveButton: FC<ApproveButtonProps> = props => {\n    const { approveToken } = useContext(EthersContext);\n    const [loading, setLoading] = useState(false);\n    const onPress = useCallback(async () => {\n        if (props.token) {\n            props.onError({});\n            setLoading(true);\n            try {\n                const tx = await approveToken(props.token.address, props.spender);\n                if (tx) {\n                    await tx.wait();\n                    props.onSuccess();\n                }\n            } catch (e) {\n                props.onError(e);\n            } finally {\n                setLoading(false);\n            }\n        }\n    }, [props.token]);\n    if (props.hidden) return <View />;\n    return (\n        <Button\n            title={\"Approve \" + (props.token?.symbol || \"\")}\n            onPress={onPress}\n            loading={loading}\n            containerStyle={{ marginBottom: Spacing.tiny }}\n        />\n    );\n};\n\nexport default ApproveButton;\n","import React from \"react\";\nimport { View, ViewStyle } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport useStyles from \"../hooks/useStyles\";\nimport Button from \"./Button\";\nimport Text from \"./Text\";\n\nexport interface NoticeProps {\n    text: string;\n    clear?: boolean;\n    color?: string;\n    buttonText?: string;\n    onPressButton?: () => void;\n    style?: ViewStyle;\n}\n\nconst Notice = (props: NoticeProps) => {\n    const { textLight } = useColors();\n    const { border } = useStyles();\n    const borderStyle = border({ color: props.color });\n    const color = props.color || textLight;\n    return (\n        <View style={[props.clear ? {} : borderStyle, props.style]}>\n            <Text note={true} style={{ color }}>\n                {props.text}\n            </Text>\n            {props.buttonText && props.onPressButton && (\n                <Button\n                    title={props.buttonText}\n                    type={\"clear\"}\n                    size={\"small\"}\n                    fontWeight={\"bold\"}\n                    onPress={props.onPressButton}\n                    titleStyle={{ color }}\n                    buttonStyle={{ paddingHorizontal: 0, paddingVertical: 0 }}\n                    style={{ alignSelf: \"flex-end\", marginTop: Spacing.tiny }}\n                />\n            )}\n        </View>\n    );\n};\n\nexport default Notice;\n","import React, { FC, useCallback } from \"react\";\nimport { FlatList, View, ViewStyle } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport { LPTokensState } from \"../hooks/useLPTokensState\";\nimport LPToken from \"../types/LPToken\";\nimport { formatBalance } from \"../utils\";\nimport CloseIcon from \"./CloseIcon\";\nimport Expandable from \"./Expandable\";\nimport FlexView from \"./FlexView\";\nimport { ITEM_SEPARATOR_HEIGHT } from \"./ItemSeparator\";\nimport Loading from \"./Loading\";\nimport Selectable from \"./Selectable\";\nimport SelectIcon from \"./SelectIcon\";\nimport Text from \"./Text\";\nimport TokenLogo from \"./TokenLogo\";\n\nexport type LPTokenSelectFilter = \"balance\" | \"amountDeposited\" | \"\";\n\nexport interface LPTokenSelectProps {\n    state: LPTokensState;\n    title: string;\n    emptyText: string;\n    Item: FC<LPTokenItemProps>;\n    style?: ViewStyle;\n}\n\nexport interface LPTokenItemProps {\n    token: LPToken;\n    selected: boolean;\n    onSelectToken: (token: LPToken) => void;\n}\n\nconst LPTokenSelect: FC<LPTokenSelectProps> = props => {\n    const onUnselectToken = () => props.state.setSelectedLPToken();\n    return (\n        <View style={props.style}>\n            <Expandable\n                title={props.title}\n                expanded={!props.state.selectedLPToken}\n                onExpand={() => props.state.setSelectedLPToken()}>\n                <LPTokenList state={props.state} emptyText={props.emptyText} Item={props.Item} />\n            </Expandable>\n            {props.state.selectedLPToken && (\n                <props.Item token={props.state.selectedLPToken} selected={true} onSelectToken={onUnselectToken} />\n            )}\n        </View>\n    );\n};\n\n// tslint:disable-next-line:max-func-body-length\nconst LPTokenList = ({\n    state,\n    emptyText,\n    Item\n}: {\n    state: LPTokensState;\n    emptyText: string;\n    Item: FC<LPTokenItemProps>;\n}) => {\n    const renderItem = useCallback(\n        ({ item }) => {\n            return <Item key={item.symbol} token={item} selected={false} onSelectToken={state.setSelectedLPToken} />;\n        },\n        [state.setSelectedLPToken]\n    );\n    const data = state.lpTokens.sort((p1, p2) => {\n        const m1 = p1.multiplier || 0;\n        const m2 = p2.multiplier || 0;\n        return m1 === m2 ? (p2.apy || 0) - (p1.apy || 0) : m2 - m1;\n    });\n    return state.loading ? (\n        <Loading />\n    ) : data.length === 0 ? (\n        <EmptyList text={emptyText} />\n    ) : (\n        <FlatList keyExtractor={item => item.symbol} data={data} renderItem={renderItem} />\n    );\n};\n\nconst EmptyList = ({ text }: { text: string }) => {\n    return (\n        <View style={{ margin: Spacing.normal }}>\n            <Text disabled={true} style={{ textAlign: \"center\", width: \"100%\" }}>\n                {text}\n            </Text>\n        </View>\n    );\n};\n\nexport const LPTokenItem: FC<LPTokenItemProps> = props => {\n    const { textMedium } = useColors();\n    const balance = formatBalance(props.token.balance, props.token.decimals, 6);\n    const onPress = useCallback(() => {\n        props.onSelectToken(props.token);\n    }, [props.onSelectToken, props.token]);\n    return (\n        <Selectable\n            selected={props.selected}\n            onPress={onPress}\n            containerStyle={{ marginBottom: ITEM_SEPARATOR_HEIGHT }}>\n            <FlexView style={{ alignItems: \"center\" }}>\n                <TokenLogo token={props.token.tokenA} small={true} replaceWETH={true} />\n                <TokenLogo token={props.token.tokenB} small={true} replaceWETH={true} style={{ marginLeft: 4 }} />\n                <Text medium={true} caption={true} style={{ marginLeft: Spacing.tiny }}>\n                    {props.token.tokenA.symbol}-{props.token.tokenB.symbol}\n                </Text>\n                <View style={{ flex: 1, marginLeft: Spacing.tiny }}>\n                    <Text caption={true} light={true} style={{ textAlign: \"right\", color: textMedium }}>\n                        {balance}\n                    </Text>\n                </View>\n                {props.selected ? <CloseIcon /> : <SelectIcon />}\n            </FlexView>\n        </Selectable>\n    );\n};\n\nexport default LPTokenSelect;\n","import { useContext, useEffect, useState } from \"react\";\n\nimport { Pair } from \"@sushiswap/sdk\";\nimport useAsyncEffect from \"use-async-effect\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport LPToken from \"../types/LPToken\";\nimport { fetchMyLPTokens, fetchMyPools, fetchMyUniswapLPTokens, fetchPools } from \"../utils/fetch-utils\";\nimport useDelayedOnBlockEffect from \"./useDelayedOnBlockEffect\";\nimport useSDK from \"./useSDK\";\nimport useTokenPairState, { TokenPairState } from \"./useTokenPairState\";\n\nexport interface LPTokensState extends TokenPairState {\n    updateLPTokens: () => Promise<void>;\n    lastTimeRefreshed: number;\n    updateLastTimeRefreshed: () => void;\n    lpTokens: LPToken[];\n    selectedLPToken?: LPToken;\n    setSelectedLPToken: (token?: LPToken) => void;\n    selectedLPTokenAllowed: boolean;\n    setSelectedLPTokenAllowed: (allowed: boolean) => void;\n    pair?: Pair;\n    amount: string;\n    setAmount: (amount: string) => void;\n}\n\ntype Mode = \"pools\" | \"my-pools\" | \"my-lp-tokens\" | \"my-uniswap-lp-tokens\";\n\nlet updatingLPTokens = false;\n\n// tslint:disable-next-line:max-func-body-length\nconst useLPTokensState: (mode: Mode) => LPTokensState = mode => {\n    const state = useTokenPairState();\n    const { provider, address, tokens } = useContext(EthersContext);\n    const [lastTimeRefreshed, setLastTimeRefreshed] = useState(0);\n    const [loading, setLoading] = useState(true);\n    const [lpTokens, setLPTokens] = useState<LPToken[]>([]);\n    const [selectedLPToken, setSelectedLPToken] = useState<LPToken>();\n    const [selectedLPTokenAllowed, setSelectedLPTokenAllowed] = useState(false);\n    const [pair, setPair] = useState<Pair>();\n    const [amount, setAmount] = useState(\"\");\n    const { getPair } = useSDK();\n\n    const updateLPTokens = async () => {\n        if (address && provider && tokens.length > 0 && !updatingLPTokens) {\n            try {\n                updatingLPTokens = true;\n                const data = await (mode === \"my-pools\"\n                    ? fetchMyPools(address, tokens, provider)\n                    : mode === \"pools\"\n                    ? fetchPools(address, tokens, provider)\n                    : mode === \"my-lp-tokens\"\n                    ? fetchMyLPTokens(address, tokens, provider)\n                    : fetchMyUniswapLPTokens(address, tokens, provider));\n                if (data) {\n                    setLPTokens(data);\n                }\n            } finally {\n                updatingLPTokens = false;\n                setLoading(false);\n            }\n        }\n    };\n\n    useEffect(() => {\n        if (!selectedLPToken) {\n            setAmount(\"\");\n        }\n    }, [selectedLPToken]);\n\n    useAsyncEffect(async () => {\n        setLoading(true);\n        setPair(undefined);\n        if (selectedLPToken && provider) {\n            try {\n                setPair(await getPair(selectedLPToken.tokenA, selectedLPToken.tokenB, provider));\n            } catch (e) {\n            } finally {\n                setLoading(false);\n            }\n        } else {\n            setLoading(false);\n        }\n    }, [selectedLPToken, provider]);\n\n    useDelayedOnBlockEffect(\n        async block => {\n            if (address && (mode === \"pools\" || tokens.length > 0)) {\n                if (!block) {\n                    setLoading(true);\n                }\n                await updateLPTokens();\n            }\n        },\n        () => \"updateLPTokens()\",\n        [tokens.length, address, lastTimeRefreshed],\n        0\n    );\n\n    return {\n        ...state,\n        fromToken: state.fromToken || selectedLPToken?.tokenA,\n        toToken: state.toToken || selectedLPToken?.tokenB,\n        updateLPTokens,\n        loading: state.loading || loading,\n        lastTimeRefreshed,\n        updateLastTimeRefreshed: () => {\n            setLastTimeRefreshed(Date.now());\n        },\n        lpTokens,\n        selectedLPToken,\n        setSelectedLPToken,\n        selectedLPTokenAllowed,\n        setSelectedLPTokenAllowed,\n        pair,\n        amount,\n        setAmount\n    };\n};\n\nexport default useLPTokensState;\n","import { useCallback } from \"react\";\n\nimport { ethers } from \"ethers\";\nimport { MASTER_CHEF } from \"../constants/contracts\";\nimport { getContract } from \"../utils\";\nimport { logTransaction } from \"../utils/analytics-utils\";\n\nconst useMasterChef = () => {\n    const deposit = useCallback(async (lpTokenId: number, amount: ethers.BigNumber, signer: ethers.Signer) => {\n        const masterChef = getContract(\"MasterChef\", MASTER_CHEF, signer);\n        const gasLimit = await masterChef.estimateGas.deposit(lpTokenId, amount);\n        const tx = await masterChef.deposit(lpTokenId, amount, {\n            gasLimit: gasLimit.mul(120).div(100)\n        });\n        return logTransaction(tx, \"MasterChef.deposit()\", lpTokenId, amount.toString());\n    }, []);\n\n    const withdraw = useCallback(async (lpTokenId: number, amount: ethers.BigNumber, signer: ethers.Signer) => {\n        const masterChef = getContract(\"MasterChef\", MASTER_CHEF, signer);\n        const gasLimit = await masterChef.estimateGas.withdraw(lpTokenId, amount);\n        const tx = await masterChef.withdraw(lpTokenId, amount, {\n            gasLimit: gasLimit.mul(120).div(100)\n        });\n        return logTransaction(tx, \"MasterChef.withdraw()\", lpTokenId, amount.toString());\n    }, []);\n\n    return {\n        deposit,\n        withdraw\n    };\n};\n\nexport default useMasterChef;\n","import { useCallback, useContext, useEffect, useState } from \"react\";\n\nimport { TokenAmount } from \"@sushiswap/sdk\";\nimport { ethers } from \"ethers\";\nimport useAsyncEffect from \"use-async-effect\";\nimport { MASTER_CHEF } from \"../constants/contracts\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport { convertToken, parseBalance } from \"../utils\";\nimport useLPTokensState, { LPTokensState } from \"./useLPTokensState\";\nimport useMasterChef from \"./useMasterChef\";\n\nexport interface FarmingState extends LPTokensState {\n    onDeposit: () => Promise<void>;\n    depositing: boolean;\n    onWithdraw: () => Promise<void>;\n    withdrawing: boolean;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst useFarmingState: (myPools: boolean) => FarmingState = myPools => {\n    const state = useLPTokensState(myPools ? \"my-pools\" : \"pools\");\n    const { signer, getTokenAllowance } = useContext(EthersContext);\n    const { deposit, withdraw } = useMasterChef();\n    const [loading, setLoading] = useState(false);\n    const [depositing, setDepositing] = useState(false);\n    const [withdrawing, setWithdrawing] = useState(false);\n\n    useEffect(() => {\n        setLoading(false);\n        setDepositing(false);\n        setWithdrawing(false);\n        state.setFromAmount(\"\");\n        state.setToAmount(\"\");\n    }, [state.selectedLPToken]);\n\n    useAsyncEffect(async () => {\n        if (signer && state.selectedLPToken) {\n            setLoading(true);\n            state.setSelectedLPTokenAllowed(false);\n            try {\n                const minAllowance = ethers.BigNumber.from(2)\n                    .pow(96)\n                    .sub(1);\n                const allowance = await getTokenAllowance(state.selectedLPToken.address, MASTER_CHEF);\n                state.setSelectedLPTokenAllowed(ethers.BigNumber.from(allowance).gte(minAllowance));\n            } finally {\n                setLoading(false);\n            }\n        }\n    }, [signer, state.selectedLPToken]);\n\n    useAsyncEffect(() => {\n        if (\n            state.pair &&\n            state.selectedLPToken &&\n            state.selectedLPToken.totalSupply &&\n            state.selectedLPToken.amountDeposited\n        ) {\n            const lpToken = convertToken(state.selectedLPToken);\n            const tokenA = convertToken(state.selectedLPToken.tokenA);\n            const tokenB = convertToken(state.selectedLPToken.tokenB);\n            const totalSupply = new TokenAmount(lpToken, state.selectedLPToken.totalSupply.toString());\n            const lpTokenAmount = new TokenAmount(lpToken, state.selectedLPToken.amountDeposited.toString());\n            const tokenAAmount = state.pair.involvesToken(tokenA)\n                ? state.pair.getLiquidityValue(tokenA, totalSupply, lpTokenAmount)\n                : null;\n            state.setFromAmount(tokenAAmount?.toFixed() || \"\");\n            const tokenBAmount = state.pair.involvesToken(tokenA)\n                ? state.pair.getLiquidityValue(tokenB, totalSupply, lpTokenAmount)\n                : null;\n            state.setToAmount(tokenBAmount?.toFixed() || \"\");\n        }\n    }, [state.pair, state.selectedLPToken]);\n\n    const onDeposit = useCallback(async () => {\n        if (state.selectedLPToken?.id && state.amount && signer) {\n            setDepositing(true);\n            try {\n                const amount = parseBalance(state.amount, state.selectedLPToken.decimals);\n                const tx = await deposit(state.selectedLPToken.id, amount, signer);\n                await tx.wait();\n                state.setSelectedLPToken(undefined);\n                await state.updateLastTimeRefreshed();\n            } finally {\n                setDepositing(false);\n            }\n        }\n    }, [state.selectedLPToken, state.amount, signer]);\n\n    const onWithdraw = useCallback(async () => {\n        if (state.selectedLPToken?.id && state.amount && signer) {\n            setWithdrawing(true);\n            try {\n                const amount = parseBalance(state.amount, state.selectedLPToken.decimals);\n                const tx = await withdraw(state.selectedLPToken.id, amount, signer);\n                await tx.wait();\n                state.setSelectedLPToken(undefined);\n                await state.updateLastTimeRefreshed();\n            } finally {\n                setWithdrawing(false);\n            }\n        }\n    }, [state.selectedLPToken, state.amount, signer]);\n\n    return {\n        ...state,\n        loading: state.loading || loading,\n        onDeposit,\n        depositing,\n        onWithdraw,\n        withdrawing\n    };\n};\n\nexport default useFarmingState;\n","import React, { FC, useCallback, useState } from \"react\";\nimport { Platform, View } from \"react-native\";\n\nimport useAsyncEffect from \"use-async-effect\";\nimport AmountMeta from \"../components/AmountMeta\";\nimport ApproveButton from \"../components/ApproveButton\";\nimport BackgroundImage from \"../components/BackgroundImage\";\nimport Border from \"../components/Border\";\nimport Button from \"../components/Button\";\nimport CloseIcon from \"../components/CloseIcon\";\nimport Container from \"../components/Container\";\nimport Content from \"../components/Content\";\nimport ErrorMessage from \"../components/ErrorMessage\";\nimport FetchingButton from \"../components/FetchingButton\";\nimport FlexView from \"../components/FlexView\";\nimport Heading from \"../components/Heading\";\nimport InfoBox from \"../components/InfoBox\";\nimport InsufficientBalanceButton from \"../components/InsufficientBalanceButton\";\nimport { ITEM_SEPARATOR_HEIGHT } from \"../components/ItemSeparator\";\nimport LPTokenSelect, { LPTokenItemProps } from \"../components/LPTokenSelect\";\nimport Meta from \"../components/Meta\";\nimport Notice from \"../components/Notice\";\nimport Selectable from \"../components/Selectable\";\nimport SelectIcon from \"../components/SelectIcon\";\nimport Text from \"../components/Text\";\nimport Title from \"../components/Title\";\nimport TokenInput from \"../components/TokenInput\";\nimport TokenLogo from \"../components/TokenLogo\";\nimport WebFooter from \"../components/web/WebFooter\";\nimport { FarmingSubMenu } from \"../components/web/WebSubMenu\";\nimport { MASTER_CHEF } from \"../constants/contracts\";\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport useFarmingState, { FarmingState } from \"../hooks/useFarmingState\";\nimport useLinker from \"../hooks/useLinker\";\nimport MetamaskError from \"../types/MetamaskError\";\nimport { formatBalance, formatPercentage, formatUSD, isEmptyValue, parseBalance, pow10 } from \"../utils\";\nimport Screen from \"./Screen\";\n\nconst FarmingScreen = () => {\n    return (\n        <Screen>\n            <Container>\n                <BackgroundImage />\n                <Content>\n                    <Title text={\"Plant LP Tokens\"} />\n                    <Text light={true}>Deposit your LP tokens and earn additional SUSHI rewards.</Text>\n                    <Farming />\n                </Content>\n                {Platform.OS === \"web\" && <WebFooter />}\n            </Container>\n            <FarmingSubMenu />\n        </Screen>\n    );\n};\n\nconst Farming = () => {\n    const state = useFarmingState(false);\n    const emptyText = \"Temporarily unable to load pools.\";\n    return (\n        <View style={{ marginTop: Spacing.large }}>\n            <LPTokenSelect state={state} title={\"Active Pools\"} emptyText={emptyText} Item={TokenItem} />\n            <Border />\n            <Deposit state={state} />\n            <DepositInfo state={state} />\n            <Notice\n                text={\n                    \"⚠️ 2/3 of your SUSHI rewards are vested for 6 months. You can harvest 1/3 immediately and the remaining 2/3 after 6 months of waiting.\"\n                }\n                clear={true}\n                style={{ marginTop: Spacing.normal }}\n            />\n        </View>\n    );\n};\n\n// tslint:disable-next-line:max-func-body-length\nconst TokenItem: FC<LPTokenItemProps> = props => {\n    const apy = props.token.apy || 0;\n    const multiplier = props.token.multiplier || 0;\n    const onPress = useCallback(() => {\n        props.onSelectToken(props.token);\n    }, [props.onSelectToken, props.token]);\n    return (\n        <Selectable\n            selected={props.selected}\n            onPress={onPress}\n            containerStyle={{ marginBottom: ITEM_SEPARATOR_HEIGHT }}>\n            <FlexView style={{ alignItems: \"center\" }}>\n                <TokenLogo token={props.token.tokenA} small={true} replaceWETH={true} />\n                <TokenLogo token={props.token.tokenB} small={true} replaceWETH={true} style={{ marginLeft: 4 }} />\n                <Text medium={true} caption={true} style={{ marginLeft: Spacing.tiny }}>\n                    {props.token.tokenA.symbol}-{props.token.tokenB.symbol}\n                </Text>\n                <View style={{ flex: 1, alignItems: \"flex-end\" }}>\n                    <Text note={true}>\n                        {multiplier > 1 ? \"✨\" : \"\"}\n                        {multiplier.toFixed(2) || \"1.00\"}x APY\n                    </Text>\n                    <Text caption={IS_DESKTOP} medium={true}>\n                        {formatPercentage(apy)}%\n                    </Text>\n                </View>\n                {props.selected ? <CloseIcon /> : <SelectIcon />}\n            </FlexView>\n        </Selectable>\n    );\n};\n\nconst Deposit = ({ state }: { state: FarmingState }) => {\n    if (!state.selectedLPToken) {\n        return <Heading text={\"Amount\"} disabled={true} />;\n    }\n    return (\n        <View>\n            <Heading text={state.selectedLPToken.symbol + \" Amount\"} />\n            {state.selectedLPToken.balance.isZero() ? (\n                <AddLiquidityNotice state={state} />\n            ) : (\n                <TokenInput\n                    token={state.selectedLPToken}\n                    amount={state.amount}\n                    onAmountChanged={state.setAmount}\n                    autoFocus={IS_DESKTOP}\n                />\n            )}\n        </View>\n    );\n};\n\nconst AddLiquidityNotice = ({ state }: { state: FarmingState }) => {\n    const { green } = useColors();\n    const onPress = useLinker(\"/liquidity\", \"Liquidity\");\n    return (\n        <>\n            <Notice\n                color={green}\n                text={\n                    \"You need some \" +\n                    state.selectedLPToken!.symbol +\n                    \" token to start farming. Add liquidity to get the LP token.\"\n                }\n            />\n            <Button\n                color={green}\n                title={\"Add Liquidity\"}\n                containerStyle={{ marginTop: Spacing.normal }}\n                onPress={onPress}\n            />\n        </>\n    );\n};\n\nconst DepositInfo = ({ state }: { state: FarmingState }) => {\n    const disabled = isEmptyValue(state.amount) || !state.selectedLPToken?.sushiRewardedPerYear;\n    const sushiPerYear = disabled\n        ? 0\n        : parseBalance(state.amount)\n              .mul(state.selectedLPToken!.sushiRewardedPerYear!)\n              .div(pow10(18));\n    return (\n        <InfoBox>\n            <AmountMeta amount={formatBalance(sushiPerYear, 18, 8)} suffix={\"SUSHI / 1y\"} disabled={disabled} />\n            <Meta\n                label={\"My Balance\"}\n                text={formatBalance(state.selectedLPToken?.balance || 0)}\n                disabled={!state.selectedLPToken}\n            />\n            <Meta\n                label={\"Total Value Locked\"}\n                text={formatUSD(state.selectedLPToken?.totalValueUSD || 0)}\n                disabled={!state.selectedLPToken}\n            />\n            <Meta\n                label={\"Annual Percentage Yield\"}\n                text={formatPercentage(state.selectedLPToken?.apy || 0)}\n                suffix={\"%\"}\n                disabled={!state.selectedLPToken}\n            />\n            <DepositControls state={state} />\n        </InfoBox>\n    );\n};\n\nconst DepositControls = ({ state }: { state: FarmingState }) => {\n    const [error, setError] = useState<MetamaskError>({});\n    useAsyncEffect(() => setError({}), [state.selectedLPToken]);\n    const approveRequired = !state.selectedLPTokenAllowed;\n    const disabled = approveRequired || isEmptyValue(state.amount);\n    return (\n        <View style={{ marginTop: Spacing.normal }}>\n            {!state.selectedLPToken || state.selectedLPToken.balance.isZero() ? (\n                <DepositButton state={state} onError={setError} disabled={true} />\n            ) : parseBalance(state.amount, state.selectedLPToken!.decimals).gt(state.selectedLPToken!.balance) ? (\n                <InsufficientBalanceButton symbol={state.selectedLPToken!.symbol} />\n            ) : state.loading ? (\n                <FetchingButton />\n            ) : (\n                <>\n                    <ApproveButton\n                        token={state.selectedLPToken!}\n                        spender={MASTER_CHEF}\n                        onSuccess={() => state.setSelectedLPTokenAllowed(true)}\n                        onError={setError}\n                        hidden={isEmptyValue(state.amount) || !approveRequired}\n                    />\n                    <DepositButton state={state} onError={setError} disabled={disabled} />\n                </>\n            )}\n            {error.message && error.code !== 4001 && <ErrorMessage error={error} />}\n        </View>\n    );\n};\n\nconst DepositButton = ({\n    state,\n    onError,\n    disabled\n}: {\n    state: FarmingState;\n    onError: (e) => void;\n    disabled: boolean;\n}) => {\n    const onPress = useCallback(() => {\n        onError({});\n        state.onDeposit().catch(onError);\n    }, [state.onDeposit, onError]);\n    return <Button title={\"Deposit\"} disabled={disabled} loading={state.depositing} onPress={onPress} />;\n};\n\nexport default FarmingScreen;\n"],"sourceRoot":""}