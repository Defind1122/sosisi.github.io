{"version":3,"sources":["assets/empty-token.png","src/constants/dimension.ts","src/constants/tokens.ts","src/utils/index.ts","src/context/EthersContext.tsx","src/hooks/useAllCommonPairs.tsx","src/hooks/useSDK.tsx","src/context/GlobalContext.tsx","src/constants/colors.ts","src/hooks/useColors.tsx","src/components/FlexView.tsx","src/components/Text.tsx","src/components/Header.tsx","src/components/MobileNotSupported.tsx","src/context/index.tsx","src/hooks/useStyles.tsx","src/components/Button.tsx","src/components/ApproveButton.tsx","src/components/ButtonGroup.tsx","src/components/CloseIcon.tsx","src/components/Column.tsx","src/components/Container.tsx","src/components/Content.tsx","src/components/ErrorMessage.tsx","src/components/FetchingButton.tsx","src/components/InsufficientBalanceButton.tsx","src/components/Border.tsx","src/components/LPTokenSelect.tsx","src/components/Meta.tsx","src/components/Notice.tsx","src/components/SelectIcon.tsx","src/components/Subtitle.tsx","src/components/Input.tsx","src/components/TokenInput.tsx","src/hooks/useTokenPairState.tsx","src/hooks/useLiquidityState.tsx","src/hooks/useLPTokensState.tsx","src/hooks/useFarmingState.tsx","src/components/ConnectToWallet.tsx","src/components/Footer.tsx","src/components/Status.tsx","src/screens/Screen.tsx","src/screens/FarmingScreen.tsx","src/components/TokenSelect.tsx","src/components/UnsupportedButton.tsx","src/components/AddLiquidity.tsx","src/components/LPTokenItem.tsx","src/components/RemoveLiquidity.tsx","src/hooks/useAddLiquidityState.tsx","src/hooks/useRemoveLiquidityState.tsx","src/screens/LiquidityScreen.tsx","src/hooks/useMigrateState.tsx","src/screens/MigrateScreen.tsx","src/hooks/useStakingState.tsx","src/screens/StakingScreen.tsx","src/hooks/useSwapState.tsx","src/screens/SwapScreen.tsx","App.tsx","web-build/register-service-worker.js","node_modules/@levx/sushiswap-core/build/contracts sync /^/.//.*/.json$","assets/levx-typography-dark.png","assets/levx-typography.png","assets/sushiswap.jpg","assets/metamask-dark.png","assets/metamask.png"],"names":["module","exports","SCREEN_HEIGHT","Math","round","Dimensions","get","width","height","Spacing","tiny","small","normal","large","huge","content","ETH","address","ethers","constants","AddressZero","decimals","symbol","logoURI","balance","BigNumber","from","formatBalance","value","maxFraction","formatted","utils","formatUnits","split","length","substr","parseBalance","parseUnits","isEmptyValue","text","isBigNumber","isZero","replaceAll","convertToken","token","WETH","SDKToken","ChainId","MAINNET","convertAmount","amount","TokenAmount","toString","parseCurrencyAmount","toExact","getContract","name","signer","abi","require","ContractFactory","EthersContext","React","createContext","provider","undefined","chainId","addOnBlockListener","listener","removeOnBlockListener","getToken","a","async","approveToken","spender","getTokenAllowance","Zero","EthersContextProvider","children","useState","setProvider","setSigner","setChainId","setAddress","onBlockListeners","setOnBlockListeners","useAsyncEffect","window","ethereum","web3","providers","Web3Provider","alchemy","AlchemyProvider","network","process","API_KEY","getSigner","useEffect","onAccountsChanged","selectedAddress","onChainChanged","getNetwork","on","off","useCallback","send","meta","logo","MaxUint256","erc20","estimateGas","approve","gasLimit","getAddress","contract","owner","old","onBlock","block","Object","entries","Provider","DAI","Consumer","Token","USDC","USDT","SUSHI","YAM","AMPL","BASES_TO_CHECK_TRADES_AGAINST","CUSTOM_BASES","wrappedCurrency","currency","ETHER","useAllCommonPairs","loadAllCommonPairs","currencyA","currencyB","bases","tokenA","tokenB","basePairs","flatMap","base","map","otherBase","filter","t0","t1","allPairCombinations","tokens","Boolean","b","customBases","customBasesA","customBasesB","find","equals","Promise","all","pair","Fetcher","fetchPairData","pairs","ROUTER","MASTER_CHEF","SUSHI_BAR","MIGRATOR2","findOrGetToken","t","toLowerCase","minAmount","percent","sub","mul","numerator","div","denominator","useSDK","useContext","GlobalContext","allowedSlippage","Percent","getTrade","fromToken","toToken","fromAmount","isETH","to","CurrencyAmount","ether","Trade","bestTradeExactIn","maxHops","maxNumResults","swap","trade","Router","feeOnTransfer","recipient","ttl","params","swapCallParameters","router","methodName","args","functions","tx","wrapETH","weth","deposit","unwrapETH","withdraw","getPair","addLiquidity","toAmount","deadline","floor","Date","getTime","removeLiquidityETH","liquidity","amountETH","removeLiquidity","addLiquidityETH","getExpectedSushiRewardPerBlock","masterChef","totalAllocPoint","sushiPerBlock","poolInfo","id","allocPoint","lpTokenId","enterSushiBar","sushiBar","enter","leaveSushiBar","leave","migrate","lpToken","migrator2","getTokens","fetch","response","json","account","balances","getBalance","i","tokenBalances","tokenBalance","sort","t2","pow","toNumber","getMyUniswapLPTokens","factory","UNISWAP_FACTORY","allPairsLength","scanner","findPairs","min","concat","Number","totalSupply","token0","token1","result","getMyLPTokens","FACTORY_ADDRESS","Array","_","allPairs","getPools","pools","pool","poolToken","balanceOf","totalDeposited","userInfo","amountDeposited","pendingSushi","calculateFee","load","clear","deviceType","darkMode","setDarkMode","updateTokens","loadingTokens","tradeHistory","addToTradeHistory","GlobalContextProvider","colorScheme","useColorScheme","setDeviceType","setTokens","setLoadingTokens","setTradeHistory","data","getDeviceTypeAsync","AsyncStorage","getItem","mode","JSON","parse","removeItem","setItem","String","list","push","newHistory","stringify","Colors","common","white","transparent","primary","secondary","green","twitter","facebook","light","background","backgroundHovered","border","borderDark","textDark","textMedium","textLight","disabled","shadow","placeholder","underlay","dark","useColors","FlexView","props","flexDirection","direction","View","style","Text","fontFamily","fontWeight","h1Style","h2Style","h3Style","h4Style","fontSize","note","caption","color","medium","Title","alignSelf","alignItems","textDecoration","Image","source","Menu","title","path","MenuItem","match","useRouteMatch","marginLeft","marginBottom","padding","isExact","position","left","right","bottom","backgroundColor","DarkModeSwitch","onChange","transform","scale","Header","top","zIndex","paddingBottom","flex","justifyContent","paddingTop","paddingHorizontal","Social","onPressTwitter","Linking","onPressGithub","onPressDiscord","marginTop","type","reverseColor","reverse","raised","onPress","MobileNotSupported","ContextProvider","useStyles","shadowColor","borderRadius","elevation","shadowOffset","shadowOpacity","shadowRadius","overflow","Button","size","buttonStyle","borderColor","titleStyle","containerStyle","ApproveButton","loading","setLoading","onError","wait","onSuccess","hidden","ButtonGroup","index","setIndex","selectedIndex","textStyle","borderTopLeftRadius","borderBottomLeftRadius","borderTopRightRadius","buttons","borderBottomRightRadius","selectedButtonStyle","marginHorizontal","marginVertical","CloseIcon","Column","noTopMargin","Container","ScrollView","nestedScrollEnabled","contentContainerStyle","Content","multiplier","contentPadding","paddingVertical","ErrorMessage","error","borderWidth","code","message","FetchingButton","InsufficientBalanceButton","Border","Filter","onFilterChanged","handler","f","checked","CheckBox","marginRight","iconRight","iconType","checkedIcon","uncheckedIcon","checkedColor","LPTokenList","state","emptyText","Item","renderItem","item","key","selected","onSelectToken","setSelectedLPToken","lpTokens","gt","ActivityIndicator","FlatList","keyExtractor","ItemSeparatorComponent","EmptyList","margin","textAlign","LPTokenSelect","onUnselectToken","showFilter","selectedLPToken","Meta","label","Notice","SelectIcon","Subtitle","Input","onChangeText","errors","forbidden","forEach","validation","regexp","allowed","join","inputStyle","outline","labelStyle","placeholderTextColor","errorStyle","MaxButton","onPressMax","fee","updateAmount","TokenInput","onAmountChanged","e","endsWith","indexOf","useTokenPairState","fromSymbol","setFromSymbol","toSymbol","setToSymbol","setFromAmount","setToAmount","fromTokenAllowed","setFromTokenAllowed","toTokenAllowed","setToTokenAllowed","wrapping","setWrapping","unwrapping","setUnwrapping","minAllowance","fromAllowance","gte","toAllowance","onWrap","onUnwrap","useLiquidityState","setPair","updatePair","useLPTokensState","lastTimeRefreshed","setLastTimeRefreshed","setLPTokens","selectedLPTokenAllowed","setSelectedLPTokenAllowed","setAmount","updateLPTokens","method","updateLastTimeRefreshed","now","useFarmingState","filteredBy","setFilteredBy","action","setAction","expectedSushiRewardPerBlock","setExpectedSushiRewardPerBlock","depositing","setDepositing","withdrawing","setWithdrawing","allowance","onDeposit","onWithdraw","ConnectWallet","enable","Link","open","textDecorationLine","Footer","Status","connected","substring","Screen","ConnectToWallet","Actions","Farming","h4","TokenItem","field","hovered","TouchableHighlight","LogoSymbol","isEmpty","setIsEmpty","uri","replace","ActionSelect","element","DepositText","WithdrawText","Deposit","AddLiquidityNotice","DepositInfo","sushiReward","DepositControls","setError","approveRequired","AddLiquidityButton","DepositButton","catch","Withdraw","NoLPTokenNotice","WithdrawInfo","WithdrawControls","WithdrawButton","FarmingScreen","TokenList","useMemo","filterTokens","localeCompare","TokenSelect","onChangeSymbol","UnsupportedButton","FromTokenInput","newAmount","fromPrice","priceOf","quote","ToTokenInput","toPrice","PriceInfo","initialPrice","price","toSignificant","Price","Controls","insufficientFromToken","insufficientToToken","fromApproveRequired","toApproveRequired","SupplyButton","onAdd","adding","AddLiquidity","LPTokenItem","AmountInfo","ArrowDown","Amount","RemoveButton","onRemove","removing","RemoveLiquidity","useAddLiquidityState","setAdding","useRemoveLiquidityState","setRemoving","liquidityToken","fromReserve","reserveOf","toReserve","amountToRemove","amountToRemoveETH","OR","Line","LiquidityScreen","addLiquidityState","removeLiquidityState","useMigrateState","migrating","setMigrating","onMigrate","Migrate","MigrateButton","MigrateScreen","useStakingState","sushiStaked","setSushiStaked","sushiSupply","setSushiSupply","xSushiSupply","setXSushiSupply","sushiAllowed","setSushiAllowed","xSushiAllowed","setXSushiAllowed","entering","setEntering","leaving","setLeaving","sushi","xSushi","sushiAllowance","xSushiAllowance","sushiContract","xSushiContract","onEnter","onLeave","Staking","StakeText","UnstakeText","NoSushiNotice","NoXSushiNotice","StakeInfo","xSushiAmount","share","StakeButton","UnstakeButton","StakingScreen","useSwapState","setTrade","unsupported","setUnsupported","swapping","setSwapping","updateTrade","onSwap","Swap","TradeInfo","WrapInfo","SwapInfo","outputAmount","executionPrice","impact","priceImpact","SwapButton","WrapButton","UnwrapButton","SwapScreen","Main","DeviceType","PHONE","AppLoading","Navigation","App","useFonts","UnicaOne_400Regular","OpenSans_300Light","regular","OpenSans_400Regular","bold","OpenSans_700Bold","navigator","addEventListener","serviceWorker","register","scope","then","info","console","webpackContext","req","webpackContextResolve","__webpack_require__","o","Error","keys","resolve"],"mappings":"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","file":"static/js/app.d3d74962.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/empty-token.e8aa64c5.png\";","import { Dimensions } from \"react-native\";\n\nexport const SCREEN_WIDTH = Math.round(Dimensions.get(\"window\").width);\nexport const SCREEN_HEIGHT = Math.round(Dimensions.get(\"window\").height);\nexport const IS_HIGH_RESOLUTION = SCREEN_HEIGHT > 667;\nexport const HEADER_HEIGHT = 96;\n\nexport const Spacing = IS_HIGH_RESOLUTION\n    ? {\n          tiny: 8,\n          small: 16,\n          normal: 32,\n          large: 48,\n          huge: 64,\n          content: 40\n      }\n    : {\n          tiny: 6,\n          small: 12,\n          normal: 24,\n          large: 32,\n          huge: 48,\n          content: 30\n      };\n","import { ethers } from \"ethers\";\nimport Token from \"../types/Token\";\n\nexport const ETH: Token = {\n    address: ethers.constants.AddressZero,\n    decimals: 18,\n    symbol: \"ETH\",\n    logoURI: \"/images/tokens/ETH.png\",\n    balance: ethers.BigNumber.from(0)\n};\n","import { ChainId, CurrencyAmount, Token as SDKToken, TokenAmount, WETH } from \"@levx/sushiswap-sdk\";\nimport { ethers } from \"ethers\";\nimport Token from \"../types/Token\";\n\nexport const formatBalance = (value: ethers.BigNumberish, decimals = 18, maxFraction = 0) => {\n    const formatted = ethers.utils.formatUnits(value, decimals);\n    if (maxFraction > 0) {\n        const split = formatted.split(\".\");\n        if (split.length > 1) {\n            return split[0] + \".\" + split[1].substr(0, maxFraction);\n        }\n    }\n    return formatted;\n};\n\nexport const parseBalance = (value: string, decimals = 18) => {\n    return ethers.utils.parseUnits(value || \"0\", decimals);\n};\n\nexport const isEmptyValue = (text: string) =>\n    ethers.BigNumber.isBigNumber(text)\n        ? ethers.BigNumber.from(text).isZero()\n        : text === \"\" || text.replaceAll(\"0\", \"\").replaceAll(\".\", \"\") === \"\";\n\nexport const convertToken = (token: Token) => {\n    return token.symbol === \"ETH\" ? WETH[\"1\"] : new SDKToken(ChainId.MAINNET, token.address, token.decimals);\n};\n\nexport const convertAmount = (token: Token, amount: string) => {\n    return new TokenAmount(convertToken(token), parseBalance(amount, token.decimals).toString());\n};\n\nexport const parseCurrencyAmount = (value: CurrencyAmount, decimals = 18) => {\n    return ethers.BigNumber.from(parseBalance(value.toExact(), decimals));\n};\n\nexport const getContract = (name: string, address: string, signer: ethers.Signer) => {\n    const { abi } = require(\"@levx/sushiswap-core/build/contracts/\" + name + \".json\");\n    return ethers.ContractFactory.getContract(address, abi, signer);\n};\n","import React, { useCallback, useEffect, useState } from \"react\";\n\nimport { EventType, Listener } from \"@ethersproject/abstract-provider\";\nimport { ethers } from \"ethers\";\nimport useAsyncEffect from \"use-async-effect\";\nimport Token from \"../types/Token\";\nimport { getContract } from \"../utils\";\n\nexport type OnBlockListener = (block: number) => Promise<void>;\n\nexport const EthersContext = React.createContext({\n    provider: undefined as ethers.providers.JsonRpcProvider | undefined,\n    signer: undefined as ethers.providers.JsonRpcSigner | undefined,\n    chainId: 0,\n    address: null as string | null,\n    addOnBlockListener: (name: string, listener: OnBlockListener) => {},\n    removeOnBlockListener: (name: string) => {},\n    getToken: async (token: string) => {\n        return {} as Token | undefined;\n    },\n    approveToken: async (token: string, spender: string, amount?: ethers.BigNumber) => {\n        return {} as ethers.providers.TransactionResponse;\n    },\n    getTokenAllowance: async (token: string, spender: string) => {\n        return ethers.constants.Zero as ethers.BigNumber | undefined;\n    }\n});\n\n// tslint:disable-next-line:max-func-body-length\nexport const EthersContextProvider = ({ children }) => {\n    const [provider, setProvider] = useState<ethers.providers.JsonRpcProvider>();\n    const [signer, setSigner] = useState<ethers.providers.JsonRpcSigner>();\n    const [chainId, setChainId] = useState<number>(1);\n    const [address, setAddress] = useState<string | null>(ethers.constants.AddressZero);\n    const [onBlockListeners, setOnBlockListeners] = useState<{ [name: string]: OnBlockListener }>({});\n\n    useAsyncEffect(async () => {\n        if (window.ethereum) {\n            const web3 = new ethers.providers.Web3Provider(window.ethereum);\n            const alchemy = new ethers.providers.AlchemyProvider(web3.network, process.env.API_KEY);\n            setProvider(alchemy);\n            setSigner(await web3.getSigner());\n        }\n    }, [window.ethereum]);\n\n    useEffect(() => {\n        if (window.ethereum) {\n            const onAccountsChanged = () => {\n                setAddress(window.ethereum.selectedAddress);\n            };\n            const onChainChanged = async () => {\n                const network = await signer?.provider?.getNetwork();\n                if (network) {\n                    setChainId(network.chainId);\n                }\n            };\n            onAccountsChanged();\n            onChainChanged();\n            window.ethereum.on(\"accountsChanged\", onAccountsChanged);\n            window.ethereum.on(\"chainChanged\", onChainChanged);\n            return () => {\n                window.ethereum.off(\"accountsChanged\", onAccountsChanged);\n                window.ethereum.off(\"chainChanged\", onAccountsChanged);\n            };\n        }\n    }, [window.ethereum, signer]);\n\n    const getToken = useCallback(\n        async (token: string) => {\n            if (provider && signer) {\n                const meta = await provider.send(\"alchemy_getTokenMetadata\", [token]);\n                return {\n                    address: token,\n                    symbol: meta.symbol,\n                    decimals: meta.decimals,\n                    logoURI: meta.logo,\n                    balance: ethers.constants.Zero\n                } as Token;\n            }\n        },\n        [provider, signer]\n    );\n\n    const approveToken = useCallback(\n        async (token: string, spender: string, amount?: ethers.BigNumber) => {\n            if (signer) {\n                amount = amount || ethers.constants.MaxUint256;\n                const erc20 = getContract(\"ERC20\", token, signer);\n                const gasLimit = await erc20.estimateGas.approve(spender, amount);\n                return await erc20.approve(spender, amount, {\n                    gasLimit\n                });\n            }\n        },\n        [signer]\n    );\n\n    const getTokenAllowance = useCallback(\n        async (token: string, spender: string) => {\n            if (provider && signer) {\n                return await provider.send(\"alchemy_getTokenAllowance\", [\n                    {\n                        contract: token,\n                        owner: await signer.getAddress(),\n                        spender\n                    }\n                ]);\n            }\n        },\n        [provider, signer]\n    );\n\n    const addOnBlockListener = useCallback(\n        (name, listener) => {\n            setOnBlockListeners(old => ({ ...old, [name]: listener }));\n        },\n        [setOnBlockListeners]\n    );\n\n    const removeOnBlockListener = useCallback(\n        name => {\n            setOnBlockListeners(old => {\n                delete old[name];\n                return old;\n            });\n        },\n        [setOnBlockListeners]\n    );\n\n    useEffect(() => {\n        if (provider && signer && chainId === 1) {\n            const onBlock = async (block: number) => {\n                for (const listener of Object.entries(onBlockListeners)) {\n                    await listener[1]?.(block);\n                }\n            };\n            provider.on(\"block\", onBlock);\n            return () => {\n                provider.off(\"block\", onBlock);\n            };\n        }\n    }, [provider, signer, chainId, onBlockListeners]);\n\n    return (\n        <EthersContext.Provider\n            value={{\n                provider,\n                signer,\n                chainId,\n                address,\n                getToken,\n                approveToken,\n                getTokenAllowance,\n                addOnBlockListener,\n                removeOnBlockListener\n            }}>\n            {children}\n        </EthersContext.Provider>\n    );\n};\n\ninterface JsonRPCRequest {\n    jsonrpc: string;\n    method: string;\n    params: any[];\n    id: number;\n}\n\ninterface JsonRPCResponse {\n    jsonrpc: string;\n    id: number;\n    result?: any;\n    error?: string;\n}\n\ninterface Callback<ResultType> {\n    (error: Error): void;\n    (error: null, val: ResultType): void;\n}\n\ndeclare global {\n    interface Window {\n        ethereum: {\n            enable(): void;\n            send(payload: any, callback: any): any;\n            send(payload: JsonRPCRequest, callback: Callback<JsonRPCResponse>): any;\n            selectedAddress: string;\n            on(eventName: EventType, listener: Listener);\n            off(eventName: EventType, listener: Listener);\n        };\n    }\n}\n\nexport const EthersContextConsumer = EthersContext.Consumer;\n","import { useCallback } from \"react\";\n\nimport { ChainId, Currency, ETHER, Fetcher, Pair, Token, WETH } from \"@levx/sushiswap-sdk\";\nimport { ethers } from \"ethers\";\n\nconst DAI = new Token(ChainId.MAINNET, \"0x6B175474E89094C44Da98b954EedeAC495271d0F\", 18, \"DAI\", \"Dai Stablecoin\");\nconst USDC = new Token(ChainId.MAINNET, \"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\", 6, \"USDC\", \"USD//C\");\nconst USDT = new Token(ChainId.MAINNET, \"0xdAC17F958D2ee523a2206206994597C13D831ec7\", 6, \"USDT\", \"Tether USD\");\nconst SUSHI = new Token(ChainId.MAINNET, \"0x6B3595068778DD592e39A122f4f5a5cF09C90fE2\", 18, \"SUSHI\", \"SushiSwap\");\nconst YAM = new Token(ChainId.MAINNET, \"0x0e2298E3B3390e3b945a5456fBf59eCc3f55DA16\", 18, \"YAM\", \"YAM\");\nconst AMPL = new Token(ChainId.MAINNET, \"0xD46bA6D942050d489DBd938a2C909A5d5039A161\", 9, \"AMPL\", \"Ampleforth\");\n\nconst BASES_TO_CHECK_TRADES_AGAINST = [WETH[ChainId.MAINNET], DAI, USDC, USDT, SUSHI, YAM];\nconst CUSTOM_BASES = {\n    [AMPL.address]: [DAI, WETH[ChainId.MAINNET]]\n};\n\nfunction wrappedCurrency(currency: Currency | undefined): Token | undefined {\n    return currency === ETHER ? WETH[ChainId.MAINNET] : currency instanceof Token ? currency : undefined;\n}\n\n// Source: https://github.com/Uniswap/uniswap-interface/blob/master/src/hooks/Trades.ts\nconst useAllCommonPairs = () => {\n    const loadAllCommonPairs = useCallback(\n        // tslint:disable-next-line:max-func-body-length\n        async (currencyA?: Currency, currencyB?: Currency, provider?: ethers.providers.BaseProvider) => {\n            const bases: Token[] = BASES_TO_CHECK_TRADES_AGAINST;\n            const [tokenA, tokenB] = [wrappedCurrency(currencyA), wrappedCurrency(currencyB)];\n            const basePairs: [Token, Token][] = bases\n                .flatMap((base): [Token, Token][] => bases.map(otherBase => [base, otherBase]))\n                .filter(([t0, t1]) => t0.address !== t1.address);\n\n            const allPairCombinations =\n                tokenA && tokenB\n                    ? [\n                          // the direct pair\n                          [tokenA, tokenB],\n                          // token A against all bases\n                          ...bases.map((base): [Token, Token] => [tokenA, base]),\n                          // token B against all bases\n                          ...bases.map((base): [Token, Token] => [tokenB, base]),\n                          // each base against all bases\n                          ...basePairs\n                      ]\n                          .filter((tokens): tokens is [Token, Token] => Boolean(tokens[0] && tokens[1]))\n                          .filter(([t0, t1]) => t0.address !== t1.address)\n                          .filter(([a, b]) => {\n                              const customBases = CUSTOM_BASES;\n                              if (!customBases) return true;\n\n                              const customBasesA: Token[] | undefined = customBases[a.address];\n                              const customBasesB: Token[] | undefined = customBases[b.address];\n\n                              if (!customBasesA && !customBasesB) return true;\n\n                              if (customBasesA && !customBasesA.find(base => tokenB.equals(base))) return false;\n                              return !(customBasesB && !customBasesB.find(base => tokenA.equals(base)));\n                          })\n                    : [];\n\n            const pairs = await Promise.all(\n                allPairCombinations.map(async pair => {\n                    try {\n                        return await Fetcher.fetchPairData(pair[0], pair[1], provider);\n                    } catch (e) {\n                        return null;\n                    }\n                })\n            );\n            return pairs.filter(pair => pair !== null) as Pair[];\n        },\n        []\n    );\n\n    return { loadAllCommonPairs };\n};\n\nexport default useAllCommonPairs;\n","import { useCallback, useContext } from \"react\";\n\nimport {\n    CurrencyAmount,\n    FACTORY_ADDRESS,\n    Fetcher,\n    Percent,\n    Router,\n    TokenAmount,\n    Trade,\n    WETH\n} from \"@levx/sushiswap-sdk\";\nimport { FACTORY_ADDRESS as UNISWAP_FACTORY } from \"@uniswap/sdk\";\nimport { ethers } from \"ethers\";\nimport { ETH } from \"../constants/tokens\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport { GlobalContext } from \"../context/GlobalContext\";\nimport LPToken from \"../types/LPToken\";\nimport Token from \"../types/Token\";\nimport { convertToken, getContract } from \"../utils\";\nimport useAllCommonPairs from \"./useAllCommonPairs\";\n\nexport const UNISWAP_ROUTER = \"0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\";\nexport const SUSHISWAP_ROUTER = \"0xd9e1ce17f2641f24ae83637ab66a2cca9c378b9f\";\nexport const ROUTER = SUSHISWAP_ROUTER;\nexport const MASTER_CHEF = \"0xc2edad668740f1aa35e4d8f227fb8e17dca888cd\";\nexport const SUSHI_BAR = \"0x8798249c2e607446efb7ad49ec89dd1865ff4272\";\nexport const SUSHI_ROLL = \"0x94CfE11E6b57f6f84bBa2c6DfB0fAeA47C4741D6\";\nexport const LP_TOKEN_SCANNER = \"0xD132Ce8eA8865348Ac25E416d95ab1Ba84D216AF\";\nexport const MIGRATOR2 = \"0x60A02cD1e3443E8ab7825DccF8d7080Eb78BCA6F\";\n\n// tslint:disable-next-line:max-func-body-length\nconst useSDK = () => {\n    const { provider, signer, getToken } = useContext(EthersContext);\n    const { tokens } = useContext(GlobalContext);\n    const { loadAllCommonPairs } = useAllCommonPairs();\n    const allowedSlippage = new Percent(\"50\", \"10000\"); // 0.05%\n    const ttl = 60 * 20;\n\n    const getTokens = async () => {\n        if (provider && signer) {\n            const response = await fetch(\"/tokens.json\");\n            const json = await response.json();\n\n            const account = await signer.getAddress();\n            const balances = await provider.send(\"alchemy_getTokenBalances\", [\n                account,\n                json.tokens.map(token => token.address)\n            ]);\n            return [\n                {\n                    ...ETH,\n                    balance: await provider.getBalance(account)\n                },\n                ...json.tokens.map((token, i) => ({\n                    ...token,\n                    balance: ethers.BigNumber.from(balances.tokenBalances[i].tokenBalance || 0)\n                }))\n            ].sort((t1, t2) => {\n                return t2.balance\n                    .sub(t1.balance)\n                    .div(ethers.BigNumber.from(10).pow(10))\n                    .toNumber();\n            });\n        }\n    };\n\n    const getMyUniswapLPTokens = async () => {\n        if (provider && signer && tokens) {\n            const factory = getContract(\"IUniswapV2Factory\", UNISWAP_FACTORY, signer);\n            const length = await factory.allPairsLength();\n            const abi = require(\"../constants/abi/LPTokenScanner.json\");\n            const scanner = ethers.ContractFactory.getContract(LP_TOKEN_SCANNER, abi, signer);\n            const account = await signer.getAddress();\n            let pairs: any[] = [];\n            for (let i = 0; i < length; i += 5000) {\n                pairs = pairs.concat(\n                    await scanner.findPairs(account, UNISWAP_FACTORY, i, Math.min(i + 5000, length.toNumber()))\n                );\n            }\n            const balances = await provider.send(\"alchemy_getTokenBalances\", [account, pairs.map(pair => pair.token)]);\n            const result = await Promise.all(\n                pairs.map(async (pair, i) => {\n                    const balance = ethers.BigNumber.from(balances.tokenBalances[i].tokenBalance);\n                    const erc20 = getContract(\"ERC20\", pair.token, signer);\n                    const decimals = Number(await erc20.decimals());\n                    const totalSupply = await erc20.totalSupply();\n                    const tokenA = await findOrGetToken(pair.token0, tokens, getToken);\n                    const tokenB = await findOrGetToken(pair.token1, tokens, getToken);\n                    return { address: pair.token, decimals, balance, totalSupply, tokenA, tokenB } as LPToken;\n                })\n            );\n            return result.filter(token => !!token) as LPToken[];\n        }\n    };\n\n    const getMyLPTokens = async () => {\n        if (provider && signer && tokens) {\n            const factory = getContract(\"IUniswapV2Factory\", FACTORY_ADDRESS, signer);\n            const length = await factory.allPairsLength();\n            const pairs = await Promise.all(\n                Array.from({ length }).map((_, i) => {\n                    return factory.allPairs(i);\n                })\n            );\n            const balances = await provider.send(\"alchemy_getTokenBalances\", [await signer.getAddress(), pairs]);\n            const result = await Promise.all(\n                pairs.map(async (address, i) => {\n                    const balance = ethers.BigNumber.from(balances.tokenBalances[i].tokenBalance);\n                    if (balance.isZero()) {\n                        return null;\n                    }\n                    const pair = getContract(\"IUniswapV2Pair\", address, signer);\n                    const erc20 = getContract(\"ERC20\", address, signer);\n                    const decimals = Number(await erc20.decimals());\n                    const totalSupply = await erc20.totalSupply();\n                    const tokenA = await findOrGetToken(await pair.token0(), tokens, getToken);\n                    const tokenB = await findOrGetToken(await pair.token1(), tokens, getToken);\n                    return { address, decimals, balance, totalSupply, tokenA, tokenB } as LPToken;\n                })\n            );\n            return result.filter(token => !!token) as LPToken[];\n        }\n    };\n\n    const getPools = async () => {\n        if (provider && signer) {\n            const response = await fetch(\"/pools.json\");\n            const pools = await response.json();\n            const address = await signer.getAddress();\n            const balances = await provider.send(\"alchemy_getTokenBalances\", [\n                address,\n                pools.map(pool => pool.address)\n            ]);\n            return (await Promise.all(\n                pools.map(async (pool, i) => {\n                    const poolToken = getContract(\"ERC20\", pool.address, signer);\n                    const totalDeposited = await poolToken.balanceOf(MASTER_CHEF);\n                    const masterChef = getContract(\"MasterChef\", MASTER_CHEF, signer);\n                    const { amount: amountDeposited } = await masterChef.userInfo(i, address);\n                    const pendingSushi = await masterChef.pendingSushi(i, address);\n                    return {\n                        ...pool,\n                        id: i,\n                        symbol: pool.tokenA.symbol + \"-\" + pool.tokenB.symbol + \" LP\",\n                        balance: ethers.BigNumber.from(balances.tokenBalances[i].tokenBalance || 0),\n                        totalDeposited,\n                        amountDeposited,\n                        pendingSushi\n                    };\n                })\n            )) as LPToken[];\n        }\n    };\n\n    const getTrade = useCallback(\n        async (fromToken: Token, toToken: Token, fromAmount: ethers.BigNumber) => {\n            if (provider) {\n                const isETH = fromToken.symbol === \"ETH\";\n                const from = convertToken(fromToken);\n                const to = convertToken(toToken);\n                const pairs = await loadAllCommonPairs(from, to, provider);\n                const amount = isETH\n                    ? CurrencyAmount.ether(fromAmount.toString())\n                    : new TokenAmount(from, fromAmount.toString());\n                return Trade.bestTradeExactIn(pairs, amount, to, { maxHops: 3, maxNumResults: 1 })[0];\n            }\n        },\n        [provider]\n    );\n\n    const swap = useCallback(\n        async (trade: Trade) => {\n            if (signer) {\n                if (trade) {\n                    const params = Router.swapCallParameters(trade, {\n                        feeOnTransfer: false,\n                        allowedSlippage,\n                        recipient: await signer.getAddress(),\n                        ttl\n                    });\n                    const router = getContract(\"IUniswapV2Router02\", ROUTER, signer);\n                    const gasLimit = await router.estimateGas[params.methodName](...params.args, {\n                        value: params.value\n                    });\n                    const tx = await router.functions[params.methodName](...params.args, {\n                        value: params.value,\n                        gasLimit: gasLimit.mul(120).div(100)\n                    });\n                    return {\n                        trade,\n                        tx\n                    };\n                }\n            }\n        },\n        [signer]\n    );\n\n    const wrapETH = useCallback(\n        async (amount: ethers.BigNumber) => {\n            if (signer) {\n                const weth = getContract(\"IWETH\", WETH[1].address, signer);\n                const gasLimit = await weth.estimateGas.deposit({\n                    value: amount\n                });\n                return await weth.deposit({\n                    value: amount,\n                    gasLimit\n                });\n            }\n        },\n        [signer]\n    );\n\n    const unwrapETH = useCallback(\n        async (amount: ethers.BigNumber) => {\n            if (signer) {\n                const weth = getContract(\"IWETH\", WETH[1].address, signer);\n                const gasLimit = await weth.estimateGas.withdraw(amount);\n                return await weth.withdraw(amount, {\n                    gasLimit\n                });\n            }\n        },\n        [signer]\n    );\n\n    const getPair = useCallback(\n        async (fromToken: Token, toToken: Token) => {\n            if (provider) {\n                const from = convertToken(fromToken);\n                const to = convertToken(toToken);\n                return await Fetcher.fetchPairData(from, to, provider);\n            }\n        },\n        [provider]\n    );\n\n    const addLiquidity = useCallback(\n        async (fromToken: Token, toToken: Token, fromAmount: ethers.BigNumber, toAmount: ethers.BigNumber) => {\n            if (signer) {\n                const router = getContract(\"IUniswapV2Router02\", ROUTER, signer);\n                const deadline = `0x${(Math.floor(new Date().getTime() / 1000) + ttl).toString(16)}`;\n                const args = [\n                    fromToken.address,\n                    toToken.address,\n                    fromAmount,\n                    toAmount,\n                    minAmount(fromAmount, allowedSlippage),\n                    minAmount(toAmount, allowedSlippage),\n                    await signer.getAddress(),\n                    deadline\n                ];\n                const gasLimit = await router.estimateGas.addLiquidity(...args);\n                return await router.functions.addLiquidity(...args, {\n                    gasLimit: gasLimit.mul(120).div(100)\n                });\n            }\n        },\n        [signer]\n    );\n\n    const removeLiquidityETH = useCallback(\n        async (token: Token, liquidity: ethers.BigNumber, amount: ethers.BigNumber, amountETH: ethers.BigNumber) => {\n            if (signer) {\n                const router = getContract(\"IUniswapV2Router02\", ROUTER, signer);\n                const deadline = `0x${(Math.floor(new Date().getTime() / 1000) + ttl).toString(16)}`;\n                const args = [\n                    token.address,\n                    liquidity,\n                    minAmount(amount, allowedSlippage),\n                    minAmount(amountETH, allowedSlippage),\n                    await signer.getAddress(),\n                    deadline\n                ];\n                const gasLimit = await router.estimateGas.removeLiquidityETH(...args);\n                return await router.functions.removeLiquidityETH(...args, {\n                    gasLimit: gasLimit.mul(120).div(100)\n                });\n            }\n        },\n        [signer]\n    );\n\n    const removeLiquidity = useCallback(\n        async (\n            fromToken: Token,\n            toToken: Token,\n            liquidity: ethers.BigNumber,\n            fromAmount: ethers.BigNumber,\n            toAmount: ethers.BigNumber\n        ) => {\n            if (signer) {\n                const router = getContract(\"IUniswapV2Router02\", ROUTER, signer);\n                const deadline = `0x${(Math.floor(new Date().getTime() / 1000) + ttl).toString(16)}`;\n                const args = [\n                    fromToken.address,\n                    toToken.address,\n                    liquidity,\n                    minAmount(fromAmount, allowedSlippage),\n                    minAmount(toAmount, allowedSlippage),\n                    await signer.getAddress(),\n                    deadline\n                ];\n                const gasLimit = await router.estimateGas.removeLiquidity(...args);\n                return await router.functions.removeLiquidity(...args, {\n                    gasLimit: gasLimit.mul(120).div(100)\n                });\n            }\n        },\n        [signer]\n    );\n\n    const addLiquidityETH = useCallback(\n        async (token: Token, amount: ethers.BigNumber, amountETH: ethers.BigNumber) => {\n            if (signer) {\n                const router = getContract(\"IUniswapV2Router02\", ROUTER, signer);\n                const deadline = `0x${(Math.floor(new Date().getTime() / 1000) + ttl).toString(16)}`;\n                const args = [\n                    token.address,\n                    amount,\n                    minAmount(amount, allowedSlippage),\n                    minAmount(amountETH, allowedSlippage),\n                    await signer.getAddress(),\n                    deadline\n                ];\n                const gasLimit = await router.estimateGas.addLiquidityETH(...args, {\n                    value: amountETH\n                });\n                return await router.functions.addLiquidityETH(...args, {\n                    gasLimit: gasLimit.mul(120).div(100),\n                    value: amountETH\n                });\n            }\n        },\n        [signer]\n    );\n\n    const getExpectedSushiRewardPerBlock = useCallback(\n        async (token: LPToken) => {\n            if (signer) {\n                const masterChef = getContract(\"MasterChef\", MASTER_CHEF, signer);\n                const totalAllocPoint = await masterChef.totalAllocPoint();\n                const sushiPerBlock = await masterChef.sushiPerBlock();\n                const { allocPoint } = await masterChef.poolInfo(token.id);\n                return ethers.BigNumber.from(sushiPerBlock)\n                    .mul(allocPoint)\n                    .div(totalAllocPoint);\n            }\n        },\n        [signer]\n    );\n\n    const deposit = useCallback(\n        async (lpTokenId: number, amount: ethers.BigNumber) => {\n            if (signer) {\n                const masterChef = getContract(\"MasterChef\", MASTER_CHEF, signer);\n                const gasLimit = await masterChef.estimateGas.deposit(lpTokenId, amount);\n                return await masterChef.deposit(lpTokenId, amount, {\n                    gasLimit: gasLimit.mul(120).div(100)\n                });\n            }\n        },\n        [signer]\n    );\n\n    const withdraw = useCallback(\n        async (lpTokenId: number, amount: ethers.BigNumber) => {\n            if (signer) {\n                const masterChef = getContract(\"MasterChef\", MASTER_CHEF, signer);\n                const gasLimit = await masterChef.estimateGas.withdraw(lpTokenId, amount);\n                return await masterChef.withdraw(lpTokenId, amount, {\n                    gasLimit: gasLimit.mul(120).div(100)\n                });\n            }\n        },\n        [signer]\n    );\n\n    const enterSushiBar = useCallback(\n        async (amount: ethers.BigNumber) => {\n            if (signer) {\n                const sushiBar = getContract(\"SushiBar\", SUSHI_BAR, signer);\n                const gasLimit = await sushiBar.estimateGas.enter(amount);\n                return await sushiBar.enter(amount, {\n                    gasLimit: gasLimit.mul(120).div(100)\n                });\n            }\n        },\n        [signer]\n    );\n\n    const leaveSushiBar = useCallback(\n        async (amount: ethers.BigNumber) => {\n            if (signer) {\n                const sushiBar = getContract(\"SushiBar\", SUSHI_BAR, signer);\n                const gasLimit = await sushiBar.estimateGas.leave(amount);\n                return await sushiBar.leave(amount, {\n                    gasLimit: gasLimit.mul(120).div(100)\n                });\n            }\n        },\n        [signer]\n    );\n\n    const migrate = useCallback(\n        async (lpToken: LPToken, amount: ethers.BigNumber) => {\n            if (signer) {\n                const migrator2 = getContract(\"Migrator2\", MIGRATOR2, signer);\n                const deadline = `0x${(Math.floor(new Date().getTime() / 1000) + ttl).toString(16)}`;\n                const args = [\n                    lpToken.tokenA.address,\n                    lpToken.tokenB.address,\n                    amount,\n                    ethers.constants.Zero,\n                    ethers.constants.Zero,\n                    deadline\n                ];\n                const gasLimit = await migrator2.estimateGas.migrate(...args);\n                return await migrator2.migrate(...args, {\n                    gasLimit: gasLimit.mul(120).div(100)\n                });\n            }\n        },\n        [signer]\n    );\n\n    const calculateFee = (fromAmount: ethers.BigNumber) => {\n        return fromAmount.mul(3).div(1000);\n    };\n\n    return {\n        allowedSlippage,\n        getTokens,\n        getMyUniswapLPTokens,\n        getMyLPTokens,\n        getPools,\n        getTrade,\n        swap,\n        wrapETH,\n        unwrapETH,\n        getPair,\n        addLiquidity,\n        addLiquidityETH,\n        removeLiquidity,\n        removeLiquidityETH,\n        getExpectedSushiRewardPerBlock,\n        deposit,\n        withdraw,\n        enterSushiBar,\n        leaveSushiBar,\n        migrate,\n        calculateFee\n    };\n};\n\nconst findOrGetToken = async (\n    address: string,\n    tokens: Token[],\n    getToken: (address: string) => Promise<Token | undefined>\n) => {\n    const token = tokens.find(t => t.address.toLowerCase() === address.toLowerCase());\n    return token || (await getToken(address));\n};\n\nconst minAmount = (amount: ethers.BigNumber, percent: Percent) => {\n    return amount.sub(amount.mul(percent.numerator.toString()).div(percent.denominator.toString()));\n};\n\nexport default useSDK;\n","import React, { useContext, useState } from \"react\";\nimport { useColorScheme } from \"react-native-appearance\";\n\nimport { DeviceType, getDeviceTypeAsync } from \"expo-device\";\n\nimport { Trade } from \"@levx/sushiswap-sdk\";\nimport AsyncStorage from \"@react-native-community/async-storage\";\nimport useAsyncEffect from \"use-async-effect\";\nimport { ETH } from \"../constants/tokens\";\nimport useSDK from \"../hooks/useSDK\";\nimport Token from \"../types/Token\";\nimport { EthersContext } from \"./EthersContext\";\n\nexport const GlobalContext = React.createContext({\n    load: async () => {},\n    clear: async () => {},\n    deviceType: undefined as DeviceType | undefined,\n    darkMode: false as boolean,\n    setDarkMode: async darkMode => {},\n    tokens: [ETH] as Token[],\n    updateTokens: async () => {},\n    loadingTokens: false,\n    tradeHistory: {},\n    addToTradeHistory: async trade => {}\n});\n\n// tslint:disable-next-line:max-func-body-length\nexport const GlobalContextProvider = ({ children }) => {\n    const { provider, signer, address, addOnBlockListener, removeOnBlockListener } = useContext(EthersContext);\n    const { getTokens } = useSDK();\n    const colorScheme = useColorScheme();\n    const [deviceType, setDeviceType] = useState<DeviceType>();\n    const [darkMode, setDarkMode] = useState(colorScheme === \"dark\");\n    const [tokens, setTokens] = useState<Token[]>([]);\n    const [loadingTokens, setLoadingTokens] = useState(true);\n    const [tradeHistory, setTradeHistory] = useState([] as Trade[]);\n    const updateTokens = async () => {\n        try {\n            const data = await getTokens();\n            if (data) {\n                await setTokens(data);\n            }\n        } finally {\n            setLoadingTokens(false);\n        }\n    };\n    useAsyncEffect(async () => {\n        setDeviceType(await getDeviceTypeAsync());\n    }, []);\n    // useEffect(() => {\n    //     updateTokens();\n    //     addOnBlockListener(\"updateTokens()\", updateTokens);\n    //     return () => {\n    //         removeOnBlockListener(\"updateTokens()\");\n    //     };\n    // }, [updateTokens]);\n    useAsyncEffect(async () => {\n        if (provider && signer) {\n            setLoadingTokens(true);\n            await updateTokens();\n        }\n    }, [provider, signer, address]);\n    return (\n        <GlobalContext.Provider\n            value={{\n                load: async () => {\n                    const mode = await AsyncStorage.getItem(\"dark_mode\");\n                    setDarkMode(mode === \"true\");\n                    setTradeHistory(JSON.parse((await AsyncStorage.getItem(\"trade_history\")) || \"[]\"));\n                },\n                clear: async () => {\n                    setDarkMode(false);\n                    await AsyncStorage.removeItem(\"dark_mode\");\n                    await AsyncStorage.removeItem(\"trade_history\");\n                },\n                deviceType,\n                darkMode,\n                setDarkMode: async (mode: boolean) => {\n                    await AsyncStorage.setItem(\"dark_mode\", String(mode));\n                    setDarkMode(mode);\n                },\n                tokens,\n                updateTokens,\n                loadingTokens,\n                tradeHistory,\n                addToTradeHistory: async (trade: Trade) => {\n                    if (address) {\n                        const list = tradeHistory[address] || [];\n                        list.push(trade);\n                        const newHistory = {\n                            ...tradeHistory,\n                            [address]: list\n                        };\n                        await AsyncStorage.setItem(\"trade_history\", JSON.stringify(newHistory));\n                        setTradeHistory(newHistory);\n                    }\n                }\n            }}>\n            {children}\n        </GlobalContext.Provider>\n    );\n};\n\nexport const GlobalContextConsumer = GlobalContext.Consumer;\n","export const Colors = {\n    common: {\n        white: \"#ffffff\",\n        transparent: \"#ffffff00\",\n        primary: \"#291C64\",\n        secondary: \"#9BECEE\",\n        green: \"#32CD32\",\n        twitter: \"#1da1f2\",\n        facebook: \"#3B5998\"\n    },\n    light: {\n        background: \"#ffffff\",\n        backgroundHovered: \"#f0f0f0\",\n        border: \"#e5e5e5\",\n        borderDark: \"#cccccc\",\n        textDark: \"#000000\",\n        textMedium: \"#121212\",\n        textLight: \"#888888\",\n        disabled: \"#b4b4b4\",\n        shadow: \"#444444\",\n        placeholder: \"#d8d8d8\",\n        underlay: \"#b4b4b4\"\n    },\n    dark: {\n        background: \"#121212\",\n        backgroundHovered: \"#202020\",\n        border: \"#ffffff33\",\n        borderDark: \"#666666\",\n        textDark: \"#ffffff\",\n        textMedium: \"#ededed\",\n        textLight: \"#aaaaaa\",\n        disabled: \"#aaaaaa80\",\n        shadow: \"#03080c\",\n        placeholder: \"#666666\",\n        underlay: \"#aaaaaa80\"\n    }\n};\n","import { useContext } from \"react\";\n\nimport { Colors } from \"../constants/colors\";\nimport { GlobalContext } from \"../context/GlobalContext\";\n\nconst useColors = () => {\n    const { darkMode } = useContext(GlobalContext);\n    return {\n        ...Colors[darkMode ? \"dark\" : \"light\"],\n        ...Colors.common\n    };\n};\n\nexport default useColors;\n","import React, { FunctionComponent } from \"react\";\nimport { View, ViewProps } from \"react-native\";\n\ninterface FlexViewProps extends ViewProps {\n    direction?: \"row\" | \"column\";\n}\n\nconst FlexView: FunctionComponent<FlexViewProps> = props => {\n    const flexDirection = props.direction || \"row\";\n    return <View {...props} style={[{ flexDirection }, props.style]} />;\n};\nexport default FlexView;\n","import React, { FC } from \"react\";\nimport { Text as NativeText, TextProps as NativeTextProps } from \"react-native-elements\";\n\nimport useColors from \"../hooks/useColors\";\n\nexport interface TextProps extends NativeTextProps {\n    note?: boolean;\n    caption?: boolean;\n    dark?: boolean;\n    medium?: boolean;\n    light?: boolean;\n    fontWeight?: \"light\" | \"regular\" | \"bold\";\n}\n\nconst Text: FC<TextProps> = props => {\n    const { textDark, textMedium, textLight } = useColors();\n    const fontFamily = props.fontWeight || \"regular\";\n    return (\n        <NativeText\n            {...props}\n            h1Style={[{ fontFamily }, props.h1Style]}\n            h2Style={[{ fontFamily }, props.h2Style]}\n            h3Style={[{ fontFamily }, props.h3Style]}\n            h4Style={[{ fontFamily }, props.h4Style]}\n            style={[\n                {\n                    fontFamily,\n                    fontSize: props.note ? 15 : props.caption ? 22 : 18,\n                    color: props.note || props.light ? textLight : props.medium ? textMedium : textDark\n                },\n                props.style\n            ]}\n        />\n    );\n};\nexport default Text;\n","import React, { useCallback, useContext } from \"react\";\nimport { Image, View } from \"react-native\";\nimport { Link, useRouteMatch } from \"react-router-dom\";\n\nimport Switch from \"expo-dark-mode-switch\";\n\nimport { HEADER_HEIGHT, Spacing } from \"../constants/dimension\";\nimport { GlobalContext } from \"../context/GlobalContext\";\nimport useColors from \"../hooks/useColors\";\nimport FlexView from \"./FlexView\";\nimport Text from \"./Text\";\n\nconst Header = () => {\n    const { background } = useColors();\n    return (\n        <View\n            // @ts-ignore\n            style={{\n                position: \"fixed\",\n                top: 0,\n                zIndex: 100,\n                width: \"100%\",\n                height: HEADER_HEIGHT,\n                paddingBottom: 16,\n                backgroundColor: background\n            }}>\n            <FlexView\n                style={{\n                    flex: 1,\n                    justifyContent: \"space-between\",\n                    alignItems: \"flex-end\",\n                    paddingTop: Spacing.small,\n                    paddingHorizontal: Spacing.content\n                }}>\n                <Title />\n                <Menu />\n            </FlexView>\n        </View>\n    );\n};\n\nexport const Title = () => {\n    const { darkMode } = useContext(GlobalContext);\n    const { primary, white } = useColors();\n    return (\n        <View style={{ alignSelf: \"center\", alignItems: \"center\" }}>\n            <Link to={\"/\"} style={{ textDecoration: \"none\" }}>\n                <Text style={{ fontFamily: \"title\", fontSize: 40, color: darkMode ? white : primary }}>SushiSwap</Text>\n            </Link>\n            <Image\n                source={\n                    darkMode\n                        ? require(\"../../assets/levx-typography-dark.png\")\n                        : require(\"../../assets/levx-typography.png\")\n                }\n                style={{ width: 76, height: 13 }}\n            />\n        </View>\n    );\n};\n\nconst Menu = () => {\n    return (\n        <FlexView\n            style={{\n                height: \"100%\",\n                alignItems: \"flex-end\"\n            }}>\n            <MenuItem title={\"SWAP\"} path={\"/\"} />\n            <MenuItem title={\"LIQUIDITY\"} path={\"/liquidity\"} />\n            <MenuItem title={\"FARMING\"} path={\"/farming\"} />\n            <MenuItem title={\"STAKING\"} path={\"/staking\"} />\n            <MenuItem title={\"MIGRATE\"} path={\"/migrate\"} />\n            <DarkModeSwitch />\n        </FlexView>\n    );\n};\n\nconst MenuItem = ({ title, path }) => {\n    const { textDark } = useColors();\n    const match = useRouteMatch(path);\n    return (\n        <Link to={path} style={{ marginLeft: Spacing.small, marginBottom: 4, textDecoration: \"none\" }}>\n            <View>\n                <Text style={{ fontFamily: \"regular\", fontSize: 20, color: textDark, padding: 4 }}>{title}</Text>\n                {match?.isExact && (\n                    <View\n                        style={{\n                            position: \"absolute\",\n                            height: 2,\n                            left: 0,\n                            right: 0,\n                            bottom: 0,\n                            backgroundColor: textDark\n                        }}\n                    />\n                )}\n            </View>\n        </Link>\n    );\n};\n\nconst DarkModeSwitch = () => {\n    const { darkMode, setDarkMode } = useContext(GlobalContext);\n    const onChange = useCallback(\n        async dark => {\n            await setDarkMode(dark);\n        },\n        [setDarkMode]\n    );\n    return (\n        <View style={{ marginLeft: Spacing.small, marginBottom: 4 }}>\n            <Switch\n                value={darkMode}\n                onChange={onChange}\n                style={{\n                    transform: [\n                        {\n                            scale: 0.7\n                        }\n                    ]\n                }}\n            />\n        </View>\n    );\n};\n\nexport default Header;\n","import React, { useCallback } from \"react\";\nimport { Image, View } from \"react-native\";\nimport { Icon, SocialIcon } from \"react-native-elements\";\n\nimport * as Linking from \"expo-linking\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport FlexView from \"./FlexView\";\nimport { Title } from \"./Header\";\nimport Text from \"./Text\";\n\nconst MobileNotSupported = () => {\n    const { background } = useColors();\n    return (\n        <View\n            style={{\n                justifyContent: \"center\",\n                alignItems: \"center\",\n                backgroundColor: background,\n                height: \"100%\",\n                padding: Spacing.normal\n            }}>\n            <Image\n                source={require(\"../../assets/sushiswap.jpg\")}\n                style={{ width: 192, height: 192, marginBottom: Spacing.normal }}\n            />\n            <Title />\n            <Text style={{ marginTop: Spacing.normal }}>Mobile devices not supported yet.</Text>\n            <Social />\n        </View>\n    );\n};\n\nconst Social = () => {\n    const onPressTwitter = useCallback(() => Linking.openURL(\"https://twitter.com/LevxApp\"), []);\n    const onPressGithub = useCallback(() => Linking.openURL(\"https://github.com/lev-x\"), []);\n    const onPressDiscord = useCallback(() => Linking.openURL(\"https://discord.gg/3QKsgf\"), []);\n    return (\n        <FlexView style={{ marginTop: Spacing.large, marginBottom: Spacing.huge, justifyContent: \"center\" }}>\n            <Icon\n                type={\"material-community\"}\n                name={\"github-face\"}\n                color={\"white\"}\n                reverseColor={\"black\"}\n                reverse={true}\n                raised={true}\n                onPress={onPressGithub}\n            />\n            <SocialIcon type=\"twitter\" onPress={onPressTwitter} />\n            <Icon\n                type={\"material-community\"}\n                name={\"discord\"}\n                color={\"#7289da\"}\n                reverse={true}\n                raised={true}\n                onPress={onPressDiscord}\n            />\n        </FlexView>\n    );\n};\n\nexport default MobileNotSupported;\n","import React from \"react\";\n\nimport { EthersContextConsumer, EthersContextProvider } from \"./EthersContext\";\nimport { GlobalContextConsumer, GlobalContextProvider } from \"./GlobalContext\";\n\nexport const ContextProvider = ({ children }) => {\n    return (\n        <EthersContextProvider>\n            <GlobalContextProvider>{children}</GlobalContextProvider>\n        </EthersContextProvider>\n    );\n};\n\nexport const ContextConsumer = ({ children }) => {\n    return (\n        <EthersContextConsumer>\n            {ethersContext => (\n                <GlobalContextConsumer>\n                    {globalContext =>\n                        children({\n                            ...globalContext,\n                            ...ethersContext\n                        })\n                    }\n                </GlobalContextConsumer>\n            )}\n        </EthersContextConsumer>\n    );\n};\n","import { ViewStyle } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"./useColors\";\n\nconst useStyles = () => {\n    const { shadow: shadowColor } = useColors();\n    const shadow: ViewStyle = {\n        borderRadius: Spacing.tiny,\n        elevation: Spacing.small,\n        shadowColor,\n        shadowOffset: { width: 0, height: 2 },\n        shadowOpacity: 0.5,\n        shadowRadius: 4,\n        overflow: \"visible\"\n    };\n    return { shadow };\n};\n\nexport default useStyles;\n","import React, { FC } from \"react\";\nimport { Button as NativeButton, ButtonProps as NativeButtonProps } from \"react-native-elements\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport useStyles from \"../hooks/useStyles\";\n\nexport interface ButtonProps extends NativeButtonProps {\n    color?: string;\n    size?: \"small\" | \"normal\" | \"large\";\n    fontWeight?: \"light\" | \"regular\" | \"bold\";\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst Button: FC<ButtonProps> = props => {\n    const { primary, borderDark, textMedium } = useColors();\n    const { shadow } = useStyles();\n    const type = props.type || \"solid\";\n    const size = props.size || \"normal\";\n    const height = props.size === \"small\" ? 40 : size === \"normal\" ? 48 : 56;\n    const fontSize = props.size === \"small\" ? 14 : size === \"normal\" ? 16 : 18;\n    const fontFamily = props.fontWeight || \"regular\";\n    const color = type === \"solid\" ? \"white\" : props.color || textMedium;\n    return (\n        <NativeButton\n            {...props}\n            type={type}\n            buttonStyle={[\n                {\n                    height,\n                    paddingHorizontal: Spacing.small,\n                    backgroundColor: type === \"solid\" ? props.color || primary : \"transparent\",\n                    borderColor: borderDark\n                },\n                props.buttonStyle\n            ]}\n            titleStyle={[{ fontSize, fontFamily, color }, props.titleStyle]}\n            containerStyle={[type === \"solid\" || type === \"outline\" ? shadow : {}, props.containerStyle]}\n        />\n    );\n};\nexport default Button;\n","import React, { FC, useCallback, useContext, useState } from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport Token from \"../types/Token\";\nimport Button from \"./Button\";\n\nexport interface ApproveButtonProps {\n    token: Token;\n    spender: string;\n    onSuccess: () => void;\n    onError: (e) => void;\n    hidden?: boolean;\n}\n\nconst ApproveButton: FC<ApproveButtonProps> = props => {\n    const { approveToken } = useContext(EthersContext);\n    const [loading, setLoading] = useState(false);\n    const onPress = useCallback(async () => {\n        if (props.token) {\n            props.onError({});\n            setLoading(true);\n            try {\n                const tx = await approveToken(props.token.address, props.spender);\n                await tx.wait();\n                props.onSuccess();\n            } catch (e) {\n                props.onError(e);\n            } finally {\n                setLoading(false);\n            }\n        }\n    }, [props.token]);\n    if (props.hidden) {\n        return <View />;\n    }\n    return (\n        <Button\n            size={\"large\"}\n            title={\"Approve \" + (props.token?.symbol || \"\")}\n            onPress={onPress}\n            loading={loading}\n            containerStyle={{ marginBottom: Spacing.small }}\n        />\n    );\n};\n\nexport default ApproveButton;\n","import React, { FC, useCallback, useState } from \"react\";\nimport { ButtonGroup as NativeButtonGroup, ButtonGroupProps } from \"react-native-elements\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport useStyles from \"../hooks/useStyles\";\n\n// tslint:disable-next-line:max-func-body-length\nconst ButtonGroup: FC<ButtonGroupProps> = props => {\n    const { borderDark } = useColors();\n    const { shadow } = useStyles();\n    const [index, setIndex] = useState<number>();\n    const onPress = useCallback(i => {\n        setIndex(i);\n        props.onPress(i);\n    }, []);\n    return (\n        <NativeButtonGroup\n            {...props}\n            selectedIndex={props.selectedIndex || index}\n            onPress={onPress}\n            textStyle={[\n                {\n                    fontFamily: \"regular\"\n                },\n                props.textStyle\n            ]}\n            buttonStyle={[\n                {\n                    borderTopLeftRadius: index === 0 ? Spacing.tiny : 0,\n                    borderBottomLeftRadius: index === 0 ? Spacing.tiny : 0,\n                    borderTopRightRadius:\n                        props.buttons.length > 0 && index === props.buttons.length - 1 ? Spacing.tiny : 0,\n                    borderBottomRightRadius:\n                        props.buttons.length > 0 && index === props.buttons.length - 1 ? Spacing.tiny : 0\n                },\n                props.buttonStyle\n            ]}\n            selectedButtonStyle={[\n                {\n                    backgroundColor: borderDark\n                },\n                props.selectedButtonStyle\n            ]}\n            containerStyle={[\n                {\n                    marginHorizontal: 0,\n                    marginVertical: 0,\n                    height: 56,\n                    ...shadow\n                },\n                props.containerStyle\n            ]}\n        />\n    );\n};\n\nexport default ButtonGroup;\n","import React from \"react\";\nimport { Icon } from \"react-native-elements\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\n\nconst CloseIcon = () => {\n    const { textLight } = useColors();\n    return <Icon type={\"material-community\"} name={\"close\"} color={textLight} style={{ marginLeft: Spacing.tiny }} />;\n};\n\nexport default CloseIcon;\n","import React, { FC } from \"react\";\nimport { View, ViewProps, ViewStyle } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\n\ninterface ColumnProps extends ViewProps {\n    noTopMargin?: boolean;\n    style?: ViewStyle;\n}\n\nconst Column: FC<ColumnProps> = props => (\n    <View {...props} style={[{ width: 440, marginTop: props.noTopMargin ? 0 : Spacing.large }, props.style]} />\n);\n\nexport default Column;\n","import React, { FC } from \"react\";\nimport { ScrollView, ViewProps } from \"react-native\";\n\nimport { HEADER_HEIGHT } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\n\nexport interface ContainerProps extends ViewProps {\n    scrollToBottomLength?: number;\n    showScrollToBottomButton?: boolean;\n}\n\nconst Container: FC<ContainerProps> = props => {\n    const { background } = useColors();\n    return (\n        <ScrollView\n            nestedScrollEnabled={true}\n            contentContainerStyle={{ flex: 1 }}\n            style={[{ backgroundColor: background, marginTop: HEADER_HEIGHT }, props.style]}\n            {...props}\n        />\n    );\n};\n\nexport default Container;\n","import React from \"react\";\nimport { View, ViewProps } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\n\ninterface ContentProps extends ViewProps {\n    contentPadding?: \"small\" | \"normal\" | \"large\";\n}\n\nconst Content: React.FunctionComponent<ContentProps> = props => {\n    const { background } = useColors();\n    const multiplier = {\n        small: 0.75,\n        normal: 1,\n        large: 1.5\n    }[props.contentPadding || \"normal\"];\n    return (\n        <View style={{ alignItems: \"center\", flex: 1, backgroundColor: background }}>\n            <View style={{ width: 1280, flex: 1 }}>\n                <View\n                    {...props}\n                    style={[\n                        {\n                            paddingHorizontal: Spacing.content * multiplier,\n                            paddingVertical: Spacing.normal * multiplier,\n                            backgroundColor: background\n                        },\n                        props.style\n                    ]}\n                />\n            </View>\n        </View>\n    );\n};\nexport default Content;\n","import React from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport MetamaskError from \"../types/MetamaskError\";\nimport Text from \"./Text\";\n\nconst ErrorMessage = ({ error }: { error: MetamaskError }) => (\n    <View\n        style={{\n            borderColor: \"red\",\n            borderWidth: 1,\n            width: \"100%\",\n            padding: Spacing.tiny,\n            marginTop: Spacing.small\n        }}>\n        {error.code && (\n            <Text fontWeight={\"bold\"} style={{ color: \"red\", fontSize: 14 }}>\n                Error Code {error.code}\n            </Text>\n        )}\n        <Text note={true} style={{ color: \"red\", fontSize: 14 }}>\n            {error.message}\n        </Text>\n    </View>\n);\n\nexport default ErrorMessage;\n","import React from \"react\";\n\nimport Button from \"./Button\";\n\nconst FetchingButton = () => {\n    return <Button size={\"large\"} title={\"Fetching…\"} disabled={true} />;\n};\nexport default FetchingButton;\n","import React from \"react\";\n\nimport Button from \"./Button\";\n\nconst InsufficientBalanceButton = ({ symbol }: { symbol: string }) => {\n    return <Button size={\"large\"} title={\"Insufficient \" + symbol || \"\" + \" Balance\"} disabled={true} />;\n};\nexport default InsufficientBalanceButton;\n","import React from \"react\";\nimport { View } from \"react-native\";\n\nimport useColors from \"../hooks/useColors\";\n\nconst Border = () => {\n    const { border } = useColors();\n    return <View style={{ height: 1, width: \"100%\", backgroundColor: border }} />;\n};\n\nexport default Border;\n","import React, { FC, useCallback, useContext } from \"react\";\nimport { ActivityIndicator, FlatList, View } from \"react-native\";\nimport { CheckBox as NativeCheckBox, CheckBoxProps } from \"react-native-elements\";\n\nimport { ethers } from \"ethers\";\nimport { Spacing } from \"../constants/dimension\";\nimport { GlobalContext } from \"../context/GlobalContext\";\nimport useColors from \"../hooks/useColors\";\nimport { LPTokensState } from \"../hooks/useLPTokensState\";\nimport LPToken from \"../types/LPToken\";\nimport Border from \"./Border\";\nimport Column from \"./Column\";\nimport FlexView from \"./FlexView\";\nimport Text from \"./Text\";\n\nexport type LPTokenSelectFilter = \"balance\" | \"amountDeposited\" | \"\";\n\nexport interface LPTokenSelectProps {\n    state: LPTokensState;\n    title: string;\n    emptyText: string;\n    showFilter?: boolean;\n    filter?: LPTokenSelectFilter;\n    onFilterChanged?: (filter: LPTokenSelectFilter) => void;\n    Item: FC<LPTokenItemProps>;\n}\n\nexport interface LPTokenItemProps {\n    token: LPToken;\n    selected: boolean;\n    filter?: LPTokenSelectFilter;\n    onSelectToken: (token: LPToken) => void;\n}\n\nconst LPTokenSelect: FC<LPTokenSelectProps> = props => {\n    const onUnselectToken = useCallback(() => {\n        props.state.setSelectedLPToken(undefined);\n    }, [props.state.setSelectedLPToken]);\n    return (\n        <Column>\n            <Text\n                fontWeight={\"bold\"}\n                medium={true}\n                style={{ marginBottom: props.showFilter ? Spacing.tiny : Spacing.normal, fontSize: 20 }}>\n                {props.title}\n            </Text>\n            {props.showFilter && <Filter filter={props.filter} onFilterChanged={props.onFilterChanged} />}\n            {props.state.selectedLPToken ? (\n                <props.Item\n                    token={props.state.selectedLPToken}\n                    selected={true}\n                    filter={\"\"}\n                    onSelectToken={onUnselectToken}\n                />\n            ) : (\n                <LPTokenList state={props.state} filter={props.filter} emptyText={props.emptyText} Item={props.Item} />\n            )}\n        </Column>\n    );\n};\n\nconst Filter = ({ filter, onFilterChanged }) => {\n    const handler = (f: string) => () => onFilterChanged(f);\n    return (\n        <FlexView style={{ width: \"100%\", justifyContent: \"flex-end\" }}>\n            <CheckBox checked={filter === \"balance\"} onPress={handler(\"balance\")} title={\"with balance\"} />\n            <CheckBox\n                checked={filter === \"amountDeposited\"}\n                onPress={handler(\"amountDeposited\")}\n                title={\"with deposit\"}\n            />\n            <CheckBox checked={!filter} onPress={handler(\"\")} title={\"all\"} />\n        </FlexView>\n    );\n};\n\nconst CheckBox = (props: CheckBoxProps) => {\n    const { darkMode } = useContext(GlobalContext);\n    const { primary, secondary, textLight } = useColors();\n    return (\n        <NativeCheckBox\n            {...props}\n            textStyle={{ fontFamily: \"regular\", fontSize: 14, color: textLight, marginLeft: 0, marginRight: 4 }}\n            containerStyle={{\n                backgroundColor: \"transparent\",\n                borderWidth: 0,\n                marginLeft: Spacing.tiny,\n                marginRight: 0,\n                marginVertical: Spacing.small,\n                padding: 0\n            }}\n            iconRight={true}\n            iconType={\"material-community\"}\n            checkedIcon={\"radiobox-marked\"}\n            uncheckedIcon={\"radiobox-blank\"}\n            checkedColor={darkMode ? secondary : primary}\n        />\n    );\n};\n\n// tslint:disable-next-line:max-func-body-length\nconst LPTokenList = ({\n    state,\n    emptyText,\n    filter,\n    Item\n}: {\n    state: LPTokensState;\n    emptyText: string;\n    filter?: LPTokenSelectFilter;\n    Item: FC<LPTokenItemProps>;\n}) => {\n    const renderItem = useCallback(\n        ({ item }) => {\n            return (\n                <Item\n                    key={item.address}\n                    token={item}\n                    selected={false}\n                    filter={filter}\n                    onSelectToken={state.setSelectedLPToken}\n                />\n            );\n        },\n        [filter, state.setSelectedLPToken]\n    );\n    let data = state.lpTokens.sort((t1, t2) => {\n        return (t2.totalDeposited || ethers.constants.Zero)\n            .sub(t1.totalDeposited || ethers.constants.Zero)\n            .div(ethers.BigNumber.from(10).pow(14))\n            .toNumber();\n    });\n    if (filter === \"amountDeposited\") {\n        data = data.filter(token => token.amountDeposited?.gt(0));\n    } else if (filter === \"balance\") {\n        data = data.filter(token => token.balance.gt(0));\n    }\n    return state.loading ? (\n        <ActivityIndicator size={\"large\"} style={{ marginTop: Spacing.large }} />\n    ) : data.length === 0 ? (\n        <EmptyList text={emptyText} />\n    ) : (\n        <FlatList\n            keyExtractor={item => JSON.stringify(item)}\n            data={data}\n            renderItem={renderItem}\n            ItemSeparatorComponent={Border}\n        />\n    );\n};\n\nconst EmptyList = ({ text }: { text: string }) => {\n    return (\n        <View style={{ margin: Spacing.normal }}>\n            <Text light={true} style={{ textAlign: \"center\", width: \"100%\" }}>\n                {text}\n            </Text>\n        </View>\n    );\n};\n\nexport default LPTokenSelect;\n","import React from \"react\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport FlexView from \"./FlexView\";\nimport Text from \"./Text\";\n\nconst Meta = ({ label, text }: { label: string; text: string }) => {\n    return (\n        <FlexView style={{ justifyContent: \"space-between\", marginTop: Spacing.tiny, marginHorizontal: Spacing.small }}>\n            <Text fontWeight={\"bold\"} style={{ fontSize: 14 }}>\n                {label}\n            </Text>\n            <Text style={{ fontSize: 14 }}>{text}</Text>\n        </FlexView>\n    );\n};\n\nexport default Meta;\n","import React, { useContext } from \"react\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport { GlobalContext } from \"../context/GlobalContext\";\nimport useColors from \"../hooks/useColors\";\nimport Text from \"./Text\";\n\nconst Notice = (props: { text: string; color?: string }) => {\n    const { darkMode } = useContext(GlobalContext);\n    const { primary, secondary } = useColors();\n    const color = props.color || (darkMode ? secondary : primary);\n    return (\n        <Text\n            note={true}\n            style={{\n                color,\n                borderColor: color,\n                borderWidth: 1,\n                borderRadius: 4,\n                padding: Spacing.small\n            }}>\n            {props.text}\n        </Text>\n    );\n};\n\nexport default Notice;\n","import React, { useContext } from \"react\";\nimport { Icon } from \"react-native-elements\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport { GlobalContext } from \"../context/GlobalContext\";\nimport useColors from \"../hooks/useColors\";\n\nconst SelectIcon = () => {\n    const { darkMode } = useContext(GlobalContext);\n    const { primary, secondary } = useColors();\n    return (\n        <Icon\n            type={\"material-community\"}\n            name={\"chevron-right\"}\n            color={darkMode ? secondary : primary}\n            style={{ marginLeft: Spacing.tiny }}\n        />\n    );\n};\n\nexport default SelectIcon;\n","import React, { FC } from \"react\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport Text from \"./Text\";\n\ninterface SubtitleProps {\n    text: string;\n}\n\nconst Subtitle: FC<SubtitleProps> = props => {\n    return (\n        <Text fontWeight={\"bold\"} medium={true} style={{ marginBottom: Spacing.normal, fontSize: 20 }}>\n            {props.text}\n        </Text>\n    );\n};\n\nexport default Subtitle;\n","import React, { FC, useCallback } from \"react\";\nimport { Input as NativeInput, InputProps as NativeInputProps } from \"react-native-elements\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\n\nexport interface Validation {\n    regexp: RegExp;\n    error: string;\n}\n\nexport interface InputProps extends NativeInputProps {\n    color?: string;\n    size?: \"small\" | \"normal\" | \"large\";\n    allowed?: Validation[];\n    forbidden?: Validation[];\n    onError?: (error: string) => void;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst Input: FC<InputProps> = props => {\n    const { textDark, textMedium, textLight } = useColors();\n    const size = props.size || \"normal\";\n    const color = props.color || textDark;\n    const fontSize = size === \"small\" ? 24 : size === \"large\" ? 36 : 30;\n    const onChangeText = useCallback(\n        (text: string) => {\n            props.onChangeText?.(text);\n            props.onError?.(\"\");\n            const errors = [] as string[];\n            if (text !== \"\" && props.forbidden) {\n                props.forbidden.forEach(validation => {\n                    if (text.match(validation.regexp)) {\n                        errors.push(validation.error);\n                    }\n                });\n            }\n            if (text !== \"\" && props.allowed) {\n                props.allowed.forEach(validation => {\n                    if (!text.match(validation.regexp)) {\n                        errors.push(validation.error);\n                    }\n                });\n            }\n            if (errors.length > 0) {\n                props.onError?.(errors.join(\"\\n\"));\n            }\n        },\n        [props.onChangeText, props.onError, props.forbidden, props.allowed]\n    );\n    return (\n        <NativeInput\n            {...props}\n            inputStyle={[\n                // @ts-ignore\n                { fontSize, fontFamily: \"regular\", paddingBottom: 4, color, outline: \"none\", marginTop: 0 },\n                props.inputStyle\n            ]}\n            labelStyle={[{ color: textMedium }, props.labelStyle]}\n            placeholderTextColor={props.placeholderTextColor || textLight}\n            errorStyle={props.onError ? { height: 0 } : props.errorStyle}\n            containerStyle={[{ paddingHorizontal: 0, marginTop: Spacing.tiny }, props.containerStyle]}\n            onChangeText={onChangeText}\n        />\n    );\n};\n\nexport default Input;\n","import React, { FC, useCallback, useContext } from \"react\";\nimport { View } from \"react-native\";\n\nimport { ethers } from \"ethers\";\nimport { Spacing } from \"../constants/dimension\";\nimport { GlobalContext } from \"../context/GlobalContext\";\nimport useColors from \"../hooks/useColors\";\nimport Token from \"../types/Token\";\nimport { formatBalance, parseBalance } from \"../utils\";\nimport Button from \"./Button\";\nimport Column from \"./Column\";\nimport Input from \"./Input\";\nimport Subtitle from \"./Subtitle\";\n\nexport interface TokenInputProps {\n    title?: string;\n    token?: Token;\n    hidden: boolean;\n    amount: string;\n    onAmountChanged: (amount: string) => void;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst TokenInput: FC<TokenInputProps> = props => {\n    const onChangeText = useCallback(\n        (text: string) => {\n            if (props.token && props.onAmountChanged) {\n                try {\n                    parseBalance(text, props.token.decimals);\n                    props.onAmountChanged(text);\n                } catch (e) {\n                    if (text.endsWith(\".\") && text.indexOf(\".\") === text.length - 1) {\n                        props.onAmountChanged(text);\n                    }\n                }\n            }\n        },\n        [props.token, props.onAmountChanged]\n    );\n    if (props.hidden) {\n        return <Column noTopMargin={true} />;\n    }\n    const label = props.token?.symbol;\n    return (\n        <Column noTopMargin={!props.title}>\n            {props.title && <Subtitle text={props.title} />}\n            <View style={{ marginHorizontal: Spacing.small }}>\n                <Input label={label} value={props.amount} onChangeText={onChangeText} placeholder={\"0.0\"} />\n                {props.token?.balance?.gt(0) && <MaxButton token={props.token} updateAmount={props.onAmountChanged} />}\n            </View>\n        </Column>\n    );\n};\n\nconst MaxButton = (props: { token: Token; updateAmount }) => {\n    const { darkMode } = useContext(GlobalContext);\n    const { primary, secondary } = useColors();\n    const onPressMax = useCallback(() => {\n        if (props.token) {\n            let balance = props.token.balance;\n            if (props.token.symbol === \"ETH\") {\n                // Subtract 0.01 ETH for gas fee\n                const fee = ethers.BigNumber.from(10).pow(16);\n                balance = balance.gt(fee) ? balance.sub(fee) : ethers.constants.Zero;\n            }\n            props.updateAmount(formatBalance(balance, props.token.decimals));\n        }\n    }, [props.token, props.updateAmount]);\n    return (\n        <View style={{ position: \"absolute\", right: 0, bottom: 12 }}>\n            <Button\n                type={\"clear\"}\n                color={darkMode ? secondary : primary}\n                title={\"MAX\"}\n                fontWeight={\"bold\"}\n                onPress={onPressMax}\n                buttonStyle={{ paddingHorizontal: 0 }}\n            />\n        </View>\n    );\n};\n\nexport default TokenInput;\n","import { useCallback, useContext, useEffect, useState } from \"react\";\n\nimport { ethers } from \"ethers\";\nimport useAsyncEffect from \"use-async-effect\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport { GlobalContext } from \"../context/GlobalContext\";\nimport Token from \"../types/Token\";\nimport { parseBalance } from \"../utils\";\nimport useSDK, { ROUTER } from \"./useSDK\";\n\nexport interface TokenPairState {\n    fromSymbol: string;\n    setFromSymbol: (symbol: string) => void;\n    toSymbol: string;\n    setToSymbol: (symbol: string) => void;\n    fromToken?: Token;\n    toToken?: Token;\n    fromAmount: string;\n    setFromAmount: (amount: string) => void;\n    toAmount: string;\n    setToAmount: (amount: string) => void;\n    fromTokenAllowed: boolean;\n    setFromTokenAllowed: (allowed: boolean) => void;\n    toTokenAllowed: boolean;\n    setToTokenAllowed: (allowed: boolean) => void;\n    loading: boolean;\n    onWrap: () => Promise<void>;\n    wrapping: boolean;\n    onUnwrap: () => Promise<void>;\n    unwrapping: boolean;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst useTokenPairState: () => TokenPairState = () => {\n    const { tokens, updateTokens } = useContext(GlobalContext);\n    const { provider, signer, address, getTokenAllowance } = useContext(EthersContext);\n    const { wrapETH, unwrapETH } = useSDK();\n    const [fromSymbol, setFromSymbol] = useState(\"\");\n    const [toSymbol, setToSymbol] = useState(\"\");\n    const [fromAmount, setFromAmount] = useState(\"\");\n    const [toAmount, setToAmount] = useState(\"\");\n    const [fromTokenAllowed, setFromTokenAllowed] = useState(false);\n    const [toTokenAllowed, setToTokenAllowed] = useState(false);\n    const [loading, setLoading] = useState(false);\n    const [wrapping, setWrapping] = useState(false);\n    const [unwrapping, setUnwrapping] = useState(false);\n\n    const fromToken = tokens.find(token => token.symbol === fromSymbol);\n    const toToken = tokens.find(token => token.symbol === toSymbol);\n\n    useEffect(() => {\n        if (fromSymbol === \"\") {\n            setToSymbol(\"\");\n        }\n        setFromAmount(\"\");\n        setToAmount(\"\");\n    }, [fromSymbol, toSymbol]);\n\n    useEffect(() => {\n        setFromSymbol(\"\");\n    }, [address]);\n\n    useAsyncEffect(async () => {\n        if (fromToken && toToken && provider && signer) {\n            setFromTokenAllowed(false);\n            setToTokenAllowed(false);\n            setLoading(true);\n            try {\n                const minAllowance = ethers.BigNumber.from(2)\n                    .pow(96)\n                    .sub(1);\n                if (fromToken.symbol !== \"ETH\") {\n                    const fromAllowance = await getTokenAllowance(fromToken.address, ROUTER);\n                    setFromTokenAllowed(ethers.BigNumber.from(fromAllowance).gte(minAllowance));\n                }\n                if (toToken.symbol !== \"ETH\") {\n                    const toAllowance = await getTokenAllowance(toToken.address, ROUTER);\n                    setToTokenAllowed(ethers.BigNumber.from(toAllowance).gte(minAllowance));\n                }\n            } finally {\n                setLoading(false);\n            }\n        }\n    }, [fromToken, toToken, provider, signer]);\n\n    const onWrap = useCallback(async () => {\n        if (fromAmount && signer) {\n            setWrapping(true);\n            try {\n                const tx = await wrapETH(parseBalance(fromAmount));\n                if (tx) {\n                    await tx.wait();\n                    await updateTokens();\n                    setFromSymbol(\"\");\n                }\n            } finally {\n                setWrapping(false);\n            }\n        }\n    }, [fromAmount, signer]);\n\n    const onUnwrap = useCallback(async () => {\n        if (fromAmount && signer) {\n            setUnwrapping(true);\n            try {\n                const tx = await unwrapETH(parseBalance(fromAmount));\n                if (tx) {\n                    await tx.wait();\n                    await updateTokens();\n                    setFromSymbol(\"\");\n                }\n            } finally {\n                setUnwrapping(false);\n            }\n        }\n    }, [fromAmount, signer]);\n\n    return {\n        fromSymbol,\n        setFromSymbol,\n        toSymbol,\n        setToSymbol,\n        fromToken,\n        toToken,\n        fromAmount,\n        setFromAmount,\n        toAmount,\n        setToAmount,\n        fromTokenAllowed,\n        setFromTokenAllowed,\n        toTokenAllowed,\n        setToTokenAllowed,\n        loading,\n        onWrap,\n        wrapping,\n        onUnwrap,\n        unwrapping\n    };\n};\n\nexport default useTokenPairState;\n","import { useContext, useEffect, useState } from \"react\";\n\nimport { Pair } from \"@levx/sushiswap-sdk\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport useSDK from \"./useSDK\";\nimport useTokenPairState, { TokenPairState } from \"./useTokenPairState\";\n\nexport interface LiquidityState extends TokenPairState {\n    pair?: Pair;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst useLiquidityState: () => LiquidityState = () => {\n    const state = useTokenPairState();\n    const { provider, addOnBlockListener, removeOnBlockListener } = useContext(EthersContext);\n    const [loading, setLoading] = useState(false);\n    const [pair, setPair] = useState<Pair>();\n    const { getPair } = useSDK();\n\n    useEffect(() => {\n        if (state.fromSymbol && state.toSymbol) {\n            const updatePair = async () => {\n                if (state.fromToken && state.toToken && provider) {\n                    setPair(undefined);\n                    try {\n                        setPair(await getPair(state.fromToken, state.toToken));\n                    } catch (e) {\n                    } finally {\n                        setLoading(false);\n                    }\n                }\n            };\n\n            setLoading(true);\n            updatePair();\n            const name = \"updatePair(\" + state.fromSymbol + \",\" + state.toSymbol + \")\";\n\n            addOnBlockListener(name, updatePair);\n            return () => {\n                removeOnBlockListener(name);\n            };\n        }\n    }, [state.fromSymbol, state.toSymbol]);\n\n    return {\n        ...state,\n        loading: loading || state.loading,\n        pair\n    };\n};\n\nexport default useLiquidityState;\n","import { useContext, useEffect, useState } from \"react\";\n\nimport { EthersContext } from \"../context/EthersContext\";\nimport { GlobalContext } from \"../context/GlobalContext\";\nimport LPToken from \"../types/LPToken\";\nimport useLiquidityState, { LiquidityState } from \"./useLiquidityState\";\nimport useSDK from \"./useSDK\";\n\nexport interface LPTokensState extends LiquidityState {\n    lastTimeRefreshed: number;\n    updateLastTimeRefreshed: () => void;\n    lpTokens: LPToken[];\n    selectedLPToken?: LPToken;\n    setSelectedLPToken: (token?: LPToken) => void;\n    selectedLPTokenAllowed: boolean;\n    setSelectedLPTokenAllowed: (allowed: boolean) => void;\n    amount: string;\n    setAmount: (amount: string) => void;\n}\n\ntype Mode = \"pools\" | \"my-lp-tokens\" | \"my-uniswap-lp-tokens\";\n\n// tslint:disable-next-line:max-func-body-length\nconst useLPTokensState: (mode: Mode) => LPTokensState = mode => {\n    const state = useLiquidityState();\n    const { provider, signer, address, addOnBlockListener, removeOnBlockListener } = useContext(EthersContext);\n    const { tokens } = useContext(GlobalContext);\n    const { getPools, getMyLPTokens, getMyUniswapLPTokens } = useSDK();\n    const [lastTimeRefreshed, setLastTimeRefreshed] = useState(0);\n    const [loading, setLoading] = useState(true);\n    const [lpTokens, setLPTokens] = useState<LPToken[]>([]);\n    const [selectedLPToken, setSelectedLPToken] = useState<LPToken>();\n    const [selectedLPTokenAllowed, setSelectedLPTokenAllowed] = useState(false);\n    const [amount, setAmount] = useState(\"\");\n\n    const updateLPTokens = async () => {\n        try {\n            const method = mode === \"pools\" ? getPools : mode === \"my-lp-tokens\" ? getMyLPTokens : getMyUniswapLPTokens;\n            const data = await method();\n            if (data) {\n                setLPTokens(data);\n            }\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    useEffect(() => {\n        if (!selectedLPToken) {\n            setAmount(\"\");\n        }\n    }, [selectedLPToken]);\n\n    useEffect(() => {\n        if (provider && signer && (mode === \"pools\" || tokens.length > 0)) {\n            setLoading(true);\n            updateLPTokens();\n\n            const name = \"updateLPTokens()\";\n            addOnBlockListener(name, updateLPTokens);\n            return () => {\n                removeOnBlockListener(name);\n            };\n        }\n    }, [provider, signer, tokens.length, address, lastTimeRefreshed]);\n\n    return {\n        ...state,\n        loading: state.loading || loading,\n        lastTimeRefreshed,\n        updateLastTimeRefreshed: () => {\n            setLastTimeRefreshed(Date.now());\n        },\n        lpTokens,\n        selectedLPToken,\n        setSelectedLPToken,\n        selectedLPTokenAllowed,\n        setSelectedLPTokenAllowed,\n        amount,\n        setAmount\n    };\n};\n\nexport default useLPTokensState;\n","import { useCallback, useContext, useEffect, useState } from \"react\";\n\nimport { ethers } from \"ethers\";\nimport useAsyncEffect from \"use-async-effect\";\nimport { LPTokenSelectFilter } from \"../components/LPTokenSelect\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport { parseBalance } from \"../utils\";\nimport useLPTokensState, { LPTokensState } from \"./useLPTokensState\";\nimport useSDK, { MASTER_CHEF } from \"./useSDK\";\n\nexport interface FarmingState extends LPTokensState {\n    action?: Action;\n    setAction: (action?: Action) => void;\n    expectedSushiRewardPerBlock?: ethers.BigNumber;\n    filteredBy: LPTokenSelectFilter;\n    setFilteredBy: (filter: LPTokenSelectFilter) => void;\n    onDeposit: () => Promise<void>;\n    depositing: boolean;\n    onWithdraw: () => Promise<void>;\n    withdrawing: boolean;\n}\n\nexport type Action = \"deposit\" | \"withdraw\";\n\n// tslint:disable-next-line:max-func-body-length\nconst useFarmingState: () => FarmingState = () => {\n    const state = useLPTokensState(\"pools\");\n    const { provider, signer, getTokenAllowance } = useContext(EthersContext);\n    const { getExpectedSushiRewardPerBlock, deposit, withdraw } = useSDK();\n    const [filteredBy, setFilteredBy] = useState(\"\" as LPTokenSelectFilter);\n    const [action, setAction] = useState<Action>();\n    const [loading, setLoading] = useState(false);\n    const [expectedSushiRewardPerBlock, setExpectedSushiRewardPerBlock] = useState<ethers.BigNumber>();\n    const [depositing, setDepositing] = useState(false);\n    const [withdrawing, setWithdrawing] = useState(false);\n\n    useEffect(() => {\n        setFilteredBy(\"\");\n        setAction(undefined);\n        setLoading(false);\n        setDepositing(false);\n        setWithdrawing(false);\n        setExpectedSushiRewardPerBlock(undefined);\n    }, [state.selectedLPToken]);\n\n    useAsyncEffect(async () => {\n        if (signer && state.selectedLPToken) {\n            setLoading(true);\n            try {\n                setExpectedSushiRewardPerBlock(await getExpectedSushiRewardPerBlock(state.selectedLPToken));\n            } finally {\n                setLoading(false);\n            }\n        }\n    }, [signer, state.selectedLPToken]);\n\n    useAsyncEffect(async () => {\n        if (provider && signer && state.selectedLPToken) {\n            setLoading(true);\n            state.setSelectedLPTokenAllowed(false);\n            try {\n                const minAllowance = ethers.BigNumber.from(2)\n                    .pow(96)\n                    .sub(1);\n                const allowance = await getTokenAllowance(state.selectedLPToken.address, MASTER_CHEF);\n                state.setSelectedLPTokenAllowed(ethers.BigNumber.from(allowance).gte(minAllowance));\n            } finally {\n                setLoading(false);\n            }\n        }\n    }, [provider, signer, state.selectedLPToken]);\n\n    useEffect(() => {\n        state.setAmount(\"\");\n    }, [action]);\n\n    const onDeposit = useCallback(async () => {\n        if (state.selectedLPToken?.id && state.amount && signer) {\n            setDepositing(true);\n            try {\n                const amount = parseBalance(state.amount, state.selectedLPToken.decimals);\n                const tx = await deposit(state.selectedLPToken.id, amount);\n                await tx.wait();\n                state.setSelectedLPToken(undefined);\n                await state.updateLastTimeRefreshed();\n            } finally {\n                setDepositing(false);\n            }\n        }\n    }, [state.selectedLPToken, state.amount, signer]);\n\n    const onWithdraw = useCallback(async () => {\n        if (state.selectedLPToken?.id && state.amount && signer) {\n            setWithdrawing(true);\n            try {\n                const amount = parseBalance(state.amount, state.selectedLPToken.decimals);\n                const tx = await withdraw(state.selectedLPToken.id, amount);\n                await tx.wait();\n                state.setSelectedLPToken(undefined);\n                await state.updateLastTimeRefreshed();\n            } finally {\n                setWithdrawing(false);\n            }\n        }\n    }, [state.selectedLPToken, state.amount, signer]);\n\n    return {\n        ...state,\n        loading: state.loading || loading,\n        filteredBy,\n        setFilteredBy,\n        action,\n        setAction,\n        expectedSushiRewardPerBlock,\n        onDeposit,\n        depositing,\n        onWithdraw,\n        withdrawing\n    };\n};\n\nexport default useFarmingState;\n","import React, { useCallback, useContext } from \"react\";\nimport { Image, View } from \"react-native\";\n\nimport * as Linking from \"expo-linking\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport { GlobalContext } from \"../context/GlobalContext\";\nimport Button from \"./Button\";\n\nconst ConnectWallet = () => {\n    const { darkMode } = useContext(GlobalContext);\n    const onPress = useCallback(async () => {\n        if (window.ethereum) {\n            await window.ethereum.enable();\n        } else {\n            await Linking.openURL(\"https://metamask.io/\");\n        }\n    }, [window.ethereum]);\n    const title = window.ethereum ? \"Connect\" : \"Install MetaMask\";\n    return (\n        <View style={{ flex: 1, alignItems: \"center\", justifyContent: \"center\" }}>\n            <Image\n                source={darkMode ? require(\"../../assets/metamask-dark.png\") : require(\"../../assets/metamask.png\")}\n                style={{ width: 223, height: 183, marginBottom: Spacing.huge }}\n            />\n            <Button type={\"outline\"} size={\"large\"} onPress={onPress} title={title} containerStyle={{ width: 440 }} />\n        </View>\n    );\n};\nexport default ConnectWallet;\n","import React, { useCallback } from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport FlexView from \"./FlexView\";\nimport Text from \"./Text\";\n\nconst Footer = () => (\n    <View\n        // @ts-ignore\n        style={{\n            position: \"fixed\",\n            bottom: 0,\n            width: \"100%\",\n            margin: Spacing.content\n        }}>\n        <Text note={true} style={{ marginLeft: 12 }}>\n            Built by <Link to={\"https://levx.io\"} text={\"Team LevX\"} />\n        </Text>\n        <FlexView>\n            <Link to={\"https://github.com/lev-x\"} text={\"GitHub\"} />\n            <Link to={\"https://twitter.com/LevxApp\"} text={\"Twitter\"} />\n            <Link to={\"https://discord.gg/Mcdm7v\"} text={\"Discord\"} />\n        </FlexView>\n    </View>\n);\n\nconst Link = ({ to, text }) => {\n    const onPress = useCallback(() => {\n        window.open(to, \"_blank\");\n    }, []);\n    return (\n        <Text note={true} style={{ textDecorationLine: \"underline\", marginRight: 8 }} onPress={onPress}>\n            {text}\n        </Text>\n    );\n};\n\nexport default Footer;\n","import React, { useContext } from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport useColors from \"../hooks/useColors\";\nimport useStyles from \"../hooks/useStyles\";\nimport FlexView from \"./FlexView\";\nimport Text from \"./Text\";\n\nconst Status = () => {\n    const { textMedium, textLight, green } = useColors();\n    const { shadow } = useStyles();\n    const { chainId, address } = useContext(EthersContext);\n    const connected = chainId === 1 && address;\n    const title = connected\n        ? address!.substring(0, 6) + \"...\" + address!.substring(address!.length - 4, address!.length)\n        : \"Not connected\";\n    const color = connected ? green : textLight;\n    return (\n        <FlexView\n            // @ts-ignore\n            style={{\n                position: \"fixed\",\n                right: Spacing.content,\n                bottom: Spacing.normal,\n                height: 40,\n                alignItems: \"center\",\n                justifyContent: \"center\",\n                paddingHorizontal: Spacing.small,\n                borderRadius: 16,\n                ...shadow\n            }}>\n            <View style={{ backgroundColor: color, width: 6, height: 6, borderRadius: 3, marginRight: 12 }} />\n            <Text style={{ fontSize: 16, color: textMedium, marginRight: 2 }}>{title}</Text>\n            {/*<Icon type={\"material-community\"} name={\"chevron-down\"} color={textLight} size={22} />*/}\n        </FlexView>\n    );\n};\n\nexport default Status;\n","import React, { useContext } from \"react\";\nimport { View } from \"react-native\";\n\nimport ConnectToWallet from \"../components/ConnectToWallet\";\nimport Footer from \"../components/Footer\";\nimport Status from \"../components/Status\";\nimport Text from \"../components/Text\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport useColors from \"../hooks/useColors\";\n\nconst Screen = props => {\n    const { address, chainId } = useContext(EthersContext);\n    const { background } = useColors();\n    if (!address) {\n        return <ConnectToWallet />;\n    }\n    if (chainId !== 1) {\n        return (\n            <View style={{ flex: 1, alignItems: \"center\", justifyContent: \"center\" }}>\n                <Text light={true} style={{ textAlign: \"center\" }}>\n                    {\"Please switch network to\\n'Ethereum Mainnet'\"}\n                </Text>\n            </View>\n        );\n    }\n    return (\n        <View style={{ flex: 1, backgroundColor: background }}>\n            <View {...props} />\n            <Status />\n            <Footer />\n        </View>\n    );\n};\n\nexport default Screen;\n","import React, { FC, useCallback, useState } from \"react\";\nimport { Image, TouchableHighlight, View } from \"react-native\";\nimport { Icon } from \"react-native-elements\";\nimport { Hoverable } from \"react-native-web-hover\";\nimport { Link } from \"react-router-dom\";\n\nimport { ethers } from \"ethers\";\nimport useAsyncEffect from \"use-async-effect\";\nimport ApproveButton from \"../components/ApproveButton\";\nimport Button from \"../components/Button\";\nimport ButtonGroup from \"../components/ButtonGroup\";\nimport CloseIcon from \"../components/CloseIcon\";\nimport Column from \"../components/Column\";\nimport Container from \"../components/Container\";\nimport Content from \"../components/Content\";\nimport ErrorMessage from \"../components/ErrorMessage\";\nimport FetchingButton from \"../components/FetchingButton\";\nimport FlexView from \"../components/FlexView\";\nimport InsufficientBalanceButton from \"../components/InsufficientBalanceButton\";\nimport LPTokenSelect, { LPTokenItemProps } from \"../components/LPTokenSelect\";\nimport Meta from \"../components/Meta\";\nimport Notice from \"../components/Notice\";\nimport SelectIcon from \"../components/SelectIcon\";\nimport Subtitle from \"../components/Subtitle\";\nimport Text from \"../components/Text\";\nimport TokenInput from \"../components/TokenInput\";\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport useFarmingState, { Action, FarmingState } from \"../hooks/useFarmingState\";\nimport { MASTER_CHEF } from \"../hooks/useSDK\";\nimport LPToken from \"../types/LPToken\";\nimport MetamaskError from \"../types/MetamaskError\";\nimport { formatBalance, isEmptyValue, parseBalance } from \"../utils\";\nimport Screen from \"./Screen\";\n\nconst Actions = [\"deposit\", \"withdraw\"];\n\nconst FarmingScreen = () => {\n    return (\n        <Screen>\n            <Container>\n                <Content>\n                    <View style={{ alignItems: \"center\", marginBottom: Spacing.large }}>\n                        <Farming />\n                    </View>\n                </Content>\n            </Container>\n        </Screen>\n    );\n};\n\nconst Farming = () => {\n    const state = useFarmingState();\n    const emptyText =\n        state.filteredBy === \"amountDeposited\"\n            ? \"You don't have any pool with deposit.\"\n            : state.filteredBy === \"balance\"\n            ? \"You don't have any pool with balance.\"\n            : \"Temporarily unable to load pools.\";\n    return (\n        <>\n            <Column>\n                <Text h4={true} style={{ textAlign: \"center\" }}>\n                    🌾 Farming\n                </Text>\n            </Column>\n            <LPTokenSelect\n                state={state}\n                title={\"1. Select a pool for yield farming:\"}\n                emptyText={emptyText}\n                showFilter={!state.selectedLPToken}\n                filter={state.filteredBy}\n                onFilterChanged={state.setFilteredBy}\n                Item={TokenItem}\n            />\n            <ActionSelect state={state} />\n            <Deposit state={state} />\n            <Withdraw state={state} />\n        </>\n    );\n};\n\n// tslint:disable-next-line:max-func-body-length\nconst TokenItem: FC<LPTokenItemProps> = props => {\n    const { background, backgroundHovered, textMedium } = useColors();\n    const amount =\n        (props.filter === \"balance\"\n            ? props.token.balance\n            : props.filter === \"amountDeposited\"\n            ? props.token.amountDeposited\n            : props.token.totalDeposited) || \"0\";\n    const onPress = useCallback(() => {\n        props.onSelectToken(props.token);\n    }, [props.onSelectToken, props.token]);\n    const field =\n        props.filter === \"amountDeposited\" ? \"My Deposit\" : props.filter === \"balance\" ? \"My Balance\" : \"Total Deposit\";\n    return (\n        <Hoverable>\n            {({ hovered }) => (\n                <TouchableHighlight onPress={onPress}>\n                    <View style={{ backgroundColor: hovered ? backgroundHovered : background }}>\n                        <FlexView style={{ alignItems: \"center\", margin: Spacing.small }}>\n                            <View>\n                                <LogoSymbol token={props.token.tokenA} />\n                                <LogoSymbol token={props.token.tokenB} />\n                            </View>\n                            <View style={{ flex: 1 }}>\n                                <Text style={{ textAlign: \"right\", fontSize: 15 }}>{field}</Text>\n                                <Text light={true} style={{ textAlign: \"right\", fontSize: 22, color: textMedium }}>\n                                    {formatBalance(amount, props.token.decimals, 8)}\n                                </Text>\n                            </View>\n                            {props.selected ? <CloseIcon /> : <SelectIcon />}\n                        </FlexView>\n                    </View>\n                </TouchableHighlight>\n            )}\n        </Hoverable>\n    );\n};\n\nconst LogoSymbol = ({ token }) => {\n    const { textMedium } = useColors();\n    const [isEmpty, setIsEmpty] = useState(false);\n    const source = !token.logoURI || isEmpty ? require(\"../../assets/empty-token.png\") : { uri: token.logoURI };\n    return (\n        <FlexView style={{ alignItems: \"center\", marginBottom: Spacing.tiny }}>\n            <Image\n                source={source}\n                onError={() => setIsEmpty(true)}\n                style={{ width: 24, height: 24, backgroundColor: \"white\", borderRadius: 12 }}\n            />\n            <Text light={true} style={{ fontSize: 22, color: textMedium, marginLeft: Spacing.small }}>\n                {token.symbol.replace(/\\+/g, \"+\\n\")}\n            </Text>\n        </FlexView>\n    );\n};\n\nconst ActionSelect = ({ state }: { state: FarmingState }) => {\n    if (!state.selectedLPToken) {\n        return <Column noTopMargin={true} />;\n    }\n    const index = state.action ? Actions.indexOf(state.action) : null;\n    const onPress = useCallback((i: number) => {\n        state.setAction(Actions[i] as Action);\n    }, []);\n    const balance = formatBalance(state.selectedLPToken!.balance, state.selectedLPToken!.decimals);\n    const deposit = formatBalance(state.selectedLPToken.amountDeposited || \"0\", state.selectedLPToken!.decimals);\n    return (\n        <Column>\n            <Subtitle text={\"2. Do you want to DEPOSIT or WITHDRAW?\"} />\n            <View style={{ marginHorizontal: Spacing.small, marginBottom: Spacing.normal }}>\n                <Meta label={\"My Balance\"} text={balance} />\n                <Meta label={\"My Deposit\"} text={deposit} />\n            </View>\n            <ButtonGroup\n                selectedIndex={index}\n                onPress={onPress}\n                buttons={[{ element: DepositText }, { element: WithdrawText }]}\n                containerStyle={{ marginHorizontal: Spacing.small }}\n            />\n        </Column>\n    );\n};\n\nconst DepositText = () => {\n    return (\n        <FlexView style={{ alignItems: \"center\" }}>\n            <Text style={{ color: \"black\" }}>Deposit</Text>\n            <Icon\n                type={\"material-community\"}\n                name={\"chevron-right\"}\n                color={\"black\"}\n                style={{ marginLeft: Spacing.tiny, marginTop: 2 }}\n            />\n        </FlexView>\n    );\n};\n\nconst WithdrawText = () => {\n    return (\n        <FlexView style={{ alignItems: \"center\" }}>\n            <Text style={{ color: \"black\" }}>Withdraw</Text>\n            <Icon\n                type={\"material-community\"}\n                name={\"chevron-right\"}\n                color={\"black\"}\n                style={{ marginLeft: Spacing.tiny, marginTop: 2 }}\n            />\n        </FlexView>\n    );\n};\n\nconst Deposit = ({ state }: { state: FarmingState }) => {\n    if (!state.selectedLPToken || state.action !== \"deposit\") {\n        return <Column noTopMargin={true} />;\n    }\n    return (\n        <Column>\n            <AddLiquidityNotice state={state} />\n            <TokenInput\n                title={\"3. Amount of tokens to DEPOSIT:\"}\n                token={state.selectedLPToken}\n                hidden={state.selectedLPToken.balance.isZero()}\n                amount={state.amount}\n                onAmountChanged={state.setAmount}\n            />\n            <DepositInfo state={state} />\n            <DepositControls state={state} />\n        </Column>\n    );\n};\n\nconst AddLiquidityNotice = ({ state }: { state: FarmingState }) => {\n    const { green } = useColors();\n    if (!state.selectedLPToken!.balance.isZero()) {\n        return <Column noTopMargin={true} />;\n    }\n    return (\n        <>\n            <View style={{ marginHorizontal: Spacing.small }}>\n                <Notice\n                    color={green}\n                    text={\n                        \"You need some \" +\n                        state.selectedLPToken!.symbol +\n                        \" token to start farming. Add liquidity to get the LP token.\"\n                    }\n                />\n            </View>\n            <AddLiquidityButton />\n        </>\n    );\n};\n\nconst DepositInfo = ({ state }: { state: FarmingState }) => {\n    if (state.selectedLPToken!.balance.isZero()) {\n        return <Column noTopMargin={true} />;\n    }\n    const balance = formatBalance(state.selectedLPToken!.balance, state.selectedLPToken!.decimals);\n    const sushiReward =\n        state.expectedSushiRewardPerBlock && state.amount\n            ? formatBalance(\n                  state.expectedSushiRewardPerBlock\n                      .mul(parseBalance(state.amount, 18))\n                      .div(ethers.BigNumber.from(10).pow(18)),\n                  18\n              )\n            : null;\n    return (\n        <Column noTopMargin={true}>\n            <Meta label={\"My Balance\"} text={balance} />\n            {!isEmptyValue(state.amount) && <Meta label={\"SUSHI Reward per Block\"} text={sushiReward || \"…\"} />}\n        </Column>\n    );\n};\n\nconst DepositControls = ({ state }: { state: FarmingState }) => {\n    const [error, setError] = useState<MetamaskError>({});\n    useAsyncEffect(() => setError({}), [state.selectedLPToken]);\n    if (state.selectedLPToken!.balance.isZero()) {\n        return <Column noTopMargin={true} />;\n    }\n    const approveRequired = !state.selectedLPTokenAllowed;\n    const disabled = approveRequired || isEmptyValue(state.amount);\n    return (\n        <Column>\n            {parseBalance(state.amount, state.selectedLPToken!.decimals).gt(state.selectedLPToken!.balance) ? (\n                <InsufficientBalanceButton symbol={state.selectedLPToken!.symbol} />\n            ) : state.loading ? (\n                <FetchingButton />\n            ) : (\n                <>\n                    <ApproveButton\n                        token={state.selectedLPToken!}\n                        spender={MASTER_CHEF}\n                        onSuccess={() => state.setSelectedLPTokenAllowed(true)}\n                        onError={setError}\n                        hidden={isEmptyValue(state.amount) || !approveRequired}\n                    />\n                    <DepositButton state={state} onError={setError} disabled={disabled} />\n                </>\n            )}\n            {error.message && error.code !== 4001 && <ErrorMessage error={error} />}\n        </Column>\n    );\n};\n\nconst AddLiquidityButton = () => {\n    const { green } = useColors();\n    return (\n        <Link to={\"/liquidity\"} style={{ textDecoration: \"none\" }}>\n            <Button color={green} title={\"Add Liquidity\"} containerStyle={{ marginTop: Spacing.normal }} />\n        </Link>\n    );\n};\n\nconst DepositButton = ({\n    state,\n    onError,\n    disabled\n}: {\n    state: FarmingState;\n    onError: (e) => void;\n    disabled: boolean;\n}) => {\n    const onPress = useCallback(() => {\n        onError({});\n        state.onDeposit().catch(onError);\n    }, [state.onDeposit, onError]);\n    return <Button size={\"large\"} title={\"Deposit\"} disabled={disabled} loading={state.depositing} onPress={onPress} />;\n};\n\nconst Withdraw = ({ state }: { state: FarmingState }) => {\n    if (!state.selectedLPToken || state.action !== \"withdraw\") {\n        return <Column noTopMargin={true} />;\n    }\n    const token: LPToken = {\n        ...state.selectedLPToken,\n        balance: state.selectedLPToken.amountDeposited || ethers.constants.Zero\n    };\n    return (\n        <Column>\n            <NoLPTokenNotice state={state} />\n            <TokenInput\n                title={\"3. Amount of tokens to WITHDRAW:\"}\n                token={token}\n                hidden={state.loading || state.selectedLPToken.amountDeposited?.isZero() || false}\n                amount={state.amount}\n                onAmountChanged={state.setAmount}\n            />\n            <WithdrawInfo state={state} />\n            <WithdrawControls state={state} />\n        </Column>\n    );\n};\n\nconst NoLPTokenNotice = ({ state }: { state: FarmingState }) => {\n    if (state.loading || !state.selectedLPToken || !state.selectedLPToken.amountDeposited?.isZero()) {\n        return <Column noTopMargin={true} />;\n    }\n    return (\n        <Column noTopMargin={true}>\n            <View style={{ marginHorizontal: Spacing.small }}>\n                <Notice\n                    text={\"You don't have any \" + state.selectedLPToken!.symbol + \" token deposited. Deposit it first.\"}\n                />\n            </View>\n        </Column>\n    );\n};\n\nconst WithdrawInfo = ({ state }: { state: FarmingState }) => {\n    if (\n        state.loading ||\n        !state.selectedLPToken ||\n        !state.selectedLPToken.amountDeposited ||\n        state.selectedLPToken.amountDeposited?.isZero() ||\n        !state.selectedLPToken.pendingSushi\n    ) {\n        return <Column noTopMargin={true} />;\n    }\n    const deposit = formatBalance(state.selectedLPToken.amountDeposited, state.selectedLPToken!.decimals);\n    const pendingSushi = formatBalance(\n        state.selectedLPToken.pendingSushi || ethers.constants.Zero,\n        state.selectedLPToken!.decimals\n    );\n    return (\n        <Column noTopMargin={true}>\n            <Meta label={\"My Deposit\"} text={deposit} />\n            <Meta label={\"Pending Sushi Reward\"} text={pendingSushi} />\n            <View style={{ marginTop: Spacing.normal, marginHorizontal: Spacing.small }}>\n                <Notice text={\"All pending sushi reward will be transferred to you if you withdraw.\"} />\n            </View>\n        </Column>\n    );\n};\n\nconst WithdrawControls = ({ state }: { state: FarmingState }) => {\n    const [error, setError] = useState<MetamaskError>({});\n    useAsyncEffect(() => setError({}), [state.selectedLPToken]);\n    if (state.loading) {\n        return (\n            <Column>\n                <FetchingButton />\n            </Column>\n        );\n    }\n    if (\n        !state.selectedLPToken ||\n        !state.selectedLPToken.amountDeposited ||\n        state.selectedLPToken.amountDeposited.isZero()\n    ) {\n        return <Column noTopMargin={true} />;\n    }\n    return (\n        <Column>\n            {parseBalance(state.amount, state.selectedLPToken!.decimals).gt(state.selectedLPToken.amountDeposited) ? (\n                <InsufficientBalanceButton symbol={state.selectedLPToken!.symbol} />\n            ) : (\n                <WithdrawButton state={state} onError={setError} disabled={isEmptyValue(state.amount)} />\n            )}\n            {error.message && error.code !== 4001 && <ErrorMessage error={error} />}\n        </Column>\n    );\n};\n\nconst WithdrawButton = ({\n    state,\n    onError,\n    disabled\n}: {\n    state: FarmingState;\n    onError: (e) => void;\n    disabled: boolean;\n}) => {\n    const onPress = useCallback(() => {\n        onError({});\n        state.onWithdraw().catch(onError);\n    }, [state.onWithdraw, onError]);\n    return (\n        <Button size={\"large\"} title={\"Withdraw\"} disabled={disabled} loading={state.withdrawing} onPress={onPress} />\n    );\n};\n\nexport default FarmingScreen;\n","import React, { FC, useCallback, useContext, useMemo, useState } from \"react\";\nimport { ActivityIndicator, FlatList, Image, TouchableHighlight, View } from \"react-native\";\nimport { Hoverable } from \"react-native-web-hover\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport { GlobalContext } from \"../context/GlobalContext\";\nimport useColors from \"../hooks/useColors\";\nimport Token from \"../types/Token\";\nimport { formatBalance } from \"../utils\";\nimport Border from \"./Border\";\nimport CloseIcon from \"./CloseIcon\";\nimport Column from \"./Column\";\nimport FlexView from \"./FlexView\";\nimport SelectIcon from \"./SelectIcon\";\nimport Subtitle from \"./Subtitle\";\nimport Text from \"./Text\";\n\ninterface TokenSelectProps {\n    title: string;\n    hidden: boolean;\n    symbol: string;\n    onChangeSymbol: (symbol: string) => void;\n    filterTokens: (token: Token) => boolean;\n}\n\nconst TokenSelect: FC<TokenSelectProps> = props => {\n    const { tokens } = useContext(GlobalContext);\n    const token = tokens.find(t => t.symbol === props.symbol);\n    const onSelectToken = useCallback(\n        t => {\n            props.onChangeSymbol(t.symbol);\n        },\n        [props.onChangeSymbol]\n    );\n    const onUnselectToken = useCallback(() => {\n        props.onChangeSymbol(\"\");\n    }, [props.onChangeSymbol]);\n    if (/*!props.from && props.oppositeSymbol === \"\"*/ props.hidden) {\n        return <Column noTopMargin={true} />;\n    }\n    return (\n        <Column>\n            <Subtitle text={props.title} />\n            {token ? (\n                <TokenItem token={token} selected={true} onSelectToken={onUnselectToken} />\n            ) : (\n                <TokenList filterTokens={props.filterTokens} onSelectToken={onSelectToken} />\n            )}\n        </Column>\n    );\n};\n\n// tslint:disable-next-line:max-func-body-length\nconst TokenList = (props: { filterTokens: (token: Token) => boolean; onSelectToken: (token: Token) => void }) => {\n    const { loadingTokens } = useContext(GlobalContext);\n    const { tokens } = useContext(GlobalContext);\n    const renderItem = useCallback(\n        ({ item }) => {\n            return <TokenItem key={item.address} token={item} selected={false} onSelectToken={props.onSelectToken} />;\n        },\n        [props.onSelectToken]\n    );\n    const data = useMemo(\n        () =>\n            tokens\n                .filter(props.filterTokens)\n                .sort(\n                    (t1, t2) =>\n                        (t2.balance.isZero() ? 0 : 10000000000) -\n                        (t1.balance.isZero() ? 0 : 10000000000) +\n                        t1.symbol.localeCompare(t2.symbol)\n                ),\n        [tokens]\n    );\n    return loadingTokens ? (\n        <ActivityIndicator size={\"large\"} style={{ marginTop: Spacing.large }} />\n    ) : data.length === 0 ? (\n        <EmptyList />\n    ) : (\n        <FlatList\n            keyExtractor={item => JSON.stringify(item)}\n            data={data}\n            renderItem={renderItem}\n            ItemSeparatorComponent={Border}\n        />\n    );\n};\n\nconst EmptyList = () => {\n    return (\n        <View style={{ margin: Spacing.normal }}>\n            <Text light={true} style={{ textAlign: \"center\", width: \"100%\" }}>\n                {\"You don't have any token with balance.\\nTransfer tokens to your address first.\"}\n            </Text>\n        </View>\n    );\n};\n\nconst TokenItem = (props: { token: Token; selected: boolean; onSelectToken: (token: Token) => void }) => {\n    const { background, backgroundHovered, textMedium } = useColors();\n    const [isEmpty, setIsEmpty] = useState(false);\n    const onPress = useCallback(() => {\n        props.onSelectToken(props.token);\n    }, [props.onSelectToken, props.token]);\n    const source = isEmpty ? require(\"../../assets/empty-token.png\") : { uri: props.token.logoURI };\n    return (\n        <Hoverable>\n            {({ hovered }) => (\n                <TouchableHighlight onPress={onPress}>\n                    <View style={{ backgroundColor: hovered ? backgroundHovered : background }}>\n                        <FlexView style={{ alignItems: \"center\", margin: Spacing.small }}>\n                            <Image\n                                source={source}\n                                onError={() => setIsEmpty(true)}\n                                style={{ width: 24, height: 24, backgroundColor: \"white\", borderRadius: 12 }}\n                            />\n                            <Text light={true} style={{ marginLeft: Spacing.small, fontSize: 22, color: textMedium }}>\n                                {props.token.symbol}\n                            </Text>\n                            <Text light={true} style={{ flex: 1, textAlign: \"right\", fontSize: 22, color: textMedium }}>\n                                {formatBalance(props.token.balance, props.token.decimals, 8)}\n                            </Text>\n                            {props.selected ? <CloseIcon /> : <SelectIcon />}\n                        </FlexView>\n                    </View>\n                </TouchableHighlight>\n            )}\n        </Hoverable>\n    );\n};\n\nexport default TokenSelect;\n","import React from \"react\";\n\nimport { TokenPairState } from \"../hooks/useTokenPairState\";\nimport Button from \"./Button\";\n\nconst UnsupportedButton = ({ state }: { state: TokenPairState }) => {\n    return <Button size={\"large\"} title={state.fromSymbol + \"-\" + state.toSymbol + \" Not Supported\"} disabled={true} />;\n};\n\nexport default UnsupportedButton;\n","import React, { useCallback, useState } from \"react\";\n\nimport { ethers } from \"ethers\";\nimport useAsyncEffect from \"use-async-effect\";\nimport { AddLiquidityState } from \"../hooks/useAddLiquidityState\";\nimport { ROUTER } from \"../hooks/useSDK\";\nimport MetamaskError from \"../types/MetamaskError\";\nimport { convertAmount, convertToken, formatBalance, isEmptyValue, parseBalance } from \"../utils\";\nimport ApproveButton from \"./ApproveButton\";\nimport Button from \"./Button\";\nimport Column from \"./Column\";\nimport ErrorMessage from \"./ErrorMessage\";\nimport FetchingButton from \"./FetchingButton\";\nimport InsufficientBalanceButton from \"./InsufficientBalanceButton\";\nimport Meta from \"./Meta\";\nimport Notice from \"./Notice\";\nimport Text from \"./Text\";\nimport TokenInput from \"./TokenInput\";\nimport TokenSelect from \"./TokenSelect\";\nimport UnsupportedButton from \"./UnsupportedButton\";\n\nconst AddLiquidity = ({ state }: { state: AddLiquidityState }) => (\n    <>\n        <Column>\n            <Text h4={true} style={{ textAlign: \"center\" }}>\n                🔥 Add Liquidity\n            </Text>\n        </Column>\n        <TokenSelect\n            title={\"1. Select the 1st token you want to ADD:\"}\n            hidden={false}\n            symbol={state.fromSymbol}\n            onChangeSymbol={state.setFromSymbol}\n            filterTokens={token => token.balance && !token.balance.isZero()}\n        />\n        <TokenSelect\n            title={\"2. Select the 2nd token you want to ADD:\"}\n            hidden={state.fromSymbol === \"\"}\n            symbol={state.toSymbol}\n            onChangeSymbol={state.setToSymbol}\n            filterTokens={token => token.symbol !== state.fromSymbol && token.balance && !token.balance.isZero()}\n        />\n        <FromTokenInput state={state} />\n        <ToTokenInput state={state} />\n        <PriceInfo state={state} />\n        <Controls state={state} />\n    </>\n);\n\nconst FromTokenInput = ({ state }: { state: AddLiquidityState }) => {\n    const onAmountChanged = useCallback(\n        (newAmount: string) => {\n            state.setFromAmount(newAmount);\n            if (state.pair && state.fromToken) {\n                const fromPrice = state.pair.priceOf(convertToken(state.fromToken));\n                state.setToAmount(fromPrice.quote(convertAmount(state.fromToken, newAmount)).toExact());\n            }\n        },\n        [state.pair, state.fromToken]\n    );\n    return (\n        <TokenInput\n            title={\"3. How many \" + state.fromSymbol + \"-\" + state.toSymbol + \" do you want to supply?\"}\n            token={state.fromToken}\n            hidden={!state.fromToken || !state.toToken}\n            amount={state.fromAmount}\n            onAmountChanged={onAmountChanged}\n        />\n    );\n};\n\nconst ToTokenInput = ({ state }: { state: AddLiquidityState }) => {\n    const onAmountChanged = useCallback(\n        (newAmount: string) => {\n            state.setToAmount(newAmount);\n            if (state.pair && state.toToken) {\n                const toPrice = state.pair.priceOf(convertToken(state.toToken));\n                state.setFromAmount(toPrice.quote(convertAmount(state.toToken, newAmount)).toExact());\n            }\n        },\n        [state.pair, state.toToken]\n    );\n    return (\n        <TokenInput\n            token={state.toToken}\n            hidden={!state.fromToken || !state.toToken}\n            amount={state.toAmount}\n            onAmountChanged={onAmountChanged}\n        />\n    );\n};\n\nconst PriceInfo = ({ state }: { state: AddLiquidityState }) => {\n    if (!isEmptyValue(state.fromAmount) && !state.loading && !state.pair) {\n        const initialPrice = formatBalance(\n            parseBalance(state.toAmount, state.toToken?.decimals)\n                .mul(ethers.BigNumber.from(10).pow(8))\n                .div(parseBalance(state.fromAmount, state.fromToken?.decimals)),\n            8\n        );\n        return (\n            <Column noTopMargin={true}>\n                <Notice\n                    text={\n                        \"You are the first liquidity provider.\\n\" +\n                        \"The ratio of tokens you add will set the price of this pool.\"\n                    }\n                />\n                {!!state.fromAmount && !!state.toAmount && (\n                    <Price price={initialPrice} fromSymbol={state.fromSymbol} toSymbol={state.toSymbol} />\n                )}\n            </Column>\n        );\n    }\n    if (!state.fromToken || !state.toToken) {\n        return <Column noTopMargin={true} />;\n    }\n    const price = state.pair ? state.pair.priceOf(convertToken(state.fromToken)).toSignificant(8) : \"…\";\n    return (\n        <Column noTopMargin={true}>\n            <Price price={price} fromSymbol={state.fromSymbol} toSymbol={state.toSymbol} />\n        </Column>\n    );\n};\n\nconst Price = ({ price, fromSymbol, toSymbol }) => (\n    <Meta label={\"Price\"} text={price + \" \" + toSymbol + \" = 1 \" + fromSymbol} />\n);\n\n// tslint:disable-next-line:max-func-body-length\nconst Controls = ({ state }: { state: AddLiquidityState }) => {\n    const [error, setError] = useState<MetamaskError>({});\n    useAsyncEffect(() => setError({}), [state.fromSymbol, state.toSymbol, state.fromAmount]);\n    if (!state.fromToken || !state.toToken) {\n        return <Column noTopMargin={true} />;\n    }\n    const insufficientFromToken = parseBalance(state.fromAmount, state.fromToken.decimals).gt(state.fromToken.balance);\n    const insufficientToToken = parseBalance(state.toAmount, state.toToken.decimals).gt(state.toToken.balance);\n    const fromApproveRequired = state.fromSymbol !== \"ETH\" && !state.fromTokenAllowed;\n    const toApproveRequired = state.toSymbol !== \"ETH\" && !state.toTokenAllowed;\n    const disabled =\n        fromApproveRequired || toApproveRequired || isEmptyValue(state.fromAmount) || isEmptyValue(state.toAmount);\n    return (\n        <Column>\n            {insufficientFromToken ? (\n                <InsufficientBalanceButton symbol={state.fromSymbol} />\n            ) : insufficientToToken ? (\n                <InsufficientBalanceButton symbol={state.toSymbol} />\n            ) : state.loading || !state.pair ? (\n                <FetchingButton />\n            ) : (state.fromSymbol === \"ETH\" && state.toSymbol === \"WETH\") ||\n              (state.fromSymbol === \"WETH\" && state.toSymbol === \"ETH\") ? (\n                <UnsupportedButton state={state} />\n            ) : (\n                <>\n                    <ApproveButton\n                        token={state.fromToken}\n                        spender={ROUTER}\n                        onSuccess={() => state.setFromTokenAllowed(true)}\n                        onError={setError}\n                        hidden={!fromApproveRequired}\n                    />\n                    <ApproveButton\n                        token={state.toToken}\n                        spender={ROUTER}\n                        onSuccess={() => state.setToTokenAllowed(true)}\n                        onError={setError}\n                        hidden={!toApproveRequired}\n                    />\n                    <SupplyButton state={state} onError={setError} disabled={disabled} />\n                </>\n            )}\n            {error.message && error.code !== 4001 && <ErrorMessage error={error} />}\n        </Column>\n    );\n};\n\nconst SupplyButton = ({\n    state,\n    onError,\n    disabled\n}: {\n    state: AddLiquidityState;\n    onError: (e) => void;\n    disabled: boolean;\n}) => {\n    const onPress = useCallback(() => {\n        onError({});\n        state.onAdd().catch(onError);\n    }, [state.onAdd, onError]);\n    return (\n        <Button\n            size={\"large\"}\n            title={\"Supply \" + state.fromSymbol + \"-\" + state.toSymbol}\n            disabled={disabled}\n            loading={state.adding}\n            onPress={onPress}\n        />\n    );\n};\n\nexport default AddLiquidity;\n","import React, { FC, useCallback, useState } from \"react\";\nimport { Image, TouchableHighlight, View } from \"react-native\";\nimport { Hoverable } from \"react-native-web-hover\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport { formatBalance } from \"../utils\";\nimport CloseIcon from \"./CloseIcon\";\nimport FlexView from \"./FlexView\";\nimport { LPTokenItemProps } from \"./LPTokenSelect\";\nimport SelectIcon from \"./SelectIcon\";\nimport Text from \"./Text\";\n\nconst LPTokenItem: FC<LPTokenItemProps> = props => {\n    const { background, backgroundHovered, textMedium } = useColors();\n    const balance = formatBalance(props.token.balance, props.token.decimals, 18);\n    const onPress = useCallback(() => {\n        props.onSelectToken(props.token);\n    }, [props.onSelectToken, props.token]);\n    return (\n        <Hoverable>\n            {({ hovered }) => (\n                <TouchableHighlight onPress={onPress}>\n                    <View style={{ backgroundColor: hovered ? backgroundHovered : background }}>\n                        <FlexView style={{ alignItems: \"center\", margin: Spacing.small }}>\n                            <View>\n                                <LogoSymbol token={props.token.tokenA} />\n                                <LogoSymbol token={props.token.tokenB} />\n                            </View>\n                            <View style={{ flex: 1 }}>\n                                <Text note={true} style={{ textAlign: \"right\" }}>\n                                    My Balance\n                                </Text>\n                                <Text light={true} style={{ textAlign: \"right\", fontSize: 22, color: textMedium }}>\n                                    {balance}\n                                </Text>\n                            </View>\n                            {props.selected ? <CloseIcon /> : <SelectIcon />}\n                        </FlexView>\n                    </View>\n                </TouchableHighlight>\n            )}\n        </Hoverable>\n    );\n};\n\nconst LogoSymbol = ({ token }) => {\n    const { textMedium } = useColors();\n    const [isEmpty, setIsEmpty] = useState(false);\n    const source = isEmpty ? require(\"../../assets/empty-token.png\") : { uri: token.logoURI };\n    return (\n        <FlexView style={{ alignItems: \"center\", marginBottom: Spacing.tiny }}>\n            <Image\n                source={source}\n                onError={() => setIsEmpty(true)}\n                style={{ width: 24, height: 24, backgroundColor: \"white\", borderRadius: 12 }}\n            />\n            <Text light={true} style={{ fontSize: 22, color: textMedium, marginLeft: Spacing.small }}>\n                {token.symbol.replace(/\\+/g, \"+\\n\")}\n            </Text>\n        </FlexView>\n    );\n};\n\nexport default LPTokenItem;\n","import React, { useCallback, useState } from \"react\";\nimport { Icon } from \"react-native-elements\";\n\nimport useAsyncEffect from \"use-async-effect\";\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport { RemoveLiquidityState } from \"../hooks/useRemoveLiquidityState\";\nimport { ROUTER } from \"../hooks/useSDK\";\nimport MetamaskError from \"../types/MetamaskError\";\nimport { isEmptyValue, parseBalance } from \"../utils\";\nimport ApproveButton from \"./ApproveButton\";\nimport Button from \"./Button\";\nimport Column from \"./Column\";\nimport ErrorMessage from \"./ErrorMessage\";\nimport FetchingButton from \"./FetchingButton\";\nimport InsufficientBalanceButton from \"./InsufficientBalanceButton\";\nimport LPTokenItem from \"./LPTokenItem\";\nimport LPTokenSelect from \"./LPTokenSelect\";\nimport Text from \"./Text\";\nimport TokenInput from \"./TokenInput\";\n\nconst RemoveLiquidity = ({ state }: { state: RemoveLiquidityState }) => (\n    <>\n        <Column>\n            <Text h4={true} style={{ textAlign: \"center\" }}>\n                🎉 Remove Liquidity\n            </Text>\n        </Column>\n        <LPTokenSelect\n            state={state}\n            title={\"1. Select the pool to REMOVE liquidity from:\"}\n            emptyText={\"You don't have any liquidity.\"}\n            Item={LPTokenItem}\n        />\n        <TokenInput\n            title={\"2. How many tokens do you want to REMOVE?\"}\n            token={state.selectedLPToken}\n            hidden={!state.selectedLPToken}\n            amount={state.amount}\n            onAmountChanged={state.setAmount}\n        />\n        <AmountInfo state={state} />\n        <Controls state={state} />\n    </>\n);\n\nconst AmountInfo = ({ state }: { state: RemoveLiquidityState }) => {\n    if (!state.selectedLPToken || isEmptyValue(state.fromAmount) || isEmptyValue(state.toAmount)) {\n        return <Column noTopMargin={true} />;\n    }\n    return (\n        <Column noTopMargin={true}>\n            <ArrowDown />\n            <Amount amount={state.fromAmount} token={state.fromToken} />\n            <Amount amount={state.toAmount} token={state.toToken} />\n        </Column>\n    );\n};\n\nconst ArrowDown = () => {\n    const { textLight } = useColors();\n    return <Icon type={\"material-community\"} name={\"arrow-down\"} color={textLight} style={{ margin: Spacing.small }} />;\n};\n\nconst Amount = ({ amount, token }) => {\n    const symbol = token.symbol === \"WETH\" ? \"ETH\" : token.symbol;\n    return (\n        <Text style={{ fontSize: 22, textAlign: \"center\" }}>\n            {amount} {symbol}\n        </Text>\n    );\n};\n// tslint:disable-next-line:max-func-body-length\nconst Controls = ({ state }: { state: RemoveLiquidityState }) => {\n    const [error, setError] = useState<MetamaskError>({});\n    useAsyncEffect(() => setError({}), [state.fromSymbol, state.toSymbol, state.fromAmount]);\n    if (!state.selectedLPToken) {\n        return <Column noTopMargin={true} />;\n    }\n    const approveRequired = !state.selectedLPTokenAllowed;\n    const disabled = approveRequired || isEmptyValue(state.amount);\n    return (\n        <Column>\n            {parseBalance(state.amount, state.selectedLPToken.decimals).gt(state.selectedLPToken.balance) ? (\n                <InsufficientBalanceButton symbol={state.selectedLPToken.symbol} />\n            ) : state.loading || !state.pair ? (\n                <FetchingButton />\n            ) : (\n                <>\n                    <ApproveButton\n                        token={state.selectedLPToken}\n                        spender={ROUTER}\n                        onSuccess={() => state.setSelectedLPTokenAllowed(true)}\n                        onError={setError}\n                        hidden={!approveRequired}\n                    />\n                    <RemoveButton state={state} onError={setError} disabled={disabled} />\n                </>\n            )}\n            {error.message && error.code !== 4001 && <ErrorMessage error={error} />}\n        </Column>\n    );\n};\n\nconst RemoveButton = ({\n    state,\n    onError,\n    disabled\n}: {\n    state: RemoveLiquidityState;\n    onError: (e) => void;\n    disabled: boolean;\n}) => {\n    const onPress = useCallback(() => {\n        onError({});\n        state.onRemove().catch(onError);\n    }, [state.onRemove, onError]);\n    return <Button size={\"large\"} title={\"Remove\"} disabled={disabled} loading={state.removing} onPress={onPress} />;\n};\n\nexport default RemoveLiquidity;\n","import { useCallback, useContext, useState } from \"react\";\n\nimport { EthersContext } from \"../context/EthersContext\";\nimport { GlobalContext } from \"../context/GlobalContext\";\nimport { parseBalance } from \"../utils\";\nimport useLiquidityState, { LiquidityState } from \"./useLiquidityState\";\nimport useSDK from \"./useSDK\";\n\nexport interface AddLiquidityState extends LiquidityState {\n    onAdd: () => Promise<void>;\n    adding: boolean;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst useAddLiquidityState: () => AddLiquidityState = () => {\n    const state = useLiquidityState();\n    const { signer } = useContext(EthersContext);\n    const { updateTokens } = useContext(GlobalContext);\n    const [adding, setAdding] = useState(false);\n    const { addLiquidity, addLiquidityETH } = useSDK();\n\n    const onAdd = useCallback(async () => {\n        if (state.fromToken && state.toToken && state.fromAmount && state.toAmount && signer) {\n            setAdding(true);\n            try {\n                const fromAmount = parseBalance(state.fromAmount, state.fromToken.decimals);\n                const toAmount = parseBalance(state.toAmount, state.toToken.decimals);\n                if (state.fromSymbol === \"ETH\" || state.toSymbol === \"ETH\") {\n                    const [token, amount, amountETH] =\n                        state.fromSymbol === \"ETH\"\n                            ? [state.toToken, toAmount, fromAmount]\n                            : [state.fromToken, fromAmount, toAmount];\n                    const tx = await addLiquidityETH(token, amount, amountETH);\n                    await tx.wait();\n                } else {\n                    const tx = await addLiquidity(state.fromToken, state.toToken, fromAmount, toAmount);\n                    await tx.wait();\n                }\n                await updateTokens();\n                state.setFromSymbol(\"\");\n            } finally {\n                setAdding(false);\n            }\n        }\n    }, [state.fromToken, state.toToken, state.fromAmount, state.toAmount, signer, updateTokens]);\n\n    return {\n        ...state,\n        onAdd,\n        adding\n    };\n};\n\nexport default useAddLiquidityState;\n","import { useCallback, useContext, useState } from \"react\";\n\nimport { ethers } from \"ethers\";\nimport useAsyncEffect from \"use-async-effect\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport { GlobalContext } from \"../context/GlobalContext\";\nimport { convertToken, formatBalance, parseBalance, parseCurrencyAmount } from \"../utils\";\nimport useLPTokensState, { LPTokensState } from \"./useLPTokensState\";\nimport useSDK, { ROUTER } from \"./useSDK\";\n\nexport interface RemoveLiquidityState extends LPTokensState {\n    onRemove: () => Promise<void>;\n    removing: boolean;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst useRemoveLiquidityState: () => RemoveLiquidityState = () => {\n    const state = useLPTokensState(\"my-lp-tokens\");\n    const { provider, signer, getTokenAllowance } = useContext(EthersContext);\n    const { updateTokens } = useContext(GlobalContext);\n    const { removeLiquidity, removeLiquidityETH } = useSDK();\n    const [loading, setLoading] = useState(false);\n    const [removing, setRemoving] = useState(false);\n\n    useAsyncEffect(async () => {\n        if (provider && signer && state.selectedLPToken) {\n            state.setFromSymbol(state.selectedLPToken.tokenA.symbol);\n            state.setToSymbol(state.selectedLPToken.tokenB.symbol);\n\n            setLoading(true);\n            state.setSelectedLPTokenAllowed(false);\n            try {\n                const minAllowance = ethers.BigNumber.from(2)\n                    .pow(96)\n                    .sub(1);\n                const allowance = await getTokenAllowance(state.selectedLPToken.address, ROUTER);\n                state.setSelectedLPTokenAllowed(ethers.BigNumber.from(allowance).gte(minAllowance));\n            } finally {\n                setLoading(false);\n            }\n        }\n    }, [provider, signer, state.selectedLPToken]);\n\n    // tslint:disable-next-line:max-func-body-length\n    useAsyncEffect(async () => {\n        if (\n            state.selectedLPToken &&\n            state.selectedLPToken.totalSupply &&\n            state.pair &&\n            state.fromToken &&\n            state.toToken\n        ) {\n            if (state.pair.liquidityToken.address === state.selectedLPToken.address) {\n                const fromReserve = parseCurrencyAmount(\n                    state.pair.reserveOf(convertToken(state.fromToken)),\n                    state.fromToken.decimals\n                );\n                const toReserve = parseCurrencyAmount(\n                    state.pair.reserveOf(convertToken(state.toToken)),\n                    state.toToken.decimals\n                );\n                state.setFromAmount(\n                    formatBalance(\n                        parseBalance(state.amount, state.selectedLPToken.decimals)\n                            .mul(fromReserve)\n                            .div(state.selectedLPToken.totalSupply)\n                            .toString(),\n                        state.selectedLPToken.tokenA.decimals\n                    )\n                );\n                state.setToAmount(\n                    formatBalance(\n                        parseBalance(state.amount, state.selectedLPToken.decimals)\n                            .mul(toReserve)\n                            .div(state.selectedLPToken.totalSupply)\n                            .toString(),\n                        state.selectedLPToken.tokenB.decimals\n                    )\n                );\n            }\n        }\n    }, [state.selectedLPToken, state.amount, state.pair, state.fromToken, state.toToken, signer]);\n\n    const onRemove = useCallback(async () => {\n        if (state.fromAmount && state.toAmount && state.selectedLPToken && state.amount && signer) {\n            setRemoving(true);\n            try {\n                const fromAmount = parseBalance(state.fromAmount, state.fromToken!.decimals);\n                const toAmount = parseBalance(state.toAmount, state.toToken!.decimals);\n                const liquidity = parseBalance(state.amount, state.selectedLPToken.decimals);\n                if (state.fromSymbol === \"WETH\" || state.toSymbol === \"WETH\") {\n                    const [token, amountToRemove, amountToRemoveETH] =\n                        state.fromSymbol === \"WETH\"\n                            ? [state.toToken!, toAmount, fromAmount]\n                            : [state.fromToken!, fromAmount, toAmount];\n                    const tx = await removeLiquidityETH(token, liquidity, amountToRemove, amountToRemoveETH);\n                    await tx.wait();\n                } else {\n                    const tx = await removeLiquidity(state.fromToken!, state.toToken!, liquidity, fromAmount, toAmount);\n                    await tx.wait();\n                }\n                await updateTokens();\n                state.setSelectedLPToken(undefined);\n            } finally {\n                setRemoving(false);\n            }\n        }\n    }, [state.fromAmount, state.toAmount, state.selectedLPToken, state.amount, signer, updateTokens]);\n\n    return {\n        ...state,\n        loading: state.loading || loading,\n        onRemove,\n        removing\n    };\n};\n\nexport default useRemoveLiquidityState;\n","import React from \"react\";\nimport { View } from \"react-native\";\n\nimport AddLiquidity from \"../components/AddLiquidity\";\nimport Column from \"../components/Column\";\nimport Container from \"../components/Container\";\nimport Content from \"../components/Content\";\nimport FlexView from \"../components/FlexView\";\nimport RemoveLiquidity from \"../components/RemoveLiquidity\";\nimport Text from \"../components/Text\";\nimport { Spacing } from \"../constants/dimension\";\nimport useAddLiquidityState from \"../hooks/useAddLiquidityState\";\nimport useColors from \"../hooks/useColors\";\nimport useRemoveLiquidityState from \"../hooks/useRemoveLiquidityState\";\nimport Screen from \"./Screen\";\n\nconst LiquidityScreen = () => {\n    const addLiquidityState = useAddLiquidityState();\n    const removeLiquidityState = useRemoveLiquidityState();\n    return (\n        <Screen>\n            <Container>\n                <Content>\n                    <View style={{ alignItems: \"center\", marginBottom: Spacing.huge * 2 }}>\n                        {!removeLiquidityState.selectedLPToken && <AddLiquidity state={addLiquidityState} />}\n                        {!removeLiquidityState.selectedLPToken && <OR />}\n                        <RemoveLiquidity state={removeLiquidityState} />\n                    </View>\n                </Content>\n            </Container>\n        </Screen>\n    );\n};\n\nconst OR = () => {\n    const { background } = useColors();\n    return (\n        <Column>\n            <FlexView\n                style={{\n                    width: \"100%\",\n                    paddingHorizontal: Spacing.small,\n                    paddingVertical: Spacing.huge,\n                    alignItems: \"center\"\n                }}>\n                <Line />\n                <Text h4={true} light={true} style={{ paddingHorizontal: Spacing.small, backgroundColor: background }}>\n                    or\n                </Text>\n                <Line />\n            </FlexView>\n        </Column>\n    );\n};\n\nconst Line = () => {\n    const { border } = useColors();\n    return <View style={{ height: 1, flex: 1, backgroundColor: border }} />;\n};\n\nexport default LiquidityScreen;\n","import { useCallback, useContext, useState } from \"react\";\n\nimport { ethers } from \"ethers\";\nimport useAsyncEffect from \"use-async-effect\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport { GlobalContext } from \"../context/GlobalContext\";\nimport { parseBalance } from \"../utils\";\nimport useLPTokensState, { LPTokensState } from \"./useLPTokensState\";\nimport useSDK, { MIGRATOR2 } from \"./useSDK\";\n\nexport interface MigrateState extends LPTokensState {\n    onMigrate: () => Promise<void>;\n    migrating: boolean;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst useMigrateState: () => MigrateState = () => {\n    const state = useLPTokensState(\"my-uniswap-lp-tokens\");\n    const { provider, signer, getTokenAllowance } = useContext(EthersContext);\n    const { updateTokens } = useContext(GlobalContext);\n    const { migrate } = useSDK();\n    const [loading, setLoading] = useState(false);\n    const [migrating, setMigrating] = useState(false);\n\n    useAsyncEffect(async () => {\n        if (provider && signer && state.selectedLPToken) {\n            setLoading(true);\n            state.setSelectedLPTokenAllowed(false);\n            try {\n                const minAllowance = ethers.BigNumber.from(2)\n                    .pow(96)\n                    .sub(1);\n                const allowance = await getTokenAllowance(state.selectedLPToken.address, MIGRATOR2);\n                state.setSelectedLPTokenAllowed(ethers.BigNumber.from(allowance).gte(minAllowance));\n            } finally {\n                setLoading(false);\n            }\n        }\n    }, [provider, signer, state.selectedLPToken]);\n\n    const onMigrate = useCallback(async () => {\n        if (state.selectedLPToken && state.amount && signer) {\n            setMigrating(true);\n            try {\n                const amount = parseBalance(state.amount, state.selectedLPToken.decimals);\n                const tx = await migrate(state.selectedLPToken, amount);\n                await tx.wait();\n                await updateTokens();\n                state.setSelectedLPToken(undefined);\n            } finally {\n                setMigrating(false);\n            }\n        }\n    }, [state.selectedLPToken, state.amount, signer, updateTokens]);\n\n    return {\n        ...state,\n        loading: state.loading || loading,\n        onMigrate,\n        migrating\n    };\n};\n\nexport default useMigrateState;\n","import React, { useCallback, useState } from \"react\";\nimport { View } from \"react-native\";\n\nimport useAsyncEffect from \"use-async-effect\";\nimport ApproveButton from \"../components/ApproveButton\";\nimport Button from \"../components/Button\";\nimport Column from \"../components/Column\";\nimport Container from \"../components/Container\";\nimport Content from \"../components/Content\";\nimport ErrorMessage from \"../components/ErrorMessage\";\nimport FetchingButton from \"../components/FetchingButton\";\nimport InsufficientBalanceButton from \"../components/InsufficientBalanceButton\";\nimport LPTokenItem from \"../components/LPTokenItem\";\nimport LPTokenSelect from \"../components/LPTokenSelect\";\nimport Notice from \"../components/Notice\";\nimport Text from \"../components/Text\";\nimport TokenInput from \"../components/TokenInput\";\nimport { Spacing } from \"../constants/dimension\";\nimport useMigrateState, { MigrateState } from \"../hooks/useMigrateState\";\nimport { MIGRATOR2 } from \"../hooks/useSDK\";\nimport MetamaskError from \"../types/MetamaskError\";\nimport { isEmptyValue, parseBalance } from \"../utils\";\nimport Screen from \"./Screen\";\n\nconst MigrateScreen = () => {\n    return (\n        <Screen>\n            <Container>\n                <Content>\n                    <Migrate />\n                </Content>\n            </Container>\n        </Screen>\n    );\n};\n\nconst Migrate = () => {\n    const state = useMigrateState();\n    return (\n        <View style={{ alignItems: \"center\", marginBottom: Spacing.huge * 2 }}>\n            <Column>\n                <Text h4={true} style={{ textAlign: \"center\", marginBottom: Spacing.normal }}>\n                    🦄️ Migrate from Uniswap\n                </Text>\n                <Notice\n                    text={\n                        \"This is an experimental feature that is using an unaudited contract: https://github.com/lev-x/sushiswap-core/blob/master/contracts/Migrator2.sol. Read the contract and use it with caution.\"\n                    }\n                    color={\"orange\"}\n                />\n                <LPTokenSelect\n                    state={state}\n                    title={\"1. Select a uniswap pool to MIGRATE from:\"}\n                    emptyText={\"You don't have any liquidity on uniswap.\"}\n                    Item={LPTokenItem}\n                />\n                <TokenInput\n                    title={\"2. How many tokens would you MIGRATE?\"}\n                    token={state.selectedLPToken}\n                    hidden={!state.selectedLPToken}\n                    amount={state.amount}\n                    onAmountChanged={state.setAmount}\n                />\n                <Controls state={state} />\n            </Column>\n        </View>\n    );\n};\n\nconst Controls = ({ state }: { state: MigrateState }) => {\n    const [error, setError] = useState<MetamaskError>({});\n    useAsyncEffect(() => setError({}), [state.amount]);\n    if (!state.selectedLPToken || isEmptyValue(state.amount)) return <Column noTopMargin={true} />;\n    return (\n        <Column>\n            {parseBalance(state.amount, state.selectedLPToken.decimals).gt(state.selectedLPToken.balance) ? (\n                <InsufficientBalanceButton symbol={state.selectedLPToken.symbol} />\n            ) : state.loading ? (\n                <FetchingButton />\n            ) : (\n                <>\n                    <ApproveButton\n                        token={state.selectedLPToken}\n                        spender={MIGRATOR2}\n                        onSuccess={() => state.setSelectedLPTokenAllowed(true)}\n                        onError={setError}\n                        hidden={state.selectedLPTokenAllowed}\n                    />\n                    <MigrateButton state={state} onError={setError} disabled={!state.selectedLPTokenAllowed} />\n                </>\n            )}\n            {error.message && error.code !== 4001 && <ErrorMessage error={error} />}\n        </Column>\n    );\n};\n\nconst MigrateButton = ({\n    state,\n    onError,\n    disabled\n}: {\n    state: MigrateState;\n    onError: (e) => void;\n    disabled: boolean;\n}) => {\n    const onPress = useCallback(async () => {\n        onError({});\n        try {\n            await state.onMigrate();\n        } catch (e) {\n            onError(e);\n        }\n    }, []);\n    return <Button size={\"large\"} title={\"Migrate\"} loading={state.migrating} onPress={onPress} disabled={disabled} />;\n};\n\nexport default MigrateScreen;\n","import { useCallback, useContext, useEffect, useState } from \"react\";\n\nimport { ethers } from \"ethers\";\nimport useAsyncEffect from \"use-async-effect\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport { GlobalContext } from \"../context/GlobalContext\";\nimport Token from \"../types/Token\";\nimport { getContract, parseBalance } from \"../utils\";\nimport useSDK, { SUSHI_BAR } from \"./useSDK\";\n\nexport type Action = \"enter\" | \"leave\";\n\nexport interface StakingState {\n    action?: Action;\n    setAction: (action?: Action) => void;\n    sushi?: Token;\n    xSushi?: Token;\n    sushiStaked?: ethers.BigNumber;\n    sushiSupply?: ethers.BigNumber;\n    xSushiSupply?: ethers.BigNumber;\n    amount: string;\n    setAmount: (amount: string) => void;\n    sushiAllowed: boolean;\n    setSushiAllowed: (allowed: boolean) => void;\n    xSushiAllowed: boolean;\n    setXSushiAllowed: (allowed: boolean) => void;\n    loading: boolean;\n    onEnter: () => Promise<void>;\n    entering: boolean;\n    onLeave: () => Promise<void>;\n    leaving: boolean;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst useStakingState: () => StakingState = () => {\n    const { tokens, updateTokens } = useContext(GlobalContext);\n    const { provider, signer, address, getTokenAllowance } = useContext(EthersContext);\n    const { enterSushiBar, leaveSushiBar } = useSDK();\n    const [action, setAction] = useState<Action>();\n    const [sushiStaked, setSushiStaked] = useState<ethers.BigNumber>();\n    const [sushiSupply, setSushiSupply] = useState<ethers.BigNumber>();\n    const [xSushiSupply, setXSushiSupply] = useState<ethers.BigNumber>();\n    const [amount, setAmount] = useState(\"\");\n    const [sushiAllowed, setSushiAllowed] = useState(false);\n    const [xSushiAllowed, setXSushiAllowed] = useState(false);\n    const [loading, setLoading] = useState(false);\n    const [entering, setEntering] = useState(false);\n    const [leaving, setLeaving] = useState(false);\n\n    const sushi = tokens.find(token => token.symbol === \"SUSHI\");\n    const xSushi = tokens.find(token => token.symbol === \"xSUSHI\");\n\n    useEffect(() => {\n        setAmount(\"\");\n    }, [address, action]);\n\n    useAsyncEffect(async () => {\n        if (sushi && xSushi && provider && signer) {\n            setSushiAllowed(false);\n            setXSushiAllowed(false);\n            setLoading(true);\n            try {\n                const minAllowance = ethers.BigNumber.from(2)\n                    .pow(96)\n                    .sub(1);\n                const sushiAllowance = await getTokenAllowance(sushi.address, SUSHI_BAR);\n                setSushiAllowed(ethers.BigNumber.from(sushiAllowance).gte(minAllowance));\n                const xSushiAllowance = await getTokenAllowance(xSushi.address, SUSHI_BAR);\n                setXSushiAllowed(ethers.BigNumber.from(xSushiAllowance).gte(minAllowance));\n\n                const sushiContract = getContract(\"ERC20\", sushi.address, signer);\n                setSushiStaked(await sushiContract.balanceOf(SUSHI_BAR));\n                setSushiSupply(await sushiContract.totalSupply());\n                const xSushiContract = getContract(\"ERC20\", xSushi.address, signer);\n                setXSushiSupply(await xSushiContract.totalSupply());\n            } finally {\n                setLoading(false);\n            }\n        }\n    }, [sushi, xSushi, provider, signer]);\n\n    const onEnter = useCallback(async () => {\n        if (amount && signer) {\n            setEntering(true);\n            try {\n                const tx = await enterSushiBar(parseBalance(amount));\n                if (tx) {\n                    await tx.wait();\n                    await updateTokens();\n                    setAmount(\"\");\n                }\n            } finally {\n                setEntering(false);\n            }\n        }\n    }, [amount, signer]);\n\n    const onLeave = useCallback(async () => {\n        if (amount && signer) {\n            setLeaving(true);\n            try {\n                const tx = await leaveSushiBar(parseBalance(amount));\n                if (tx) {\n                    await tx.wait();\n                    await updateTokens();\n                    setAmount(\"\");\n                }\n            } finally {\n                setLeaving(false);\n            }\n        }\n    }, [amount, signer]);\n\n    return {\n        action,\n        setAction,\n        sushi,\n        xSushi,\n        sushiStaked,\n        sushiSupply,\n        xSushiSupply,\n        amount,\n        setAmount,\n        sushiAllowed,\n        setSushiAllowed,\n        xSushiAllowed,\n        setXSushiAllowed,\n        loading,\n        onEnter,\n        entering,\n        onLeave,\n        leaving\n    };\n};\n\nexport default useStakingState;\n","import React, { useCallback, useState } from \"react\";\nimport { ActivityIndicator, View } from \"react-native\";\nimport { Icon } from \"react-native-elements\";\n\nimport { ethers } from \"ethers\";\nimport useAsyncEffect from \"use-async-effect\";\nimport ApproveButton from \"../components/ApproveButton\";\nimport Button from \"../components/Button\";\nimport ButtonGroup from \"../components/ButtonGroup\";\nimport Column from \"../components/Column\";\nimport Container from \"../components/Container\";\nimport Content from \"../components/Content\";\nimport ErrorMessage from \"../components/ErrorMessage\";\nimport FetchingButton from \"../components/FetchingButton\";\nimport FlexView from \"../components/FlexView\";\nimport InsufficientBalanceButton from \"../components/InsufficientBalanceButton\";\nimport Meta from \"../components/Meta\";\nimport Notice from \"../components/Notice\";\nimport Subtitle from \"../components/Subtitle\";\nimport Text from \"../components/Text\";\nimport TokenInput from \"../components/TokenInput\";\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport { SUSHI_BAR } from \"../hooks/useSDK\";\nimport useStakingState, { Action, StakingState } from \"../hooks/useStakingState\";\nimport MetamaskError from \"../types/MetamaskError\";\nimport { formatBalance, isEmptyValue, parseBalance } from \"../utils\";\nimport Screen from \"./Screen\";\n\nconst Actions = [\"enter\", \"leave\"];\n\nconst StakingScreen = () => {\n    return (\n        <Screen>\n            <Container>\n                <Content>\n                    <Staking />\n                </Content>\n            </Container>\n        </Screen>\n    );\n};\n\nconst Staking = () => {\n    const state = useStakingState();\n    return (\n        <View style={{ alignItems: \"center\", marginBottom: Spacing.huge * 2 }}>\n            <Column>\n                <Text h4={true} style={{ textAlign: \"center\" }}>\n                    💰 Staking\n                </Text>\n            </Column>\n            <ActionSelect state={state} />\n            {state.action === \"enter\" && state.sushi && state.sushi.balance.isZero() && <NoSushiNotice />}\n            {state.action === \"leave\" && state.xSushi && state.xSushi.balance.isZero() && <NoXSushiNotice />}\n            <TokenInput\n                title={\"2. How many SUSHI do you want to STAKE?\"}\n                token={state.sushi}\n                hidden={state.action !== \"enter\" || !state.sushi || state.sushi.balance.isZero()}\n                amount={state.amount}\n                onAmountChanged={state.setAmount}\n            />\n            <TokenInput\n                title={\"2. How many xSUSHI do you want to UNSTAKE?\"}\n                token={state.xSushi}\n                hidden={state.action !== \"leave\" || !state.xSushi || state.xSushi.balance.isZero()}\n                amount={state.amount}\n                onAmountChanged={state.setAmount}\n            />\n            <StakeInfo state={state} />\n            <Controls state={state} />\n        </View>\n    );\n};\n\nconst ActionSelect = ({ state }: { state: StakingState }) => {\n    if (!state.sushi || !state.xSushi || !state.sushiStaked || !state.xSushiSupply) {\n        return (\n            <Column noTopMargin={true}>\n                <ActivityIndicator size={\"large\"} style={{ marginTop: Spacing.large }} />\n            </Column>\n        );\n    }\n    const index = state.action ? Actions.indexOf(state.action) : null;\n    const onPress = useCallback((i: number) => {\n        state.setAction(Actions[i] as Action);\n    }, []);\n    return (\n        <Column>\n            <Subtitle text={\"1. Do you want to STAKE or UNSTAKE?\"} />\n            <View style={{ marginHorizontal: Spacing.small, marginBottom: Spacing.normal }}>\n                <Meta label={\"Total SUSHI Staked\"} text={formatBalance(state.sushiStaked, state.sushi.decimals)} />\n                <Meta label={\"My SUSHI Balance\"} text={formatBalance(state.sushi.balance, state.sushi.decimals)} />\n                <Line />\n                <Meta label={\"Total xSUSHI Supply\"} text={formatBalance(state.xSushiSupply, state.xSushi.decimals)} />\n                <Meta label={\"My xSUSHI Balance\"} text={formatBalance(state.xSushi.balance, state.xSushi.decimals)} />\n            </View>\n            <ButtonGroup\n                selectedIndex={index}\n                onPress={onPress}\n                buttons={[{ element: StakeText }, { element: UnstakeText }]}\n                containerStyle={{ marginHorizontal: Spacing.small }}\n            />\n        </Column>\n    );\n};\n\nconst Line = () => {\n    const { border } = useColors();\n    return (\n        <View style={{ width: \"100%\", paddingHorizontal: Spacing.small }}>\n            <View\n                style={{\n                    height: 1,\n                    width: \"100%\",\n                    marginTop: Spacing.small,\n                    marginBottom: Spacing.tiny,\n                    backgroundColor: border\n                }}\n            />\n        </View>\n    );\n};\n\nconst StakeText = () => {\n    return (\n        <FlexView style={{ alignItems: \"center\" }}>\n            <Text style={{ color: \"black\" }}>Stake SUSHI</Text>\n            <Icon\n                type={\"material-community\"}\n                name={\"chevron-right\"}\n                color={\"black\"}\n                style={{ marginLeft: Spacing.tiny }}\n            />\n        </FlexView>\n    );\n};\n\nconst UnstakeText = () => {\n    return (\n        <FlexView style={{ alignItems: \"center\" }}>\n            <Text style={{ color: \"black\" }}>Unstake xSUSHI</Text>\n            <Icon\n                type={\"material-community\"}\n                name={\"chevron-right\"}\n                color={\"black\"}\n                style={{ marginLeft: Spacing.tiny }}\n            />\n        </FlexView>\n    );\n};\n\nconst NoSushiNotice = () => {\n    return (\n        <Column noTopMargin={true} style={{ padding: Spacing.small, marginTop: Spacing.small }}>\n            <Notice text={\"You don't have any SUSHI balance.\"} />\n        </Column>\n    );\n};\n\nconst NoXSushiNotice = () => {\n    return (\n        <Column noTopMargin={true} style={{ padding: Spacing.small, marginTop: Spacing.small }}>\n            <Notice text={\"You don't have any xSUSHI staked.\"} />\n        </Column>\n    );\n};\n\nconst StakeInfo = ({ state }: { state: StakingState }) => {\n    if (!state.sushi || !state.xSushi || !state.sushiSupply || !state.xSushiSupply || isEmptyValue(state.amount)) {\n        return <Column noTopMargin={true} />;\n    }\n    const amount = parseBalance(state.amount, state.sushi.decimals);\n    const xSushiAmount = amount.mul(state.xSushiSupply).div(state.sushiSupply);\n    const share = xSushiAmount.mul(ethers.BigNumber.from(10).pow(8)).div(state.xSushiSupply);\n    return (\n        <Column noTopMargin={true}>\n            <Meta label={\"xSUSHI Amount\"} text={formatBalance(xSushiAmount, state.xSushi.decimals)} />\n            <Meta label={\"xSUSHI Share\"} text={formatBalance(share, 8) + \"%\"} />\n        </Column>\n    );\n};\n\nconst Controls = ({ state }: { state: StakingState }) => {\n    const [error, setError] = useState<MetamaskError>({});\n    useAsyncEffect(() => setError({}), [state.action, state.amount]);\n    const token = state.action === \"leave\" ? state.xSushi : state.sushi;\n    if (!state.action || !token || isEmptyValue(state.amount)) return <Column noTopMargin={true} />;\n    return (\n        <Column>\n            {parseBalance(state.amount, token.decimals).gt(token.balance) ? (\n                <InsufficientBalanceButton symbol={token.symbol} />\n            ) : state.loading ? (\n                <FetchingButton />\n            ) : (\n                <>\n                    <ApproveButton\n                        token={token}\n                        spender={SUSHI_BAR}\n                        onSuccess={() => state.setSushiAllowed(true)}\n                        onError={setError}\n                        hidden={state.action === \"leave\" || state.sushiAllowed}\n                    />\n                    {state.action === \"leave\" ? (\n                        <UnstakeButton state={state} onError={setError} />\n                    ) : (\n                        <StakeButton state={state} onError={setError} disabled={!state.sushiAllowed} />\n                    )}\n                </>\n            )}\n            {error.message && error.code !== 4001 && <ErrorMessage error={error} />}\n        </Column>\n    );\n};\n\nconst StakeButton = ({\n    state,\n    onError,\n    disabled\n}: {\n    state: StakingState;\n    onError: (e) => void;\n    disabled: boolean;\n}) => {\n    const onPress = useCallback(async () => {\n        onError({});\n        try {\n            await state.onEnter();\n            state.setAction();\n        } catch (e) {\n            onError(e);\n        }\n    }, []);\n    return <Button size={\"large\"} title={\"Stake\"} loading={state.entering} onPress={onPress} disabled={disabled} />;\n};\n\nconst UnstakeButton = ({ state, onError }: { state: StakingState; onError: (e) => void }) => {\n    const onPress = useCallback(async () => {\n        onError({});\n        try {\n            await state.onLeave();\n            state.setAction();\n        } catch (e) {\n            onError(e);\n        }\n    }, []);\n    return <Button size={\"large\"} title={\"Unstake\"} loading={state.leaving} onPress={onPress} />;\n};\n\nexport default StakingScreen;\n","import { useCallback, useContext, useEffect, useState } from \"react\";\n\nimport { Trade } from \"@levx/sushiswap-sdk\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport { GlobalContext } from \"../context/GlobalContext\";\nimport { parseBalance } from \"../utils\";\nimport useSDK from \"./useSDK\";\nimport useTokenPairState, { TokenPairState } from \"./useTokenPairState\";\n\nexport interface SwapState extends TokenPairState {\n    trade?: Trade;\n    unsupported: boolean;\n    onSwap: () => Promise<void>;\n    swapping: boolean;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst useSwapState: () => SwapState = () => {\n    const state = useTokenPairState();\n    const { addToTradeHistory, updateTokens } = useContext(GlobalContext);\n    const { provider, signer, addOnBlockListener, removeOnBlockListener } = useContext(EthersContext);\n    const { getTrade, swap } = useSDK();\n    const [loading, setLoading] = useState(true);\n    const [trade, setTrade] = useState<Trade>();\n    const [unsupported, setUnsupported] = useState(false);\n    const [swapping, setSwapping] = useState(false);\n\n    useEffect(() => {\n        if (state.fromSymbol && state.toSymbol && state.fromAmount) {\n            const updateTrade = async () => {\n                if (state.fromToken && state.toToken && state.fromAmount && provider) {\n                    const amount = parseBalance(state.fromAmount, state.fromToken.decimals);\n                    if (!amount.isZero()) {\n                        setTrade(undefined);\n                        setUnsupported(false);\n                        try {\n                            setTrade(await getTrade(state.fromToken, state.toToken, amount));\n                        } catch (e) {\n                            setUnsupported(true);\n                        } finally {\n                            setLoading(false);\n                        }\n                    }\n                }\n            };\n\n            setLoading(true);\n            updateTrade();\n            const name = \"updateTrade(\" + state.fromSymbol + \",\" + state.toSymbol + \",\" + state.fromAmount + \")\";\n\n            addOnBlockListener(name, updateTrade);\n            return () => {\n                removeOnBlockListener(name);\n            };\n        }\n    }, [state.fromSymbol, state.toSymbol, state.fromAmount]);\n\n    const onSwap = useCallback(async () => {\n        if (state.fromToken && state.toToken && state.fromAmount && signer && trade) {\n            setSwapping(true);\n            try {\n                const result = await swap(trade);\n                if (result) {\n                    await result.tx.wait();\n                    await addToTradeHistory(result.trade);\n                    await updateTokens();\n                    state.setFromSymbol(\"\");\n                }\n            } finally {\n                setSwapping(false);\n            }\n        }\n    }, [state.fromToken, state.toToken, state.fromAmount, signer, trade]);\n\n    return {\n        ...state,\n        loading: loading || state.loading,\n        trade,\n        unsupported,\n        onSwap,\n        swapping\n    };\n};\n\nexport default useSwapState;\n","import React, { useCallback, useState } from \"react\";\nimport { View } from \"react-native\";\nimport { Icon } from \"react-native-elements\";\n\nimport useAsyncEffect from \"use-async-effect\";\nimport ApproveButton from \"../components/ApproveButton\";\nimport Button from \"../components/Button\";\nimport Column from \"../components/Column\";\nimport Container from \"../components/Container\";\nimport Content from \"../components/Content\";\nimport ErrorMessage from \"../components/ErrorMessage\";\nimport FetchingButton from \"../components/FetchingButton\";\nimport InsufficientBalanceButton from \"../components/InsufficientBalanceButton\";\nimport Meta from \"../components/Meta\";\nimport Text from \"../components/Text\";\nimport TokenInput from \"../components/TokenInput\";\nimport TokenSelect from \"../components/TokenSelect\";\nimport UnsupportedButton from \"../components/UnsupportedButton\";\nimport { Spacing } from \"../constants/dimension\";\nimport { ETH } from \"../constants/tokens\";\nimport useColors from \"../hooks/useColors\";\nimport useSDK, { ROUTER } from \"../hooks/useSDK\";\nimport useSwapState, { SwapState } from \"../hooks/useSwapState\";\nimport MetamaskError from \"../types/MetamaskError\";\nimport { formatBalance, isEmptyValue, parseBalance } from \"../utils\";\nimport Screen from \"./Screen\";\n\nconst SwapScreen = () => {\n    return (\n        <Screen>\n            <Container>\n                <Content>\n                    <View style={{ alignItems: \"center\", marginBottom: Spacing.large }}>\n                        <Column>\n                            <Text h4={true} style={{ textAlign: \"center\" }}>\n                                🍣 Swap Tokens\n                            </Text>\n                        </Column>\n                        <Swap />\n                    </View>\n                </Content>\n            </Container>\n        </Screen>\n    );\n};\n\nconst Swap = () => {\n    const state = useSwapState();\n    return (\n        <>\n            <TokenSelect\n                title={\"1. Select the token you want to SELL:\"}\n                hidden={false}\n                symbol={state.fromSymbol}\n                onChangeSymbol={state.setFromSymbol}\n                filterTokens={token => token.balance && !token.balance.isZero()}\n            />\n            <TokenSelect\n                title={\"2. Select the token you want to BUY:\"}\n                hidden={state.fromSymbol === \"\"}\n                symbol={state.toSymbol}\n                onChangeSymbol={state.setToSymbol}\n                filterTokens={token => token.symbol !== state.fromSymbol}\n            />\n            <TokenInput\n                title={\"3. How many \" + (state.fromSymbol || \"tokens\") + \" do you want to SELL?\"}\n                token={state.fromToken}\n                hidden={!state.fromToken}\n                amount={state.fromAmount}\n                onAmountChanged={state.setFromAmount}\n            />\n            <TradeInfo state={state} />\n            <Controls state={state} />\n        </>\n    );\n};\n\nconst TradeInfo = ({ state }: { state: SwapState }) => {\n    if (\n        !isEmptyValue(state.fromAmount) &&\n        ((state.fromSymbol === \"ETH\" && state.toSymbol === \"WETH\") ||\n            (state.fromSymbol === \"WETH\" && state.toSymbol === \"ETH\"))\n    ) {\n        return <WrapInfo state={state} />;\n    }\n    if (state.fromSymbol === \"\" || state.toSymbol === \"\" || isEmptyValue(state.fromAmount)) {\n        return <Column noTopMargin={true} />;\n    }\n    return <SwapInfo state={state} />;\n};\n\nconst WrapInfo = ({ state }: { state: SwapState }) => {\n    return (\n        <Column noTopMargin={true}>\n            <ArrowDown />\n            <Text style={{ fontSize: 30, textAlign: \"center\" }}>\n                {state.fromAmount} {state.toSymbol}\n            </Text>\n        </Column>\n    );\n};\n\nconst SwapInfo = ({ state }: { state: SwapState }) => {\n    const { calculateFee } = useSDK();\n    const amount = state.trade?.outputAmount?.toSignificant(8);\n    const price = state.trade?.executionPrice?.toSignificant(8);\n    const impact = state.trade?.priceImpact?.toSignificant(2);\n    const fee = state.fromToken\n        ? formatBalance(\n              calculateFee(parseBalance(state.fromAmount, state.fromToken.decimals)),\n              state.fromToken.decimals,\n              8\n          )\n        : \"\";\n    return (\n        <Column noTopMargin={true}>\n            <ArrowDown />\n            <Text style={{ fontSize: 30, textAlign: \"center\", marginBottom: Spacing.normal }}>\n                {amount || \"…\"} {state.toSymbol}\n            </Text>\n            <Meta label={\"Price\"} text={price ? price + \" \" + state.toSymbol + \"  = 1 \" + state.fromSymbol : \"…\"} />\n            <Meta label={\"Price Impact\"} text={impact ? impact + \"%\" : \"…\"} />\n            <Meta label={\"Fee (0.30%)\"} text={fee ? fee + \" \" + state.fromSymbol : \"…\"} />\n        </Column>\n    );\n};\n\nconst ArrowDown = () => {\n    const { textLight } = useColors();\n    return <Icon type={\"material-community\"} name={\"arrow-down\"} color={textLight} style={{ margin: Spacing.tiny }} />;\n};\n\n// tslint:disable-next-line:max-func-body-length\nconst Controls = ({ state }: { state: SwapState }) => {\n    const [error, setError] = useState<MetamaskError>({});\n    useAsyncEffect(() => setError({}), [state.fromSymbol, state.toSymbol, state.fromAmount]);\n    if (state.toSymbol === \"\" || isEmptyValue(state.fromAmount) || !state.fromToken) {\n        return <Column noTopMargin={true} />;\n    }\n    const approveRequired = state.fromSymbol !== \"ETH\" && !state.fromTokenAllowed;\n    return (\n        <Column>\n            {parseBalance(state.fromAmount, state.fromToken.decimals).gt(state.fromToken.balance) ? (\n                <InsufficientBalanceButton symbol={state.fromSymbol} />\n            ) : state.fromSymbol === \"WETH\" && state.toSymbol === \"ETH\" ? (\n                <UnwrapButton state={state} onError={setError} />\n            ) : state.fromSymbol === \"ETH\" && state.toSymbol === \"WETH\" ? (\n                <WrapButton state={state} onError={setError} />\n            ) : state.unsupported ? (\n                <UnsupportedButton state={state} />\n            ) : state.loading || !state.trade ? (\n                <FetchingButton />\n            ) : (\n                <>\n                    <ApproveButton\n                        token={state.fromToken}\n                        spender={ROUTER}\n                        onSuccess={() => state.setFromTokenAllowed(true)}\n                        onError={setError}\n                        hidden={!approveRequired}\n                    />\n                    <SwapButton state={state} onError={setError} disabled={approveRequired} />\n                </>\n            )}\n            {error.message && error.code !== 4001 && <ErrorMessage error={error} />}\n        </Column>\n    );\n};\n\nconst SwapButton = ({ state, onError, disabled }: { state: SwapState; onError: (e) => void; disabled: boolean }) => {\n    const onPress = useCallback(() => {\n        onError({});\n        state.onSwap().catch(onError);\n    }, [state.onSwap, onError]);\n    return (\n        <Button\n            size={\"large\"}\n            title={\"Swap \" + state.fromSymbol + \"-\" + state.toSymbol}\n            disabled={disabled}\n            loading={state.swapping}\n            onPress={onPress}\n        />\n    );\n};\n\nconst WrapButton = ({ state, onError }: { state: SwapState; onError: (e) => void }) => {\n    const onPress = useCallback(async () => {\n        onError({});\n        state.onWrap().catch(onError);\n    }, []);\n    return <Button size={\"large\"} title={\"Wrap\"} loading={state.wrapping} onPress={onPress} />;\n};\n\nconst UnwrapButton = ({ state, onError }: { state: SwapState; onError: (e) => void }) => {\n    const onPress = useCallback(async () => {\n        onError({});\n        state.onUnwrap().catch(onError);\n    }, []);\n    return <Button size={\"large\"} title={\"Unwrap\"} loading={state.unwrapping} onPress={onPress} />;\n};\n\nexport default SwapScreen;\n","import React, { useContext } from \"react\";\nimport { View } from \"react-native\";\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\n\nimport { OpenSans_300Light, OpenSans_400Regular, OpenSans_700Bold } from \"@expo-google-fonts/open-sans\";\nimport { UnicaOne_400Regular } from \"@expo-google-fonts/unica-one\";\nimport { AppLoading } from \"expo\";\nimport { DeviceType } from \"expo-device\";\nimport { useFonts } from \"expo-font\";\n\nimport \"dotenv/config\";\nimport useAsyncEffect from \"use-async-effect\";\nimport Header from \"./src/components/Header\";\nimport MobileNotSupported from \"./src/components/MobileNotSupported\";\nimport { ContextProvider } from \"./src/context\";\nimport { GlobalContext } from \"./src/context/GlobalContext\";\nimport FarmingScreen from \"./src/screens/FarmingScreen\";\nimport LiquidityScreen from \"./src/screens/LiquidityScreen\";\nimport MigrateScreen from \"./src/screens/MigrateScreen\";\nimport StakingScreen from \"./src/screens/StakingScreen\";\nimport SwapScreen from \"./src/screens/SwapScreen\";\n\nconst App = () => {\n    const [fontsLoaded] = useFonts({\n        title: UnicaOne_400Regular,\n        light: OpenSans_300Light,\n        regular: OpenSans_400Regular,\n        bold: OpenSans_700Bold\n    });\n    if (!fontsLoaded) {\n        return <AppLoading />;\n    }\n    return (\n        <ContextProvider>\n            <Router>\n                <Main />\n            </Router>\n        </ContextProvider>\n    );\n};\n\nconst Main = () => {\n    const { load, deviceType } = useContext(GlobalContext);\n    useAsyncEffect(load, []);\n    if (!deviceType) {\n        return <AppLoading />;\n    }\n    if (deviceType === DeviceType.PHONE) {\n        return <MobileNotSupported />;\n    }\n    return <Navigation />;\n};\n\nconst Navigation = () => {\n    return (\n        <View style={{ flex: 1 }}>\n            <Header />\n            <Switch>\n                <Route path={\"/liquidity\"}>\n                    <LiquidityScreen />\n                </Route>\n                <Route path={\"/farming\"}>\n                    <FarmingScreen />\n                </Route>\n                <Route path={\"/staking\"}>\n                    <StakingScreen />\n                </Route>\n                <Route path={\"/migrate\"}>\n                    <MigrateScreen />\n                </Route>\n                <Route path={\"/\"}>\n                    <SwapScreen />\n                </Route>\n            </Switch>\n        </View>\n    );\n};\n\nexport default App;\n","/* eslint-env browser */\n\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', function () {\n    navigator.serviceWorker\n      .register('/expo-service-worker.js', { scope: '/' })\n      .then(function (info) {\n        // console.info('Registered service-worker', info);\n      })\n      .catch(function (error) {\n        console.info('Failed to register service-worker', error);\n      });\n  });\n}\n","var map = {\n\t\"./Address.json\": 479,\n\t\"./Context.json\": 480,\n\t\"./ERC20.json\": 481,\n\t\"./EnumerableSet.json\": 482,\n\t\"./GovernorAlpha.json\": 483,\n\t\"./IERC20.json\": 484,\n\t\"./IERC20Uniswap.json\": 485,\n\t\"./IMigrator.json\": 486,\n\t\"./IMigratorChef.json\": 487,\n\t\"./IUniswapV2Callee.json\": 488,\n\t\"./IUniswapV2ERC20.json\": 489,\n\t\"./IUniswapV2Factory.json\": 490,\n\t\"./IUniswapV2Pair.json\": 491,\n\t\"./IUniswapV2Router01.json\": 492,\n\t\"./IUniswapV2Router02.json\": 493,\n\t\"./IWETH.json\": 494,\n\t\"./MasterChef.json\": 495,\n\t\"./Math.json\": 496,\n\t\"./Migrations.json\": 497,\n\t\"./Migrator.json\": 498,\n\t\"./Migrator2.json\": 499,\n\t\"./MockERC20.json\": 500,\n\t\"./Ownable.json\": 501,\n\t\"./SafeERC20.json\": 502,\n\t\"./SafeMath.json\": 503,\n\t\"./SafeMathUniswap.json\": 504,\n\t\"./SushiBar.json\": 505,\n\t\"./SushiMaker.json\": 506,\n\t\"./SushiRestaurant.json\": 507,\n\t\"./SushiRoll.json\": 508,\n\t\"./SushiToken.json\": 509,\n\t\"./Timelock.json\": 510,\n\t\"./TimelockInterface.json\": 511,\n\t\"./TransferHelper.json\": 512,\n\t\"./UQ112x112.json\": 513,\n\t\"./UniswapV2ERC20.json\": 514,\n\t\"./UniswapV2Factory.json\": 515,\n\t\"./UniswapV2Library.json\": 516,\n\t\"./UniswapV2Pair.json\": 517,\n\t\"./UniswapV2Router02.json\": 518\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 478;","module.exports = __webpack_public_path__ + \"static/media/levx-typography-dark.859ceaa3.png\";","module.exports = __webpack_public_path__ + \"static/media/levx-typography.5d37ed2a.png\";","module.exports = __webpack_public_path__ + \"static/media/sushiswap.ef005f32.jpg\";","module.exports = __webpack_public_path__ + \"static/media/metamask-dark.2137a831.png\";","module.exports = __webpack_public_path__ + \"static/media/metamask.15e22fef.png\";"],"sourceRoot":""}