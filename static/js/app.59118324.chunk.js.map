{"version":3,"sources":["assets/empty-token.png","src/constants/tokens.ts","src/utils/index.ts","src/utils/analytics-utils.ts","src/constants/contracts.ts","src/utils/fetch-utils.ts","src/context/EthersContext.tsx","src/context/GlobalContext.tsx","src/context/index.tsx","src/constants/dimension.ts","src/constants/colors.ts","src/hooks/useColors.tsx","src/components/FlexView.tsx","src/components/Text.tsx","src/components/web/WebHeader.tsx","src/hooks/useStyles.tsx","src/components/web/WebStatus.tsx","src/components/Button.tsx","src/components/ApproveButton.tsx","src/components/ButtonGroup.tsx","src/components/CloseIcon.tsx","src/components/Column.tsx","src/components/Container.tsx","src/components/Content.tsx","src/components/ErrorMessage.tsx","src/components/FetchingButton.tsx","src/components/InsufficientBalanceButton.tsx","src/components/Border.tsx","src/components/CheckBox.tsx","src/components/LPTokenSelect.tsx","src/components/Meta.tsx","src/components/Notice.tsx","src/components/SelectIcon.tsx","src/components/Subtitle.tsx","src/components/Input.tsx","src/components/TokenInput.tsx","src/hooks/useLinker.tsx","src/components/SocialIcons.tsx","src/components/web/WebFooter.tsx","src/hooks/useDelayedOnBlockEffect.tsx","src/hooks/useAllCommonPairs.tsx","src/hooks/useSDK.tsx","src/hooks/useTokenPairState.tsx","src/hooks/useLiquidityState.tsx","src/hooks/useLPTokensState.tsx","src/hooks/useFarmingState.tsx","src/components/app/AppHeader.tsx","src/components/web/ConnectToWallet.tsx","src/components/web/MobileNotSupported.tsx","src/screens/Screen.tsx","src/screens/FarmingScreen.tsx","src/components/Guide.tsx","src/components/TokenSelect.tsx","src/components/UnsupportedButton.tsx","src/constants/Fraction.ts","src/hooks/useAddLiquidityState.tsx","src/screens/LiquidityScreen.tsx","src/components/ExperimentalNotice.tsx","src/components/LPTokenItem.tsx","src/hooks/useMigrateState.tsx","src/screens/MigrateScreen.tsx","src/hooks/useMyLimitOrdersState.tsx","src/screens/MyLimitOrdersScreen.tsx","src/hooks/useRemoveLiquidityState.tsx","src/screens/RemoveLiquidityScreen.tsx","src/hooks/useStakingState.tsx","src/screens/StakingScreen.tsx","src/hooks/useDelayedEffect.tsx","src/hooks/useSwapState.tsx","src/screens/SwapScreen.tsx","src/screens/index.tsx","App.tsx","web-build/register-service-worker.js","globals.js","assets/levx-typography-dark.png","assets/levx-typography.png","assets/metamask-dark.png","assets/metamask.png","assets/sushiswap.jpg"],"names":["module","exports","ETH","address","ethers","constants","AddressZero","decimals","symbol","logoURI","balance","BigNumber","from","CONTRACTS","ERC20","IUniswapV2Factory","IUniswapV2Pair","IUniswapV2Router02","IWETH","MasterChef","Migrator2","SushiBar","OrderBook","Settlement","formatBalance","value","maxFraction","formatted","utils","formatUnits","split","length","substr","parseBalance","parseUnits","isEmptyValue","text","isBigNumber","isZero","replace","convertToken","token","WETH","SDKToken","ChainId","MAINNET","convertAmount","amount","TokenAmount","toString","parseCurrencyAmount","toExact","getContract","name","signer","contract","ContractFactory","abi","pow10","exp","pow","logTransaction","tx","a","async","args","Analytics","hash","gasLimit","gasPrice","chainId","ROUTER","MASTER_CHEF","SUSHI_BAR","MIGRATOR2","ORDER_BOOK","SETTLEMENT","fetchTokens","provider","fetch","response","json","getAddress","account","send","tokens","map","balances","getBalance","i","tokenBalances","tokenBalance","sort","t1","t2","sub","div","toNumber","fetchPools","pools","pool","Promise","all","poolToken","balanceOf","totalDeposited","masterChef","userInfo","amountDeposited","pendingSushi","id","tokenA","tokenB","fetchMyLPTokens","factory","SUSHISWAP_FACTORY","allPairsLength","Array","_","allPairs","pairs","pair","erc20","Number","totalSupply","findOrFetchToken","token0","token1","result","filter","fetchMyUniswapLPTokens","UNISWAP_FACTORY","require","scanner","findPairs","Math","min","concat","find","t","toLowerCase","meta","logo","Zero","EthersContext","React","createContext","undefined","kovanProvider","kovanSigner","addOnBlockListener","_name","_listener","removeOnBlockListener","updateTokens","loadingTokens","approveToken","_token","_spender","_amount","getTokenAllowance","EthersContextProvider","children","useState","setProvider","setKovanProvider","setSigner","setKovanSigner","setChainId","setAddress","onBlockListeners","setOnBlockListeners","setTokens","setLoadingTokens","useEffect","kovan","providers","AlchemyProvider","wallet","Wallet","useAsyncEffect","window","ethereum","web3","Web3Provider","alchemy","network","getSigner","onAccountsChanged","selectedAddress","onChainChanged","on","off","data","useCallback","spender","MaxUint256","estimateGas","approve","owner","listener","old","onBlock","block","Object","entries","Provider","Consumer","GlobalContext","load","clear","deviceType","darkMode","setDarkMode","mnemonic","setMnemonic","GlobalContextProvider","colorScheme","useColorScheme","setDeviceType","getDeviceTypeAsync","AsyncStorage","getItem","mode","mne","removeItem","setItem","String","ContextProvider","IS_HIGH_RESOLUTION","round","Dimensions","get","width","height","HEADER_HEIGHT","Platform","OS","Spacing","tiny","small","normal","large","huge","content","Colors","common","white","transparent","primary","secondary","green","red","twitter","facebook","light","background","backgroundHovered","border","borderDark","textDark","textMedium","textLight","disabled","shadow","placeholder","underlay","dark","useColors","useContext","FlexView","props","flexDirection","direction","View","style","Text","fontFamily","fontWeight","h1Style","h2Style","h3Style","h4Style","fontSize","note","caption","color","medium","Title","alignSelf","alignItems","to","textDecoration","Image","source","Menu","title","path","MenuItem","match","useRouteMatch","marginLeft","marginBottom","padding","isExact","position","left","right","bottom","backgroundColor","DarkModeSwitch","onChange","transform","scale","WebHeader","top","zIndex","paddingBottom","flex","justifyContent","paddingTop","paddingHorizontal","useStyles","shadowColor","borderColor","borderWidth","borderRadius","elevation","shadowOffset","shadowOpacity","shadowRadius","overflow","WebStatus","connected","substring","marginRight","Button","type","size","buttonStyle","titleStyle","containerStyle","ApproveButton","loading","setLoading","onPress","onError","wait","onSuccess","hidden","ButtonGroup","index","setIndex","selectedIndex","textStyle","borderTopLeftRadius","borderBottomLeftRadius","borderTopRightRadius","buttons","borderBottomRightRadius","selectedButtonStyle","marginHorizontal","marginVertical","CloseIcon","Column","marginTop","noTopMargin","Container","Universal","select","web","ScrollView","contentContainerStyle","default","SafeAreaView","Content","multiplier","contentPadding","paddingVertical","ErrorMessage","error","code","message","FetchingButton","InsufficientBalanceButton","Border","CheckBox","iconRight","iconType","checkedIcon","uncheckedIcon","checkedColor","Filter","onFilterChanged","handler","f","checked","LPTokenList","state","emptyText","Item","renderItem","item","key","selected","onSelectToken","setSelectedLPToken","lpTokens","gt","ActivityIndicator","FlatList","keyExtractor","JSON","stringify","ItemSeparatorComponent","EmptyList","margin","textAlign","LPTokenSelect","onUnselectToken","showFilter","selectedLPToken","Meta","label","suffix","Notice","borderStyle","buttonText","onPressButton","SelectIcon","Subtitle","Input","onChangeText","errors","forbidden","forEach","validation","regexp","push","allowed","join","inputStyle","outline","labelStyle","placeholderTextColor","errorStyle","MaxButton","onPressMax","fee","updateAmount","maxButtonText","TokenInput","onAmountChanged","e","endsWith","indexOf","route","target","open","_target","navigate","useNavigation","SocialIcon","iconColor","SocialIcons","onPressTwitter","useLinker","onPressGithub","onPressDiscord","raised","reverse","Link","textDecorationLine","WebFooter","useDelayedOnBlockEffect","effect","getEventName","inputs","initialTimeout","eventName","handle","setTimeout","clearTimeout","DAI","Token","USDC","USDT","SUSHI","YAM","AMPL","BASES_TO_CHECK_TRADES_AGAINST","CUSTOM_BASES","wrappedCurrency","currency","ETHER","useAllCommonPairs","loadAllCommonPairs","currencyA","currencyB","bases","basePairs","flatMap","base","otherBase","t0","allPairCombinations","Boolean","b","customBases","customBasesA","customBasesB","equals","Fetcher","fetchPairData","minAmount","percent","mul","numerator","denominator","Order","maker","fromToken","toToken","amountIn","amountOutMin","recipient","deadline","floor","Date","now","this","filledAmountIn","eq","settlement","signMessage","arrayify","signature","splitSignature","sign","v","r","s","useSDK","allowedSlippage","Percent","getTrade","fromAmount","isETH","CurrencyAmount","ether","Trade","bestTradeExactIn","maxHops","maxNumResults","swap","trade","Router","feeOnTransfer","ttl","params","swapCallParameters","router","methodName","functions","arg","createOrder","order","toArgs","orderBook","cancelOrder","cancelOrderCallHash","callHash","wrapETH","weth","deposit","unwrapETH","withdraw","getPair","addLiquidity","toAmount","getTime","removeLiquidityETH","liquidity","amountETH","removeLiquidity","addLiquidityETH","getExpectedSushiRewardPerBlock","totalAllocPoint","sushiPerBlock","poolInfo","allocPoint","lpTokenId","enterSushiBar","sushiBar","enter","leaveSushiBar","leave","migrate","lpToken","migrator2","calculateSwapFee","calculateLimitOrderFee","useTokenPairState","fromSymbol","setFromSymbol","toSymbol","setToSymbol","setFromAmount","setToAmount","fromTokenAllowed","setFromTokenAllowed","toTokenAllowed","setToTokenAllowed","wrapping","setWrapping","unwrapping","setUnwrapping","minAllowance","fromAllowance","gte","toAllowance","onWrap","onUnwrap","useLiquidityState","setPair","useLPTokensState","lastTimeRefreshed","setLastTimeRefreshed","setLPTokens","selectedLPTokenAllowed","setSelectedLPTokenAllowed","setAmount","updateLPTokens","updateLastTimeRefreshed","useFarmingState","filteredBy","setFilteredBy","action","setAction","expectedSushiRewardPerBlock","setExpectedSushiRewardPerBlock","depositing","setDepositing","withdrawing","setWithdrawing","allowance","onDeposit","onWithdraw","AppHeader","StatusBar","translucent","ConnectWallet","enable","Linking","MobileNotSupported","minHeight","Screen","DeviceType","PHONE","ConnectToWallet","AppLoading","Actions","Farming","h4","TokenItem","field","hovered","TouchableHighlight","LogoSymbol","isEmpty","setIsEmpty","uri","ActionSelect","element","DepositText","WithdrawText","Deposit","AddLiquidityNotice","DepositInfo","sushiReward","DepositControls","setError","approveRequired","AddLiquidityButton","DepositButton","catch","Withdraw","NoLPTokenNotice","WithdrawInfo","WithdrawControls","WithdrawButton","FarmingScreen","Guide","buttonTitle","TokenList","useMemo","filterTokens","localeCompare","TokenSelect","onChangeSymbol","UnsupportedButton","Fraction","sdk","numeratorToken","denominatorToken","NAN","ZERO","BASE","isNaN","fraction","lt","maxFractions","str","One","useAddLiquidityState","adding","setAdding","onAdd","AddLiquidity","FromTokenInput","newAmount","fromPrice","priceOf","quote","ToTokenInput","toPrice","PriceInfo","initialPrice","price","toFixed","PriceMeta","Controls","insufficientFromToken","insufficientToToken","fromApproveRequired","toApproveRequired","SupplyButton","RemoveLiquidityGuide","LiquidityScreen","ExperimentalNotice","onPressContract","contractURL","LPTokenItem","useMigrateState","migrating","setMigrating","onMigrate","Migrate","MigrateButton","MigrateScreen","useMyLimitOrdersState","orders","setOrders","selectedOrder","setSelectedOrder","cancellingOrder","setCancellingOrder","numberOfHashesOfMaker","pages","page","allHashes","hashes","flat","HashZero","orderOfHash","filledAmountInOfHash","myOrders","o0","o1","status","compared","onCancelOrder","MyLimitOrders","OrderSelect","onUnselectOrder","onSelectOrder","OrderList","OrderItem","fromTokens","buy","minWidth","colorDisabled","MetaColumn","OrderInfo","date","expiry","toLocaleDateString","toLocaleTimeString","CancelButton","MyLimitOrdersScreen","useRemoveLiquidityState","removing","setRemoving","liquidityToken","fromReserve","reserveOf","toReserve","onRemove","amountToRemove","amountToRemoveETH","RemoveLiquidity","AmountInfo","RemoveButton","RemoveLiquidityScreen","useStakingState","sushiStaked","setSushiStaked","sushiSupply","setSushiSupply","xSushiSupply","setXSushiSupply","sushiAllowed","setSushiAllowed","xSushiAllowed","setXSushiAllowed","entering","setEntering","leaving","setLeaving","sushi","xSushi","sushiAllowance","xSushiAllowance","sushiContract","xSushiContract","onEnter","onLeave","Staking","StakeText","UnstakeText","Line","NoSushiNotice","NoXSushiNotice","StakeInfo","xSushiAmount","share","StakeButton","UnstakeButton","StakingScreen","handles","useDelayedEffect","timeout","useSwapState","orderType","setOrderType","setTrade","unsupported","setUnsupported","swapFee","setSwapFee","limitOrderPrice","setLimitOrderPrice","limitOrderFee","setLimitOrderFee","limitOrderSwapFee","setLimitOrderSwapFee","swapping","setSwapping","creatingOrder","setCreatingOrder","onSwap","onCreateOrder","parse","apply","limitOrderUnsupported","Swap","Inputs","PriceInput","marketPrice","executionPrice","LimitOrderUnsupportedNotice","OrderTypeSelect","OrderCheckBox","TradeInfo","WrapInfo","SwapInfo","outputAmount","impact","priceImpact","LimitOrderInfo","ArrowDown","SwapControls","SwapButton","WrapButton","UnwrapButton","LimitOrderControls","setAllowed","PriceTooLowButton","PlaceOrderButton","goToLimitOrders","MyLimitOrdersGuide","SwapScreen","Screens","WebScreens","Tab","createBottomTabNavigator","AppScreens","theme","DefaultTheme","colors","card","notification","NavigationContainer","Navigator","tabBarOptions","activeTintColor","inactiveTintColor","component","options","tabOptions","iconName","tabBarIcon","App","useFonts","UnicaOne_400Regular","OpenSans_300Light","regular","OpenSans_400Regular","bold","OpenSans_700Bold","navigator","addEventListener","serviceWorker","register","scope","then","info","console","global","Buffer"],"mappings":"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","file":"static/js/app.59118324.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/empty-token.e8aa64c5.png\";","import { ethers } from \"ethers\";\nimport Token from \"../types/Token\";\n\nexport const ETH: Token = {\n    address: ethers.constants.AddressZero,\n    decimals: 18,\n    symbol: \"ETH\",\n    logoURI: \"https://sushiswap.levx.io/images/tokens/ETH.png\",\n    balance: ethers.BigNumber.from(0)\n};\n","import ERC20 from \"@sushiswap/core/build/contracts/ERC20.json\";\nimport IUniswapV2Factory from \"@sushiswap/core/build/contracts/IUniswapV2Factory.json\";\nimport IUniswapV2Pair from \"@sushiswap/core/build/contracts/IUniswapV2Pair.json\";\nimport IUniswapV2Router02 from \"@sushiswap/core/build/contracts/IUniswapV2Router02.json\";\nimport IWETH from \"@sushiswap/core/build/contracts/IWETH.json\";\nimport MasterChef from \"@sushiswap/core/build/contracts/MasterChef.json\";\nimport Migrator2 from \"@sushiswap/core/build/contracts/Migrator2.json\";\nimport SushiBar from \"@sushiswap/core/build/contracts/SushiBar.json\";\nimport { ChainId, CurrencyAmount, Token as SDKToken, TokenAmount, WETH } from \"@sushiswap/sdk\";\nimport OrderBook from \"@sushiswap/settlement/deployments/kovan/OrderBook.json\";\nimport Settlement from \"@sushiswap/settlement/deployments/mainnet/Settlement.json\";\nimport { ethers } from \"ethers\";\nimport Token from \"../types/Token\";\n\nconst CONTRACTS = {\n    ERC20,\n    IUniswapV2Factory,\n    IUniswapV2Pair,\n    IUniswapV2Router02,\n    IWETH,\n    MasterChef,\n    Migrator2,\n    SushiBar,\n    OrderBook,\n    Settlement\n};\n\nexport const formatBalance = (value: ethers.BigNumberish, decimals = 18, maxFraction = 0) => {\n    const formatted = ethers.utils.formatUnits(value, decimals);\n    if (maxFraction > 0) {\n        const split = formatted.split(\".\");\n        if (split.length > 1) {\n            return split[0] + \".\" + split[1].substr(0, maxFraction);\n        }\n    }\n    return formatted;\n};\n\nexport const parseBalance = (value: string, decimals = 18) => {\n    return ethers.utils.parseUnits(value || \"0\", decimals);\n};\n\nexport const isEmptyValue = (text: string) =>\n    ethers.BigNumber.isBigNumber(text)\n        ? ethers.BigNumber.from(text).isZero()\n        : text === \"\" || text.replace(/0/g, \"\").replace(/\\./, \"\") === \"\";\n\nexport const convertToken = (token: Token) => {\n    return token.symbol === \"ETH\" ? WETH[\"1\"] : new SDKToken(ChainId.MAINNET, token.address, token.decimals);\n};\n\nexport const convertAmount = (token: Token, amount: string) => {\n    return new TokenAmount(convertToken(token), parseBalance(amount, token.decimals).toString());\n};\n\nexport const parseCurrencyAmount = (value: CurrencyAmount, decimals = 18) => {\n    return ethers.BigNumber.from(parseBalance(value.toExact(), decimals));\n};\n\nexport const getContract = (name: string, address: string, signer: ethers.Signer) => {\n    const contract = CONTRACTS[name];\n    return ethers.ContractFactory.getContract(address, contract.abi, signer);\n};\n\nexport const pow10 = (exp: ethers.BigNumberish) => {\n    return ethers.BigNumber.from(10).pow(exp);\n};\n\nexport const formatDate = (date: Date) => {\n    return date.toLocaleDateString(\"en-US\") + \" \" + date.toLocaleTimeString(\"en-US\");\n};\n","import * as Analytics from \"expo-firebase-analytics\";\n\nimport { ethers } from \"ethers\";\n\nexport const logTransaction = async (\n    tx: ethers.providers.TransactionResponse,\n    name: string,\n    ...args: any[]\n): Promise<ethers.providers.TransactionResponse> => {\n    await Analytics.logEvent(\"tx:\" + name, {\n        args: args || [],\n        hash: tx.hash,\n        value: tx.value.toString(),\n        gasLimit: tx.gasLimit.toString(),\n        gasPrice: tx.gasPrice.toString(),\n        chainId: tx.chainId\n    });\n    return tx;\n};\n","import OrderBook from \"@sushiswap/settlement/deployments/kovan/OrderBook.json\";\nimport Settlement from \"@sushiswap/settlement/deployments/mainnet/Settlement.json\";\n\n// export const UNISWAP_ROUTER = \"0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\";\nexport const SUSHISWAP_ROUTER = \"0xd9e1ce17f2641f24ae83637ab66a2cca9c378b9f\";\nexport const ROUTER = SUSHISWAP_ROUTER;\nexport const MASTER_CHEF = \"0xc2edad668740f1aa35e4d8f227fb8e17dca888cd\";\nexport const SUSHI_BAR = \"0x8798249c2e607446efb7ad49ec89dd1865ff4272\";\nexport const SUSHI_ROLL = \"0x94CfE11E6b57f6f84bBa2c6DfB0fAeA47C4741D6\";\nexport const LP_TOKEN_SCANNER = \"0xD132Ce8eA8865348Ac25E416d95ab1Ba84D216AF\";\nexport const MIGRATOR2 = \"0x60A02cD1e3443E8ab7825DccF8d7080Eb78BCA6F\";\nexport const ORDER_BOOK = OrderBook.address;\nexport const SETTLEMENT = Settlement.address;\n","import { FACTORY_ADDRESS as SUSHISWAP_FACTORY } from \"@sushiswap/sdk\";\nimport { FACTORY_ADDRESS as UNISWAP_FACTORY } from \"@uniswap/sdk\";\nimport { ethers } from \"ethers\";\nimport { LP_TOKEN_SCANNER, MASTER_CHEF } from \"../constants/contracts\";\nimport { ETH } from \"../constants/tokens\";\nimport LPToken from \"../types/LPToken\";\nimport Token from \"../types/Token\";\nimport { getContract } from \"./index\";\n\nexport const fetchTokens = async (provider?: ethers.providers.JsonRpcProvider, signer?: ethers.Signer) => {\n    if (provider && signer) {\n        const response = await fetch(\"https://sushiswap.levx.io/tokens.json\");\n        const json = await response.json();\n\n        const account = await signer.getAddress();\n        const balances = await provider.send(\"alchemy_getTokenBalances\", [\n            account,\n            json.tokens.map(token => token.address)\n        ]);\n        return [\n            {\n                ...ETH,\n                balance: await provider.getBalance(account)\n            },\n            ...json.tokens.map((token, i) => ({\n                ...token,\n                balance: ethers.BigNumber.from(balances.tokenBalances[i].tokenBalance || 0)\n            }))\n        ].sort((t1, t2) => {\n            return t2.balance\n                .sub(t1.balance)\n                .div(ethers.BigNumber.from(10).pow(10))\n                .toNumber();\n        });\n    }\n};\n\nexport const fetchPools = async (provider?: ethers.providers.JsonRpcProvider, signer?: ethers.Signer) => {\n    if (provider && signer) {\n        const response = await fetch(\"https://sushiswap.levx.io/pools.json\");\n        const pools = await response.json();\n        const address = await signer.getAddress();\n        const balances = await provider.send(\"alchemy_getTokenBalances\", [address, pools.map(pool => pool.address)]);\n        return (await Promise.all(\n            pools.map(async (pool, i) => {\n                const poolToken = getContract(\"ERC20\", pool.address, signer);\n                const totalDeposited = await poolToken.balanceOf(MASTER_CHEF);\n                const masterChef = getContract(\"MasterChef\", MASTER_CHEF, signer);\n                const { amount: amountDeposited } = await masterChef.userInfo(i, address);\n                const pendingSushi = await masterChef.pendingSushi(i, address);\n                return {\n                    ...pool,\n                    id: i,\n                    symbol: pool.tokenA.symbol + \"-\" + pool.tokenB.symbol + \" LP\",\n                    balance: ethers.BigNumber.from(balances.tokenBalances[i].tokenBalance || 0),\n                    totalDeposited,\n                    amountDeposited,\n                    pendingSushi\n                };\n            })\n        )) as LPToken[];\n    }\n};\n\nexport const fetchMyLPTokens = async (\n    tokens: Token[],\n    provider?: ethers.providers.JsonRpcProvider,\n    signer?: ethers.Signer\n) => {\n    if (provider && signer) {\n        const factory = getContract(\"IUniswapV2Factory\", SUSHISWAP_FACTORY, signer);\n        const length = await factory.allPairsLength();\n        const pairs = await Promise.all(\n            Array.from({ length }).map((_, i) => {\n                return factory.allPairs(i);\n            })\n        );\n        const balances = await provider.send(\"alchemy_getTokenBalances\", [await signer.getAddress(), pairs]);\n        const result = await Promise.all(\n            pairs.map(async (address, i) => {\n                const balance = ethers.BigNumber.from(balances.tokenBalances[i].tokenBalance);\n                if (balance.isZero()) {\n                    return null;\n                }\n                const pair = getContract(\"IUniswapV2Pair\", address, signer);\n                const erc20 = getContract(\"ERC20\", address, signer);\n                const decimals = Number(await erc20.decimals());\n                const totalSupply = await erc20.totalSupply();\n                const tokenA = await findOrFetchToken(provider, await pair.token0(), tokens);\n                const tokenB = await findOrFetchToken(provider, await pair.token1(), tokens);\n                return { address, decimals, balance, totalSupply, tokenA, tokenB } as LPToken;\n            })\n        );\n        return result.filter(token => !!token) as LPToken[];\n    }\n};\n\nexport const fetchMyUniswapLPTokens = async (\n    tokens: Token[],\n    provider?: ethers.providers.JsonRpcProvider,\n    signer?: ethers.Signer\n) => {\n    if (provider && signer && tokens) {\n        const factory = getContract(\"IUniswapV2Factory\", UNISWAP_FACTORY, signer);\n        const length = await factory.allPairsLength();\n        const abi = require(\"../constants/abi/LPTokenScanner.json\");\n        const scanner = ethers.ContractFactory.getContract(LP_TOKEN_SCANNER, abi, signer);\n        const account = await signer.getAddress();\n        let pairs: any[] = [];\n        for (let i = 0; i < length; i += 5000) {\n            pairs = pairs.concat(\n                await scanner.findPairs(account, UNISWAP_FACTORY, i, Math.min(i + 5000, length.toNumber()))\n            );\n        }\n        const balances = await provider.send(\"alchemy_getTokenBalances\", [account, pairs.map(pair => pair.token)]);\n        const result = await Promise.all(\n            pairs.map(async (pair, i) => {\n                const balance = ethers.BigNumber.from(balances.tokenBalances[i].tokenBalance);\n                const erc20 = getContract(\"ERC20\", pair.token, signer);\n                const decimals = Number(await erc20.decimals());\n                const totalSupply = await erc20.totalSupply();\n                const tokenA = await findOrFetchToken(provider, await pair.token0, tokens);\n                const tokenB = await findOrFetchToken(provider, await pair.token1, tokens);\n                return { address: pair.token, decimals, balance, totalSupply, tokenA, tokenB } as LPToken;\n            })\n        );\n        return result.filter(token => !!token) as LPToken[];\n    }\n};\n\nexport const findOrFetchToken = async (\n    provider: ethers.providers.JsonRpcProvider,\n    address: string,\n    tokens?: Token[]\n) => {\n    if (tokens) {\n        const token = tokens.find(t => t.address.toLowerCase() === address.toLowerCase());\n        if (token) {\n            return token;\n        }\n    }\n    const meta = await provider.send(\"alchemy_getTokenMetadata\", [address]);\n    return {\n        address,\n        symbol: meta.symbol,\n        decimals: meta.decimals,\n        logoURI: meta.logo,\n        balance: ethers.constants.Zero\n    } as Token;\n};\n","import React, { useCallback, useEffect, useState } from \"react\";\n\nimport * as Analytics from \"expo-firebase-analytics\";\n\nimport { EventType, Listener } from \"@ethersproject/abstract-provider\";\nimport { ethers } from \"ethers\";\nimport useAsyncEffect from \"use-async-effect\";\nimport { ETH } from \"../constants/tokens\";\nimport Token from \"../types/Token\";\nimport { getContract } from \"../utils\";\nimport { logTransaction } from \"../utils/analytics-utils\";\nimport { fetchTokens } from \"../utils/fetch-utils\";\n\nexport type OnBlockListener = (block?: number) => void | Promise<void>;\n\nconst PRIVATE_KEY = \"0xca417c154948d370f011c5d9ac3fba516d7b15671a069e7d5d48f56b723c9cc1\";\n\nexport const EthersContext = React.createContext({\n    provider: undefined as ethers.providers.JsonRpcProvider | undefined,\n    signer: undefined as ethers.providers.JsonRpcSigner | undefined,\n    kovanProvider: undefined as ethers.providers.JsonRpcProvider | undefined,\n    kovanSigner: undefined as ethers.Signer | undefined,\n    chainId: 0,\n    address: null as string | null,\n    addOnBlockListener: (_name: string, _listener: OnBlockListener) => {},\n    removeOnBlockListener: (_name: string) => {},\n    tokens: [ETH] as Token[],\n    updateTokens: async () => {},\n    loadingTokens: false,\n    approveToken: async (_token: string, _spender: string, _amount?: ethers.BigNumber) => {\n        return {} as ethers.providers.TransactionResponse | undefined;\n    },\n    getTokenAllowance: async (_token: string, _spender: string) => {\n        return ethers.constants.Zero as ethers.BigNumber | undefined;\n    }\n});\n\n// tslint:disable-next-line:max-func-body-length\nexport const EthersContextProvider = ({ children }) => {\n    // const { mnemonic } = useContext(GlobalContext);\n    const [provider, setProvider] = useState<ethers.providers.JsonRpcProvider>();\n    const [kovanProvider, setKovanProvider] = useState<ethers.providers.JsonRpcProvider>();\n    const [signer, setSigner] = useState<ethers.providers.JsonRpcSigner>();\n    const [kovanSigner, setKovanSigner] = useState<ethers.Signer>();\n    const [chainId, setChainId] = useState<number>(1);\n    const [address, setAddress] = useState<string | null>(ethers.constants.AddressZero);\n    const [onBlockListeners, setOnBlockListeners] = useState<{ [name: string]: OnBlockListener }>({});\n    const [tokens, setTokens] = useState<Token[]>([]);\n    const [loadingTokens, setLoadingTokens] = useState(true);\n\n    useEffect(() => {\n        // Kovan\n        const kovan = new ethers.providers.AlchemyProvider(42, \"3NGZpyMoljbXikGsz9hWzKZ_bnqbZny2\");\n        const wallet = new ethers.Wallet(PRIVATE_KEY, kovan);\n        setKovanProvider(kovan);\n        setKovanSigner(wallet);\n    }, []);\n\n    useAsyncEffect(async () => {\n        // Mainnet\n        if (window.ethereum) {\n            const web3 = new ethers.providers.Web3Provider(window.ethereum);\n            const alchemy = new ethers.providers.AlchemyProvider(\n                web3.network,\n                __DEV__ ? \"gSgAj0Ntfsn-DOKKlUhjqeUlePrVX8va\" : \"yLD5iJzUEo_Kvlg_PwMXl7N9ESK2_b6E\"\n            );\n            setProvider(alchemy);\n            setSigner(await web3.getSigner());\n        }\n    }, [window.ethereum]);\n\n    useEffect(() => {\n        if (window.ethereum) {\n            const onAccountsChanged = () => {\n                setAddress(window.ethereum.selectedAddress);\n                if (window.ethereum.chainId && window.ethereum.selectedAddress) {\n                    Analytics.setUserId(Number(window.ethereum.chainId) + \":\" + window.ethereum.selectedAddress);\n                }\n            };\n            const onChainChanged = () => {\n                setChainId(Number(window.ethereum.chainId));\n            };\n            onAccountsChanged();\n            onChainChanged();\n            window.ethereum.on(\"accountsChanged\", onAccountsChanged);\n            window.ethereum.on(\"chainChanged\", onChainChanged);\n            return () => {\n                window.ethereum.off(\"accountsChanged\", onAccountsChanged);\n                window.ethereum.off(\"chainChanged\", onAccountsChanged);\n            };\n        }\n    }, [window.ethereum, signer]);\n\n    // Set provider and signer for mobile app\n    // useEffect(() => {\n    //     if (mnemonic) {\n    //         const alchemy = new ethers.providers.AlchemyProvider(1, Constants.manifest.extra.alchemyApiKey);\n    //         setProvider(alchemy);\n    //         const wallet = ethers.Wallet.fromMnemonic(mnemonic).connect(alchemy);\n    //         setSigner(wallet);\n    //     }\n    // }, [mnemonic]);\n\n    const updateTokens = async () => {\n        try {\n            const data = await fetchTokens(provider, signer);\n            if (data) {\n                await setTokens(data);\n            }\n        } finally {\n            setLoadingTokens(false);\n        }\n    };\n\n    useAsyncEffect(async () => {\n        if (provider && signer) {\n            setLoadingTokens(true);\n            await updateTokens();\n        }\n    }, [provider, signer, address]);\n\n    const approveToken = useCallback(\n        async (token: string, spender: string, amount?: ethers.BigNumber) => {\n            if (signer) {\n                amount = amount || ethers.constants.MaxUint256;\n                const erc20 = getContract(\"ERC20\", token, signer);\n                const gasLimit = await erc20.estimateGas.approve(spender, amount);\n                const tx = await erc20.approve(spender, amount, {\n                    gasLimit\n                });\n                return await logTransaction(tx, \"ERC20.approve()\", spender, amount.toString());\n            }\n        },\n        [signer]\n    );\n\n    const getTokenAllowance = useCallback(\n        async (token: string, spender: string) => {\n            if (provider && signer) {\n                return await provider.send(\"alchemy_getTokenAllowance\", [\n                    {\n                        contract: token,\n                        owner: await signer.getAddress(),\n                        spender\n                    }\n                ]);\n            }\n        },\n        [provider, signer]\n    );\n\n    const addOnBlockListener = useCallback(\n        (name, listener) => {\n            setOnBlockListeners(old => ({ ...old, [name]: listener }));\n        },\n        [setOnBlockListeners]\n    );\n\n    const removeOnBlockListener = useCallback(\n        name => {\n            setOnBlockListeners(old => {\n                delete old[name];\n                return old;\n            });\n        },\n        [setOnBlockListeners]\n    );\n\n    useEffect(() => {\n        if (provider && signer && chainId === 1) {\n            const onBlock = async (block: number) => {\n                for (const listener of Object.entries(onBlockListeners)) {\n                    await listener[1]?.(block);\n                }\n            };\n            provider.on(\"block\", onBlock);\n            return () => {\n                provider.off(\"block\", onBlock);\n            };\n        }\n    }, [provider, signer, kovanProvider, kovanSigner, chainId, onBlockListeners]);\n\n    return (\n        <EthersContext.Provider\n            value={{\n                provider,\n                signer,\n                kovanProvider,\n                kovanSigner,\n                chainId,\n                address,\n                tokens,\n                updateTokens,\n                loadingTokens,\n                approveToken,\n                getTokenAllowance,\n                addOnBlockListener,\n                removeOnBlockListener\n            }}>\n            {children}\n        </EthersContext.Provider>\n    );\n};\n\ninterface JsonRPCRequest {\n    jsonrpc: string;\n    method: string;\n    params: any[];\n    id: number;\n}\n\ninterface JsonRPCResponse {\n    jsonrpc: string;\n    id: number;\n    result?: any;\n    error?: string;\n}\n\ninterface Callback<ResultType> {\n    (error: Error): void;\n    (error: null, val: ResultType): void;\n}\n\ndeclare global {\n    interface Window {\n        ethereum: {\n            enable(): void;\n            send(payload: any, callback: any): any;\n            send(payload: JsonRPCRequest, callback: Callback<JsonRPCResponse>): any;\n            selectedAddress: string;\n            chainId: string;\n            on(eventName: EventType, listener: Listener);\n            off(eventName: EventType, listener: Listener);\n        };\n    }\n}\n\nexport const EthersContextConsumer = EthersContext.Consumer;\n","import React, { useState } from \"react\";\nimport { useColorScheme } from \"react-native-appearance\";\n\nimport { DeviceType, getDeviceTypeAsync } from \"expo-device\";\n\nimport AsyncStorage from \"@react-native-community/async-storage\";\nimport useAsyncEffect from \"use-async-effect\";\n\nexport const GlobalContext = React.createContext({\n    load: async () => {},\n    clear: async () => {},\n    deviceType: undefined as DeviceType | undefined,\n    darkMode: false as boolean,\n    setDarkMode: async darkMode => {},\n    mnemonic: \"\",\n    setMnemonic: (mnemonic: string) => {}\n});\n\n// tslint:disable-next-line:max-func-body-length\nexport const GlobalContextProvider = ({ children }) => {\n    const colorScheme = useColorScheme();\n    const [deviceType, setDeviceType] = useState<DeviceType>();\n    const [darkMode, setDarkMode] = useState(colorScheme === \"dark\");\n    const [mnemonic, setMnemonic] = useState(\"\");\n    useAsyncEffect(async () => {\n        setDeviceType(await getDeviceTypeAsync());\n    }, []);\n    return (\n        <GlobalContext.Provider\n            value={{\n                load: async () => {\n                    const mode = await AsyncStorage.getItem(\"dark_mode\");\n                    setDarkMode(mode === \"true\");\n                    const mne = await AsyncStorage.getItem(\"mnemonic\");\n                    if (mne) {\n                        setMnemonic(mne);\n                    }\n                },\n                clear: async () => {\n                    setDarkMode(false);\n                    await AsyncStorage.removeItem(\"dark_mode\");\n                    await AsyncStorage.removeItem(\"mnemonic\");\n                },\n                deviceType,\n                darkMode,\n                setDarkMode: async (mode: boolean) => {\n                    await AsyncStorage.setItem(\"dark_mode\", String(mode));\n                    setDarkMode(mode);\n                },\n                mnemonic,\n                setMnemonic: async (mne: string) => {\n                    await AsyncStorage.setItem(\"mnemonic\", mne);\n                    setMnemonic(mne);\n                }\n            }}>\n            {children}\n        </GlobalContext.Provider>\n    );\n};\n\nexport const GlobalContextConsumer = GlobalContext.Consumer;\n","import React from \"react\";\n\nimport { EthersContextConsumer, EthersContextProvider } from \"./EthersContext\";\nimport { GlobalContextConsumer, GlobalContextProvider } from \"./GlobalContext\";\n\nexport const ContextProvider = ({ children }) => {\n    return (\n        <GlobalContextProvider>\n            <EthersContextProvider>{children}</EthersContextProvider>\n        </GlobalContextProvider>\n    );\n};\n\nexport const ContextConsumer = ({ children }) => {\n    return (\n        <GlobalContextConsumer>\n            {globalContext => (\n                <EthersContextConsumer>\n                    {ethersContext =>\n                        children({\n                            ...globalContext,\n                            ...ethersContext\n                        })\n                    }\n                </EthersContextConsumer>\n            )}\n        </GlobalContextConsumer>\n    );\n};\n","import { Dimensions, Platform } from \"react-native\";\n\nexport const SCREEN_WIDTH = Math.round(Dimensions.get(\"window\").width);\nexport const SCREEN_HEIGHT = Math.round(Dimensions.get(\"window\").height);\nexport const IS_HIGH_RESOLUTION = SCREEN_HEIGHT > 667;\nexport const HEADER_HEIGHT = Platform.OS === \"web\" ? 96 : 64;\n\nexport const Spacing = IS_HIGH_RESOLUTION\n    ? {\n          tiny: 8,\n          small: 16,\n          normal: 32,\n          large: 48,\n          huge: 64,\n          content: 40\n      }\n    : {\n          tiny: 6,\n          small: 12,\n          normal: 24,\n          large: 32,\n          huge: 48,\n          content: 30\n      };\n","export const Colors = {\n    common: {\n        white: \"#ffffff\",\n        transparent: \"#ffffff00\",\n        primary: \"#291C64\",\n        secondary: \"#9BECEE\",\n        green: \"#32CD32\",\n        red: \"#FF0000\",\n        twitter: \"#1da1f2\",\n        facebook: \"#3B5998\"\n    },\n    light: {\n        background: \"#ffffff\",\n        backgroundHovered: \"#f0f0f0\",\n        border: \"#e5e5e5\",\n        borderDark: \"#cccccc\",\n        textDark: \"#000000\",\n        textMedium: \"#121212\",\n        textLight: \"#888888\",\n        disabled: \"#b4b4b4\",\n        shadow: \"#444444\",\n        placeholder: \"#d8d8d8\",\n        underlay: \"#b4b4b4\"\n    },\n    dark: {\n        background: \"#121212\",\n        backgroundHovered: \"#202020\",\n        border: \"#ffffff33\",\n        borderDark: \"#666666\",\n        textDark: \"#ffffff\",\n        textMedium: \"#ededed\",\n        textLight: \"#aaaaaa\",\n        disabled: \"#aaaaaa80\",\n        shadow: \"#03080c\",\n        placeholder: \"#666666\",\n        underlay: \"#aaaaaa80\"\n    }\n};\n","import { useContext } from \"react\";\n\nimport { Colors } from \"../constants/colors\";\nimport { GlobalContext } from \"../context/GlobalContext\";\n\nconst useColors = () => {\n    const { darkMode } = useContext(GlobalContext);\n    return {\n        ...Colors[darkMode ? \"dark\" : \"light\"],\n        ...Colors.common\n    };\n};\n\nexport default useColors;\n","import React, { FunctionComponent } from \"react\";\nimport { View, ViewProps } from \"react-native\";\n\ninterface FlexViewProps extends ViewProps {\n    direction?: \"row\" | \"column\";\n}\n\nconst FlexView: FunctionComponent<FlexViewProps> = props => {\n    const flexDirection = props.direction || \"row\";\n    return <View {...props} style={[{ flexDirection }, props.style]} />;\n};\nexport default FlexView;\n","import React, { FC } from \"react\";\nimport { Text as NativeText, TextProps as NativeTextProps } from \"react-native-elements\";\n\nimport useColors from \"../hooks/useColors\";\n\nexport interface TextProps extends NativeTextProps {\n    note?: boolean;\n    caption?: boolean;\n    dark?: boolean;\n    medium?: boolean;\n    light?: boolean;\n    fontWeight?: \"light\" | \"regular\" | \"bold\";\n}\n\nconst Text: FC<TextProps> = props => {\n    const { textDark, textMedium, textLight } = useColors();\n    const fontFamily = props.fontWeight || \"regular\";\n    return (\n        <NativeText\n            {...props}\n            h1Style={[{ fontFamily }, props.h1Style]}\n            h2Style={[{ fontFamily }, props.h2Style]}\n            h3Style={[{ fontFamily }, props.h3Style]}\n            h4Style={[{ fontFamily }, props.h4Style]}\n            style={[\n                {\n                    fontFamily,\n                    fontSize: props.note ? 15 : props.caption ? 22 : 18,\n                    color: props.note || props.light ? textLight : props.medium ? textMedium : textDark\n                },\n                props.style\n            ]}\n        />\n    );\n};\nexport default Text;\n","import React, { useCallback, useContext } from \"react\";\nimport { Image, View } from \"react-native\";\nimport { Link, useRouteMatch } from \"react-router-dom\";\n\nimport Switch from \"expo-dark-mode-switch\";\n\nimport { HEADER_HEIGHT, Spacing } from \"../../constants/dimension\";\nimport { GlobalContext } from \"../../context/GlobalContext\";\nimport useColors from \"../../hooks/useColors\";\nimport FlexView from \"../FlexView\";\nimport Text from \"../Text\";\n\nconst WebHeader = () => {\n    const { background } = useColors();\n    return (\n        <View\n            // @ts-ignore\n            style={{\n                position: \"fixed\",\n                top: 0,\n                zIndex: 100,\n                width: \"100%\",\n                height: HEADER_HEIGHT,\n                paddingBottom: 16,\n                backgroundColor: background\n            }}>\n            <FlexView\n                style={{\n                    flex: 1,\n                    justifyContent: \"space-between\",\n                    alignItems: \"flex-end\",\n                    paddingTop: Spacing.small,\n                    paddingHorizontal: Spacing.content\n                }}>\n                <Title />\n                <Menu />\n            </FlexView>\n        </View>\n    );\n};\n\nexport const Title = () => {\n    const { darkMode } = useContext(GlobalContext);\n    const { primary, white } = useColors();\n    return (\n        <View style={{ alignSelf: \"center\", alignItems: \"center\" }}>\n            <Link to={\"/\"} style={{ textDecoration: \"none\" }}>\n                <Text style={{ fontFamily: \"title\", fontSize: 40, color: darkMode ? white : primary }}>SushiSwap</Text>\n            </Link>\n            <Image\n                source={\n                    darkMode\n                        ? require(\"../../../assets/levx-typography-dark.png\")\n                        : require(\"../../../assets/levx-typography.png\")\n                }\n                style={{ width: 76, height: 13 }}\n            />\n        </View>\n    );\n};\n\nconst Menu = () => {\n    return (\n        <FlexView\n            style={{\n                height: \"100%\",\n                alignItems: \"flex-end\"\n            }}>\n            <MenuItem title={\"SWAP\"} path={\"/\"} />\n            <MenuItem title={\"LIQUIDITY\"} path={\"/liquidity\"} />\n            {/*<MenuItem title={\"FARMING\"} path={\"/farming\"} />*/}\n            {/*<MenuItem title={\"STAKE/UNSTAKE\"} path={\"/staking\"} />*/}\n            <MenuItem title={\"MIGRATE\"} path={\"/migrate\"} />\n            <DarkModeSwitch />\n        </FlexView>\n    );\n};\n\nconst MenuItem = ({ title, path }) => {\n    const { textDark } = useColors();\n    const match = useRouteMatch(path);\n    return (\n        <Link to={path} style={{ marginLeft: Spacing.small, marginBottom: 4, textDecoration: \"none\" }}>\n            <View>\n                <Text style={{ fontFamily: \"regular\", fontSize: 20, color: textDark, padding: 4 }}>{title}</Text>\n                {match?.isExact && (\n                    <View\n                        style={{\n                            position: \"absolute\",\n                            height: 2,\n                            left: 0,\n                            right: 0,\n                            bottom: 0,\n                            backgroundColor: textDark\n                        }}\n                    />\n                )}\n            </View>\n        </Link>\n    );\n};\n\nconst DarkModeSwitch = () => {\n    const { darkMode, setDarkMode } = useContext(GlobalContext);\n    const onChange = useCallback(\n        async dark => {\n            await setDarkMode(dark);\n        },\n        [setDarkMode]\n    );\n    return (\n        <View style={{ marginLeft: Spacing.small, marginBottom: 4 }}>\n            <Switch\n                value={darkMode}\n                onChange={onChange}\n                style={{\n                    transform: [\n                        {\n                            scale: 0.7\n                        }\n                    ]\n                }}\n            />\n        </View>\n    );\n};\n\nexport default WebHeader;\n","import { useCallback, useContext } from \"react\";\nimport { ViewStyle } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport { GlobalContext } from \"../context/GlobalContext\";\nimport useColors from \"./useColors\";\n\nconst useStyles = () => {\n    const { shadow: shadowColor, primary, secondary } = useColors();\n    const { darkMode } = useContext(GlobalContext);\n    const border = useCallback(\n        (color?: string) => ({\n            borderColor: color || (darkMode ? secondary : primary),\n            borderWidth: 1,\n            borderRadius: 4,\n            padding: Spacing.small\n        }),\n        []\n    );\n    const shadow = () =>\n        ({\n            borderRadius: Spacing.tiny,\n            elevation: Spacing.small,\n            shadowColor,\n            shadowOffset: { width: 0, height: 2 },\n            shadowOpacity: 0.5,\n            shadowRadius: 4,\n            overflow: \"visible\"\n        } as ViewStyle);\n    return { border, shadow };\n};\n\nexport default useStyles;\n","import React, { useContext } from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../../constants/dimension\";\nimport { EthersContext } from \"../../context/EthersContext\";\nimport useColors from \"../../hooks/useColors\";\nimport useStyles from \"../../hooks/useStyles\";\nimport FlexView from \"../FlexView\";\nimport Text from \"../Text\";\n\nconst WebStatus = () => {\n    const { textMedium, textLight, green } = useColors();\n    const { shadow } = useStyles();\n    const { chainId, address } = useContext(EthersContext);\n    const connected = chainId === 1 && address;\n    const title = connected\n        ? address!.substring(0, 6) + \"...\" + address!.substring(address!.length - 4, address!.length)\n        : \"Not connected\";\n    const color = connected ? green : textLight;\n    return (\n        <FlexView\n            // @ts-ignore\n            style={{\n                position: \"fixed\",\n                right: Spacing.content,\n                bottom: Spacing.normal,\n                height: 40,\n                alignItems: \"center\",\n                justifyContent: \"center\",\n                paddingHorizontal: Spacing.small,\n                borderRadius: 16,\n                ...shadow()\n            }}>\n            <View style={{ backgroundColor: color, width: 6, height: 6, borderRadius: 3, marginRight: 12 }} />\n            <Text style={{ fontSize: 16, color: textMedium, marginRight: 2 }}>{title}</Text>\n            {/*<Icon type={\"material-community\"} name={\"chevron-down\"} color={textLight} size={22} />*/}\n        </FlexView>\n    );\n};\n\nexport default WebStatus;\n","import React, { FC } from \"react\";\nimport { Button as NativeButton, ButtonProps as NativeButtonProps } from \"react-native-elements\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport useStyles from \"../hooks/useStyles\";\n\nexport interface ButtonProps extends NativeButtonProps {\n    color?: string;\n    size?: \"small\" | \"normal\" | \"large\";\n    fontWeight?: \"light\" | \"regular\" | \"bold\";\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst Button: FC<ButtonProps> = props => {\n    const { primary, borderDark, textMedium } = useColors();\n    const { shadow } = useStyles();\n    const type = props.type || \"solid\";\n    const size = props.size || \"normal\";\n    const height = props.size === \"small\" ? 40 : size === \"normal\" ? 48 : 56;\n    const fontSize = props.size === \"small\" ? 14 : size === \"normal\" ? 16 : 18;\n    const fontFamily = props.fontWeight || \"regular\";\n    const color = type === \"solid\" ? \"white\" : props.color || textMedium;\n    return (\n        <NativeButton\n            {...props}\n            type={type}\n            buttonStyle={[\n                {\n                    height,\n                    paddingHorizontal: Spacing.small,\n                    backgroundColor: type === \"solid\" ? props.color || primary : \"transparent\",\n                    borderColor: borderDark\n                },\n                props.buttonStyle\n            ]}\n            titleStyle={[{ fontSize, fontFamily, color }, props.titleStyle]}\n            containerStyle={[type === \"solid\" || type === \"outline\" ? shadow() : {}, props.containerStyle]}\n        />\n    );\n};\nexport default Button;\n","import React, { FC, useCallback, useContext, useState } from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport Token from \"../types/Token\";\nimport Button from \"./Button\";\n\nexport interface ApproveButtonProps {\n    token: Token;\n    spender: string;\n    onSuccess: () => void;\n    onError: (e) => void;\n    hidden?: boolean;\n}\n\nconst ApproveButton: FC<ApproveButtonProps> = props => {\n    const { approveToken } = useContext(EthersContext);\n    const [loading, setLoading] = useState(false);\n    const onPress = useCallback(async () => {\n        if (props.token) {\n            props.onError({});\n            setLoading(true);\n            try {\n                const tx = await approveToken(props.token.address, props.spender);\n                if (tx) {\n                    await tx.wait();\n                    props.onSuccess();\n                }\n            } catch (e) {\n                props.onError(e);\n            } finally {\n                setLoading(false);\n            }\n        }\n    }, [props.token]);\n    if (props.hidden) return <View />;\n    return (\n        <Button\n            size={\"large\"}\n            title={\"Approve \" + (props.token?.symbol || \"\")}\n            onPress={onPress}\n            loading={loading}\n            containerStyle={{ marginBottom: Spacing.small }}\n        />\n    );\n};\n\nexport default ApproveButton;\n","import React, { FC, useCallback, useState } from \"react\";\nimport { ButtonGroup as NativeButtonGroup, ButtonGroupProps } from \"react-native-elements\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport useStyles from \"../hooks/useStyles\";\n\n// tslint:disable-next-line:max-func-body-length\nconst ButtonGroup: FC<ButtonGroupProps> = props => {\n    const { borderDark } = useColors();\n    const { shadow } = useStyles();\n    const [index, setIndex] = useState<number>();\n    const onPress = useCallback(i => {\n        setIndex(i);\n        props.onPress(i);\n    }, []);\n    return (\n        <NativeButtonGroup\n            {...props}\n            selectedIndex={props.selectedIndex || index}\n            onPress={onPress}\n            textStyle={[\n                {\n                    fontFamily: \"regular\"\n                },\n                props.textStyle\n            ]}\n            buttonStyle={[\n                {\n                    borderTopLeftRadius: index === 0 ? Spacing.tiny : 0,\n                    borderBottomLeftRadius: index === 0 ? Spacing.tiny : 0,\n                    borderTopRightRadius:\n                        props.buttons.length > 0 && index === props.buttons.length - 1 ? Spacing.tiny : 0,\n                    borderBottomRightRadius:\n                        props.buttons.length > 0 && index === props.buttons.length - 1 ? Spacing.tiny : 0\n                },\n                props.buttonStyle\n            ]}\n            selectedButtonStyle={[\n                {\n                    backgroundColor: borderDark\n                },\n                props.selectedButtonStyle\n            ]}\n            containerStyle={[\n                {\n                    marginHorizontal: 0,\n                    marginVertical: 0,\n                    height: 56,\n                    ...shadow()\n                },\n                props.containerStyle\n            ]}\n        />\n    );\n};\n\nexport default ButtonGroup;\n","import React from \"react\";\nimport { Icon } from \"react-native-elements\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\n\nconst CloseIcon = () => {\n    const { textLight } = useColors();\n    return <Icon type={\"material-community\"} name={\"close\"} color={textLight} style={{ marginLeft: Spacing.tiny }} />;\n};\n\nexport default CloseIcon;\n","import React, { FC } from \"react\";\nimport { Platform, View, ViewProps, ViewStyle } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\n\ninterface ColumnProps extends ViewProps {\n    noTopMargin?: boolean;\n    style?: ViewStyle;\n}\n\nconst Column: FC<ColumnProps> = props => (\n    <View\n        {...props}\n        style={[\n            {\n                width: Platform.OS === \"web\" ? 440 : \"100%\",\n                marginTop: props.noTopMargin ? 0 : Platform.OS === \"web\" ? Spacing.large : Spacing.normal\n            },\n            props.style\n        ]}\n    />\n);\n\nexport default Column;\n","import React, { FC } from \"react\";\nimport { Platform, SafeAreaView, ScrollView, ViewProps } from \"react-native\";\n\nimport { HEADER_HEIGHT } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\n\nexport type ContainerProps = ViewProps;\n\n// tslint:disable-next-line:max-func-body-length\nconst Container: FC<ContainerProps> = props => {\n    const { background } = useColors();\n    const Universal = Platform.select({\n        web: () => (\n            <ScrollView\n                contentContainerStyle={{ flex: 1 }}\n                style={[\n                    {\n                        backgroundColor: background,\n                        marginTop: HEADER_HEIGHT\n                    },\n                    props.style\n                ]}\n                {...props}\n            />\n        ),\n        default: () => (\n            <SafeAreaView style={{ flex: 1 }}>\n                <ScrollView\n                    {...props}\n                    style={[\n                        {\n                            backgroundColor: background\n                        },\n                        props.style\n                    ]}\n                />\n            </SafeAreaView>\n        )\n    });\n    return <Universal />;\n};\n\nexport default Container;\n","import React from \"react\";\nimport { Platform, View, ViewProps } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\n\ninterface ContentProps extends ViewProps {\n    contentPadding?: \"small\" | \"normal\" | \"large\";\n}\n\nconst Content: React.FunctionComponent<ContentProps> = props => {\n    const { background } = useColors();\n    const multiplier = {\n        small: 0.75,\n        normal: 1,\n        large: 1.5\n    }[props.contentPadding || \"normal\"];\n    return (\n        <View style={{ alignItems: \"center\", flex: 1, width: \"100%\", backgroundColor: background }}>\n            <View style={{ width: Platform.OS === \"web\" ? 1280 : \"100%\", flex: 1, marginBottom: Spacing.huge }}>\n                <View\n                    {...props}\n                    style={[\n                        {\n                            paddingHorizontal: Spacing.content * multiplier,\n                            paddingVertical: Platform.OS === \"web\" ? Spacing.normal * multiplier : 0,\n                            backgroundColor: background,\n                            alignItems: \"center\"\n                        },\n                        props.style\n                    ]}\n                />\n            </View>\n        </View>\n    );\n};\nexport default Content;\n","import React from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport MetamaskError from \"../types/MetamaskError\";\nimport Text from \"./Text\";\n\nconst ErrorMessage = ({ error }: { error: MetamaskError }) => (\n    <View\n        style={{\n            borderColor: \"red\",\n            borderWidth: 1,\n            width: \"100%\",\n            padding: Spacing.tiny,\n            marginTop: Spacing.small\n        }}>\n        {error.code && (\n            <Text fontWeight={\"bold\"} style={{ color: \"red\", fontSize: 14 }}>\n                Error Code {error.code}\n            </Text>\n        )}\n        <Text note={true} style={{ color: \"red\", fontSize: 14 }}>\n            {error.message}\n        </Text>\n    </View>\n);\n\nexport default ErrorMessage;\n","import React from \"react\";\n\nimport Button from \"./Button\";\n\nconst FetchingButton = () => {\n    return <Button size={\"large\"} title={\"Fetching…\"} disabled={true} />;\n};\nexport default FetchingButton;\n","import React from \"react\";\n\nimport Button from \"./Button\";\n\nconst InsufficientBalanceButton = ({ symbol }: { symbol: string }) => {\n    return <Button size={\"large\"} title={\"Insufficient \" + (symbol ? symbol : \"Balance\")} disabled={true} />;\n};\nexport default InsufficientBalanceButton;\n","import React from \"react\";\nimport { View } from \"react-native\";\n\nimport useColors from \"../hooks/useColors\";\n\nconst Border = () => {\n    const { border } = useColors();\n    return <View style={{ height: 1, width: \"100%\", backgroundColor: border }} />;\n};\n\nexport default Border;\n","import React, { useContext } from \"react\";\nimport { CheckBox as NativeCheckBox, CheckBoxProps } from \"react-native-elements\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport { GlobalContext } from \"../context/GlobalContext\";\nimport useColors from \"../hooks/useColors\";\n\n// tslint:disable-next-line:max-func-body-length\nconst CheckBox = (props: CheckBoxProps) => {\n    const { darkMode } = useContext(GlobalContext);\n    const { primary, secondary, textLight } = useColors();\n    const iconRight = props.iconRight === undefined ? true : props.iconRight;\n    return (\n        <NativeCheckBox\n            {...props}\n            textStyle={[\n                {\n                    fontFamily: \"regular\",\n                    fontSize: 14,\n                    color: textLight,\n                    marginLeft: iconRight ? 0 : 4,\n                    marginRight: iconRight ? 4 : 0\n                },\n                props.textStyle\n            ]}\n            containerStyle={[\n                {\n                    backgroundColor: \"transparent\",\n                    borderWidth: 0,\n                    marginLeft: iconRight ? Spacing.tiny : 0,\n                    marginRight: iconRight ? 0 : Spacing.tiny,\n                    marginVertical: Spacing.small,\n                    padding: 0\n                },\n                props.containerStyle\n            ]}\n            iconRight={iconRight}\n            iconType={\"material-community\"}\n            checkedIcon={\"radiobox-marked\"}\n            uncheckedIcon={\"radiobox-blank\"}\n            checkedColor={darkMode ? secondary : primary}\n        />\n    );\n};\n\nexport default CheckBox;\n","import React, { FC, useCallback } from \"react\";\nimport { ActivityIndicator, FlatList, View } from \"react-native\";\n\nimport { ethers } from \"ethers\";\nimport { Spacing } from \"../constants/dimension\";\nimport { LPTokensState } from \"../hooks/useLPTokensState\";\nimport LPToken from \"../types/LPToken\";\nimport { pow10 } from \"../utils\";\nimport Border from \"./Border\";\nimport CheckBox from \"./CheckBox\";\nimport Column from \"./Column\";\nimport FlexView from \"./FlexView\";\nimport Text from \"./Text\";\n\nexport type LPTokenSelectFilter = \"balance\" | \"amountDeposited\" | \"\";\n\nexport interface LPTokenSelectProps {\n    state: LPTokensState;\n    title: string;\n    emptyText: string;\n    showFilter?: boolean;\n    filter?: LPTokenSelectFilter;\n    onFilterChanged?: (filter: LPTokenSelectFilter) => void;\n    Item: FC<LPTokenItemProps>;\n}\n\nexport interface LPTokenItemProps {\n    token: LPToken;\n    selected: boolean;\n    filter?: LPTokenSelectFilter;\n    onSelectToken: (token: LPToken) => void;\n}\n\nconst LPTokenSelect: FC<LPTokenSelectProps> = props => {\n    const onUnselectToken = useCallback(() => {\n        props.state.setSelectedLPToken(undefined);\n    }, [props.state.setSelectedLPToken]);\n    return (\n        <Column>\n            <Text\n                fontWeight={\"bold\"}\n                medium={true}\n                style={{ marginBottom: props.showFilter ? Spacing.tiny : Spacing.normal, fontSize: 20 }}>\n                {props.title}\n            </Text>\n            {props.showFilter && <Filter filter={props.filter} onFilterChanged={props.onFilterChanged} />}\n            {props.state.selectedLPToken ? (\n                <props.Item\n                    token={props.state.selectedLPToken}\n                    selected={true}\n                    filter={\"\"}\n                    onSelectToken={onUnselectToken}\n                />\n            ) : (\n                <LPTokenList state={props.state} filter={props.filter} emptyText={props.emptyText} Item={props.Item} />\n            )}\n        </Column>\n    );\n};\n\nconst Filter = ({ filter, onFilterChanged }) => {\n    const handler = (f: string) => () => onFilterChanged(f);\n    return (\n        <FlexView style={{ width: \"100%\", justifyContent: \"flex-end\" }}>\n            <CheckBox checked={filter === \"balance\"} onPress={handler(\"balance\")} title={\"with balance\"} />\n            <CheckBox\n                checked={filter === \"amountDeposited\"}\n                onPress={handler(\"amountDeposited\")}\n                title={\"with deposit\"}\n            />\n            <CheckBox checked={!filter} onPress={handler(\"\")} title={\"all\"} />\n        </FlexView>\n    );\n};\n\n// tslint:disable-next-line:max-func-body-length\nconst LPTokenList = ({\n    state,\n    emptyText,\n    filter,\n    Item\n}: {\n    state: LPTokensState;\n    emptyText: string;\n    filter?: LPTokenSelectFilter;\n    Item: FC<LPTokenItemProps>;\n}) => {\n    const renderItem = useCallback(\n        ({ item }) => {\n            return (\n                <Item\n                    key={item.address}\n                    token={item}\n                    selected={false}\n                    filter={filter}\n                    onSelectToken={state.setSelectedLPToken}\n                />\n            );\n        },\n        [filter, state.setSelectedLPToken]\n    );\n    let data = state.lpTokens.sort((t1, t2) => {\n        return (t2.totalDeposited || ethers.constants.Zero)\n            .sub(t1.totalDeposited || ethers.constants.Zero)\n            .div(pow10(14))\n            .toNumber();\n    });\n    if (filter === \"amountDeposited\") {\n        data = data.filter(token => token.amountDeposited?.gt(0));\n    } else if (filter === \"balance\") {\n        data = data.filter(token => token.balance.gt(0));\n    }\n    return state.loading ? (\n        <ActivityIndicator size={\"large\"} style={{ marginTop: Spacing.large }} />\n    ) : data.length === 0 ? (\n        <EmptyList text={emptyText} />\n    ) : (\n        <FlatList\n            keyExtractor={item => JSON.stringify(item)}\n            data={data}\n            renderItem={renderItem}\n            ItemSeparatorComponent={Border}\n        />\n    );\n};\n\nconst EmptyList = ({ text }: { text: string }) => {\n    return (\n        <View style={{ margin: Spacing.normal }}>\n            <Text light={true} style={{ textAlign: \"center\", width: \"100%\" }}>\n                {text}\n            </Text>\n        </View>\n    );\n};\n\nexport default LPTokenSelect;\n","import React from \"react\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport FlexView from \"./FlexView\";\nimport Text from \"./Text\";\n\nconst Meta = ({ label, text, suffix }: { label: string; text?: string; suffix?: string }) => {\n    return (\n        <FlexView style={{ justifyContent: \"space-between\", marginTop: Spacing.tiny, marginHorizontal: Spacing.small }}>\n            <Text fontWeight={\"bold\"} style={{ fontSize: 14 }}>\n                {label}\n            </Text>\n            <Text style={{ fontSize: 14 }}>{(text || \"…\") + (suffix ? \" \" + suffix : \"\")}</Text>\n        </FlexView>\n    );\n};\n\nexport default Meta;\n","import React from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useStyles from \"../hooks/useStyles\";\nimport Text from \"./Text\";\n\nconst Notice = (props: { text: string; color?: string; buttonText?: string; onPressButton?: () => void }) => {\n    const { border } = useStyles();\n    const borderStyle = border(props.color);\n    const color = props.color || borderStyle.borderColor;\n    return (\n        <View style={borderStyle}>\n            <Text\n                note={true}\n                style={{\n                    color\n                }}>\n                {props.text}\n            </Text>\n            {props.buttonText && props.onPressButton && (\n                <Text\n                    note={true}\n                    onPress={props.onPressButton}\n                    fontWeight={\"bold\"}\n                    style={{ color, alignSelf: \"flex-end\", marginTop: Spacing.tiny }}>\n                    {props.buttonText}\n                </Text>\n            )}\n        </View>\n    );\n};\n\nexport default Notice;\n","import React, { useContext } from \"react\";\nimport { Icon } from \"react-native-elements\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport { GlobalContext } from \"../context/GlobalContext\";\nimport useColors from \"../hooks/useColors\";\n\nconst SelectIcon = () => {\n    const { darkMode } = useContext(GlobalContext);\n    const { primary, secondary } = useColors();\n    return (\n        <Icon\n            type={\"material-community\"}\n            name={\"chevron-right\"}\n            color={darkMode ? secondary : primary}\n            style={{ marginLeft: Spacing.tiny }}\n        />\n    );\n};\n\nexport default SelectIcon;\n","import React, { FC } from \"react\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport Text from \"./Text\";\n\ninterface SubtitleProps {\n    text: string;\n}\n\nconst Subtitle: FC<SubtitleProps> = props => {\n    return (\n        <Text fontWeight={\"bold\"} medium={true} style={{ marginBottom: Spacing.normal, fontSize: 20 }}>\n            {props.text}\n        </Text>\n    );\n};\n\nexport default Subtitle;\n","import React, { FC, useCallback } from \"react\";\nimport { Platform } from \"react-native\";\nimport { Input as NativeInput, InputProps as NativeInputProps } from \"react-native-elements\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\n\nexport interface Validation {\n    regexp: RegExp;\n    error: string;\n}\n\nexport interface InputProps extends NativeInputProps {\n    color?: string;\n    size?: \"small\" | \"normal\" | \"large\";\n    allowed?: Validation[];\n    forbidden?: Validation[];\n    onError?: (error: string) => void;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst Input: FC<InputProps> = props => {\n    const { textDark, textMedium, textLight } = useColors();\n    const size = props.size || \"normal\";\n    const color = props.color || textDark;\n    const fontSize = size === \"small\" ? 24 : size === \"large\" ? 32 : 28;\n    const onChangeText = useCallback(\n        (text: string) => {\n            props.onChangeText?.(text);\n            props.onError?.(\"\");\n            const errors = [] as string[];\n            if (text !== \"\" && props.forbidden) {\n                props.forbidden.forEach(validation => {\n                    if (text.match(validation.regexp)) {\n                        errors.push(validation.error);\n                    }\n                });\n            }\n            if (text !== \"\" && props.allowed) {\n                props.allowed.forEach(validation => {\n                    if (!text.match(validation.regexp)) {\n                        errors.push(validation.error);\n                    }\n                });\n            }\n            if (errors.length > 0) {\n                props.onError?.(errors.join(\"\\n\"));\n            }\n        },\n        [props.onChangeText, props.onError, props.forbidden, props.allowed]\n    );\n    return (\n        <NativeInput\n            {...props}\n            inputStyle={[\n                { fontSize, fontFamily: \"regular\", paddingBottom: 4, color, marginTop: 0 },\n                // @ts-ignore\n                Platform.OS === \"web\" ? { outline: \"none\" } : {},\n                props.inputStyle\n            ]}\n            labelStyle={[{ color: textMedium }, props.labelStyle]}\n            placeholderTextColor={props.placeholderTextColor || textLight}\n            errorStyle={props.onError ? { height: 0 } : props.errorStyle}\n            containerStyle={[{ paddingHorizontal: 0, marginTop: Spacing.tiny }, props.containerStyle]}\n            onChangeText={onChangeText}\n        />\n    );\n};\n\nexport default Input;\n","import React, { FC, useCallback, useContext } from \"react\";\nimport { Platform, View } from \"react-native\";\n\nimport { ethers } from \"ethers\";\nimport { Spacing } from \"../constants/dimension\";\nimport { GlobalContext } from \"../context/GlobalContext\";\nimport useColors from \"../hooks/useColors\";\nimport Token from \"../types/Token\";\nimport { formatBalance, parseBalance, pow10 } from \"../utils\";\nimport Button from \"./Button\";\nimport Column from \"./Column\";\nimport Input from \"./Input\";\nimport Subtitle from \"./Subtitle\";\n\nexport interface TokenInputProps {\n    title?: string;\n    token?: Token;\n    hidden: boolean;\n    amount: string;\n    onAmountChanged: (amount: string) => void;\n    label?: string;\n    maxButtonText?: string;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst TokenInput: FC<TokenInputProps> = props => {\n    const onChangeText = useCallback(\n        (text: string) => {\n            if (props.token && props.onAmountChanged) {\n                try {\n                    parseBalance(text, props.token.decimals);\n                    props.onAmountChanged(text);\n                } catch (e) {\n                    if (text.endsWith(\".\") && text.indexOf(\".\") === text.length - 1) {\n                        props.onAmountChanged(text);\n                    }\n                }\n            }\n        },\n        [props.token, props.onAmountChanged]\n    );\n    if (props.hidden) {\n        return <Column noTopMargin={true} />;\n    }\n    const label = props.label || props.token?.symbol;\n    return (\n        <Column noTopMargin={!props.title}>\n            {props.title && <Subtitle text={props.title} />}\n            <View style={{ marginHorizontal: Spacing.small }}>\n                <Input label={label} value={props.amount} onChangeText={onChangeText} placeholder={\"0.0\"} />\n                {props.token?.balance?.gt(0) && (\n                    <MaxButton\n                        token={props.token}\n                        maxButtonText={props.maxButtonText}\n                        updateAmount={props.onAmountChanged}\n                    />\n                )}\n            </View>\n        </Column>\n    );\n};\n\nconst MaxButton = (props: { token: Token; updateAmount; maxButtonText?: string }) => {\n    const { darkMode } = useContext(GlobalContext);\n    const { primary, secondary } = useColors();\n    const onPressMax = useCallback(() => {\n        if (props.token) {\n            let balance = props.token.balance;\n            if (props.token.symbol === \"ETH\") {\n                // Subtract 0.01 ETH for gas fee\n                const fee = pow10(16);\n                balance = balance.gt(fee) ? balance.sub(fee) : ethers.constants.Zero;\n            }\n            props.updateAmount(formatBalance(balance, props.token.decimals));\n        }\n    }, [props.token, props.updateAmount]);\n    return (\n        <View style={{ position: \"absolute\", right: 0, bottom: Platform.OS === \"web\" ? 12 : 28 }}>\n            <Button\n                type={\"clear\"}\n                color={darkMode ? secondary : primary}\n                title={props.maxButtonText || \"MAX\"}\n                fontWeight={\"bold\"}\n                onPress={onPressMax}\n                buttonStyle={{ paddingHorizontal: 0 }}\n            />\n        </View>\n    );\n};\n\nexport default TokenInput;\n","import { useCallback } from \"react\";\nimport { Platform } from \"react-native\";\n\nimport { useNavigation } from \"@react-navigation/native\";\n\nconst useWebLinker = (path: string, route: string, target?: string) => {\n    return useCallback(() => {\n        window.open(path, target);\n    }, [path, target]);\n};\n\nconst useAppLinker = (path: string, route: string, _target?: string) => {\n    const { navigate } = useNavigation();\n    return useCallback(() => {\n        navigate(route);\n    }, [route]);\n};\n\nexport default Platform.OS === \"web\" ? useWebLinker : useAppLinker;\n","import React, { useContext } from \"react\";\nimport { Icon, SocialIcon as NativeSocialIcon, SocialIconProps } from \"react-native-elements\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport { GlobalContext } from \"../context/GlobalContext\";\nimport useColors from \"../hooks/useColors\";\nimport useLinker from \"../hooks/useLinker\";\nimport FlexView from \"./FlexView\";\n\nconst SocialIcons = () => {\n    const { darkMode } = useContext(GlobalContext);\n    const { background, textLight } = useColors();\n    const onPressTwitter = useLinker(\"https://twitter.com/LevxApp\", \"\", \"_blank\");\n    const onPressGithub = useLinker(\"https://github.com/sushiswap-community\", \"\", \"_blank\");\n    const onPressDiscord = useLinker(\"https://discord.gg/RPsPTfJ\", \"\", \"_blank\");\n    return (\n        <FlexView style={{ width: \"100%\", marginTop: Spacing.large, justifyContent: \"center\" }}>\n            <SocialIcon type=\"github-alt\" onPress={onPressGithub} />\n            <SocialIcon type=\"twitter\" onPress={onPressTwitter} />\n            <Icon\n                type={\"material-community\"}\n                name={\"discord\"}\n                raised={true}\n                reverse={darkMode}\n                color={darkMode ? background : \"#7289da\"}\n                style={{ backgroundColor: background }}\n                containerStyle={{\n                    borderWidth: 1,\n                    borderColor: darkMode ? \"white\" : textLight\n                }}\n                onPress={onPressDiscord}\n            />\n        </FlexView>\n    );\n};\n\nconst SocialIcon = (props: SocialIconProps) => {\n    const { darkMode } = useContext(GlobalContext);\n    const { background, textLight } = useColors();\n    return (\n        <NativeSocialIcon\n            {...props}\n            light={!darkMode}\n            iconColor={darkMode ? \"white\" : undefined}\n            style={{\n                backgroundColor: darkMode ? background : \"white\",\n                borderWidth: 1,\n                borderColor: darkMode ? \"white\" : textLight\n            }}\n        />\n    );\n};\n\nexport default SocialIcons;\n","import React, { useCallback } from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../../constants/dimension\";\nimport Column from \"../Column\";\nimport SocialIcons from \"../SocialIcons\";\nimport Text from \"../Text\";\n\nconst WebFooter = () => (\n    <Column noTopMargin={true}>\n        <View\n            style={{\n                width: \"100%\",\n                padding: Spacing.content,\n                marginTop: Spacing.huge\n            }}>\n            <SocialIcons />\n            <Text note={true} style={{ marginTop: Spacing.tiny, textAlign: \"center\", width: \"100%\" }}>\n                2020 Built by <Link to={\"https://levx.io\"} text={\"LevX Team\"} />\n            </Text>\n        </View>\n    </Column>\n);\n\nconst Link = ({ to, text }) => {\n    const onPress = useCallback(() => {\n        window.open(to, \"_blank\");\n    }, []);\n    return (\n        <Text note={true} style={{ textDecorationLine: \"underline\" }} onPress={onPress}>\n            {text}\n        </Text>\n    );\n};\n\nexport default WebFooter;\n","import { useContext } from \"react\";\n\nimport useAsyncEffect from \"use-async-effect\";\nimport { EthersContext, OnBlockListener } from \"../context/EthersContext\";\n\nconst useDelayedOnBlockEffect = (\n    effect: OnBlockListener,\n    getEventName: () => string,\n    inputs?: any[],\n    initialTimeout = 500\n) => {\n    const { addOnBlockListener, removeOnBlockListener } = useContext(EthersContext);\n    const eventName = getEventName();\n    useAsyncEffect<number>(\n        () => {\n            const handle = setTimeout(effect, initialTimeout);\n            addOnBlockListener(eventName, effect);\n            return handle;\n        },\n        handle => {\n            if (handle) {\n                clearTimeout(handle);\n                removeOnBlockListener(eventName);\n            }\n        },\n        inputs\n    );\n};\n\nexport default useDelayedOnBlockEffect;\n","import { useCallback } from \"react\";\n\nimport { ChainId, Currency, ETHER, Fetcher, Pair, Token, WETH } from \"@sushiswap/sdk\";\nimport { ethers } from \"ethers\";\n\nconst DAI = new Token(ChainId.MAINNET, \"0x6B175474E89094C44Da98b954EedeAC495271d0F\", 18, \"DAI\", \"Dai Stablecoin\");\nconst USDC = new Token(ChainId.MAINNET, \"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\", 6, \"USDC\", \"USD//C\");\nconst USDT = new Token(ChainId.MAINNET, \"0xdAC17F958D2ee523a2206206994597C13D831ec7\", 6, \"USDT\", \"Tether USD\");\nconst SUSHI = new Token(ChainId.MAINNET, \"0x6B3595068778DD592e39A122f4f5a5cF09C90fE2\", 18, \"SUSHI\", \"SushiSwap\");\nconst YAM = new Token(ChainId.MAINNET, \"0x0e2298E3B3390e3b945a5456fBf59eCc3f55DA16\", 18, \"YAM\", \"YAM\");\nconst AMPL = new Token(ChainId.MAINNET, \"0xD46bA6D942050d489DBd938a2C909A5d5039A161\", 9, \"AMPL\", \"Ampleforth\");\n\nconst BASES_TO_CHECK_TRADES_AGAINST = [WETH[ChainId.MAINNET], DAI, USDC, USDT, SUSHI, YAM];\nconst CUSTOM_BASES = {\n    [AMPL.address]: [DAI, WETH[ChainId.MAINNET]]\n};\n\nfunction wrappedCurrency(currency: Currency | undefined): Token | undefined {\n    return currency === ETHER ? WETH[ChainId.MAINNET] : currency instanceof Token ? currency : undefined;\n}\n\n// Source: https://github.com/Uniswap/uniswap-interface/blob/master/src/hooks/Trades.ts\nconst useAllCommonPairs = () => {\n    const loadAllCommonPairs = useCallback(\n        // tslint:disable-next-line:max-func-body-length\n        async (currencyA?: Currency, currencyB?: Currency, provider?: ethers.providers.BaseProvider) => {\n            const bases: Token[] = BASES_TO_CHECK_TRADES_AGAINST;\n            const [tokenA, tokenB] = [wrappedCurrency(currencyA), wrappedCurrency(currencyB)];\n            const basePairs: [Token, Token][] = bases\n                .flatMap((base): [Token, Token][] => bases.map(otherBase => [base, otherBase]))\n                .filter(([t0, t1]) => t0.address !== t1.address);\n\n            const allPairCombinations =\n                tokenA && tokenB\n                    ? [\n                          // the direct pair\n                          [tokenA, tokenB],\n                          // token A against all bases\n                          ...bases.map((base): [Token, Token] => [tokenA, base]),\n                          // token B against all bases\n                          ...bases.map((base): [Token, Token] => [tokenB, base]),\n                          // each base against all bases\n                          ...basePairs\n                      ]\n                          .filter((tokens): tokens is [Token, Token] => Boolean(tokens[0] && tokens[1]))\n                          .filter(([t0, t1]) => t0.address !== t1.address)\n                          .filter(([a, b]) => {\n                              const customBases = CUSTOM_BASES;\n                              if (!customBases) return true;\n\n                              const customBasesA: Token[] | undefined = customBases[a.address];\n                              const customBasesB: Token[] | undefined = customBases[b.address];\n\n                              if (!customBasesA && !customBasesB) return true;\n\n                              if (customBasesA && !customBasesA.find(base => tokenB.equals(base))) return false;\n                              return !(customBasesB && !customBasesB.find(base => tokenA.equals(base)));\n                          })\n                    : [];\n\n            const pairs = await Promise.all(\n                allPairCombinations.map(async pair => {\n                    try {\n                        return await Fetcher.fetchPairData(pair[0], pair[1], provider);\n                    } catch (e) {\n                        return null;\n                    }\n                })\n            );\n            return pairs.filter(pair => pair !== null) as Pair[];\n        },\n        []\n    );\n\n    return { loadAllCommonPairs };\n};\n\nexport default useAllCommonPairs;\n","import { useCallback } from \"react\";\n\nimport { CurrencyAmount, Fetcher, Percent, Router, TokenAmount, Trade, WETH } from \"@sushiswap/sdk\";\nimport { ethers } from \"ethers\";\nimport { MASTER_CHEF, MIGRATOR2, ORDER_BOOK, ROUTER, SETTLEMENT, SUSHI_BAR } from \"../constants/contracts\";\nimport { ETH } from \"../constants/tokens\";\nimport LPToken from \"../types/LPToken\";\nimport Token from \"../types/Token\";\nimport { convertToken, getContract } from \"../utils\";\nimport { logTransaction } from \"../utils/analytics-utils\";\nimport useAllCommonPairs from \"./useAllCommonPairs\";\n\n// tslint:disable-next-line:max-func-body-length\nconst useSDK = () => {\n    const { loadAllCommonPairs } = useAllCommonPairs();\n    const allowedSlippage = new Percent(\"50\", \"10000\"); // 0.05%\n    const ttl = 60 * 20;\n\n    const getTrade = useCallback(\n        async (\n            fromToken: Token,\n            toToken: Token,\n            fromAmount: ethers.BigNumber,\n            provider: ethers.providers.BaseProvider\n        ) => {\n            if (provider) {\n                const isETH = fromToken.symbol === \"ETH\";\n                const from = convertToken(fromToken);\n                const to = convertToken(toToken);\n                const pairs = await loadAllCommonPairs(from, to, provider);\n                const amount = isETH\n                    ? CurrencyAmount.ether(fromAmount.toString())\n                    : new TokenAmount(from, fromAmount.toString());\n                return Trade.bestTradeExactIn(pairs, amount, to, { maxHops: 3, maxNumResults: 1 })[0];\n            }\n        },\n        []\n    );\n\n    const swap = useCallback(async (trade: Trade, signer: ethers.Signer) => {\n        if (trade) {\n            const params = Router.swapCallParameters(trade, {\n                feeOnTransfer: false,\n                allowedSlippage,\n                recipient: await signer.getAddress(),\n                ttl\n            });\n            const router = getContract(\"IUniswapV2Router02\", ROUTER, signer);\n            const gasLimit = await router.estimateGas[params.methodName](...params.args, {\n                value: params.value\n            });\n            const tx = await router.functions[params.methodName](...params.args, {\n                value: params.value,\n                gasLimit: gasLimit.mul(120).div(100)\n            });\n            await logTransaction(\n                tx,\n                \"UniswapV2Router02.\" + params.methodName + \"()\",\n                ...params.args.map(arg => arg.toString())\n            );\n            return {\n                trade,\n                tx\n            };\n        }\n    }, []);\n\n    const createOrder = useCallback(\n        async (\n            fromToken: Token,\n            toToken: Token,\n            amountIn: ethers.BigNumber,\n            amountOutMin: ethers.BigNumber,\n            signer: ethers.Signer,\n            kovanSigner: ethers.Signer\n        ) => {\n            const order = new Order(signer, fromToken, toToken, amountIn, amountOutMin, await signer.getAddress());\n            const args = await order.toArgs();\n\n            const orderBook = getContract(\"OrderBook\", ORDER_BOOK, kovanSigner);\n            const gasLimit = await orderBook.estimateGas.createOrder(...args);\n            const tx = await orderBook.createOrder(...args, {\n                gasLimit: gasLimit.mul(120).div(100)\n            });\n            return await logTransaction(tx, \"OrderBook.createOrder()\", ...args.map(arg => arg.toString()));\n        },\n        []\n    );\n\n    const cancelOrder = useCallback(async (hash: string, signer: ethers.Signer, kovanSigner: ethers.Signer) => {\n        const orderBook = getContract(\"OrderBook\", ORDER_BOOK, kovanSigner);\n        const callHash = await orderBook.cancelOrderCallHash(hash);\n        const signature = await signer.signMessage(ethers.utils.arrayify(callHash));\n        const { v, r, s } = ethers.utils.splitSignature(signature);\n        const args = [hash, v, r, s];\n\n        const gasLimit = await orderBook.estimateGas.cancelOrder(...args);\n        const tx = await orderBook.cancelOrder(...args, {\n            gasLimit: gasLimit.mul(120).div(100)\n        });\n        return await logTransaction(tx, \"OrderBook.cancelOrder()\", ...args.map(arg => arg.toString()));\n    }, []);\n\n    const wrapETH = useCallback(async (amount: ethers.BigNumber, signer: ethers.Signer) => {\n        const weth = getContract(\"IWETH\", WETH[1].address, signer);\n        const gasLimit = await weth.estimateGas.deposit({\n            value: amount\n        });\n        const tx = await weth.deposit({\n            value: amount,\n            gasLimit\n        });\n        return await logTransaction(tx, \"WETH.deposit()\");\n    }, []);\n\n    const unwrapETH = useCallback(async (amount: ethers.BigNumber, signer: ethers.Signer) => {\n        const weth = getContract(\"IWETH\", WETH[1].address, signer);\n        const gasLimit = await weth.estimateGas.withdraw(amount);\n        const tx = await weth.withdraw(amount, {\n            gasLimit\n        });\n        return await logTransaction(tx, \"WETH.withdraw()\");\n    }, []);\n\n    const getPair = useCallback(async (fromToken: Token, toToken: Token, provider: ethers.providers.BaseProvider) => {\n        const from = convertToken(fromToken);\n        const to = convertToken(toToken);\n        return await Fetcher.fetchPairData(from, to, provider);\n    }, []);\n\n    const addLiquidity = useCallback(\n        async (\n            fromToken: Token,\n            toToken: Token,\n            fromAmount: ethers.BigNumber,\n            toAmount: ethers.BigNumber,\n            signer: ethers.Signer\n        ) => {\n            const router = getContract(\"IUniswapV2Router02\", ROUTER, signer);\n            const deadline = `0x${(Math.floor(new Date().getTime() / 1000) + ttl).toString(16)}`;\n            const args = [\n                fromToken.address,\n                toToken.address,\n                fromAmount,\n                toAmount,\n                minAmount(fromAmount, allowedSlippage),\n                minAmount(toAmount, allowedSlippage),\n                await signer.getAddress(),\n                deadline\n            ];\n            const gasLimit = await router.estimateGas.addLiquidity(...args);\n            const tx = await router.functions.addLiquidity(...args, {\n                gasLimit: gasLimit.mul(120).div(100)\n            });\n            return logTransaction(tx, \"UniswapV2Router02.addLiquidity()\", ...args.map(arg => arg.toString()));\n        },\n        []\n    );\n\n    const removeLiquidityETH = useCallback(\n        async (\n            token: Token,\n            liquidity: ethers.BigNumber,\n            amount: ethers.BigNumber,\n            amountETH: ethers.BigNumber,\n            signer: ethers.Signer\n        ) => {\n            const router = getContract(\"IUniswapV2Router02\", ROUTER, signer);\n            const deadline = `0x${(Math.floor(new Date().getTime() / 1000) + ttl).toString(16)}`;\n            const args = [\n                token.address,\n                liquidity,\n                minAmount(amount, allowedSlippage),\n                minAmount(amountETH, allowedSlippage),\n                await signer.getAddress(),\n                deadline\n            ];\n            const gasLimit = await router.estimateGas.removeLiquidityETH(...args);\n            const tx = await router.functions.removeLiquidityETH(...args, {\n                gasLimit: gasLimit.mul(120).div(100)\n            });\n            return logTransaction(tx, \"UniswapV2Router02.removeLiquidityETH()\", ...args.map(arg => arg.toString()));\n        },\n        []\n    );\n\n    const removeLiquidity = useCallback(\n        async (\n            fromToken: Token,\n            toToken: Token,\n            liquidity: ethers.BigNumber,\n            fromAmount: ethers.BigNumber,\n            toAmount: ethers.BigNumber,\n            signer: ethers.Signer\n        ) => {\n            const router = getContract(\"IUniswapV2Router02\", ROUTER, signer);\n            const deadline = `0x${(Math.floor(new Date().getTime() / 1000) + ttl).toString(16)}`;\n            const args = [\n                fromToken.address,\n                toToken.address,\n                liquidity,\n                minAmount(fromAmount, allowedSlippage),\n                minAmount(toAmount, allowedSlippage),\n                await signer.getAddress(),\n                deadline\n            ];\n            const gasLimit = await router.estimateGas.removeLiquidity(...args);\n            const tx = await router.functions.removeLiquidity(...args, {\n                gasLimit: gasLimit.mul(120).div(100)\n            });\n            return logTransaction(tx, \"UniswapV2Router02.removeLiquidity()\", ...args.map(arg => arg.toString()));\n        },\n        []\n    );\n\n    const addLiquidityETH = useCallback(\n        async (token: Token, amount: ethers.BigNumber, amountETH: ethers.BigNumber, signer: ethers.Signer) => {\n            const router = getContract(\"IUniswapV2Router02\", ROUTER, signer);\n            const deadline = `0x${(Math.floor(new Date().getTime() / 1000) + ttl).toString(16)}`;\n            const args = [\n                token.address,\n                amount,\n                minAmount(amount, allowedSlippage),\n                minAmount(amountETH, allowedSlippage),\n                await signer.getAddress(),\n                deadline\n            ];\n            const gasLimit = await router.estimateGas.addLiquidityETH(...args, {\n                value: amountETH\n            });\n            const tx = await router.functions.addLiquidityETH(...args, {\n                gasLimit: gasLimit.mul(120).div(100),\n                value: amountETH\n            });\n            return logTransaction(tx, \"UniswapV2Router02.addLiquidityETH()\", ...args.map(arg => arg.toString()));\n        },\n        []\n    );\n\n    const getExpectedSushiRewardPerBlock = useCallback(async (token: LPToken, signer: ethers.Signer) => {\n        const masterChef = getContract(\"MasterChef\", MASTER_CHEF, signer);\n        const totalAllocPoint = await masterChef.totalAllocPoint();\n        const sushiPerBlock = await masterChef.sushiPerBlock();\n        const { allocPoint } = await masterChef.poolInfo(token.id);\n        return ethers.BigNumber.from(sushiPerBlock)\n            .mul(allocPoint)\n            .div(totalAllocPoint);\n    }, []);\n\n    const deposit = useCallback(async (lpTokenId: number, amount: ethers.BigNumber, signer: ethers.Signer) => {\n        const masterChef = getContract(\"MasterChef\", MASTER_CHEF, signer);\n        const gasLimit = await masterChef.estimateGas.deposit(lpTokenId, amount);\n        const tx = await masterChef.deposit(lpTokenId, amount, {\n            gasLimit: gasLimit.mul(120).div(100)\n        });\n        return logTransaction(tx, \"MasterChef.deposit()\", lpTokenId, amount.toString());\n    }, []);\n\n    const withdraw = useCallback(async (lpTokenId: number, amount: ethers.BigNumber, signer: ethers.Signer) => {\n        const masterChef = getContract(\"MasterChef\", MASTER_CHEF, signer);\n        const gasLimit = await masterChef.estimateGas.withdraw(lpTokenId, amount);\n        const tx = await masterChef.withdraw(lpTokenId, amount, {\n            gasLimit: gasLimit.mul(120).div(100)\n        });\n        return logTransaction(tx, \"MasterChef.withdraw()\", lpTokenId, amount.toString());\n    }, []);\n\n    const enterSushiBar = useCallback(async (amount: ethers.BigNumber, signer: ethers.Signer) => {\n        const sushiBar = getContract(\"SushiBar\", SUSHI_BAR, signer);\n        const gasLimit = await sushiBar.estimateGas.enter(amount);\n        const tx = await sushiBar.enter(amount, {\n            gasLimit: gasLimit.mul(120).div(100)\n        });\n        return logTransaction(tx, \"SushiBar.enter()\", amount.toString());\n    }, []);\n\n    const leaveSushiBar = useCallback(async (amount: ethers.BigNumber, signer: ethers.Signer) => {\n        const sushiBar = getContract(\"SushiBar\", SUSHI_BAR, signer);\n        const gasLimit = await sushiBar.estimateGas.leave(amount);\n        const tx = await sushiBar.leave(amount, {\n            gasLimit: gasLimit.mul(120).div(100)\n        });\n        return logTransaction(tx, \"SushiBar.leave()\", amount.toString());\n    }, []);\n\n    const migrate = useCallback(async (lpToken: LPToken, amount: ethers.BigNumber, signer: ethers.Signer) => {\n        const migrator2 = getContract(\"Migrator2\", MIGRATOR2, signer);\n        const deadline = `0x${(Math.floor(new Date().getTime() / 1000) + ttl).toString(16)}`;\n        const args = [\n            lpToken.tokenA.address,\n            lpToken.tokenB.address,\n            amount,\n            ethers.constants.Zero,\n            ethers.constants.Zero,\n            deadline\n        ];\n        const gasLimit = await migrator2.estimateGas.migrate(...args);\n        const tx = await migrator2.migrate(...args, {\n            gasLimit: gasLimit.mul(120).div(100)\n        });\n        return logTransaction(tx, \"Migrator2.migrate()\", ...args.map(arg => arg.toString()));\n    }, []);\n\n    const calculateSwapFee = (fromAmount: ethers.BigNumber) => {\n        return fromAmount.mul(3).div(1000);\n    };\n\n    const calculateLimitOrderFee = (fromAmount: ethers.BigNumber) => {\n        return fromAmount.mul(2).div(1000);\n    };\n\n    return {\n        allowedSlippage,\n        getTrade,\n        swap,\n        createOrder,\n        cancelOrder,\n        wrapETH,\n        unwrapETH,\n        getPair,\n        addLiquidity,\n        addLiquidityETH,\n        removeLiquidity,\n        removeLiquidityETH,\n        getExpectedSushiRewardPerBlock,\n        deposit,\n        withdraw,\n        enterSushiBar,\n        leaveSushiBar,\n        migrate,\n        calculateSwapFee,\n        calculateLimitOrderFee\n    };\n};\n\nconst minAmount = (amount: ethers.BigNumber, percent: Percent) => {\n    return amount.sub(amount.mul(percent.numerator.toString()).div(percent.denominator.toString()));\n};\n\nexport type OrderStatus = \"Open\" | \"Expired\" | \"Filled\";\n\nexport class Order {\n    maker: ethers.Signer;\n    fromToken: Token;\n    toToken: Token;\n    amountIn: ethers.BigNumber;\n    amountOutMin: ethers.BigNumber;\n    recipient: string;\n    deadline: ethers.BigNumber;\n    filledAmountIn?: ethers.BigNumber;\n\n    constructor(\n        maker: ethers.Signer,\n        fromToken: Token,\n        toToken: Token,\n        amountIn: ethers.BigNumber,\n        amountOutMin: ethers.BigNumber,\n        recipient: string,\n        deadline = ethers.BigNumber.from(Math.floor(Date.now() / 1000 + 24 * 3600))\n    ) {\n        this.maker = maker;\n        this.fromToken = fromToken;\n        this.toToken = toToken;\n        this.amountIn = amountIn;\n        this.amountOutMin = amountOutMin;\n        this.recipient = recipient;\n        this.deadline = deadline;\n    }\n\n    status(): OrderStatus {\n        return this.deadline.toNumber() * 1000 < Date.now()\n            ? \"Expired\"\n            : this.filledAmountIn?.eq(this.amountIn)\n            ? \"Filled\"\n            : \"Open\";\n    }\n\n    async hash() {\n        const settlement = await getContract(\"Settlement\", SETTLEMENT, this.maker);\n        return await settlement.hash(\n            await this.maker.getAddress(),\n            this.fromToken.address,\n            this.toToken.address,\n            this.amountIn,\n            this.amountOutMin,\n            this.recipient,\n            this.deadline\n        );\n    }\n\n    async sign() {\n        const hash = await this.hash();\n        const signature = await this.maker.signMessage(ethers.utils.arrayify(hash));\n        return ethers.utils.splitSignature(signature);\n    }\n\n    async toArgs() {\n        const { v, r, s } = await this.sign();\n        return [\n            await this.maker.getAddress(),\n            this.fromToken.address,\n            this.toToken.address,\n            this.amountIn,\n            this.amountOutMin,\n            this.recipient,\n            this.deadline,\n            v,\n            r,\n            s\n        ];\n    }\n}\n\nexport default useSDK;\n","import { useCallback, useContext, useEffect, useState } from \"react\";\n\nimport { ethers } from \"ethers\";\nimport useAsyncEffect from \"use-async-effect\";\nimport { ROUTER } from \"../constants/contracts\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport Token from \"../types/Token\";\nimport { parseBalance } from \"../utils\";\nimport useSDK from \"./useSDK\";\n\nexport interface TokenPairState {\n    fromSymbol: string;\n    setFromSymbol: (symbol: string) => void;\n    toSymbol: string;\n    setToSymbol: (symbol: string) => void;\n    fromToken?: Token;\n    toToken?: Token;\n    fromAmount: string;\n    setFromAmount: (amount: string) => void;\n    toAmount: string;\n    setToAmount: (amount: string) => void;\n    fromTokenAllowed: boolean;\n    setFromTokenAllowed: (allowed: boolean) => void;\n    toTokenAllowed: boolean;\n    setToTokenAllowed: (allowed: boolean) => void;\n    loading: boolean;\n    onWrap: () => Promise<void>;\n    wrapping: boolean;\n    onUnwrap: () => Promise<void>;\n    unwrapping: boolean;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst useTokenPairState: () => TokenPairState = () => {\n    const { provider, signer, address, tokens, updateTokens, getTokenAllowance } = useContext(EthersContext);\n    const { wrapETH, unwrapETH } = useSDK();\n    const [fromSymbol, setFromSymbol] = useState(\"\");\n    const [toSymbol, setToSymbol] = useState(\"\");\n    const [fromAmount, setFromAmount] = useState(\"\");\n    const [toAmount, setToAmount] = useState(\"\");\n    const [fromTokenAllowed, setFromTokenAllowed] = useState(false);\n    const [toTokenAllowed, setToTokenAllowed] = useState(false);\n    const [loading, setLoading] = useState(false);\n    const [wrapping, setWrapping] = useState(false);\n    const [unwrapping, setUnwrapping] = useState(false);\n\n    const fromToken = tokens.find(token => token.symbol === fromSymbol);\n    const toToken = tokens.find(token => token.symbol === toSymbol);\n\n    useEffect(() => {\n        if (fromSymbol === \"\") {\n            setToSymbol(\"\");\n        }\n        setFromAmount(\"\");\n        setToAmount(\"\");\n    }, [fromSymbol, toSymbol]);\n\n    useEffect(() => {\n        setFromSymbol(\"\");\n    }, [address]);\n\n    useAsyncEffect(async () => {\n        if (fromToken && toToken && provider && signer) {\n            setFromTokenAllowed(false);\n            setToTokenAllowed(false);\n            setLoading(true);\n            try {\n                const minAllowance = ethers.BigNumber.from(2)\n                    .pow(96)\n                    .sub(1);\n                if (fromToken.symbol !== \"ETH\") {\n                    const fromAllowance = await getTokenAllowance(fromToken.address, ROUTER);\n                    setFromTokenAllowed(ethers.BigNumber.from(fromAllowance).gte(minAllowance));\n                }\n                if (toToken.symbol !== \"ETH\") {\n                    const toAllowance = await getTokenAllowance(toToken.address, ROUTER);\n                    setToTokenAllowed(ethers.BigNumber.from(toAllowance).gte(minAllowance));\n                }\n            } finally {\n                setLoading(false);\n            }\n        }\n    }, [fromToken, toToken, provider, signer]);\n\n    const onWrap = useCallback(async () => {\n        if (fromAmount && signer) {\n            setWrapping(true);\n            try {\n                const tx = await wrapETH(parseBalance(fromAmount), signer);\n                if (tx) {\n                    await tx.wait();\n                    await updateTokens();\n                    setFromSymbol(\"\");\n                }\n            } finally {\n                setWrapping(false);\n            }\n        }\n    }, [fromAmount, signer]);\n\n    const onUnwrap = useCallback(async () => {\n        if (fromAmount && signer) {\n            setUnwrapping(true);\n            try {\n                const tx = await unwrapETH(parseBalance(fromAmount), signer);\n                if (tx) {\n                    await tx.wait();\n                    await updateTokens();\n                    setFromSymbol(\"\");\n                }\n            } finally {\n                setUnwrapping(false);\n            }\n        }\n    }, [fromAmount, signer]);\n\n    return {\n        fromSymbol,\n        setFromSymbol,\n        toSymbol,\n        setToSymbol,\n        fromToken,\n        toToken,\n        fromAmount,\n        setFromAmount,\n        toAmount,\n        setToAmount,\n        fromTokenAllowed,\n        setFromTokenAllowed,\n        toTokenAllowed,\n        setToTokenAllowed,\n        loading,\n        onWrap,\n        wrapping,\n        onUnwrap,\n        unwrapping\n    };\n};\n\nexport default useTokenPairState;\n","import { useContext, useState } from \"react\";\n\nimport { Pair } from \"@sushiswap/sdk\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport useDelayedOnBlockEffect from \"./useDelayedOnBlockEffect\";\nimport useSDK from \"./useSDK\";\nimport useTokenPairState, { TokenPairState } from \"./useTokenPairState\";\n\nexport interface LiquidityState extends TokenPairState {\n    pair?: Pair;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst useLiquidityState: () => LiquidityState = () => {\n    const state = useTokenPairState();\n    const { provider } = useContext(EthersContext);\n    const [loading, setLoading] = useState(false);\n    const [pair, setPair] = useState<Pair>();\n    const { getPair } = useSDK();\n\n    useDelayedOnBlockEffect(\n        async block => {\n            if (state.fromToken && state.toToken && provider) {\n                if (!block) {\n                    setLoading(true);\n                }\n                try {\n                    setPair(await getPair(state.fromToken, state.toToken, provider));\n                } finally {\n                    setLoading(false);\n                }\n            }\n        },\n        () => \"getPair(\" + state.fromSymbol + \",\" + state.toSymbol + \")\",\n        [state.fromSymbol, state.toSymbol, provider],\n        0\n    );\n\n    return {\n        ...state,\n        loading: loading || state.loading,\n        pair\n    };\n};\n\nexport default useLiquidityState;\n","import { useContext, useEffect, useState } from \"react\";\n\nimport { EthersContext } from \"../context/EthersContext\";\nimport LPToken from \"../types/LPToken\";\nimport { fetchMyLPTokens, fetchMyUniswapLPTokens, fetchPools } from \"../utils/fetch-utils\";\nimport useDelayedOnBlockEffect from \"./useDelayedOnBlockEffect\";\nimport useLiquidityState, { LiquidityState } from \"./useLiquidityState\";\n\nexport interface LPTokensState extends LiquidityState {\n    lastTimeRefreshed: number;\n    updateLastTimeRefreshed: () => void;\n    lpTokens: LPToken[];\n    selectedLPToken?: LPToken;\n    setSelectedLPToken: (token?: LPToken) => void;\n    selectedLPTokenAllowed: boolean;\n    setSelectedLPTokenAllowed: (allowed: boolean) => void;\n    amount: string;\n    setAmount: (amount: string) => void;\n}\n\ntype Mode = \"pools\" | \"my-lp-tokens\" | \"my-uniswap-lp-tokens\";\n\n// tslint:disable-next-line:max-func-body-length\nconst useLPTokensState: (mode: Mode) => LPTokensState = mode => {\n    const state = useLiquidityState();\n    const { provider, signer, address, tokens } = useContext(EthersContext);\n    const [lastTimeRefreshed, setLastTimeRefreshed] = useState(0);\n    const [loading, setLoading] = useState(true);\n    const [lpTokens, setLPTokens] = useState<LPToken[]>([]);\n    const [selectedLPToken, setSelectedLPToken] = useState<LPToken>();\n    const [selectedLPTokenAllowed, setSelectedLPTokenAllowed] = useState(false);\n    const [amount, setAmount] = useState(\"\");\n\n    const updateLPTokens = async () => {\n        try {\n            const data = await (mode === \"pools\"\n                ? fetchPools(provider, signer)\n                : mode === \"my-lp-tokens\"\n                ? fetchMyLPTokens(tokens, provider, signer)\n                : fetchMyUniswapLPTokens(tokens, provider, signer));\n            if (data) {\n                setLPTokens(data);\n            }\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    useEffect(() => {\n        if (!selectedLPToken) {\n            setAmount(\"\");\n        }\n    }, [selectedLPToken]);\n\n    useDelayedOnBlockEffect(\n        async block => {\n            if (provider && signer && (mode === \"pools\" || tokens.length > 0)) {\n                if (!block) {\n                    setLoading(true);\n                }\n                await updateLPTokens();\n            }\n        },\n        () => \"updateLPTokens()\",\n        [provider, signer, tokens.length, address, lastTimeRefreshed],\n        0\n    );\n\n    return {\n        ...state,\n        loading: state.loading || loading,\n        lastTimeRefreshed,\n        updateLastTimeRefreshed: () => {\n            setLastTimeRefreshed(Date.now());\n        },\n        lpTokens,\n        selectedLPToken,\n        setSelectedLPToken,\n        selectedLPTokenAllowed,\n        setSelectedLPTokenAllowed,\n        amount,\n        setAmount\n    };\n};\n\nexport default useLPTokensState;\n","import { useCallback, useContext, useEffect, useState } from \"react\";\n\nimport { ethers } from \"ethers\";\nimport useAsyncEffect from \"use-async-effect\";\nimport { LPTokenSelectFilter } from \"../components/LPTokenSelect\";\nimport { MASTER_CHEF } from \"../constants/contracts\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport { parseBalance } from \"../utils\";\nimport useLPTokensState, { LPTokensState } from \"./useLPTokensState\";\nimport useSDK from \"./useSDK\";\n\nexport interface FarmingState extends LPTokensState {\n    action?: Action;\n    setAction: (action?: Action) => void;\n    expectedSushiRewardPerBlock?: ethers.BigNumber;\n    filteredBy: LPTokenSelectFilter;\n    setFilteredBy: (filter: LPTokenSelectFilter) => void;\n    onDeposit: () => Promise<void>;\n    depositing: boolean;\n    onWithdraw: () => Promise<void>;\n    withdrawing: boolean;\n}\n\nexport type Action = \"deposit\" | \"withdraw\";\n\n// tslint:disable-next-line:max-func-body-length\nconst useFarmingState: () => FarmingState = () => {\n    const state = useLPTokensState(\"pools\");\n    const { provider, signer, getTokenAllowance } = useContext(EthersContext);\n    const { getExpectedSushiRewardPerBlock, deposit, withdraw } = useSDK();\n    const [filteredBy, setFilteredBy] = useState(\"\" as LPTokenSelectFilter);\n    const [action, setAction] = useState<Action>();\n    const [loading, setLoading] = useState(false);\n    const [expectedSushiRewardPerBlock, setExpectedSushiRewardPerBlock] = useState<ethers.BigNumber>();\n    const [depositing, setDepositing] = useState(false);\n    const [withdrawing, setWithdrawing] = useState(false);\n\n    useEffect(() => {\n        setFilteredBy(\"\");\n        setAction(undefined);\n        setLoading(false);\n        setDepositing(false);\n        setWithdrawing(false);\n        setExpectedSushiRewardPerBlock(undefined);\n    }, [state.selectedLPToken]);\n\n    useAsyncEffect(async () => {\n        if (signer && state.selectedLPToken) {\n            setLoading(true);\n            try {\n                setExpectedSushiRewardPerBlock(await getExpectedSushiRewardPerBlock(state.selectedLPToken, signer));\n            } finally {\n                setLoading(false);\n            }\n        }\n    }, [signer, state.selectedLPToken]);\n\n    useAsyncEffect(async () => {\n        if (provider && signer && state.selectedLPToken) {\n            setLoading(true);\n            state.setSelectedLPTokenAllowed(false);\n            try {\n                const minAllowance = ethers.BigNumber.from(2)\n                    .pow(96)\n                    .sub(1);\n                const allowance = await getTokenAllowance(state.selectedLPToken.address, MASTER_CHEF);\n                state.setSelectedLPTokenAllowed(ethers.BigNumber.from(allowance).gte(minAllowance));\n            } finally {\n                setLoading(false);\n            }\n        }\n    }, [provider, signer, state.selectedLPToken]);\n\n    useEffect(() => {\n        state.setAmount(\"\");\n    }, [action]);\n\n    const onDeposit = useCallback(async () => {\n        if (state.selectedLPToken?.id && state.amount && signer) {\n            setDepositing(true);\n            try {\n                const amount = parseBalance(state.amount, state.selectedLPToken.decimals);\n                const tx = await deposit(state.selectedLPToken.id, amount, signer);\n                await tx.wait();\n                state.setSelectedLPToken(undefined);\n                await state.updateLastTimeRefreshed();\n            } finally {\n                setDepositing(false);\n            }\n        }\n    }, [state.selectedLPToken, state.amount, signer]);\n\n    const onWithdraw = useCallback(async () => {\n        if (state.selectedLPToken?.id && state.amount && signer) {\n            setWithdrawing(true);\n            try {\n                const amount = parseBalance(state.amount, state.selectedLPToken.decimals);\n                const tx = await withdraw(state.selectedLPToken.id, amount, signer);\n                await tx.wait();\n                state.setSelectedLPToken(undefined);\n                await state.updateLastTimeRefreshed();\n            } finally {\n                setWithdrawing(false);\n            }\n        }\n    }, [state.selectedLPToken, state.amount, signer]);\n\n    return {\n        ...state,\n        loading: state.loading || loading,\n        filteredBy,\n        setFilteredBy,\n        action,\n        setAction,\n        expectedSushiRewardPerBlock,\n        onDeposit,\n        depositing,\n        onWithdraw,\n        withdrawing\n    };\n};\n\nexport default useFarmingState;\n","import React from \"react\";\nimport { View } from \"react-native\";\n\nimport { StatusBar } from \"expo-status-bar\";\n\nimport { HEADER_HEIGHT } from \"../../constants/dimension\";\nimport useColors from \"../../hooks/useColors\";\n\nconst AppHeader = () => {\n    const { background } = useColors();\n    return (\n        <View\n            style={{\n                width: \"100%\",\n                height: HEADER_HEIGHT,\n                backgroundColor: background\n            }}>\n            <StatusBar translucent={false} backgroundColor={background} />\n        </View>\n    );\n};\n\nexport default AppHeader;\n","import React, { useCallback, useContext } from \"react\";\nimport { Image, View } from \"react-native\";\n\nimport * as Linking from \"expo-linking\";\n\nimport { Spacing } from \"../../constants/dimension\";\nimport { GlobalContext } from \"../../context/GlobalContext\";\nimport useColors from \"../../hooks/useColors\";\nimport Button from \"../Button\";\n\nconst ConnectWallet = () => {\n    const { darkMode } = useContext(GlobalContext);\n    const { background } = useColors();\n    const onPress = useCallback(async () => {\n        if (window.ethereum) {\n            await window.ethereum.enable();\n        } else {\n            await Linking.openURL(\"https://metamask.io/\");\n        }\n    }, [window.ethereum]);\n    const title = window.ethereum ? \"Connect\" : \"Install MetaMask\";\n    return (\n        <View style={{ flex: 1, alignItems: \"center\", justifyContent: \"center\", backgroundColor: background }}>\n            <Image\n                source={\n                    darkMode ? require(\"../../../assets/metamask-dark.png\") : require(\"../../../assets/metamask.png\")\n                }\n                style={{ width: 223, height: 183, marginBottom: Spacing.huge }}\n            />\n            <Button type={\"outline\"} size={\"large\"} onPress={onPress} title={title} containerStyle={{ width: 440 }} />\n        </View>\n    );\n};\nexport default ConnectWallet;\n","import React from \"react\";\nimport { Image, View } from \"react-native\";\n\nimport { Spacing } from \"../../constants/dimension\";\nimport useColors from \"../../hooks/useColors\";\nimport SocialIcons from \"../SocialIcons\";\nimport Text from \"../Text\";\nimport { Title } from \"./WebHeader\";\n\nconst MobileNotSupported = () => {\n    const { background } = useColors();\n    return (\n        <View\n            style={{\n                justifyContent: \"center\",\n                alignItems: \"center\",\n                backgroundColor: background,\n                width: \"100%\",\n                minHeight: \"100%\",\n                padding: Spacing.normal\n            }}>\n            <Image\n                source={require(\"../../../assets/sushiswap.jpg\")}\n                style={{ width: 192, height: 192, marginBottom: Spacing.normal }}\n            />\n            <Title />\n            <Text style={{ marginTop: Spacing.normal }}>Mobile devices not supported yet.</Text>\n            <SocialIcons />\n        </View>\n    );\n};\n\nexport default MobileNotSupported;\n","import React, { useContext } from \"react\";\nimport { Platform, View } from \"react-native\";\n\nimport { AppLoading } from \"expo\";\nimport { DeviceType } from \"expo-device\";\n\nimport AppHeader from \"../components/app/AppHeader\";\nimport Text from \"../components/Text\";\nimport ConnectToWallet from \"../components/web/ConnectToWallet\";\nimport MobileNotSupported from \"../components/web/MobileNotSupported\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport { GlobalContext } from \"../context/GlobalContext\";\nimport useColors from \"../hooks/useColors\";\n\nconst Screen = props => {\n    const { deviceType } = useContext(GlobalContext);\n    const { address, chainId } = useContext(EthersContext);\n    const { background } = useColors();\n    if (!deviceType) {\n        return <AppLoading />;\n    }\n    if (Platform.OS === \"web\") {\n        if (deviceType === DeviceType.PHONE) return <MobileNotSupported />;\n        if (!address) return <ConnectToWallet />;\n        if (chainId !== 1)\n            return (\n                <View style={{ flex: 1, alignItems: \"center\", justifyContent: \"center\", backgroundColor: background }}>\n                    <Text light={true} style={{ textAlign: \"center\" }}>\n                        {\"Please switch network to\\n'Ethereum Mainnet'\"}\n                    </Text>\n                </View>\n            );\n        return <View {...props} style={[{ flex: 1 }, props.style]} />;\n    } else {\n        return (\n            <View style={{ width: \"100%\", height: \"100%\" }}>\n                <AppHeader />\n                <View {...props} style={[{ flex: 1 }, props.style]} />\n            </View>\n        );\n    }\n};\n\nexport default Screen;\n","import React, { FC, useCallback, useState } from \"react\";\nimport { Image, Platform, TouchableHighlight, View } from \"react-native\";\nimport { Icon } from \"react-native-elements\";\nimport { Hoverable } from \"react-native-web-hover\";\n\nimport { ethers } from \"ethers\";\nimport useAsyncEffect from \"use-async-effect\";\nimport ApproveButton from \"../components/ApproveButton\";\nimport Button from \"../components/Button\";\nimport ButtonGroup from \"../components/ButtonGroup\";\nimport CloseIcon from \"../components/CloseIcon\";\nimport Column from \"../components/Column\";\nimport Container from \"../components/Container\";\nimport Content from \"../components/Content\";\nimport ErrorMessage from \"../components/ErrorMessage\";\nimport FetchingButton from \"../components/FetchingButton\";\nimport FlexView from \"../components/FlexView\";\nimport InsufficientBalanceButton from \"../components/InsufficientBalanceButton\";\nimport LPTokenSelect, { LPTokenItemProps } from \"../components/LPTokenSelect\";\nimport Meta from \"../components/Meta\";\nimport Notice from \"../components/Notice\";\nimport SelectIcon from \"../components/SelectIcon\";\nimport Subtitle from \"../components/Subtitle\";\nimport Text from \"../components/Text\";\nimport TokenInput from \"../components/TokenInput\";\nimport WebFooter from \"../components/web/WebFooter\";\nimport { MASTER_CHEF } from \"../constants/contracts\";\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport useFarmingState, { Action, FarmingState } from \"../hooks/useFarmingState\";\nimport useLinker from \"../hooks/useLinker\";\nimport LPToken from \"../types/LPToken\";\nimport MetamaskError from \"../types/MetamaskError\";\nimport { formatBalance, isEmptyValue, parseBalance, pow10 } from \"../utils\";\nimport Screen from \"./Screen\";\n\nconst Actions = [\"deposit\", \"withdraw\"];\n\nconst FarmingScreen = () => {\n    return (\n        <Screen>\n            <Container>\n                <Content>\n                    <Farming />\n                    {Platform.OS === \"web\" && <WebFooter />}\n                </Content>\n            </Container>\n        </Screen>\n    );\n};\n\nconst Farming = () => {\n    const state = useFarmingState();\n    const emptyText =\n        state.filteredBy === \"amountDeposited\"\n            ? \"You don't have any pool with deposit.\"\n            : state.filteredBy === \"balance\"\n            ? \"You don't have any pool with balance.\"\n            : \"Temporarily unable to load pools.\";\n    return (\n        <>\n            <Column>\n                <Text h4={true} style={{ textAlign: \"center\", marginBottom: Spacing.normal }}>\n                    🌾 Farming\n                </Text>\n            </Column>\n            <LPTokenSelect\n                state={state}\n                title={\"1. Select a pool for yield farming:\"}\n                emptyText={emptyText}\n                showFilter={!state.selectedLPToken}\n                filter={state.filteredBy}\n                onFilterChanged={state.setFilteredBy}\n                Item={TokenItem}\n            />\n            <ActionSelect state={state} />\n            <Deposit state={state} />\n            <Withdraw state={state} />\n        </>\n    );\n};\n\n// tslint:disable-next-line:max-func-body-length\nconst TokenItem: FC<LPTokenItemProps> = props => {\n    const { background, backgroundHovered, textMedium } = useColors();\n    const amount =\n        (props.filter === \"balance\"\n            ? props.token.balance\n            : props.filter === \"amountDeposited\"\n            ? props.token.amountDeposited\n            : props.token.totalDeposited) || \"0\";\n    const onPress = useCallback(() => {\n        props.onSelectToken(props.token);\n    }, [props.onSelectToken, props.token]);\n    const field =\n        props.filter === \"amountDeposited\" ? \"My Deposit\" : props.filter === \"balance\" ? \"My Balance\" : \"Total Deposit\";\n    return (\n        <Hoverable>\n            {({ hovered }) => (\n                <TouchableHighlight onPress={onPress}>\n                    <View style={{ backgroundColor: hovered ? backgroundHovered : background }}>\n                        <FlexView style={{ alignItems: \"center\", margin: Spacing.small }}>\n                            <View>\n                                <LogoSymbol token={props.token.tokenA} />\n                                <LogoSymbol token={props.token.tokenB} />\n                            </View>\n                            <View style={{ flex: 1 }}>\n                                <Text style={{ textAlign: \"right\", fontSize: 15 }}>{field}</Text>\n                                <Text light={true} style={{ textAlign: \"right\", fontSize: 22, color: textMedium }}>\n                                    {formatBalance(amount, props.token.decimals, 8)}\n                                </Text>\n                            </View>\n                            {props.selected ? <CloseIcon /> : <SelectIcon />}\n                        </FlexView>\n                    </View>\n                </TouchableHighlight>\n            )}\n        </Hoverable>\n    );\n};\n\nconst LogoSymbol = ({ token }) => {\n    const { textMedium } = useColors();\n    const [isEmpty, setIsEmpty] = useState(false);\n    const source = !token.logoURI || isEmpty ? require(\"../../assets/empty-token.png\") : { uri: token.logoURI };\n    return (\n        <FlexView style={{ alignItems: \"center\", marginBottom: Spacing.tiny }}>\n            <Image\n                source={source}\n                onError={() => setIsEmpty(true)}\n                style={{ width: 24, height: 24, backgroundColor: \"white\", borderRadius: 12 }}\n            />\n            <Text light={true} style={{ fontSize: 22, color: textMedium, marginLeft: Spacing.small }}>\n                {token.symbol.replace(/\\+/g, \"+\\n\")}\n            </Text>\n        </FlexView>\n    );\n};\n\nconst ActionSelect = ({ state }: { state: FarmingState }) => {\n    if (!state.selectedLPToken) {\n        return <Column noTopMargin={true} />;\n    }\n    const index = state.action ? Actions.indexOf(state.action) : null;\n    const onPress = useCallback((i: number) => {\n        state.setAction(Actions[i] as Action);\n    }, []);\n    const balance = formatBalance(state.selectedLPToken!.balance, state.selectedLPToken!.decimals);\n    const deposit = formatBalance(state.selectedLPToken.amountDeposited || \"0\", state.selectedLPToken!.decimals);\n    return (\n        <Column>\n            <Subtitle text={\"2. Do you want to DEPOSIT or WITHDRAW?\"} />\n            <View style={{ marginHorizontal: Spacing.small, marginBottom: Spacing.normal }}>\n                <Meta label={\"My Balance\"} text={balance} />\n                <Meta label={\"My Deposit\"} text={deposit} />\n            </View>\n            <ButtonGroup\n                selectedIndex={index}\n                onPress={onPress}\n                buttons={[{ element: DepositText }, { element: WithdrawText }]}\n                containerStyle={{ marginHorizontal: Spacing.small }}\n            />\n        </Column>\n    );\n};\n\nconst DepositText = () => {\n    return (\n        <FlexView style={{ alignItems: \"center\" }}>\n            <Text style={{ color: \"black\" }}>Deposit</Text>\n            <Icon\n                type={\"material-community\"}\n                name={\"chevron-right\"}\n                color={\"black\"}\n                style={{ marginLeft: Spacing.tiny, marginTop: 2 }}\n            />\n        </FlexView>\n    );\n};\n\nconst WithdrawText = () => {\n    return (\n        <FlexView style={{ alignItems: \"center\" }}>\n            <Text style={{ color: \"black\" }}>Withdraw</Text>\n            <Icon\n                type={\"material-community\"}\n                name={\"chevron-right\"}\n                color={\"black\"}\n                style={{ marginLeft: Spacing.tiny, marginTop: 2 }}\n            />\n        </FlexView>\n    );\n};\n\nconst Deposit = ({ state }: { state: FarmingState }) => {\n    if (!state.selectedLPToken || state.action !== \"deposit\") {\n        return <Column noTopMargin={true} />;\n    }\n    return (\n        <Column>\n            <AddLiquidityNotice state={state} />\n            <TokenInput\n                title={\"3. Amount of tokens to DEPOSIT:\"}\n                token={state.selectedLPToken}\n                hidden={state.selectedLPToken.balance.isZero()}\n                amount={state.amount}\n                onAmountChanged={state.setAmount}\n            />\n            <DepositInfo state={state} />\n            <DepositControls state={state} />\n        </Column>\n    );\n};\n\nconst AddLiquidityNotice = ({ state }: { state: FarmingState }) => {\n    const { green } = useColors();\n    if (!state.selectedLPToken!.balance.isZero()) {\n        return <Column noTopMargin={true} />;\n    }\n    return (\n        <>\n            <View style={{ marginHorizontal: Spacing.small }}>\n                <Notice\n                    color={green}\n                    text={\n                        \"You need some \" +\n                        state.selectedLPToken!.symbol +\n                        \" token to start farming. Add liquidity to get the LP token.\"\n                    }\n                />\n            </View>\n            <AddLiquidityButton />\n        </>\n    );\n};\n\nconst DepositInfo = ({ state }: { state: FarmingState }) => {\n    if (state.selectedLPToken!.balance.isZero()) {\n        return <Column noTopMargin={true} />;\n    }\n    const balance = formatBalance(state.selectedLPToken!.balance, state.selectedLPToken!.decimals);\n    const sushiReward =\n        state.expectedSushiRewardPerBlock && state.amount\n            ? formatBalance(state.expectedSushiRewardPerBlock.mul(parseBalance(state.amount, 18)).div(pow10(18)), 18)\n            : undefined;\n    return (\n        <Column noTopMargin={true}>\n            <Meta label={\"My Balance\"} text={balance} />\n            {!isEmptyValue(state.amount) && <Meta label={\"SUSHI Reward per Block\"} text={sushiReward} />}\n        </Column>\n    );\n};\n\nconst DepositControls = ({ state }: { state: FarmingState }) => {\n    const [error, setError] = useState<MetamaskError>({});\n    useAsyncEffect(() => setError({}), [state.selectedLPToken]);\n    if (state.selectedLPToken!.balance.isZero()) {\n        return <Column noTopMargin={true} />;\n    }\n    const approveRequired = !state.selectedLPTokenAllowed;\n    const disabled = approveRequired || isEmptyValue(state.amount);\n    return (\n        <Column>\n            {parseBalance(state.amount, state.selectedLPToken!.decimals).gt(state.selectedLPToken!.balance) ? (\n                <InsufficientBalanceButton symbol={state.selectedLPToken!.symbol} />\n            ) : state.loading ? (\n                <FetchingButton />\n            ) : (\n                <>\n                    <ApproveButton\n                        token={state.selectedLPToken!}\n                        spender={MASTER_CHEF}\n                        onSuccess={() => state.setSelectedLPTokenAllowed(true)}\n                        onError={setError}\n                        hidden={isEmptyValue(state.amount) || !approveRequired}\n                    />\n                    <DepositButton state={state} onError={setError} disabled={disabled} />\n                </>\n            )}\n            {error.message && error.code !== 4001 && <ErrorMessage error={error} />}\n        </Column>\n    );\n};\n\nconst AddLiquidityButton = () => {\n    const { green } = useColors();\n    const onPress = useLinker(\"/#/liquidity\", \"Liquidity\");\n    return (\n        <Button\n            color={green}\n            title={\"Add Liquidity\"}\n            containerStyle={{ marginTop: Spacing.normal }}\n            onPress={onPress}\n        />\n    );\n};\n\nconst DepositButton = ({\n    state,\n    onError,\n    disabled\n}: {\n    state: FarmingState;\n    onError: (e) => void;\n    disabled: boolean;\n}) => {\n    const onPress = useCallback(() => {\n        onError({});\n        state.onDeposit().catch(onError);\n    }, [state.onDeposit, onError]);\n    return <Button size={\"large\"} title={\"Deposit\"} disabled={disabled} loading={state.depositing} onPress={onPress} />;\n};\n\nconst Withdraw = ({ state }: { state: FarmingState }) => {\n    if (!state.selectedLPToken || state.action !== \"withdraw\") {\n        return <Column noTopMargin={true} />;\n    }\n    const token: LPToken = {\n        ...state.selectedLPToken,\n        balance: state.selectedLPToken.amountDeposited || ethers.constants.Zero\n    };\n    return (\n        <Column>\n            <NoLPTokenNotice state={state} />\n            <TokenInput\n                title={\"3. Amount of tokens to WITHDRAW:\"}\n                token={token}\n                hidden={state.loading || state.selectedLPToken.amountDeposited?.isZero() || false}\n                amount={state.amount}\n                onAmountChanged={state.setAmount}\n            />\n            <WithdrawInfo state={state} />\n            <WithdrawControls state={state} />\n        </Column>\n    );\n};\n\nconst NoLPTokenNotice = ({ state }: { state: FarmingState }) => {\n    if (state.loading || !state.selectedLPToken || !state.selectedLPToken.amountDeposited?.isZero()) {\n        return <Column noTopMargin={true} />;\n    }\n    return (\n        <Column noTopMargin={true}>\n            <View style={{ marginHorizontal: Spacing.small }}>\n                <Notice\n                    text={\"You don't have any \" + state.selectedLPToken!.symbol + \" token deposited. Deposit it first.\"}\n                />\n            </View>\n        </Column>\n    );\n};\n\nconst WithdrawInfo = ({ state }: { state: FarmingState }) => {\n    if (\n        state.loading ||\n        !state.selectedLPToken ||\n        !state.selectedLPToken.amountDeposited ||\n        state.selectedLPToken.amountDeposited?.isZero() ||\n        !state.selectedLPToken.pendingSushi\n    ) {\n        return <Column noTopMargin={true} />;\n    }\n    const deposit = formatBalance(state.selectedLPToken.amountDeposited, state.selectedLPToken!.decimals);\n    const pendingSushi = formatBalance(\n        state.selectedLPToken.pendingSushi || ethers.constants.Zero,\n        state.selectedLPToken!.decimals\n    );\n    return (\n        <Column noTopMargin={true}>\n            <Meta label={\"My Deposit\"} text={deposit} />\n            <Meta label={\"Pending Sushi Reward\"} text={pendingSushi} />\n            <View style={{ marginTop: Spacing.normal, marginHorizontal: Spacing.small }}>\n                <Notice text={\"All pending sushi reward will be transferred to you if you withdraw.\"} />\n            </View>\n        </Column>\n    );\n};\n\nconst WithdrawControls = ({ state }: { state: FarmingState }) => {\n    const [error, setError] = useState<MetamaskError>({});\n    useAsyncEffect(() => setError({}), [state.selectedLPToken]);\n    if (state.loading) {\n        return (\n            <Column>\n                <FetchingButton />\n            </Column>\n        );\n    }\n    if (\n        !state.selectedLPToken ||\n        !state.selectedLPToken.amountDeposited ||\n        state.selectedLPToken.amountDeposited.isZero()\n    ) {\n        return <Column noTopMargin={true} />;\n    }\n    return (\n        <Column>\n            {parseBalance(state.amount, state.selectedLPToken!.decimals).gt(state.selectedLPToken.amountDeposited) ? (\n                <InsufficientBalanceButton symbol={state.selectedLPToken!.symbol} />\n            ) : (\n                <WithdrawButton state={state} onError={setError} disabled={isEmptyValue(state.amount)} />\n            )}\n            {error.message && error.code !== 4001 && <ErrorMessage error={error} />}\n        </Column>\n    );\n};\n\nconst WithdrawButton = ({\n    state,\n    onError,\n    disabled\n}: {\n    state: FarmingState;\n    onError: (e) => void;\n    disabled: boolean;\n}) => {\n    const onPress = useCallback(() => {\n        onError({});\n        state.onWithdraw().catch(onError);\n    }, [state.onWithdraw, onError]);\n    return (\n        <Button size={\"large\"} title={\"Withdraw\"} disabled={disabled} loading={state.withdrawing} onPress={onPress} />\n    );\n};\n\nexport default FarmingScreen;\n","import React from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useStyles from \"../hooks/useStyles\";\nimport Column from \"./Column\";\nimport Text from \"./Text\";\n\nconst Guide = (props: { hidden: boolean; text: string; buttonTitle: string; onPressButton: () => void }) => {\n    const { border } = useStyles();\n    const borderStyle = border();\n    if (props.hidden) return <Column noTopMargin={true} />;\n    return (\n        <Column style={{ marginTop: Spacing.huge }}>\n            <View style={{ ...borderStyle, width: \"100%\", alignItems: \"center\" }}>\n                <Text note={true} style={{ color: borderStyle.borderColor }}>\n                    {props.text}\n                </Text>\n                <Text\n                    note={true}\n                    fontWeight={\"bold\"}\n                    style={{ textDecorationLine: \"underline\", color: borderStyle.borderColor, textAlign: \"center\" }}\n                    onPress={props.onPressButton}>\n                    {props.buttonTitle}\n                </Text>\n            </View>\n        </Column>\n    );\n};\n\nexport default Guide;\n","import React, { FC, useCallback, useContext, useMemo, useState } from \"react\";\nimport { ActivityIndicator, FlatList, Image, TouchableHighlight, View } from \"react-native\";\nimport { Hoverable } from \"react-native-web-hover\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport useColors from \"../hooks/useColors\";\nimport Token from \"../types/Token\";\nimport { formatBalance } from \"../utils\";\nimport Border from \"./Border\";\nimport CloseIcon from \"./CloseIcon\";\nimport Column from \"./Column\";\nimport FlexView from \"./FlexView\";\nimport SelectIcon from \"./SelectIcon\";\nimport Subtitle from \"./Subtitle\";\nimport Text from \"./Text\";\n\ninterface TokenSelectProps {\n    title: string;\n    hidden: boolean;\n    symbol: string;\n    onChangeSymbol: (symbol: string) => void;\n    filterTokens: (token: Token) => boolean;\n}\n\nconst TokenSelect: FC<TokenSelectProps> = props => {\n    const { tokens } = useContext(EthersContext);\n    const token = tokens.find(t => t.symbol === props.symbol);\n    const onSelectToken = useCallback(\n        t => {\n            props.onChangeSymbol(t.symbol);\n        },\n        [props.onChangeSymbol]\n    );\n    const onUnselectToken = useCallback(() => {\n        props.onChangeSymbol(\"\");\n    }, [props.onChangeSymbol]);\n    if (/*!props.from && props.oppositeSymbol === \"\"*/ props.hidden) {\n        return <Column noTopMargin={true} />;\n    }\n    return (\n        <Column>\n            <Subtitle text={props.title} />\n            {token ? (\n                <TokenItem token={token} selected={true} onSelectToken={onUnselectToken} />\n            ) : (\n                <TokenList filterTokens={props.filterTokens} onSelectToken={onSelectToken} />\n            )}\n        </Column>\n    );\n};\n\n// tslint:disable-next-line:max-func-body-length\nconst TokenList = (props: { filterTokens: (token: Token) => boolean; onSelectToken: (token: Token) => void }) => {\n    const { loadingTokens, tokens } = useContext(EthersContext);\n    const renderItem = useCallback(\n        ({ item }) => {\n            return <TokenItem key={item.address} token={item} selected={false} onSelectToken={props.onSelectToken} />;\n        },\n        [props.onSelectToken]\n    );\n    const data = useMemo(\n        () =>\n            tokens\n                .filter(props.filterTokens)\n                .sort(\n                    (t1, t2) =>\n                        (t2.balance.isZero() ? 0 : 10000000000) -\n                        (t1.balance.isZero() ? 0 : 10000000000) +\n                        t1.symbol.localeCompare(t2.symbol)\n                ),\n        [tokens]\n    );\n    return loadingTokens ? (\n        <ActivityIndicator size={\"large\"} style={{ marginTop: Spacing.large }} />\n    ) : data.length === 0 ? (\n        <EmptyList />\n    ) : (\n        <FlatList\n            keyExtractor={item => JSON.stringify(item)}\n            data={data}\n            renderItem={renderItem}\n            ItemSeparatorComponent={Border}\n        />\n    );\n};\n\nconst EmptyList = () => {\n    return (\n        <View style={{ margin: Spacing.normal }}>\n            <Text light={true} style={{ textAlign: \"center\", width: \"100%\" }}>\n                {\"You don't have any token with balance.\\nTransfer tokens to your address first.\"}\n            </Text>\n        </View>\n    );\n};\n\nconst TokenItem = (props: { token: Token; selected: boolean; onSelectToken: (token: Token) => void }) => {\n    const { background, backgroundHovered, textMedium } = useColors();\n    const [isEmpty, setIsEmpty] = useState(false);\n    const onPress = useCallback(() => {\n        props.onSelectToken(props.token);\n    }, [props.onSelectToken, props.token]);\n    const source = isEmpty ? require(\"../../assets/empty-token.png\") : { uri: props.token.logoURI };\n    return (\n        <Hoverable>\n            {({ hovered }) => (\n                <TouchableHighlight onPress={onPress}>\n                    <View style={{ backgroundColor: hovered ? backgroundHovered : background }}>\n                        <FlexView style={{ alignItems: \"center\", margin: Spacing.small }}>\n                            <Image\n                                source={source}\n                                onError={() => setIsEmpty(true)}\n                                style={{ width: 24, height: 24, backgroundColor: \"white\", borderRadius: 12 }}\n                            />\n                            <Text light={true} style={{ marginLeft: Spacing.small, fontSize: 22, color: textMedium }}>\n                                {props.token.symbol}\n                            </Text>\n                            <Text light={true} style={{ flex: 1, textAlign: \"right\", fontSize: 22, color: textMedium }}>\n                                {formatBalance(props.token.balance, props.token.decimals, 8)}\n                            </Text>\n                            {props.selected ? <CloseIcon /> : <SelectIcon />}\n                        </FlexView>\n                    </View>\n                </TouchableHighlight>\n            )}\n        </Hoverable>\n    );\n};\n\nexport default TokenSelect;\n","import React from \"react\";\n\nimport { TokenPairState } from \"../hooks/useTokenPairState\";\nimport Button from \"./Button\";\n\nconst UnsupportedButton = ({ state }: { state: TokenPairState }) => {\n    return <Button size={\"large\"} title={state.fromSymbol + \"-\" + state.toSymbol + \" Not Supported\"} disabled={true} />;\n};\n\nexport default UnsupportedButton;\n","import { Fraction as SDKFraction } from \"@sushiswap/sdk\";\nimport { ethers } from \"ethers\";\nimport Token from \"../types/Token\";\nimport { formatBalance, isEmptyValue, parseBalance } from \"../utils\";\n\nclass Fraction {\n    static BASE = ethers.BigNumber.from(10).pow(18);\n    static NAN = new Fraction(ethers.constants.Zero, ethers.constants.Zero);\n    static ZERO = new Fraction(ethers.constants.Zero, ethers.constants.One);\n    static convert(sdk: SDKFraction) {\n        return new Fraction(\n            ethers.BigNumber.from(sdk.numerator.toString()),\n            ethers.BigNumber.from(sdk.denominator.toString())\n        );\n    }\n    static from(numerator: ethers.BigNumberish, denominator: ethers.BigNumberish) {\n        return new Fraction(ethers.BigNumber.from(numerator), ethers.BigNumber.from(denominator));\n    }\n    static fromTokens(\n        numerator: ethers.BigNumberish,\n        denominator: ethers.BigNumberish,\n        numeratorToken: Token,\n        denominatorToken: Token\n    ) {\n        return new Fraction(\n            ethers.BigNumber.from(numerator).mul(ethers.BigNumber.from(10).pow(denominatorToken.decimals)),\n            ethers.BigNumber.from(denominator).mul(ethers.BigNumber.from(10).pow(numeratorToken.decimals))\n        );\n    }\n    static parse(value: string) {\n        return value === \"\"\n            ? Fraction.NAN\n            : isEmptyValue(value)\n            ? Fraction.ZERO\n            : new Fraction(parseBalance(value, 18), Fraction.BASE);\n    }\n\n    numerator: ethers.BigNumber;\n    denominator: ethers.BigNumber;\n\n    private constructor(numerator: ethers.BigNumber, denominator: ethers.BigNumber) {\n        this.numerator = numerator;\n        this.denominator = denominator;\n    }\n\n    isZero() {\n        return !this.isNaN() && this.numerator.isZero();\n    }\n\n    isNaN() {\n        return this.denominator.isZero();\n    }\n\n    eq(fraction: Fraction) {\n        return this.numerator\n            .mul(fraction.denominator)\n            .div(fraction.numerator)\n            .eq(this.denominator);\n    }\n\n    gt(fraction: Fraction) {\n        return this.numerator\n            .mul(fraction.denominator)\n            .div(fraction.numerator)\n            .gt(this.denominator);\n    }\n\n    lt(fraction: Fraction) {\n        return this.numerator\n            .mul(fraction.denominator)\n            .div(fraction.numerator)\n            .lt(this.denominator);\n    }\n\n    toString(maxFractions = 8) {\n        if (this.isNaN()) return \"\";\n        if (this.isZero()) return \"0\";\n        let str = formatBalance(this.numerator.mul(Fraction.BASE).div(this.denominator), 18, maxFractions);\n        if (str.endsWith(\".0\")) str = str.substring(0, str.length - 2);\n        return str;\n    }\n\n    apply(value: ethers.BigNumberish) {\n        return this.denominator.isZero() ? ethers.constants.Zero : this.numerator.mul(value).div(this.denominator);\n    }\n}\n\nexport default Fraction;\n","import { useCallback, useContext, useState } from \"react\";\n\nimport { EthersContext } from \"../context/EthersContext\";\nimport { parseBalance } from \"../utils\";\nimport useLiquidityState, { LiquidityState } from \"./useLiquidityState\";\nimport useSDK from \"./useSDK\";\n\nexport interface AddLiquidityState extends LiquidityState {\n    onAdd: () => Promise<void>;\n    adding: boolean;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst useAddLiquidityState: () => AddLiquidityState = () => {\n    const state = useLiquidityState();\n    const { signer, updateTokens } = useContext(EthersContext);\n    const [adding, setAdding] = useState(false);\n    const { addLiquidity, addLiquidityETH } = useSDK();\n\n    const onAdd = useCallback(async () => {\n        if (state.fromToken && state.toToken && state.fromAmount && state.toAmount && signer) {\n            setAdding(true);\n            try {\n                const fromAmount = parseBalance(state.fromAmount, state.fromToken.decimals);\n                const toAmount = parseBalance(state.toAmount, state.toToken.decimals);\n                if (state.fromSymbol === \"ETH\" || state.toSymbol === \"ETH\") {\n                    const [token, amount, amountETH] =\n                        state.fromSymbol === \"ETH\"\n                            ? [state.toToken, toAmount, fromAmount]\n                            : [state.fromToken, fromAmount, toAmount];\n                    const tx = await addLiquidityETH(token, amount, amountETH, signer);\n                    await tx.wait();\n                } else {\n                    const tx = await addLiquidity(state.fromToken, state.toToken, fromAmount, toAmount, signer);\n                    await tx.wait();\n                }\n                await updateTokens();\n                state.setFromSymbol(\"\");\n            } finally {\n                setAdding(false);\n            }\n        }\n    }, [state.fromToken, state.toToken, state.fromAmount, state.toAmount, signer]);\n\n    return {\n        ...state,\n        onAdd,\n        adding\n    };\n};\n\nexport default useAddLiquidityState;\n","import React, { useCallback, useState } from \"react\";\nimport { ActivityIndicator, Platform } from \"react-native\";\n\nimport useAsyncEffect from \"use-async-effect\";\nimport ApproveButton from \"../components/ApproveButton\";\nimport Button from \"../components/Button\";\nimport Column from \"../components/Column\";\nimport Container from \"../components/Container\";\nimport Content from \"../components/Content\";\nimport ErrorMessage from \"../components/ErrorMessage\";\nimport FetchingButton from \"../components/FetchingButton\";\nimport Guide from \"../components/Guide\";\nimport InsufficientBalanceButton from \"../components/InsufficientBalanceButton\";\nimport Meta from \"../components/Meta\";\nimport Notice from \"../components/Notice\";\nimport Text from \"../components/Text\";\nimport TokenInput from \"../components/TokenInput\";\nimport TokenSelect from \"../components/TokenSelect\";\nimport UnsupportedButton from \"../components/UnsupportedButton\";\nimport WebFooter from \"../components/web/WebFooter\";\nimport { ROUTER } from \"../constants/contracts\";\nimport { Spacing } from \"../constants/dimension\";\nimport Fraction from \"../constants/Fraction\";\nimport useAddLiquidityState, { AddLiquidityState } from \"../hooks/useAddLiquidityState\";\nimport useLinker from \"../hooks/useLinker\";\nimport MetamaskError from \"../types/MetamaskError\";\nimport { convertAmount, convertToken, isEmptyValue, parseBalance } from \"../utils\";\nimport Screen from \"./Screen\";\n\nconst LiquidityScreen = () => {\n    return (\n        <Screen>\n            <Container>\n                <Content>\n                    <AddLiquidity />\n                    {Platform.OS === \"web\" && <WebFooter />}\n                </Content>\n            </Container>\n        </Screen>\n    );\n};\n\nconst AddLiquidity = () => {\n    const state = useAddLiquidityState();\n    return (\n        <>\n            <Column>\n                <Text h4={true} style={{ textAlign: \"center\", marginBottom: Spacing.normal }}>\n                    🔥 Add Liquidity\n                </Text>\n            </Column>\n            <TokenSelect\n                title={\"1. Select the 1st token you want to ADD:\"}\n                hidden={false}\n                symbol={state.fromSymbol}\n                onChangeSymbol={state.setFromSymbol}\n                filterTokens={token => token.balance && !token.balance.isZero()}\n            />\n            <TokenSelect\n                title={\"2. Select the 2nd token you want to ADD:\"}\n                hidden={state.fromSymbol === \"\"}\n                symbol={state.toSymbol}\n                onChangeSymbol={state.setToSymbol}\n                filterTokens={token => token.symbol !== state.fromSymbol && token.balance && !token.balance.isZero()}\n            />\n            <FromTokenInput state={state} />\n            <ToTokenInput state={state} />\n            <PriceInfo state={state} />\n            <Controls state={state} />\n            <RemoveLiquidityGuide state={state} />\n        </>\n    );\n};\n\nconst FromTokenInput = ({ state }: { state: AddLiquidityState }) => {\n    const onAmountChanged = useCallback(\n        (newAmount: string) => {\n            state.setFromAmount(newAmount);\n            if (state.pair && state.fromToken) {\n                const fromPrice = state.pair.priceOf(convertToken(state.fromToken));\n                state.setToAmount(fromPrice.quote(convertAmount(state.fromToken, newAmount)).toExact());\n            }\n        },\n        [state.pair, state.fromToken]\n    );\n    if (state.loading)\n        return (\n            <Column>\n                <ActivityIndicator size={\"large\"} />\n            </Column>\n        );\n    return (\n        <TokenInput\n            title={\"3. How many tokens do you want to supply?\"}\n            token={state.fromToken}\n            hidden={!state.fromToken || !state.toToken || state.loading}\n            amount={state.fromAmount}\n            onAmountChanged={onAmountChanged}\n        />\n    );\n};\n\nconst ToTokenInput = ({ state }: { state: AddLiquidityState }) => {\n    const onAmountChanged = useCallback(\n        (newAmount: string) => {\n            state.setToAmount(newAmount);\n            if (state.pair && state.toToken) {\n                const toPrice = state.pair.priceOf(convertToken(state.toToken));\n                state.setFromAmount(toPrice.quote(convertAmount(state.toToken, newAmount)).toExact());\n            }\n        },\n        [state.pair, state.toToken]\n    );\n    return (\n        <TokenInput\n            token={state.toToken}\n            hidden={!state.fromToken || !state.toToken || state.loading}\n            amount={state.toAmount}\n            onAmountChanged={onAmountChanged}\n        />\n    );\n};\n\nconst PriceInfo = ({ state }: { state: AddLiquidityState }) => {\n    if (!state.fromToken || !state.toToken || state.loading) {\n        return <Column noTopMargin={true} />;\n    }\n    if (!isEmptyValue(state.fromAmount) && !state.loading && !state.pair) {\n        const initialPrice = Fraction.from(\n            parseBalance(state.toAmount, state.toToken.decimals),\n            parseBalance(state.fromAmount, state.fromToken.decimals)\n        );\n        return (\n            <Column noTopMargin={true}>\n                <Notice\n                    text={\n                        \"You are the first liquidity provider.\\n\" +\n                        \"The ratio of tokens you add will set the price of this pool.\"\n                    }\n                />\n                {!!state.fromAmount && !!state.toAmount && (\n                    <PriceMeta price={initialPrice} fromSymbol={state.fromSymbol} toSymbol={state.toSymbol} />\n                )}\n            </Column>\n        );\n    }\n    const price = state.pair ? state.pair.priceOf(convertToken(state.fromToken)).toFixed(8) : \"…\";\n    return (\n        <Column noTopMargin={true}>\n            <PriceMeta price={price} fromSymbol={state.fromSymbol} toSymbol={state.toSymbol} />\n        </Column>\n    );\n};\n\nconst PriceMeta = ({ price, fromSymbol, toSymbol }) => (\n    <Meta label={\"Price\"} text={price.toString()} suffix={toSymbol + \" = 1 \" + fromSymbol} />\n);\n\n// tslint:disable-next-line:max-func-body-length\nconst Controls = ({ state }: { state: AddLiquidityState }) => {\n    const [error, setError] = useState<MetamaskError>({});\n    useAsyncEffect(() => setError({}), [state.fromSymbol, state.toSymbol, state.fromAmount]);\n    if (!state.fromToken || !state.toToken || state.loading) {\n        return <Column noTopMargin={true} />;\n    }\n    const insufficientFromToken = parseBalance(state.fromAmount, state.fromToken.decimals).gt(state.fromToken.balance);\n    const insufficientToToken = parseBalance(state.toAmount, state.toToken.decimals).gt(state.toToken.balance);\n    const fromApproveRequired = state.fromSymbol !== \"ETH\" && !state.fromTokenAllowed;\n    const toApproveRequired = state.toSymbol !== \"ETH\" && !state.toTokenAllowed;\n    const disabled =\n        fromApproveRequired || toApproveRequired || isEmptyValue(state.fromAmount) || isEmptyValue(state.toAmount);\n    return (\n        <Column>\n            {insufficientFromToken ? (\n                <InsufficientBalanceButton symbol={state.fromSymbol} />\n            ) : insufficientToToken ? (\n                <InsufficientBalanceButton symbol={state.toSymbol} />\n            ) : state.loading || !state.pair ? (\n                <FetchingButton />\n            ) : (state.fromSymbol === \"ETH\" && state.toSymbol === \"WETH\") ||\n              (state.fromSymbol === \"WETH\" && state.toSymbol === \"ETH\") ? (\n                <UnsupportedButton state={state} />\n            ) : (\n                <>\n                    <ApproveButton\n                        token={state.fromToken}\n                        spender={ROUTER}\n                        onSuccess={() => state.setFromTokenAllowed(true)}\n                        onError={setError}\n                        hidden={!fromApproveRequired}\n                    />\n                    <ApproveButton\n                        token={state.toToken}\n                        spender={ROUTER}\n                        onSuccess={() => state.setToTokenAllowed(true)}\n                        onError={setError}\n                        hidden={!toApproveRequired}\n                    />\n                    <SupplyButton state={state} onError={setError} disabled={disabled} />\n                </>\n            )}\n            {error.message && error.code !== 4001 && <ErrorMessage error={error} />}\n        </Column>\n    );\n};\n\nconst SupplyButton = ({\n    state,\n    onError,\n    disabled\n}: {\n    state: AddLiquidityState;\n    onError: (e) => void;\n    disabled: boolean;\n}) => {\n    const onPress = useCallback(() => {\n        onError({});\n        state.onAdd().catch(onError);\n    }, [state.onAdd, onError]);\n    return (\n        <Button\n            size={\"large\"}\n            title={\"Supply \" + state.fromSymbol + \"-\" + state.toSymbol}\n            disabled={disabled}\n            loading={state.adding}\n            onPress={onPress}\n        />\n    );\n};\n\nconst RemoveLiquidityGuide = ({ state }: { state: AddLiquidityState }) => {\n    const onPress = useLinker(\"/#/liquidity/remove\", \"RemoveLiquidity\", \"_self\");\n    return (\n        <Guide\n            hidden={false}\n            text={\"☘️ Do you want to remove existing liquidity?\"}\n            buttonTitle={\"Click Here!\"}\n            onPressButton={onPress}\n        />\n    );\n};\n\nexport default LiquidityScreen;\n","import React from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useLinker from \"../hooks/useLinker\";\nimport Notice from \"./Notice\";\n\nconst ExperimentalNotice = (props: { contractURL: string }) => {\n    const onPressContract = useLinker(props.contractURL, \"\", \"_blank\");\n    return (\n        <View style={{ marginBottom: Spacing.normal }}>\n            <Notice\n                text={\"This feature is in beta. Read the contract yourself and use it with caution.\"}\n                color={\"orange\"}\n                buttonText={\"Read Contract\"}\n                onPressButton={onPressContract}\n            />\n        </View>\n    );\n};\n\nexport default ExperimentalNotice;\n","import React, { FC, useCallback, useState } from \"react\";\nimport { Image, TouchableHighlight, View } from \"react-native\";\nimport { Hoverable } from \"react-native-web-hover\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport { formatBalance } from \"../utils\";\nimport CloseIcon from \"./CloseIcon\";\nimport FlexView from \"./FlexView\";\nimport { LPTokenItemProps } from \"./LPTokenSelect\";\nimport SelectIcon from \"./SelectIcon\";\nimport Text from \"./Text\";\n\nconst LPTokenItem: FC<LPTokenItemProps> = props => {\n    const { background, backgroundHovered, textMedium } = useColors();\n    const balance = formatBalance(props.token.balance, props.token.decimals, 18);\n    const onPress = useCallback(() => {\n        props.onSelectToken(props.token);\n    }, [props.onSelectToken, props.token]);\n    return (\n        <Hoverable>\n            {({ hovered }) => (\n                <TouchableHighlight onPress={onPress}>\n                    <View style={{ backgroundColor: hovered ? backgroundHovered : background }}>\n                        <FlexView style={{ alignItems: \"center\", margin: Spacing.small }}>\n                            <View>\n                                <LogoSymbol token={props.token.tokenA} />\n                                <LogoSymbol token={props.token.tokenB} />\n                            </View>\n                            <View style={{ flex: 1 }}>\n                                <Text note={true} style={{ textAlign: \"right\" }}>\n                                    My Balance\n                                </Text>\n                                <Text light={true} style={{ textAlign: \"right\", fontSize: 22, color: textMedium }}>\n                                    {balance}\n                                </Text>\n                            </View>\n                            {props.selected ? <CloseIcon /> : <SelectIcon />}\n                        </FlexView>\n                    </View>\n                </TouchableHighlight>\n            )}\n        </Hoverable>\n    );\n};\n\nconst LogoSymbol = ({ token }) => {\n    const { textMedium } = useColors();\n    const [isEmpty, setIsEmpty] = useState(false);\n    const source = isEmpty ? require(\"../../assets/empty-token.png\") : { uri: token.logoURI };\n    return (\n        <FlexView style={{ alignItems: \"center\", marginBottom: Spacing.tiny }}>\n            <Image\n                source={source}\n                onError={() => setIsEmpty(true)}\n                style={{ width: 24, height: 24, backgroundColor: \"white\", borderRadius: 12 }}\n            />\n            <Text light={true} style={{ fontSize: 22, color: textMedium, marginLeft: Spacing.small }}>\n                {token.symbol.replace(/\\+/g, \"+\\n\")}\n            </Text>\n        </FlexView>\n    );\n};\n\nexport default LPTokenItem;\n","import { useCallback, useContext, useState } from \"react\";\n\nimport { ethers } from \"ethers\";\nimport useAsyncEffect from \"use-async-effect\";\nimport { MIGRATOR2 } from \"../constants/contracts\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport { parseBalance } from \"../utils\";\nimport useLPTokensState, { LPTokensState } from \"./useLPTokensState\";\nimport useSDK from \"./useSDK\";\n\nexport interface MigrateState extends LPTokensState {\n    onMigrate: () => Promise<void>;\n    migrating: boolean;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst useMigrateState: () => MigrateState = () => {\n    const state = useLPTokensState(\"my-uniswap-lp-tokens\");\n    const { provider, signer, getTokenAllowance, updateTokens } = useContext(EthersContext);\n    const { migrate } = useSDK();\n    const [loading, setLoading] = useState(false);\n    const [migrating, setMigrating] = useState(false);\n\n    useAsyncEffect(async () => {\n        if (provider && signer && state.selectedLPToken) {\n            setLoading(true);\n            state.setSelectedLPTokenAllowed(false);\n            try {\n                const minAllowance = ethers.BigNumber.from(2)\n                    .pow(96)\n                    .sub(1);\n                const allowance = await getTokenAllowance(state.selectedLPToken.address, MIGRATOR2);\n                state.setSelectedLPTokenAllowed(ethers.BigNumber.from(allowance).gte(minAllowance));\n            } finally {\n                setLoading(false);\n            }\n        }\n    }, [provider, signer, state.selectedLPToken]);\n\n    const onMigrate = useCallback(async () => {\n        if (state.selectedLPToken && state.amount && signer) {\n            setMigrating(true);\n            try {\n                const amount = parseBalance(state.amount, state.selectedLPToken.decimals);\n                const tx = await migrate(state.selectedLPToken, amount, signer);\n                await tx.wait();\n                await updateTokens();\n                state.setSelectedLPToken(undefined);\n            } finally {\n                setMigrating(false);\n            }\n        }\n    }, [state.selectedLPToken, state.amount, signer, updateTokens]);\n\n    return {\n        ...state,\n        loading: state.loading || loading,\n        onMigrate,\n        migrating\n    };\n};\n\nexport default useMigrateState;\n","import React, { useCallback, useState } from \"react\";\nimport { Platform, View } from \"react-native\";\n\nimport useAsyncEffect from \"use-async-effect\";\nimport ApproveButton from \"../components/ApproveButton\";\nimport Button from \"../components/Button\";\nimport Column from \"../components/Column\";\nimport Container from \"../components/Container\";\nimport Content from \"../components/Content\";\nimport ErrorMessage from \"../components/ErrorMessage\";\nimport ExperimentalNotice from \"../components/ExperimentalNotice\";\nimport FetchingButton from \"../components/FetchingButton\";\nimport InsufficientBalanceButton from \"../components/InsufficientBalanceButton\";\nimport LPTokenItem from \"../components/LPTokenItem\";\nimport LPTokenSelect from \"../components/LPTokenSelect\";\nimport Text from \"../components/Text\";\nimport TokenInput from \"../components/TokenInput\";\nimport WebFooter from \"../components/web/WebFooter\";\nimport { MIGRATOR2 } from \"../constants/contracts\";\nimport { Spacing } from \"../constants/dimension\";\nimport useMigrateState, { MigrateState } from \"../hooks/useMigrateState\";\nimport MetamaskError from \"../types/MetamaskError\";\nimport { isEmptyValue, parseBalance } from \"../utils\";\nimport Screen from \"./Screen\";\n\nconst MigrateScreen = () => {\n    return (\n        <Screen>\n            <Container>\n                <Content>\n                    <Migrate />\n                    {Platform.OS === \"web\" && <WebFooter />}\n                </Content>\n            </Container>\n        </Screen>\n    );\n};\n\nconst Migrate = () => {\n    const state = useMigrateState();\n    return (\n        <View style={{ alignItems: \"center\", marginBottom: Spacing.huge * 2 }}>\n            <Column>\n                <Text h4={true} style={{ textAlign: \"center\", marginBottom: Spacing.normal }}>\n                    🦄️ Migrate from Uniswap\n                </Text>\n                <ExperimentalNotice\n                    contractURL={\n                        \"https://github.com/sushiswap-community/sushiswap-core/blob/master/contracts/Migrator2.sol\"\n                    }\n                />\n                <LPTokenSelect\n                    state={state}\n                    title={\"1. Select a uniswap pool to MIGRATE from:\"}\n                    emptyText={\"You don't have any liquidity on uniswap.\"}\n                    Item={LPTokenItem}\n                />\n                <TokenInput\n                    title={\"2. How many tokens would you MIGRATE?\"}\n                    token={state.selectedLPToken}\n                    hidden={!state.selectedLPToken}\n                    amount={state.amount}\n                    onAmountChanged={state.setAmount}\n                />\n                <Controls state={state} />\n            </Column>\n        </View>\n    );\n};\n\nconst Controls = ({ state }: { state: MigrateState }) => {\n    const [error, setError] = useState<MetamaskError>({});\n    useAsyncEffect(() => setError({}), [state.amount]);\n    if (!state.selectedLPToken || isEmptyValue(state.amount)) return <Column noTopMargin={true} />;\n    return (\n        <Column>\n            {parseBalance(state.amount, state.selectedLPToken.decimals).gt(state.selectedLPToken.balance) ? (\n                <InsufficientBalanceButton symbol={state.selectedLPToken.symbol} />\n            ) : state.loading ? (\n                <FetchingButton />\n            ) : (\n                <>\n                    <ApproveButton\n                        token={state.selectedLPToken}\n                        spender={MIGRATOR2}\n                        onSuccess={() => state.setSelectedLPTokenAllowed(true)}\n                        onError={setError}\n                        hidden={state.selectedLPTokenAllowed}\n                    />\n                    <MigrateButton state={state} onError={setError} disabled={!state.selectedLPTokenAllowed} />\n                </>\n            )}\n            {error.message && error.code !== 4001 && <ErrorMessage error={error} />}\n        </Column>\n    );\n};\n\nconst MigrateButton = ({\n    state,\n    onError,\n    disabled\n}: {\n    state: MigrateState;\n    onError: (e) => void;\n    disabled: boolean;\n}) => {\n    const onPress = useCallback(async () => {\n        onError({});\n        try {\n            await state.onMigrate();\n        } catch (e) {\n            onError(e);\n        }\n    }, []);\n    return <Button size={\"large\"} title={\"Migrate\"} loading={state.migrating} onPress={onPress} disabled={disabled} />;\n};\n\nexport default MigrateScreen;\n","import { useCallback, useContext, useState } from \"react\";\n\nimport { ethers } from \"ethers\";\nimport useAsyncEffect from \"use-async-effect\";\nimport { ORDER_BOOK, SETTLEMENT } from \"../constants/contracts\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport { getContract } from \"../utils\";\nimport { findOrFetchToken } from \"../utils/fetch-utils\";\nimport useSDK, { Order, OrderStatus } from \"./useSDK\";\n\nexport interface OrderInfo {\n    status: number;\n    filledAmountIn: ethers.BigNumber;\n}\n\nexport interface MyLimitOrdersState {\n    lastTimeRefreshed: number;\n    orders?: Order[];\n    loading: boolean;\n    selectedOrder?: Order;\n    setSelectedOrder: (order?: Order) => void;\n    onCancelOrder: () => Promise<void>;\n    cancellingOrder: boolean;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst useMyLimitOrdersState = () => {\n    const { cancelOrder } = useSDK();\n    const { kovanSigner, signer, provider, tokens } = useContext(EthersContext);\n    const [lastTimeRefreshed, setLastTimeRefreshed] = useState(0);\n    const [orders, setOrders] = useState<Order[]>();\n    const [selectedOrder, setSelectedOrder] = useState<Order>();\n    const [loading, setLoading] = useState(true);\n    const [cancellingOrder, setCancellingOrder] = useState(false);\n\n    // tslint:disable-next-line:max-func-body-length\n    const updateOrders = async () => {\n        if (signer && kovanSigner && provider && tokens) {\n            const orderBook = getContract(\"OrderBook\", ORDER_BOOK, kovanSigner);\n            const settlement = await getContract(\"Settlement\", SETTLEMENT, signer);\n            const address = await signer.getAddress();\n            const length = await orderBook.numberOfHashesOfMaker(address);\n            const LIMIT = 20;\n            const pages: number[] = [];\n            for (let i = 0; i * LIMIT < length; i++) {\n                pages.push(i);\n            }\n            const hashes = (\n                await Promise.all(\n                    pages.map(async page => {\n                        return await orderBook.allHashes(page, LIMIT);\n                    })\n                )\n            ).flat();\n            const myOrders = await Promise.all(\n                hashes\n                    .filter(hash => hash !== ethers.constants.HashZero)\n                    .map(async hash => {\n                        const args = await orderBook.orderOfHash(hash);\n                        const order = new Order(\n                            signer,\n                            await findOrFetchToken(provider, args.fromToken, tokens),\n                            await findOrFetchToken(provider, args.toToken, tokens),\n                            args.amountIn,\n                            args.amountOutMin,\n                            args.recipient,\n                            args.deadline\n                        );\n                        order.filledAmountIn = await settlement.filledAmountInOfHash(hash);\n                        return order;\n                    })\n            );\n            setOrders(\n                myOrders.sort((o0, o1) => {\n                    const status = (s: OrderStatus) => (s === \"Open\" ? 0 : s === \"Filled\" ? 1 : 2);\n                    const compared = status(o0.status()) - status(o1.status());\n                    if (compared === 0) {\n                        return o0.deadline.toNumber() - o1.deadline.toNumber();\n                    }\n                    return compared;\n                }) as Order[]\n            );\n            setLoading(false);\n        }\n    };\n\n    useAsyncEffect(updateOrders, [kovanSigner, signer, provider, tokens, lastTimeRefreshed]);\n\n    const onCancelOrder = useCallback(async () => {\n        if (selectedOrder && signer && kovanSigner) {\n            setCancellingOrder(true);\n            try {\n                const hash = await selectedOrder.hash();\n                const tx = await cancelOrder(hash, signer, kovanSigner);\n                await tx.wait();\n                setSelectedOrder(undefined);\n                setLastTimeRefreshed(Date.now());\n            } finally {\n                setCancellingOrder(false);\n            }\n        }\n    }, [selectedOrder, signer, kovanSigner]);\n\n    return {\n        lastTimeRefreshed,\n        orders,\n        loading,\n        selectedOrder,\n        setSelectedOrder,\n        onCancelOrder,\n        cancellingOrder\n    };\n};\n\nexport default useMyLimitOrdersState;\n","import React, { useCallback, useState } from \"react\";\nimport { ActivityIndicator, FlatList, Image, Platform, TouchableHighlight, View } from \"react-native\";\nimport { Hoverable } from \"react-native-web-hover\";\n\nimport useAsyncEffect from \"use-async-effect\";\nimport Border from \"../components/Border\";\nimport Button from \"../components/Button\";\nimport CloseIcon from \"../components/CloseIcon\";\nimport Column from \"../components/Column\";\nimport Container from \"../components/Container\";\nimport Content from \"../components/Content\";\nimport ErrorMessage from \"../components/ErrorMessage\";\nimport FlexView from \"../components/FlexView\";\nimport Meta from \"../components/Meta\";\nimport SelectIcon from \"../components/SelectIcon\";\nimport Subtitle from \"../components/Subtitle\";\nimport Text from \"../components/Text\";\nimport WebFooter from \"../components/web/WebFooter\";\nimport { Spacing } from \"../constants/dimension\";\nimport Fraction from \"../constants/Fraction\";\nimport useColors from \"../hooks/useColors\";\nimport useMyLimitOrdersState, { MyLimitOrdersState } from \"../hooks/useMyLimitOrdersState\";\nimport { Order } from \"../hooks/useSDK\";\nimport MetamaskError from \"../types/MetamaskError\";\nimport { formatBalance, formatDate } from \"../utils\";\nimport Screen from \"./Screen\";\n\nconst MyLimitOrdersScreen = () => {\n    return (\n        <Screen>\n            <Container>\n                <Content>\n                    <MyLimitOrders />\n                    {Platform.OS === \"web\" && <WebFooter />}\n                </Content>\n            </Container>\n        </Screen>\n    );\n};\n\nconst MyLimitOrders = () => {\n    const state = useMyLimitOrdersState();\n    return (\n        <>\n            <Column style={{ alignItems: \"center\" }}>\n                <Text h4={true} style={{ textAlign: \"center\", marginBottom: Spacing.normal }}>\n                    ⏳ My Limit Orders\n                </Text>\n                <OrderSelect state={state} />\n                <OrderInfo state={state} />\n                <Controls state={state} />\n            </Column>\n        </>\n    );\n};\n\nconst OrderSelect = (props: { state: MyLimitOrdersState }) => {\n    const onUnselectOrder = useCallback(() => {\n        props.state.setSelectedOrder(undefined);\n    }, [props.state.setSelectedOrder]);\n    return (\n        <Column>\n            <Text fontWeight={\"bold\"} medium={true} style={{ marginBottom: Spacing.normal, fontSize: 20 }}>\n                {\"1. Select a limit order you've placed:\"}\n            </Text>\n            {props.state.selectedOrder ? (\n                <OrderItem order={props.state.selectedOrder} selected={true} onSelectOrder={onUnselectOrder} />\n            ) : (\n                <OrderList state={props.state} />\n            )}\n        </Column>\n    );\n};\n\nconst OrderList = ({ state }: { state: MyLimitOrdersState }) => {\n    const renderItem = useCallback(\n        ({ item }) => {\n            return (\n                <OrderItem key={item.address} order={item} selected={false} onSelectOrder={state.setSelectedOrder} />\n            );\n        },\n        [state.setSelectedOrder]\n    );\n    return state.loading || !state.orders ? (\n        <ActivityIndicator size={\"large\"} style={{ marginTop: Spacing.large }} />\n    ) : state.orders.length === 0 ? (\n        <EmptyList />\n    ) : (\n        <FlatList\n            keyExtractor={item => JSON.stringify(item)}\n            data={state.orders}\n            renderItem={renderItem}\n            ItemSeparatorComponent={Border}\n        />\n    );\n};\n\nconst EmptyList = () => {\n    return (\n        <View style={{ margin: Spacing.normal }}>\n            <Text light={true} style={{ textAlign: \"center\", width: \"100%\" }}>\n                {\"You don't have any limit orders placed.\"}\n            </Text>\n        </View>\n    );\n};\n\nconst OrderItem = (props: { order: Order; selected: boolean; onSelectOrder: (order: Order) => void }) => {\n    const { background, backgroundHovered } = useColors();\n    const { amountIn, amountOutMin, fromToken, toToken } = props.order;\n    const status = props.order.status();\n    const disabled = status !== \"Open\";\n    const price = Fraction.fromTokens(amountOutMin, amountIn, toToken, fromToken);\n    const onPress = useCallback(() => props.onSelectOrder(props.order), [props.onSelectOrder, props.order]);\n    return (\n        <Hoverable>\n            {({ hovered }) => (\n                <TouchableHighlight onPress={onPress}>\n                    <View style={{ backgroundColor: hovered ? backgroundHovered : background }}>\n                        <FlexView style={{ alignItems: \"center\", margin: Spacing.small }}>\n                            <View>\n                                <TokenAmount token={fromToken} amount={amountIn} disabled={disabled} buy={false} />\n                                <TokenAmount token={toToken} amount={amountOutMin} disabled={disabled} buy={true} />\n                            </View>\n                            <MetaColumn label={\"Price\"} value={price.toString(4)} disabled={disabled} minWidth={0} />\n                            <MetaColumn label={\"Status\"} value={status} disabled={disabled} minWidth={64} />\n                            {props.selected ? <CloseIcon /> : <SelectIcon />}\n                        </FlexView>\n                    </View>\n                </TouchableHighlight>\n            )}\n        </Hoverable>\n    );\n};\n\nconst TokenAmount = ({ token, amount, disabled, buy }) => {\n    const { textMedium, green, red, disabled: colorDisabled } = useColors();\n    const [isEmpty, setIsEmpty] = useState(false);\n    const source = isEmpty ? require(\"../../assets/empty-token.png\") : { uri: token.logoURI };\n    return (\n        <FlexView style={{ alignItems: \"center\", marginBottom: Spacing.tiny }}>\n            <Image\n                source={source}\n                onError={() => setIsEmpty(true)}\n                style={{ width: 24, height: 24, backgroundColor: \"white\", borderRadius: 12 }}\n            />\n            <Text\n                fontWeight={\"light\"}\n                style={{ fontSize: 22, color: disabled ? colorDisabled : textMedium, marginLeft: Spacing.tiny }}>\n                {formatBalance(amount, token.decimals, 4)}\n            </Text>\n            <Text style={{ fontSize: 22, marginLeft: Spacing.tiny, color: disabled ? colorDisabled : textMedium }}>\n                {token.symbol.replace(/\\+/g, \"+\\n\")}\n            </Text>\n            <Text\n                style={{ color: disabled ? colorDisabled : buy ? green : red, fontSize: 22, marginLeft: Spacing.tiny }}>\n                {buy ? \"IN\" : \"OUT\"}\n            </Text>\n        </FlexView>\n    );\n};\n\nconst MetaColumn = ({ label, value, disabled, minWidth }) => {\n    const { textMedium, textLight, disabled: colorDisabled } = useColors();\n    return (\n        <View style={{ flex: minWidth ? 0 : 1, minWidth, marginLeft: Spacing.tiny }}>\n            <Text note={true} style={{ textAlign: \"right\", color: disabled ? colorDisabled : textLight }}>\n                {label}\n            </Text>\n            <Text\n                light={true}\n                style={{ textAlign: \"right\", fontSize: 20, color: disabled ? colorDisabled : textMedium }}>\n                {value}\n            </Text>\n        </View>\n    );\n};\n\nconst OrderInfo = ({ state }: { state: MyLimitOrdersState }) => {\n    if (!state.selectedOrder) return <Column noTopMargin={true} />;\n    const { amountIn, amountOutMin, fromToken, toToken, deadline } = state.selectedOrder;\n    const filledAmountIn = state.selectedOrder.filledAmountIn;\n    const price = Fraction.fromTokens(amountOutMin, amountIn, toToken, fromToken);\n    const expiry = new Date(deadline.toNumber() * 1000);\n    return (\n        <Column>\n            <Subtitle text={\"2. Do you want to cancel the order?\"} />\n            <Meta\n                label={\"Amount Filled\"}\n                text={filledAmountIn ? formatBalance(filledAmountIn, fromToken.decimals) : undefined}\n                suffix={fromToken.symbol}\n            />\n            <Meta label={\"Amount Out\"} text={formatBalance(amountIn, fromToken.decimals)} suffix={fromToken.symbol} />\n            <Meta label={\"Amount In\"} text={formatBalance(amountOutMin, toToken.decimals)} suffix={toToken.symbol} />\n            <Meta label={\"Price\"} text={price.toString()} suffix={toToken.symbol + \" / \" + fromToken.symbol} />\n            <Meta label={\"Expiration\"} text={formatDate(expiry)} />\n        </Column>\n    );\n};\n\nconst Controls = ({ state }: { state: MyLimitOrdersState }) => {\n    const [error, setError] = useState<MetamaskError>({});\n    useAsyncEffect(() => setError({}), [state.selectedOrder]);\n    if (!state.selectedOrder) return <Column noTopMargin={true} />;\n    return (\n        <Column>\n            <CancelButton state={state} onError={setError} />\n            {error.message && error.code !== 4001 && <ErrorMessage error={error} />}\n        </Column>\n    );\n};\n\nconst CancelButton = ({ state, onError }: { state: MyLimitOrdersState; onError: (e) => void }) => {\n    const onPress = useCallback(() => {\n        onError({});\n        state.onCancelOrder().catch(onError);\n    }, [state.onCancelOrder, onError]);\n    const disabled = !state.selectedOrder || state.selectedOrder.status() !== \"Open\";\n    return (\n        <Button size={\"large\"} title={\"Cancel\"} loading={state.cancellingOrder} onPress={onPress} disabled={disabled} />\n    );\n};\n\nexport default MyLimitOrdersScreen;\n","import { useCallback, useContext, useState } from \"react\";\n\nimport { ethers } from \"ethers\";\nimport useAsyncEffect from \"use-async-effect\";\nimport { ROUTER } from \"../constants/contracts\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport { convertToken, formatBalance, parseBalance, parseCurrencyAmount } from \"../utils\";\nimport useLPTokensState, { LPTokensState } from \"./useLPTokensState\";\nimport useSDK from \"./useSDK\";\n\nexport interface RemoveLiquidityState extends LPTokensState {\n    onRemove: () => Promise<void>;\n    removing: boolean;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst useRemoveLiquidityState: () => RemoveLiquidityState = () => {\n    const state = useLPTokensState(\"my-lp-tokens\");\n    const { provider, signer, updateTokens, getTokenAllowance } = useContext(EthersContext);\n    const { removeLiquidity, removeLiquidityETH } = useSDK();\n    const [loading, setLoading] = useState(false);\n    const [removing, setRemoving] = useState(false);\n\n    useAsyncEffect(async () => {\n        if (provider && signer && state.selectedLPToken) {\n            state.setFromSymbol(state.selectedLPToken.tokenA.symbol);\n            state.setToSymbol(state.selectedLPToken.tokenB.symbol);\n\n            setLoading(true);\n            state.setSelectedLPTokenAllowed(false);\n            try {\n                const minAllowance = ethers.BigNumber.from(2)\n                    .pow(96)\n                    .sub(1);\n                const allowance = await getTokenAllowance(state.selectedLPToken.address, ROUTER);\n                state.setSelectedLPTokenAllowed(ethers.BigNumber.from(allowance).gte(minAllowance));\n            } finally {\n                setLoading(false);\n            }\n        }\n    }, [provider, signer, state.selectedLPToken]);\n\n    // tslint:disable-next-line:max-func-body-length\n    useAsyncEffect(async () => {\n        if (\n            state.selectedLPToken &&\n            state.selectedLPToken.totalSupply &&\n            state.pair &&\n            state.fromToken &&\n            state.toToken\n        ) {\n            if (state.pair.liquidityToken.address === state.selectedLPToken.address) {\n                const fromReserve = parseCurrencyAmount(\n                    state.pair.reserveOf(convertToken(state.fromToken)),\n                    state.fromToken.decimals\n                );\n                const toReserve = parseCurrencyAmount(\n                    state.pair.reserveOf(convertToken(state.toToken)),\n                    state.toToken.decimals\n                );\n                state.setFromAmount(\n                    formatBalance(\n                        parseBalance(state.amount, state.selectedLPToken.decimals)\n                            .mul(fromReserve)\n                            .div(state.selectedLPToken.totalSupply)\n                            .toString(),\n                        state.selectedLPToken.tokenA.decimals\n                    )\n                );\n                state.setToAmount(\n                    formatBalance(\n                        parseBalance(state.amount, state.selectedLPToken.decimals)\n                            .mul(toReserve)\n                            .div(state.selectedLPToken.totalSupply)\n                            .toString(),\n                        state.selectedLPToken.tokenB.decimals\n                    )\n                );\n            }\n        }\n    }, [state.selectedLPToken, state.amount, state.pair, state.fromToken, state.toToken, signer]);\n\n    const onRemove = useCallback(async () => {\n        if (state.fromAmount && state.toAmount && state.selectedLPToken && state.amount && signer) {\n            setRemoving(true);\n            try {\n                const fromAmount = parseBalance(state.fromAmount, state.fromToken!.decimals);\n                const toAmount = parseBalance(state.toAmount, state.toToken!.decimals);\n                const liquidity = parseBalance(state.amount, state.selectedLPToken.decimals);\n                if (state.fromSymbol === \"WETH\" || state.toSymbol === \"WETH\") {\n                    const [token, amountToRemove, amountToRemoveETH] =\n                        state.fromSymbol === \"WETH\"\n                            ? [state.toToken!, toAmount, fromAmount]\n                            : [state.fromToken!, fromAmount, toAmount];\n                    const tx = await removeLiquidityETH(token, liquidity, amountToRemove, amountToRemoveETH, signer);\n                    await tx.wait();\n                } else {\n                    const tx = await removeLiquidity(\n                        state.fromToken!,\n                        state.toToken!,\n                        liquidity,\n                        fromAmount,\n                        toAmount,\n                        signer\n                    );\n                    await tx.wait();\n                }\n                await updateTokens();\n                state.setSelectedLPToken(undefined);\n            } finally {\n                setRemoving(false);\n            }\n        }\n    }, [state.fromAmount, state.toAmount, state.selectedLPToken, state.amount, signer, updateTokens]);\n\n    return {\n        ...state,\n        loading: state.loading || loading,\n        onRemove,\n        removing\n    };\n};\n\nexport default useRemoveLiquidityState;\n","import React, { useCallback, useState } from \"react\";\nimport { Platform } from \"react-native\";\n\nimport useAsyncEffect from \"use-async-effect\";\nimport ApproveButton from \"../components/ApproveButton\";\nimport Button from \"../components/Button\";\nimport Column from \"../components/Column\";\nimport Container from \"../components/Container\";\nimport Content from \"../components/Content\";\nimport ErrorMessage from \"../components/ErrorMessage\";\nimport FetchingButton from \"../components/FetchingButton\";\nimport InsufficientBalanceButton from \"../components/InsufficientBalanceButton\";\nimport LPTokenItem from \"../components/LPTokenItem\";\nimport LPTokenSelect from \"../components/LPTokenSelect\";\nimport Meta from \"../components/Meta\";\nimport Text from \"../components/Text\";\nimport TokenInput from \"../components/TokenInput\";\nimport WebFooter from \"../components/web/WebFooter\";\nimport { ROUTER } from \"../constants/contracts\";\nimport { Spacing } from \"../constants/dimension\";\nimport useRemoveLiquidityState, { RemoveLiquidityState } from \"../hooks/useRemoveLiquidityState\";\nimport MetamaskError from \"../types/MetamaskError\";\nimport { isEmptyValue, parseBalance } from \"../utils\";\nimport Screen from \"./Screen\";\n\nconst RemoveLiquidityScreen = () => {\n    return (\n        <Screen>\n            <Container>\n                <Content>\n                    <RemoveLiquidity />\n                    {Platform.OS === \"web\" && <WebFooter />}\n                </Content>\n            </Container>\n        </Screen>\n    );\n};\n\nconst RemoveLiquidity = () => {\n    const state = useRemoveLiquidityState();\n    return (\n        <>\n            <Column>\n                <Text h4={true} style={{ textAlign: \"center\", marginBottom: Spacing.normal }}>\n                    🎉 Remove Liquidity\n                </Text>\n            </Column>\n            <LPTokenSelect\n                state={state}\n                title={\"1. Select a pool to REMOVE liquidity from:\"}\n                emptyText={\"You don't have any liquidity.\"}\n                Item={LPTokenItem}\n            />\n            <TokenInput\n                title={\"2. How many tokens do you want to REMOVE?\"}\n                token={state.selectedLPToken}\n                hidden={!state.selectedLPToken}\n                amount={state.amount}\n                onAmountChanged={state.setAmount}\n            />\n            <AmountInfo state={state} />\n            <Controls state={state} />\n        </>\n    );\n};\n\nconst AmountInfo = ({ state }: { state: RemoveLiquidityState }) => {\n    if (!state.selectedLPToken || !state.fromToken || !state.toToken) {\n        return <Column noTopMargin={true} />;\n    }\n    return (\n        <Column noTopMargin={true}>\n            <Meta\n                label={\"Amount of \" + state.fromToken.symbol}\n                text={state.fromAmount}\n                suffix={state.fromToken.symbol}\n            />\n            <Meta label={\"Amount of \" + state.toToken.symbol} text={state.toAmount} suffix={state.toToken.symbol} />\n        </Column>\n    );\n};\n\n// tslint:disable-next-line:max-func-body-length\nconst Controls = ({ state }: { state: RemoveLiquidityState }) => {\n    const [error, setError] = useState<MetamaskError>({});\n    useAsyncEffect(() => setError({}), [state.fromSymbol, state.toSymbol, state.fromAmount]);\n    if (!state.selectedLPToken) {\n        return <Column noTopMargin={true} />;\n    }\n    const approveRequired = !state.selectedLPTokenAllowed;\n    const disabled = approveRequired || isEmptyValue(state.amount);\n    return (\n        <Column>\n            {parseBalance(state.amount, state.selectedLPToken.decimals).gt(state.selectedLPToken.balance) ? (\n                <InsufficientBalanceButton symbol={state.selectedLPToken.symbol} />\n            ) : state.loading || !state.pair ? (\n                <FetchingButton />\n            ) : (\n                <>\n                    <ApproveButton\n                        token={state.selectedLPToken}\n                        spender={ROUTER}\n                        onSuccess={() => state.setSelectedLPTokenAllowed(true)}\n                        onError={setError}\n                        hidden={!approveRequired}\n                    />\n                    <RemoveButton state={state} onError={setError} disabled={disabled} />\n                </>\n            )}\n            {error.message && error.code !== 4001 && <ErrorMessage error={error} />}\n        </Column>\n    );\n};\n\nconst RemoveButton = ({\n    state,\n    onError,\n    disabled\n}: {\n    state: RemoveLiquidityState;\n    onError: (e) => void;\n    disabled: boolean;\n}) => {\n    const onPress = useCallback(() => {\n        onError({});\n        state.onRemove().catch(onError);\n    }, [state.onRemove, onError]);\n    return <Button size={\"large\"} title={\"Remove\"} disabled={disabled} loading={state.removing} onPress={onPress} />;\n};\n\nexport default RemoveLiquidityScreen;\n","import { useCallback, useContext, useEffect, useState } from \"react\";\n\nimport { ethers } from \"ethers\";\nimport useAsyncEffect from \"use-async-effect\";\nimport { SUSHI_BAR } from \"../constants/contracts\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport Token from \"../types/Token\";\nimport { getContract, parseBalance } from \"../utils\";\nimport useSDK from \"./useSDK\";\n\nexport type Action = \"enter\" | \"leave\";\n\nexport interface StakingState {\n    action?: Action;\n    setAction: (action?: Action) => void;\n    sushi?: Token;\n    xSushi?: Token;\n    sushiStaked?: ethers.BigNumber;\n    sushiSupply?: ethers.BigNumber;\n    xSushiSupply?: ethers.BigNumber;\n    amount: string;\n    setAmount: (amount: string) => void;\n    sushiAllowed: boolean;\n    setSushiAllowed: (allowed: boolean) => void;\n    xSushiAllowed: boolean;\n    setXSushiAllowed: (allowed: boolean) => void;\n    loading: boolean;\n    onEnter: () => Promise<void>;\n    entering: boolean;\n    onLeave: () => Promise<void>;\n    leaving: boolean;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst useStakingState: () => StakingState = () => {\n    const { provider, signer, address, getTokenAllowance, tokens, updateTokens } = useContext(EthersContext);\n    const { enterSushiBar, leaveSushiBar } = useSDK();\n    const [action, setAction] = useState<Action>();\n    const [sushiStaked, setSushiStaked] = useState<ethers.BigNumber>();\n    const [sushiSupply, setSushiSupply] = useState<ethers.BigNumber>();\n    const [xSushiSupply, setXSushiSupply] = useState<ethers.BigNumber>();\n    const [amount, setAmount] = useState(\"\");\n    const [sushiAllowed, setSushiAllowed] = useState(false);\n    const [xSushiAllowed, setXSushiAllowed] = useState(false);\n    const [loading, setLoading] = useState(false);\n    const [entering, setEntering] = useState(false);\n    const [leaving, setLeaving] = useState(false);\n\n    const sushi = tokens.find(token => token.symbol === \"SUSHI\");\n    const xSushi = tokens.find(token => token.symbol === \"xSUSHI\");\n\n    useEffect(() => {\n        setAmount(\"\");\n    }, [address, action]);\n\n    useAsyncEffect(async () => {\n        if (sushi && xSushi && provider && signer) {\n            setSushiAllowed(false);\n            setXSushiAllowed(false);\n            setLoading(true);\n            try {\n                const minAllowance = ethers.BigNumber.from(2)\n                    .pow(96)\n                    .sub(1);\n                const sushiAllowance = await getTokenAllowance(sushi.address, SUSHI_BAR);\n                setSushiAllowed(ethers.BigNumber.from(sushiAllowance).gte(minAllowance));\n                const xSushiAllowance = await getTokenAllowance(xSushi.address, SUSHI_BAR);\n                setXSushiAllowed(ethers.BigNumber.from(xSushiAllowance).gte(minAllowance));\n\n                const sushiContract = getContract(\"ERC20\", sushi.address, signer);\n                setSushiStaked(await sushiContract.balanceOf(SUSHI_BAR));\n                setSushiSupply(await sushiContract.totalSupply());\n                const xSushiContract = getContract(\"ERC20\", xSushi.address, signer);\n                setXSushiSupply(await xSushiContract.totalSupply());\n            } finally {\n                setLoading(false);\n            }\n        }\n    }, [sushi, xSushi, provider, signer]);\n\n    const onEnter = useCallback(async () => {\n        if (amount && signer) {\n            setEntering(true);\n            try {\n                const tx = await enterSushiBar(parseBalance(amount), signer);\n                if (tx) {\n                    await tx.wait();\n                    await updateTokens();\n                    setAmount(\"\");\n                }\n            } finally {\n                setEntering(false);\n            }\n        }\n    }, [amount, signer]);\n\n    const onLeave = useCallback(async () => {\n        if (amount && signer) {\n            setLeaving(true);\n            try {\n                const tx = await leaveSushiBar(parseBalance(amount), signer);\n                if (tx) {\n                    await tx.wait();\n                    await updateTokens();\n                    setAmount(\"\");\n                }\n            } finally {\n                setLeaving(false);\n            }\n        }\n    }, [amount, signer]);\n\n    return {\n        action,\n        setAction,\n        sushi,\n        xSushi,\n        sushiStaked,\n        sushiSupply,\n        xSushiSupply,\n        amount,\n        setAmount,\n        sushiAllowed,\n        setSushiAllowed,\n        xSushiAllowed,\n        setXSushiAllowed,\n        loading,\n        onEnter,\n        entering,\n        onLeave,\n        leaving\n    };\n};\n\nexport default useStakingState;\n","import React, { useCallback, useState } from \"react\";\nimport { ActivityIndicator, Platform, View } from \"react-native\";\nimport { Icon } from \"react-native-elements\";\n\nimport useAsyncEffect from \"use-async-effect\";\nimport ApproveButton from \"../components/ApproveButton\";\nimport Button from \"../components/Button\";\nimport ButtonGroup from \"../components/ButtonGroup\";\nimport Column from \"../components/Column\";\nimport Container from \"../components/Container\";\nimport Content from \"../components/Content\";\nimport ErrorMessage from \"../components/ErrorMessage\";\nimport FetchingButton from \"../components/FetchingButton\";\nimport FlexView from \"../components/FlexView\";\nimport InsufficientBalanceButton from \"../components/InsufficientBalanceButton\";\nimport Meta from \"../components/Meta\";\nimport Notice from \"../components/Notice\";\nimport Subtitle from \"../components/Subtitle\";\nimport Text from \"../components/Text\";\nimport TokenInput from \"../components/TokenInput\";\nimport WebFooter from \"../components/web/WebFooter\";\nimport { SUSHI_BAR } from \"../constants/contracts\";\nimport { Spacing } from \"../constants/dimension\";\nimport Fraction from \"../constants/Fraction\";\nimport useColors from \"../hooks/useColors\";\nimport useStakingState, { Action, StakingState } from \"../hooks/useStakingState\";\nimport MetamaskError from \"../types/MetamaskError\";\nimport { formatBalance, isEmptyValue, parseBalance } from \"../utils\";\nimport Screen from \"./Screen\";\n\nconst Actions = [\"enter\", \"leave\"];\n\nconst StakingScreen = () => {\n    return (\n        <Screen>\n            <Container>\n                <Content>\n                    <Staking />\n                    {Platform.OS === \"web\" && <WebFooter />}\n                </Content>\n            </Container>\n        </Screen>\n    );\n};\n\nconst Staking = () => {\n    const state = useStakingState();\n    return (\n        <View style={{ alignItems: \"center\", marginBottom: Spacing.huge * 2 }}>\n            <Column>\n                <Text h4={true} style={{ textAlign: \"center\" }}>\n                    💰 Stake/Unstake\n                </Text>\n            </Column>\n            <ActionSelect state={state} />\n            {state.action === \"enter\" && state.sushi && state.sushi.balance.isZero() && <NoSushiNotice />}\n            {state.action === \"leave\" && state.xSushi && state.xSushi.balance.isZero() && <NoXSushiNotice />}\n            <TokenInput\n                title={\"2. How many SUSHI do you want to STAKE?\"}\n                token={state.sushi}\n                hidden={state.action !== \"enter\" || !state.sushi || state.sushi.balance.isZero()}\n                amount={state.amount}\n                onAmountChanged={state.setAmount}\n            />\n            <TokenInput\n                title={\"2. How many xSUSHI do you want to UNSTAKE?\"}\n                token={state.xSushi}\n                hidden={state.action !== \"leave\" || !state.xSushi || state.xSushi.balance.isZero()}\n                amount={state.amount}\n                onAmountChanged={state.setAmount}\n            />\n            <StakeInfo state={state} />\n            <Controls state={state} />\n        </View>\n    );\n};\n\nconst ActionSelect = ({ state }: { state: StakingState }) => {\n    if (!state.sushi || !state.xSushi || !state.sushiStaked || !state.xSushiSupply) {\n        return (\n            <Column noTopMargin={true}>\n                <ActivityIndicator size={\"large\"} style={{ marginTop: Spacing.large }} />\n            </Column>\n        );\n    }\n    const index = state.action ? Actions.indexOf(state.action) : null;\n    const onPress = useCallback((i: number) => {\n        state.setAction(Actions[i] as Action);\n    }, []);\n    return (\n        <Column>\n            <Subtitle text={\"1. Do you want to STAKE or UNSTAKE?\"} />\n            <View style={{ marginHorizontal: Spacing.small, marginBottom: Spacing.normal }}>\n                <Meta label={\"Total SUSHI Staked\"} text={formatBalance(state.sushiStaked, state.sushi.decimals)} />\n                <Meta label={\"My SUSHI Balance\"} text={formatBalance(state.sushi.balance, state.sushi.decimals)} />\n                <Line />\n                <Meta label={\"Total xSUSHI Supply\"} text={formatBalance(state.xSushiSupply, state.xSushi.decimals)} />\n                <Meta label={\"My xSUSHI Balance\"} text={formatBalance(state.xSushi.balance, state.xSushi.decimals)} />\n            </View>\n            <ButtonGroup\n                selectedIndex={index}\n                onPress={onPress}\n                buttons={[{ element: StakeText }, { element: UnstakeText }]}\n                containerStyle={{ marginHorizontal: Spacing.small }}\n            />\n        </Column>\n    );\n};\n\nconst Line = () => {\n    const { border } = useColors();\n    return (\n        <View style={{ width: \"100%\", paddingHorizontal: Spacing.small }}>\n            <View\n                style={{\n                    height: 1,\n                    width: \"100%\",\n                    marginTop: Spacing.small,\n                    marginBottom: Spacing.tiny,\n                    backgroundColor: border\n                }}\n            />\n        </View>\n    );\n};\n\nconst StakeText = () => {\n    return (\n        <FlexView style={{ alignItems: \"center\" }}>\n            <Text style={{ color: \"black\" }}>Stake SUSHI</Text>\n            <Icon\n                type={\"material-community\"}\n                name={\"chevron-right\"}\n                color={\"black\"}\n                style={{ marginLeft: Spacing.tiny }}\n            />\n        </FlexView>\n    );\n};\n\nconst UnstakeText = () => {\n    return (\n        <FlexView style={{ alignItems: \"center\" }}>\n            <Text style={{ color: \"black\" }}>Unstake xSUSHI</Text>\n            <Icon\n                type={\"material-community\"}\n                name={\"chevron-right\"}\n                color={\"black\"}\n                style={{ marginLeft: Spacing.tiny }}\n            />\n        </FlexView>\n    );\n};\n\nconst NoSushiNotice = () => {\n    return (\n        <Column noTopMargin={true} style={{ padding: Spacing.small, marginTop: Spacing.small }}>\n            <Notice text={\"You don't have any SUSHI balance.\"} />\n        </Column>\n    );\n};\n\nconst NoXSushiNotice = () => {\n    return (\n        <Column noTopMargin={true} style={{ padding: Spacing.small, marginTop: Spacing.small }}>\n            <Notice text={\"You don't have any xSUSHI staked.\"} />\n        </Column>\n    );\n};\n\nconst StakeInfo = ({ state }: { state: StakingState }) => {\n    if (!state.sushi || !state.xSushi || !state.sushiSupply || !state.xSushiSupply || isEmptyValue(state.amount)) {\n        return <Column noTopMargin={true} />;\n    }\n    const amount = parseBalance(state.amount, state.sushi.decimals);\n    const xSushiAmount = amount.mul(state.xSushiSupply).div(state.sushiSupply);\n    const share = Fraction.from(xSushiAmount, state.xSushiSupply);\n    return (\n        <Column noTopMargin={true}>\n            <Meta label={\"xSUSHI Amount\"} text={formatBalance(xSushiAmount, state.xSushi.decimals)} />\n            <Meta label={\"xSUSHI Share\"} text={share.toString() + \"%\"} />\n        </Column>\n    );\n};\n\nconst Controls = ({ state }: { state: StakingState }) => {\n    const [error, setError] = useState<MetamaskError>({});\n    useAsyncEffect(() => setError({}), [state.action, state.amount]);\n    const token = state.action === \"leave\" ? state.xSushi : state.sushi;\n    if (!state.action || !token || isEmptyValue(state.amount)) return <Column noTopMargin={true} />;\n    return (\n        <Column>\n            {parseBalance(state.amount, token.decimals).gt(token.balance) ? (\n                <InsufficientBalanceButton symbol={token.symbol} />\n            ) : state.loading ? (\n                <FetchingButton />\n            ) : (\n                <>\n                    <ApproveButton\n                        token={token}\n                        spender={SUSHI_BAR}\n                        onSuccess={() => state.setSushiAllowed(true)}\n                        onError={setError}\n                        hidden={state.action === \"leave\" || state.sushiAllowed}\n                    />\n                    {state.action === \"leave\" ? (\n                        <UnstakeButton state={state} onError={setError} />\n                    ) : (\n                        <StakeButton state={state} onError={setError} disabled={!state.sushiAllowed} />\n                    )}\n                </>\n            )}\n            {error.message && error.code !== 4001 && <ErrorMessage error={error} />}\n        </Column>\n    );\n};\n\nconst StakeButton = ({\n    state,\n    onError,\n    disabled\n}: {\n    state: StakingState;\n    onError: (e) => void;\n    disabled: boolean;\n}) => {\n    const onPress = useCallback(async () => {\n        onError({});\n        try {\n            await state.onEnter();\n            state.setAction();\n        } catch (e) {\n            onError(e);\n        }\n    }, []);\n    return <Button size={\"large\"} title={\"Stake\"} loading={state.entering} onPress={onPress} disabled={disabled} />;\n};\n\nconst UnstakeButton = ({ state, onError }: { state: StakingState; onError: (e) => void }) => {\n    const onPress = useCallback(async () => {\n        onError({});\n        try {\n            await state.onLeave();\n            state.setAction();\n        } catch (e) {\n            onError(e);\n        }\n    }, []);\n    return <Button size={\"large\"} title={\"Unstake\"} loading={state.leaving} onPress={onPress} />;\n};\n\nexport default StakingScreen;\n","import useAsyncEffect from \"use-async-effect\";\n\nconst handles = {};\n\nconst useDelayedEffect = (\n    effect: (isMounted: () => boolean) => unknown | Promise<unknown>,\n    timeout: number,\n    inputs?: any[]\n) => {\n    const key = effect.toString();\n    useAsyncEffect<number>(\n        () => {\n            const handle = setTimeout(effect, timeout);\n            handles[key] = handle;\n            return handle;\n        },\n        handle => {\n            clearTimeout(handle);\n        },\n        inputs\n    );\n};\nexport default useDelayedEffect;\n","import { useCallback, useContext, useEffect, useState } from \"react\";\n\nimport { Trade } from \"@sushiswap/sdk\";\nimport useAsyncEffect from \"use-async-effect\";\nimport Fraction from \"../constants/Fraction\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport { formatBalance, isEmptyValue, parseBalance, pow10 } from \"../utils\";\nimport useDelayedOnBlockEffect from \"./useDelayedOnBlockEffect\";\nimport useSDK from \"./useSDK\";\nimport useTokenPairState, { TokenPairState } from \"./useTokenPairState\";\n\nexport type OrderType = \"market\" | \"limit\";\n\nexport interface SwapState extends TokenPairState {\n    orderType: OrderType;\n    setOrderType: (orderType: OrderType) => void;\n    trade?: Trade;\n    unsupported: boolean;\n    limitOrderUnsupported: boolean;\n    limitOrderPrice: string;\n    setLimitOrderPrice: (price: string) => void;\n    swapFee: string;\n    limitOrderFee: string;\n    limitOrderSwapFee: string;\n    onSwap: () => Promise<void>;\n    swapping: boolean;\n    onCreateOrder: () => Promise<void>;\n    creatingOrder: boolean;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst useSwapState: () => SwapState = () => {\n    const state = useTokenPairState();\n    const { signer, kovanSigner, updateTokens } = useContext(EthersContext);\n    const { getTrade, swap, createOrder, calculateSwapFee, calculateLimitOrderFee } = useSDK();\n    const [loading, setLoading] = useState(true);\n    const [orderType, setOrderType] = useState<OrderType>(\"market\");\n    const [trade, setTrade] = useState<Trade>();\n    const [unsupported, setUnsupported] = useState(false);\n    const [swapFee, setSwapFee] = useState(\"\");\n    const [limitOrderPrice, setLimitOrderPrice] = useState<string>(\"\");\n    const [limitOrderFee, setLimitOrderFee] = useState(\"\");\n    const [limitOrderSwapFee, setLimitOrderSwapFee] = useState(\"\");\n    const [swapping, setSwapping] = useState(false);\n    const [creatingOrder, setCreatingOrder] = useState(false);\n\n    useEffect(() => {\n        setLimitOrderPrice(\"\");\n    }, [orderType]);\n\n    useEffect(() => {\n        if (isEmptyValue(state.fromAmount)) {\n            setLimitOrderPrice(\"\");\n            setTrade(undefined);\n        }\n    }, [state.fromAmount]);\n\n    useDelayedOnBlockEffect(\n        async block => {\n            if (!block) {\n                setLoading(true);\n            }\n            if (state.fromToken && state.toToken && state.fromAmount && signer?.provider) {\n                const amount = parseBalance(state.fromAmount, state.fromToken.decimals);\n                if (!amount.isZero()) {\n                    setUnsupported(false);\n                    try {\n                        setTrade(await getTrade(state.fromToken, state.toToken, amount, signer?.provider));\n                    } catch (e) {\n                        setUnsupported(true);\n                    } finally {\n                        setLoading(false);\n                    }\n                }\n            }\n        },\n        () => \"getTrade(\" + state.fromSymbol + \",\" + state.toSymbol + \",\" + state.fromAmount + \")\",\n        [state.fromSymbol, state.toSymbol, state.fromAmount]\n    );\n\n    useAsyncEffect(() => {\n        if (trade && !isEmptyValue(state.fromAmount)) {\n            const fromAmount = parseBalance(state.fromAmount, state.fromToken!.decimals);\n            setSwapFee(formatBalance(calculateSwapFee(fromAmount), state.fromToken!.decimals, 8));\n            if (orderType === \"limit\") {\n                setLimitOrderFee(formatBalance(calculateLimitOrderFee(fromAmount), state.fromToken!.decimals, 8));\n                setLimitOrderSwapFee(\n                    formatBalance(\n                        calculateSwapFee(fromAmount.sub(calculateLimitOrderFee(fromAmount))),\n                        state.fromToken!.decimals,\n                        8\n                    )\n                );\n            }\n        }\n    }, [orderType, trade, state.fromAmount, state.toAmount]);\n\n    const onSwap = useCallback(async () => {\n        if (state.fromToken && state.toToken && state.fromAmount && signer && trade) {\n            setSwapping(true);\n            try {\n                const result = await swap(trade, signer);\n                if (result) {\n                    await result.tx.wait();\n                    await updateTokens();\n                    state.setFromSymbol(\"\");\n                }\n            } finally {\n                setSwapping(false);\n            }\n        }\n    }, [state.fromToken, state.toToken, state.fromAmount, signer, trade]);\n\n    const onCreateOrder = useCallback(async () => {\n        if (\n            state.fromToken &&\n            state.toToken &&\n            state.fromAmount &&\n            !isEmptyValue(limitOrderPrice) &&\n            signer &&\n            kovanSigner\n        ) {\n            setCreatingOrder(true);\n            try {\n                const amountIn = parseBalance(state.fromAmount, state.fromToken.decimals);\n                const tx = await createOrder(\n                    state.fromToken,\n                    state.toToken,\n                    amountIn,\n                    Fraction.parse(limitOrderPrice)\n                        .apply(amountIn)\n                        .mul(pow10(state.toToken.decimals))\n                        .div(pow10(state.fromToken.decimals)),\n                    signer,\n                    kovanSigner\n                );\n                await tx.wait();\n                state.setFromSymbol(\"\");\n            } finally {\n                setCreatingOrder(false);\n            }\n        }\n    }, [state.fromToken, state.toToken, state.fromAmount, signer, kovanSigner, limitOrderPrice]);\n\n    return {\n        ...state,\n        loading: loading || state.loading,\n        orderType,\n        setOrderType,\n        trade,\n        unsupported,\n        swapFee,\n        limitOrderPrice,\n        setLimitOrderPrice,\n        limitOrderFee,\n        limitOrderSwapFee,\n        onSwap,\n        swapping,\n        limitOrderUnsupported: orderType === \"limit\" && (state.fromSymbol === \"ETH\" || state.toSymbol === \"ETH\"),\n        onCreateOrder,\n        creatingOrder\n    };\n};\n\nexport default useSwapState;\n","import React, { useCallback, useContext, useState } from \"react\";\nimport { Platform, View } from \"react-native\";\nimport { Icon } from \"react-native-elements\";\n\nimport { ethers } from \"ethers\";\nimport useAsyncEffect from \"use-async-effect\";\nimport ApproveButton from \"../components/ApproveButton\";\nimport Button from \"../components/Button\";\nimport CheckBox from \"../components/CheckBox\";\nimport Column from \"../components/Column\";\nimport Container from \"../components/Container\";\nimport Content from \"../components/Content\";\nimport ErrorMessage from \"../components/ErrorMessage\";\nimport ExperimentalNotice from \"../components/ExperimentalNotice\";\nimport FetchingButton from \"../components/FetchingButton\";\nimport Guide from \"../components/Guide\";\nimport InsufficientBalanceButton from \"../components/InsufficientBalanceButton\";\nimport Meta from \"../components/Meta\";\nimport Notice from \"../components/Notice\";\nimport Subtitle from \"../components/Subtitle\";\nimport Text from \"../components/Text\";\nimport TokenInput from \"../components/TokenInput\";\nimport TokenSelect from \"../components/TokenSelect\";\nimport UnsupportedButton from \"../components/UnsupportedButton\";\nimport WebFooter from \"../components/web/WebFooter\";\nimport { ROUTER, SETTLEMENT } from \"../constants/contracts\";\nimport { Spacing } from \"../constants/dimension\";\nimport Fraction from \"../constants/Fraction\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport useColors from \"../hooks/useColors\";\nimport useDelayedEffect from \"../hooks/useDelayedEffect\";\nimport useLinker from \"../hooks/useLinker\";\nimport useSDK from \"../hooks/useSDK\";\nimport useStyles from \"../hooks/useStyles\";\nimport useSwapState, { OrderType, SwapState } from \"../hooks/useSwapState\";\nimport MetamaskError from \"../types/MetamaskError\";\nimport Token from \"../types/Token\";\nimport { formatBalance, isEmptyValue, parseBalance, pow10 } from \"../utils\";\nimport Screen from \"./Screen\";\n\nconst SwapScreen = () => {\n    return (\n        <Screen>\n            <Container>\n                <Content>\n                    <Swap />\n                    {Platform.OS === \"web\" && <WebFooter />}\n                </Content>\n            </Container>\n        </Screen>\n    );\n};\n\nconst Swap = () => {\n    const state = useSwapState();\n    return (\n        <>\n            <Column style={{ alignItems: \"center\" }}>\n                <Text h4={true} style={{ textAlign: \"center\", marginBottom: Spacing.normal }}>\n                    🍣 Swap Tokens\n                </Text>\n            </Column>\n            <TokenSelect\n                title={\"1. Select the token you want to SELL:\"}\n                hidden={false}\n                symbol={state.fromSymbol}\n                onChangeSymbol={state.setFromSymbol}\n                filterTokens={token => token.balance && !token.balance.isZero()}\n            />\n            <TokenSelect\n                title={\"2. Select the token you want to BUY:\"}\n                hidden={state.fromSymbol === \"\"}\n                symbol={state.toSymbol}\n                onChangeSymbol={state.setToSymbol}\n                filterTokens={token => token.symbol !== state.fromSymbol}\n            />\n            <Inputs state={state} />\n            <TradeInfo state={state} />\n            <SwapControls state={state} />\n            <LimitOrderControls state={state} />\n            <MyLimitOrdersGuide state={state} />\n        </>\n    );\n};\n\nconst Inputs = ({ state }: { state: SwapState }) => {\n    if (!state.fromSymbol) {\n        return <Column noTopMargin={true} />;\n    }\n    return (\n        <Column>\n            <Subtitle text={\"3. How many \" + (state.fromSymbol || \"tokens\") + \" do you want to SELL?\"} />\n            <OrderTypeSelect state={state} />\n            <TokenInput\n                token={state.fromToken}\n                hidden={!state.fromToken || state.limitOrderUnsupported}\n                amount={state.fromAmount}\n                onAmountChanged={state.setFromAmount}\n            />\n            <PriceInput state={state} />\n            <LimitOrderUnsupportedNotice state={state} />\n        </Column>\n    );\n};\n\nconst PriceInput = ({ state }: { state: SwapState }) => {\n    if (state.limitOrderUnsupported) return <Column noTopMargin={true} />;\n    const marketPrice =\n        state.toToken && state.trade\n            ? parseBalance(state.trade.executionPrice.toFixed(state.toToken.decimals), state.toToken.decimals)\n            : ethers.constants.Zero;\n    return (\n        <TokenInput\n            token={\n                {\n                    ...state.toToken,\n                    balance: marketPrice\n                } as Token\n            }\n            hidden={!state.toToken || state.orderType === \"market\"}\n            amount={state.limitOrderPrice}\n            onAmountChanged={state.setLimitOrderPrice}\n            label={\"Minimum Price (\" + state.toSymbol + \" / \" + state.fromSymbol + \")\"}\n            maxButtonText={\"MARKET\"}\n        />\n    );\n};\n\nconst LimitOrderUnsupportedNotice = ({ state }: { state: SwapState }) => {\n    if (!state.limitOrderUnsupported) return <Column noTopMargin={true} />;\n    return (\n        <Column noTopMargin={true}>\n            <Notice text={\"ETH not supported for limit orders. Wrap ETH into WETH.\"} />\n        </Column>\n    );\n};\n\nconst OrderTypeSelect = ({ state }: { state: SwapState }) => {\n    const { border } = useStyles();\n    if (!state.fromSymbol || !state.toSymbol) return <Column noTopMargin={true} />;\n    return (\n        <Column noTopMargin={true}>\n            <View\n                style={{\n                    marginBottom: Spacing.normal,\n                    ...border()\n                }}>\n                <OrderCheckBox state={state} orderType={\"market\"} />\n                <OrderCheckBox state={state} orderType={\"limit\"} />\n            </View>\n        </Column>\n    );\n};\n\nconst OrderCheckBox = ({ state, orderType }: { state: SwapState; orderType: OrderType }) => {\n    const onPress = useCallback(() => state.setOrderType(orderType), [orderType]);\n    const title =\n        orderType === \"market\" ? (\n            <View style={{ marginLeft: Spacing.small }}>\n                <Text fontWeight={\"regular\"}>Market Order</Text>\n                <Text note={true} fontWeight={\"light\"}>\n                    Settle an order immediately\n                </Text>\n            </View>\n        ) : (\n            <View style={{ marginLeft: Spacing.small }}>\n                <Text fontWeight={\"regular\"}>Limit Order</Text>\n                <Text note={true} fontWeight={\"light\"}>\n                    Place an order with a minimum price\n                </Text>\n            </View>\n        );\n    return (\n        <CheckBox\n            checked={state.orderType === orderType}\n            onPress={onPress}\n            title={title}\n            iconRight={false}\n            containerStyle={{ marginVertical: 0, marginTop: 4 }}\n        />\n    );\n};\n\nconst TradeInfo = ({ state }: { state: SwapState }) => {\n    if (\n        !isEmptyValue(state.fromAmount) &&\n        ((state.fromSymbol === \"ETH\" && state.toSymbol === \"WETH\") ||\n            (state.fromSymbol === \"WETH\" && state.toSymbol === \"ETH\"))\n    ) {\n        return <WrapInfo state={state} />;\n    }\n    if (\n        state.fromSymbol === \"\" ||\n        state.toSymbol === \"\" ||\n        isEmptyValue(state.fromAmount) ||\n        (state.orderType === \"limit\" && state.fromSymbol === \"ETH\")\n    ) {\n        return <Column noTopMargin={true} />;\n    }\n    return state.orderType === \"limit\" ? <LimitOrderInfo state={state} /> : <SwapInfo state={state} />;\n};\n\nconst WrapInfo = ({ state }: { state: SwapState }) => {\n    return (\n        <Column noTopMargin={true}>\n            <ArrowDown />\n            <Text style={{ fontSize: 30, textAlign: \"center\" }}>\n                {state.fromAmount} {state.toSymbol}\n            </Text>\n        </Column>\n    );\n};\n\nconst SwapInfo = ({ state }: { state: SwapState }) => {\n    const amount = state.trade?.outputAmount?.toFixed(8);\n    const price = state.trade?.executionPrice?.toFixed(8);\n    const impact = state.trade?.priceImpact?.toFixed(2);\n    return (\n        <Column noTopMargin={true}>\n            <ArrowDown />\n            <Text style={{ fontSize: 30, textAlign: \"center\", marginBottom: Spacing.normal }}>\n                {amount || \"…\"} {state.toSymbol}\n            </Text>\n            <Meta label={\"Price\"} text={price} suffix={state.toSymbol + \"  = 1 \" + state.fromSymbol} />\n            <Meta label={\"Price Impact\"} text={impact} suffix={\"%\"} />\n            <Meta label={\"Fee (0.30%)\"} text={state.swapFee} suffix={state.fromSymbol} />\n        </Column>\n    );\n};\n\nconst LimitOrderInfo = ({ state }: { state: SwapState }) => {\n    const { calculateLimitOrderFee } = useSDK();\n    const price = Fraction.parse(state.limitOrderPrice);\n    const fromAmount = parseBalance(state.fromAmount, state.fromToken!.decimals);\n    const toAmount =\n        !isEmptyValue(state.fromAmount) && state.fromToken && state.toToken && !price.isZero()\n            ? formatBalance(\n                  price.apply(\n                      fromAmount\n                          .sub(calculateLimitOrderFee(fromAmount))\n                          .mul(pow10(state.toToken.decimals))\n                          .div(pow10(state.fromToken.decimals))\n                  ),\n                  state.toToken.decimals,\n                  8\n              )\n            : undefined;\n    const marketPrice = state.trade ? state.trade.executionPrice : undefined;\n    return (\n        <Column noTopMargin={true}>\n            <Meta\n                label={\"Market Price\"}\n                text={marketPrice?.toFixed(8) || undefined}\n                suffix={state.toSymbol + \" / \" + state.fromSymbol + \"\"}\n            />\n            <Meta label={\"Relayer Fee (0.20%)\"} text={state.limitOrderFee} suffix={state.fromSymbol} />\n            <Meta label={\"Swap Fee (0.30%)\"} text={state.limitOrderSwapFee} suffix={state.fromSymbol} />\n            <Meta label={\"Expiration\"} text={\"24 Hours From Now\"} />\n            <Meta label={\"Estimated Amount You'll Get\"} text={toAmount} suffix={state.toSymbol} />\n        </Column>\n    );\n};\n\nconst ArrowDown = () => {\n    const { textLight } = useColors();\n    return <Icon type={\"material-community\"} name={\"arrow-down\"} color={textLight} style={{ margin: Spacing.tiny }} />;\n};\n\n// tslint:disable-next-line:max-func-body-length\nconst SwapControls = ({ state }: { state: SwapState }) => {\n    const [error, setError] = useState<MetamaskError>({});\n    useAsyncEffect(() => setError({}), [state.fromSymbol, state.toSymbol, state.fromAmount]);\n    if (state.orderType === \"limit\" || state.toSymbol === \"\" || !state.fromToken || isEmptyValue(state.fromAmount))\n        return <Column noTopMargin={true} />;\n    const approveRequired = state.fromSymbol !== \"ETH\" && !state.fromTokenAllowed;\n    return (\n        <Column>\n            {parseBalance(state.fromAmount, state.fromToken.decimals).gt(state.fromToken.balance) ? (\n                <InsufficientBalanceButton symbol={state.fromSymbol} />\n            ) : state.fromSymbol === \"WETH\" && state.toSymbol === \"ETH\" ? (\n                <UnwrapButton state={state} onError={setError} />\n            ) : state.fromSymbol === \"ETH\" && state.toSymbol === \"WETH\" ? (\n                <WrapButton state={state} onError={setError} />\n            ) : state.unsupported ? (\n                <UnsupportedButton state={state} />\n            ) : state.loading || !state.trade ? (\n                <FetchingButton />\n            ) : (\n                <>\n                    <ApproveButton\n                        token={state.fromToken}\n                        spender={ROUTER}\n                        onSuccess={() => state.setFromTokenAllowed(true)}\n                        onError={setError}\n                        hidden={!approveRequired}\n                    />\n                    <SwapButton state={state} onError={setError} disabled={approveRequired} />\n                </>\n            )}\n            {error.message && error.code !== 4001 && <ErrorMessage error={error} />}\n        </Column>\n    );\n};\n\nconst SwapButton = ({ state, onError, disabled }: { state: SwapState; onError: (e) => void; disabled: boolean }) => {\n    const onPress = useCallback(() => {\n        onError({});\n        state.onSwap().catch(onError);\n    }, [state.onSwap, onError]);\n    return (\n        <Button\n            size={\"large\"}\n            title={\"Swap \" + state.fromSymbol + \"-\" + state.toSymbol}\n            disabled={disabled}\n            loading={state.swapping}\n            onPress={onPress}\n        />\n    );\n};\n\nconst WrapButton = ({ state, onError }: { state: SwapState; onError: (e) => void }) => {\n    const onPress = useCallback(async () => {\n        onError({});\n        state.onWrap().catch(onError);\n    }, []);\n    return <Button size={\"large\"} title={\"Wrap\"} loading={state.wrapping} onPress={onPress} />;\n};\n\nconst UnwrapButton = ({ state, onError }: { state: SwapState; onError: (e) => void }) => {\n    const onPress = useCallback(async () => {\n        onError({});\n        state.onUnwrap().catch(onError);\n    }, []);\n    return <Button size={\"large\"} title={\"Unwrap\"} loading={state.unwrapping} onPress={onPress} />;\n};\n\n// tslint:disable-next-line:max-func-body-length\nconst LimitOrderControls = ({ state }: { state: SwapState }) => {\n    const { getTokenAllowance } = useContext(EthersContext);\n    const [error, setError] = useState<MetamaskError>({});\n    const [allowed, setAllowed] = useState<boolean>();\n    useAsyncEffect(() => setError({}), [state.fromSymbol, state.toSymbol, state.fromAmount]);\n    useDelayedEffect(\n        async () => {\n            if (state.fromToken && !isEmptyValue(state.fromAmount)) {\n                const fromAmount = parseBalance(state.fromAmount, state.fromToken.decimals);\n                const allowance = await getTokenAllowance(state.fromToken.address, SETTLEMENT);\n                setAllowed(ethers.BigNumber.from(allowance).gte(fromAmount));\n            }\n        },\n        500,\n        [state.fromToken, state.fromAmount]\n    );\n    if (\n        state.orderType === \"market\" ||\n        state.toSymbol === \"\" ||\n        !state.fromToken ||\n        !state.toToken ||\n        isEmptyValue(state.fromAmount) ||\n        !state.trade ||\n        isEmptyValue(state.limitOrderPrice)\n    )\n        return <Column noTopMargin={true} />;\n    const price = Fraction.parse(state.limitOrderPrice);\n    const marketPrice = Fraction.parse(state.trade.executionPrice.toFixed(state.toToken.decimals));\n    return (\n        <Column>\n            {state.orderType === \"limit\" && (\n                <ExperimentalNotice\n                    contractURL={\n                        \"https://github.com/sushiswap/sushiswap-settlement/blob/master/contracts/Settlement.sol\"\n                    }\n                />\n            )}\n            {!price.gt(marketPrice) ? (\n                <PriceTooLowButton />\n            ) : state.unsupported ? (\n                <UnsupportedButton state={state} />\n            ) : state.loading || !state.trade ? (\n                <FetchingButton />\n            ) : (\n                <>\n                    <ApproveButton\n                        token={state.fromToken}\n                        spender={SETTLEMENT}\n                        onSuccess={() => setAllowed(true)}\n                        onError={setError}\n                        hidden={allowed}\n                    />\n                    <PlaceOrderButton state={state} onError={setError} disabled={!allowed} />\n                </>\n            )}\n            {error.message && error.code !== 4001 && <ErrorMessage error={error} />}\n        </Column>\n    );\n};\n\nconst PriceTooLowButton = () => {\n    return <Button size={\"large\"} title={\"Price Must Be Greater Than Market\"} disabled={true} />;\n};\n\nconst PlaceOrderButton = ({\n    state,\n    onError,\n    disabled\n}: {\n    state: SwapState;\n    onError: (e) => void;\n    disabled: boolean;\n}) => {\n    const goToLimitOrders = useLinker(\"/#/limit-orders\", \"LimitOrders\", \"_self\");\n    const onPress = useCallback(async () => {\n        onError({});\n        try {\n            await state.onCreateOrder();\n            goToLimitOrders();\n        } catch (e) {\n            onError(e);\n        }\n    }, [state.onCreateOrder, goToLimitOrders, onError]);\n    return (\n        <Button\n            size={\"large\"}\n            title={\"Place Limit Order\"}\n            disabled={disabled}\n            loading={state.creatingOrder}\n            onPress={onPress}\n        />\n    );\n};\n\nconst MyLimitOrdersGuide = ({ state }: { state: SwapState }) => {\n    const onPress = useLinker(\"/#/limit-orders\", \"LimitOrders\", \"_self\");\n    return (\n        <Guide\n            hidden={false}\n            text={\"☘️ Do you want to scan limit orders you've placed?\"}\n            buttonTitle={\"Click Here!\"}\n            onPressButton={onPress}\n        />\n    );\n};\n\nexport default SwapScreen;\n","import React, { useContext } from \"react\";\nimport { Platform, View } from \"react-native\";\nimport { Icon } from \"react-native-elements\";\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\n\nimport { DeviceType } from \"expo-device\";\n\nimport { createBottomTabNavigator } from \"@react-navigation/bottom-tabs\";\nimport { DefaultTheme, NavigationContainer, Theme } from \"@react-navigation/native\";\nimport useAsyncEffect from \"use-async-effect\";\nimport WebHeader from \"../components/web/WebHeader\";\nimport WebStatus from \"../components/web/WebStatus\";\nimport { GlobalContext } from \"../context/GlobalContext\";\nimport useColors from \"../hooks/useColors\";\nimport FarmingScreen from \"./FarmingScreen\";\nimport LiquidityScreen from \"./LiquidityScreen\";\nimport MigrateScreen from \"./MigrateScreen\";\nimport MyLimitOrdersScreen from \"./MyLimitOrdersScreen\";\nimport RemoveLiquidityScreen from \"./RemoveLiquidityScreen\";\nimport StakingScreen from \"./StakingScreen\";\nimport SwapScreen from \"./SwapScreen\";\n\nexport const Screens = () => {\n    const { load } = useContext(GlobalContext);\n    useAsyncEffect(load, []);\n    return Platform.OS === \"web\" ? <WebScreens /> : <AppScreens />;\n};\n\n// tslint:disable-next-line:max-func-body-length\nconst WebScreens = () => {\n    const { deviceType } = useContext(GlobalContext);\n    return (\n        <Router>\n            <View style={{ flex: 1 }}>\n                <Switch>\n                    <Route path={\"/limit-orders\"}>\n                        <MyLimitOrdersScreen />\n                    </Route>\n                    <Route path={\"/liquidity/remove\"}>\n                        <RemoveLiquidityScreen />\n                    </Route>\n                    <Route path={\"/liquidity\"}>\n                        <LiquidityScreen />\n                    </Route>\n                    <Route path={\"/farming\"}>\n                        <FarmingScreen />\n                    </Route>\n                    <Route path={\"/staking\"}>\n                        <StakingScreen />\n                    </Route>\n                    <Route path={\"/migrate\"}>\n                        <MigrateScreen />\n                    </Route>\n                    <Route path={\"/\"}>\n                        <SwapScreen />\n                    </Route>\n                </Switch>\n                {deviceType !== DeviceType.PHONE && <WebHeader />}\n                {deviceType !== DeviceType.PHONE && <WebStatus />}\n            </View>\n        </Router>\n    );\n};\n\nconst Tab = createBottomTabNavigator();\n\nconst AppScreens = () => {\n    const { darkMode } = useContext(GlobalContext);\n    const { primary, secondary, background, border, textDark, disabled } = useColors();\n    const theme: Theme = {\n        ...DefaultTheme,\n        dark: darkMode,\n        colors: {\n            primary,\n            background,\n            border,\n            card: background,\n            notification: background,\n            text: textDark\n        }\n    };\n    return (\n        <NavigationContainer theme={theme}>\n            <Tab.Navigator\n                tabBarOptions={{\n                    activeTintColor: darkMode ? secondary : primary,\n                    inactiveTintColor: disabled,\n                    labelStyle: { marginBottom: 4 }\n                }}>\n                <Tab.Screen name=\"Home\" component={SwapScreen} options={tabOptions(\"home\")} />\n                <Tab.Screen name=\"Liquidity\" component={LiquidityScreen} options={tabOptions(\"water\")} />\n                <Tab.Screen name=\"Farming\" component={FarmingScreen} options={tabOptions(\"leaf\")} />\n            </Tab.Navigator>\n        </NavigationContainer>\n    );\n};\n\nconst tabOptions = iconName => ({\n    tabBarIcon: ({ color }) => <Icon type={\"material-community\"} name={iconName} color={color} />\n});\n","/* tslint:disable:ordered-imports */\nimport \"./globals\";\nimport React from \"react\";\n\nimport { OpenSans_300Light, OpenSans_400Regular, OpenSans_700Bold } from \"@expo-google-fonts/open-sans\";\nimport { UnicaOne_400Regular } from \"@expo-google-fonts/unica-one\";\nimport { AppLoading } from \"expo\";\nimport { useFonts } from \"expo-font\";\n\nimport { ContextProvider } from \"./src/context\";\nimport { Screens } from \"./src/screens\";\nimport { YellowBox } from \"react-native\";\n\nif (__DEV__) {\n    YellowBox.ignoreWarnings([\"Setting a timer\", \"VirtualizedLists should never be nested\"]);\n}\n\nconst App = () => {\n    const [fontsLoaded] = useFonts({\n        title: UnicaOne_400Regular,\n        light: OpenSans_300Light,\n        regular: OpenSans_400Regular,\n        bold: OpenSans_700Bold\n    });\n    if (!fontsLoaded) {\n        return <AppLoading />;\n    }\n    return (\n        <ContextProvider>\n            <Screens />\n        </ContextProvider>\n    );\n};\n\nexport default App;\n","/* eslint-env browser */\n\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', function () {\n    navigator.serviceWorker\n      .register('/expo-service-worker.js', { scope: '/' })\n      .then(function (info) {\n        // console.info('Registered service-worker', info);\n      })\n      .catch(function (error) {\n        console.info('Failed to register service-worker', error);\n      });\n  });\n}\n","global.Buffer = require('buffer').Buffer;\n","module.exports = __webpack_public_path__ + \"static/media/levx-typography-dark.859ceaa3.png\";","module.exports = __webpack_public_path__ + \"static/media/levx-typography.5d37ed2a.png\";","module.exports = __webpack_public_path__ + \"static/media/metamask-dark.2137a831.png\";","module.exports = __webpack_public_path__ + \"static/media/metamask.15e22fef.png\";","module.exports = __webpack_public_path__ + \"static/media/sushiswap.ef005f32.jpg\";"],"sourceRoot":""}