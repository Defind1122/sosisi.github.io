{"version":3,"sources":["src/components/Notice.tsx","src/hooks/useLPTokensState.tsx","src/components/LPTokenSelect.tsx","src/components/ButtonGroup.tsx","src/components/CloseIcon.tsx","src/components/SelectIcon.tsx","src/hooks/useFarmingState.tsx","src/screens/FarmingScreen.tsx"],"names":["Notice","props","borderStyle","border","useStyles","color","borderColor","style","clear","paddingHorizontal","Spacing","tiny","note","text","buttonText","onPressButton","title","type","size","fontWeight","onPress","titleStyle","buttonStyle","paddingVertical","alignSelf","marginTop","useLPTokensState","mode","state","useTokenPairState","useContext","EthersContext","provider","address","tokens","useState","lastTimeRefreshed","setLastTimeRefreshed","loading","setLoading","lpTokens","setLPTokens","selectedLPToken","setSelectedLPToken","selectedLPTokenAllowed","setSelectedLPTokenAllowed","pair","setPair","amount","setAmount","getPair","useSDK","updateLPTokens","a","async","fetchPools","fetchMyLPTokens","fetchMyUniswapLPTokens","data","useEffect","useAsyncEffect","undefined","tokenA","tokenB","useDelayedOnBlockEffect","block","length","fromToken","toToken","updateLastTimeRefreshed","Date","now","LPTokenList","emptyText","filter","Item","renderItem","useCallback","item","key","token","selected","onSelectToken","sort","t1","t2","totalDeposited","ethers","constants","Zero","sub","div","pow10","toNumber","amountDeposited","gt","balance","Loading","FlatList","keyExtractor","EmptyList","View","margin","normal","Text","disabled","textAlign","width","LPTokenItem","textMedium","useColors","formatBalance","decimals","Selectable","containerStyle","marginBottom","ITEM_SEPARATOR_HEIGHT","FlexView","alignItems","TokenLogo","small","replaceWETH","marginLeft","medium","caption","symbol","flex","light","LPTokenSelect","Expandable","expanded","onExpand","ButtonGroup","borderDark","shadow","index","setIndex","i","selectedIndex","textStyle","fontFamily","borderTopLeftRadius","borderBottomLeftRadius","borderTopRightRadius","buttons","borderBottomRightRadius","selectedButtonStyle","backgroundColor","marginHorizontal","marginVertical","height","CloseIcon","textLight","name","SelectIcon","accent","useFarmingState","signer","getTokenAllowance","getExpectedSushiRewardPerBlock","deposit","withdraw","filteredBy","setFilteredBy","action","setAction","expectedSushiRewardPerBlock","setExpectedSushiRewardPerBlock","depositing","setDepositing","withdrawing","setWithdrawing","minAllowance","BigNumber","from","pow","MASTER_CHEF","allowance","gte","onDeposit","id","parseBalance","tx","wait","onWithdraw","Actions","Farming","large","showFilter","onFilterChanged","TokenItem","background","backgroundLight","field","fontSize","ActionSelect","Column","noTopMargin","indexOf","Heading","Meta","label","element","DepositText","WithdrawText","Deposit","TokenInput","hidden","isZero","onAmountChanged","AddLiquidityNotice","green","DepositInfo","sushiReward","mul","isEmptyValue","DepositControls","error","setError","approveRequired","InsufficientBalanceButton","FetchingButton","ApproveButton","spender","onSuccess","onError","message","code","ErrorMessage","AddLiquidityButton","useLinker","Button","DepositButton","catch","Withdraw","NoLPTokenNotice","WithdrawInfo","pendingSushi","WithdrawControls","WithdrawButton","FarmingScreen","Screen","Container","Content","Title","Platform","OS","WebFooter"],"mappings":"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","file":"static/js/12.159d8252.chunk.js","sourcesContent":["import React from \"react\";\nimport { View, ViewStyle } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useStyles from \"../hooks/useStyles\";\nimport Button from \"./Button\";\nimport Text from \"./Text\";\n\nexport interface NoticeProps {\n    text: string;\n    clear?: boolean;\n    color?: string;\n    buttonText?: string;\n    onPressButton?: () => void;\n    style?: ViewStyle;\n}\n\nconst Notice = (props: NoticeProps) => {\n    const { border } = useStyles();\n    const borderStyle = border({ color: props.color });\n    const color = props.color || borderStyle.borderColor;\n    return (\n        <View style={[props.clear ? { paddingHorizontal: Spacing.tiny } : borderStyle, props.style]}>\n            <Text\n                note={true}\n                style={{\n                    color\n                }}>\n                {props.text}\n            </Text>\n            {props.buttonText && props.onPressButton && (\n                <Button\n                    title={props.buttonText}\n                    type={\"clear\"}\n                    size={\"small\"}\n                    fontWeight={\"bold\"}\n                    onPress={props.onPressButton}\n                    titleStyle={{ color }}\n                    buttonStyle={{ paddingHorizontal: 0, paddingVertical: 0 }}\n                    style={{ alignSelf: \"flex-end\", marginTop: Spacing.tiny }}\n                />\n            )}\n        </View>\n    );\n};\n\nexport default Notice;\n","import { useContext, useEffect, useState } from \"react\";\n\nimport { Pair } from \"@sushiswap/sdk\";\nimport useAsyncEffect from \"use-async-effect\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport LPToken from \"../types/LPToken\";\nimport { fetchMyLPTokens, fetchMyUniswapLPTokens, fetchPools } from \"../utils/fetch-utils\";\nimport useDelayedOnBlockEffect from \"./useDelayedOnBlockEffect\";\nimport useSDK from \"./useSDK\";\nimport useTokenPairState, { TokenPairState } from \"./useTokenPairState\";\n\nexport interface LPTokensState extends TokenPairState {\n    updateLPTokens: () => Promise<void>;\n    lastTimeRefreshed: number;\n    updateLastTimeRefreshed: () => void;\n    lpTokens: LPToken[];\n    selectedLPToken?: LPToken;\n    setSelectedLPToken: (token?: LPToken) => void;\n    selectedLPTokenAllowed: boolean;\n    setSelectedLPTokenAllowed: (allowed: boolean) => void;\n    pair?: Pair;\n    amount: string;\n    setAmount: (amount: string) => void;\n}\n\ntype Mode = \"pools\" | \"my-lp-tokens\" | \"my-uniswap-lp-tokens\";\n\n// tslint:disable-next-line:max-func-body-length\nconst useLPTokensState: (mode: Mode) => LPTokensState = mode => {\n    const state = useTokenPairState();\n    const { provider, address, tokens } = useContext(EthersContext);\n    const [lastTimeRefreshed, setLastTimeRefreshed] = useState(0);\n    const [loading, setLoading] = useState(true);\n    const [lpTokens, setLPTokens] = useState<LPToken[]>([]);\n    const [selectedLPToken, setSelectedLPToken] = useState<LPToken>();\n    const [selectedLPTokenAllowed, setSelectedLPTokenAllowed] = useState(false);\n    const [pair, setPair] = useState<Pair>();\n    const [amount, setAmount] = useState(\"\");\n    const { getPair } = useSDK();\n\n    const updateLPTokens = async () => {\n        if (address && provider) {\n            try {\n                const data = await (mode === \"pools\"\n                    ? fetchPools(address, provider)\n                    : mode === \"my-lp-tokens\"\n                    ? fetchMyLPTokens(address, tokens, provider)\n                    : fetchMyUniswapLPTokens(address, tokens, provider));\n                if (data) {\n                    setLPTokens(data);\n                }\n            } finally {\n                setLoading(false);\n            }\n        }\n    };\n\n    useEffect(() => {\n        if (!selectedLPToken) {\n            setAmount(\"\");\n        }\n    }, [selectedLPToken]);\n\n    useAsyncEffect(async () => {\n        setLoading(true);\n        setPair(undefined);\n        if (selectedLPToken && provider) {\n            try {\n                setPair(await getPair(selectedLPToken.tokenA, selectedLPToken.tokenB, provider));\n            } catch (e) {\n            } finally {\n                setLoading(false);\n            }\n        } else {\n            setLoading(false);\n        }\n    }, [selectedLPToken, provider]);\n\n    useDelayedOnBlockEffect(\n        async block => {\n            if (address && (mode === \"pools\" || tokens.length > 0)) {\n                if (!block) {\n                    setLoading(true);\n                }\n                await updateLPTokens();\n            }\n        },\n        () => \"updateLPTokens()\",\n        [tokens.length, address, lastTimeRefreshed],\n        0\n    );\n\n    return {\n        ...state,\n        fromToken: state.fromToken || selectedLPToken?.tokenA,\n        toToken: state.toToken || selectedLPToken?.tokenB,\n        updateLPTokens,\n        loading: state.loading || loading,\n        lastTimeRefreshed,\n        updateLastTimeRefreshed: () => {\n            setLastTimeRefreshed(Date.now());\n        },\n        lpTokens,\n        selectedLPToken,\n        setSelectedLPToken,\n        selectedLPTokenAllowed,\n        setSelectedLPTokenAllowed,\n        pair,\n        amount,\n        setAmount\n    };\n};\n\nexport default useLPTokensState;\n","import React, { FC, useCallback } from \"react\";\nimport { FlatList, View, ViewStyle } from \"react-native\";\n\nimport { ethers } from \"ethers\";\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport { LPTokensState } from \"../hooks/useLPTokensState\";\nimport LPToken from \"../types/LPToken\";\nimport { formatBalance, pow10 } from \"../utils\";\nimport CheckBox from \"./CheckBox\";\nimport Expandable from \"./Expandable\";\nimport FlexView from \"./FlexView\";\nimport { ITEM_SEPARATOR_HEIGHT } from \"./ItemSeparator\";\nimport Loading from \"./Loading\";\nimport Selectable from \"./Selectable\";\nimport Text from \"./Text\";\nimport TokenLogo from \"./TokenLogo\";\n\nexport type LPTokenSelectFilter = \"balance\" | \"amountDeposited\" | \"\";\n\nexport interface LPTokenSelectProps {\n    state: LPTokensState;\n    title: string;\n    emptyText: string;\n    showFilter?: boolean;\n    filter?: LPTokenSelectFilter;\n    onFilterChanged?: (filter: LPTokenSelectFilter) => void;\n    Item: FC<LPTokenItemProps>;\n    style?: ViewStyle;\n}\n\nexport interface LPTokenItemProps {\n    token: LPToken;\n    selected: boolean;\n    filter?: LPTokenSelectFilter;\n    onSelectToken: (token: LPToken) => void;\n}\n\nconst LPTokenSelect: FC<LPTokenSelectProps> = props => {\n    const onUnselectToken = () => props.state.setSelectedLPToken();\n    return (\n        <View style={props.style}>\n            <Expandable\n                title={props.title}\n                expanded={!props.state.selectedLPToken}\n                onExpand={() => props.state.setSelectedLPToken()}>\n                <LPTokenList state={props.state} filter={props.filter} emptyText={props.emptyText} Item={props.Item} />\n            </Expandable>\n            {props.state.selectedLPToken && (\n                <LPTokenItem token={props.state.selectedLPToken} selected={true} onSelectToken={onUnselectToken} />\n            )}\n        </View>\n    );\n};\n\nconst Filter = ({ filter, onFilterChanged }) => {\n    const handler = (f: string) => () => onFilterChanged(f);\n    return (\n        <FlexView style={{ width: \"100%\", justifyContent: \"flex-end\" }}>\n            <CheckBox checked={filter === \"balance\"} onPress={handler(\"balance\")} title={\"with balance\"} />\n            <CheckBox\n                checked={filter === \"amountDeposited\"}\n                onPress={handler(\"amountDeposited\")}\n                title={\"with deposit\"}\n            />\n            <CheckBox checked={!filter} onPress={handler(\"\")} title={\"all\"} />\n        </FlexView>\n    );\n};\n\n// tslint:disable-next-line:max-func-body-length\nconst LPTokenList = ({\n    state,\n    emptyText,\n    filter,\n    Item\n}: {\n    state: LPTokensState;\n    emptyText: string;\n    filter?: LPTokenSelectFilter;\n    Item: FC<LPTokenItemProps>;\n}) => {\n    const renderItem = useCallback(\n        ({ item }) => {\n            return (\n                <Item\n                    key={item.address}\n                    token={item}\n                    selected={false}\n                    filter={filter}\n                    onSelectToken={state.setSelectedLPToken}\n                />\n            );\n        },\n        [filter, state.setSelectedLPToken]\n    );\n    let data = state.lpTokens.sort((t1, t2) => {\n        return (t2.totalDeposited || ethers.constants.Zero)\n            .sub(t1.totalDeposited || ethers.constants.Zero)\n            .div(pow10(14))\n            .toNumber();\n    });\n    if (filter === \"amountDeposited\") {\n        data = data.filter(token => token.amountDeposited?.gt(0));\n    } else if (filter === \"balance\") {\n        data = data.filter(token => token.balance.gt(0));\n    }\n    return state.loading ? (\n        <Loading />\n    ) : data.length === 0 ? (\n        <EmptyList text={emptyText} />\n    ) : (\n        <FlatList keyExtractor={item => item.address} data={data} renderItem={renderItem} />\n    );\n};\n\nconst EmptyList = ({ text }: { text: string }) => {\n    return (\n        <View style={{ margin: Spacing.normal }}>\n            <Text disabled={true} style={{ textAlign: \"center\", width: \"100%\" }}>\n                {text}\n            </Text>\n        </View>\n    );\n};\n\nexport const LPTokenItem: FC<LPTokenItemProps> = props => {\n    const { textMedium } = useColors();\n    const balance = formatBalance(props.token.balance, props.token.decimals, 8);\n    const onPress = useCallback(() => {\n        props.onSelectToken(props.token);\n    }, [props.onSelectToken, props.token]);\n    return (\n        <Selectable\n            selected={props.selected}\n            onPress={onPress}\n            containerStyle={{ marginBottom: ITEM_SEPARATOR_HEIGHT }}>\n            <FlexView style={{ alignItems: \"center\" }}>\n                <TokenLogo token={props.token.tokenA} small={true} replaceWETH={true} />\n                <TokenLogo token={props.token.tokenB} small={true} replaceWETH={true} style={{ marginLeft: 4 }} />\n                <Text medium={true} caption={true} style={{ marginLeft: Spacing.tiny }}>\n                    {props.token.tokenA.symbol}-{props.token.tokenB.symbol}\n                </Text>\n                <View style={{ flex: 1, marginLeft: Spacing.tiny }}>\n                    {/*<Text note={true} style={{ textAlign: \"right\", color: textLight }}>*/}\n                    {/*    My Balance*/}\n                    {/*</Text>*/}\n                    <Text caption={true} light={true} style={{ textAlign: \"right\", color: textMedium }}>\n                        {balance}\n                    </Text>\n                </View>\n            </FlexView>\n        </Selectable>\n    );\n};\n\nexport default LPTokenSelect;\n","import React, { FC, useCallback, useState } from \"react\";\nimport { ButtonGroup as NativeButtonGroup, ButtonGroupProps } from \"react-native-elements\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport useStyles from \"../hooks/useStyles\";\n\n// tslint:disable-next-line:max-func-body-length\nconst ButtonGroup: FC<ButtonGroupProps> = props => {\n    const { borderDark } = useColors();\n    const { shadow } = useStyles();\n    const [index, setIndex] = useState<number>();\n    const onPress = useCallback(i => {\n        setIndex(i);\n        props.onPress(i);\n    }, []);\n    return (\n        <NativeButtonGroup\n            {...props}\n            selectedIndex={props.selectedIndex || index}\n            onPress={onPress}\n            textStyle={[\n                {\n                    fontFamily: \"regular\"\n                },\n                props.textStyle\n            ]}\n            buttonStyle={[\n                {\n                    borderTopLeftRadius: index === 0 ? Spacing.tiny : 0,\n                    borderBottomLeftRadius: index === 0 ? Spacing.tiny : 0,\n                    borderTopRightRadius:\n                        props.buttons.length > 0 && index === props.buttons.length - 1 ? Spacing.tiny : 0,\n                    borderBottomRightRadius:\n                        props.buttons.length > 0 && index === props.buttons.length - 1 ? Spacing.tiny : 0\n                },\n                props.buttonStyle\n            ]}\n            selectedButtonStyle={[\n                {\n                    backgroundColor: borderDark\n                },\n                props.selectedButtonStyle\n            ]}\n            containerStyle={[\n                {\n                    marginHorizontal: 0,\n                    marginVertical: 0,\n                    height: 56,\n                    ...shadow()\n                },\n                props.containerStyle\n            ]}\n        />\n    );\n};\n\nexport default ButtonGroup;\n","import React from \"react\";\nimport { Icon } from \"react-native-elements\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\n\nconst CloseIcon = () => {\n    const { textLight } = useColors();\n    return <Icon type={\"material-community\"} name={\"close\"} color={textLight} style={{ marginLeft: Spacing.tiny }} />;\n};\n\nexport default CloseIcon;\n","import React from \"react\";\nimport { Icon } from \"react-native-elements\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\n\nconst SelectIcon = () => {\n    const { accent } = useColors();\n    return (\n        <Icon type={\"material-community\"} name={\"chevron-right\"} color={accent} style={{ marginLeft: Spacing.tiny }} />\n    );\n};\n\nexport default SelectIcon;\n","import { useCallback, useContext, useEffect, useState } from \"react\";\n\nimport { ethers } from \"ethers\";\nimport useAsyncEffect from \"use-async-effect\";\nimport { LPTokenSelectFilter } from \"../components/LPTokenSelect\";\nimport { MASTER_CHEF } from \"../constants/contracts\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport { parseBalance } from \"../utils\";\nimport useLPTokensState, { LPTokensState } from \"./useLPTokensState\";\nimport useSDK from \"./useSDK\";\n\nexport interface FarmingState extends LPTokensState {\n    action?: Action;\n    setAction: (action?: Action) => void;\n    expectedSushiRewardPerBlock?: ethers.BigNumber;\n    filteredBy: LPTokenSelectFilter;\n    setFilteredBy: (filter: LPTokenSelectFilter) => void;\n    onDeposit: () => Promise<void>;\n    depositing: boolean;\n    onWithdraw: () => Promise<void>;\n    withdrawing: boolean;\n}\n\nexport type Action = \"deposit\" | \"withdraw\";\n\n// tslint:disable-next-line:max-func-body-length\nconst useFarmingState: () => FarmingState = () => {\n    const state = useLPTokensState(\"pools\");\n    const { signer, getTokenAllowance } = useContext(EthersContext);\n    const { getExpectedSushiRewardPerBlock, deposit, withdraw } = useSDK();\n    const [filteredBy, setFilteredBy] = useState(\"\" as LPTokenSelectFilter);\n    const [action, setAction] = useState<Action>();\n    const [loading, setLoading] = useState(false);\n    const [expectedSushiRewardPerBlock, setExpectedSushiRewardPerBlock] = useState<ethers.BigNumber>();\n    const [depositing, setDepositing] = useState(false);\n    const [withdrawing, setWithdrawing] = useState(false);\n\n    useEffect(() => {\n        setFilteredBy(\"\");\n        setAction(undefined);\n        setLoading(false);\n        setDepositing(false);\n        setWithdrawing(false);\n        setExpectedSushiRewardPerBlock(undefined);\n    }, [state.selectedLPToken]);\n\n    useAsyncEffect(async () => {\n        if (signer && state.selectedLPToken) {\n            setLoading(true);\n            try {\n                setExpectedSushiRewardPerBlock(await getExpectedSushiRewardPerBlock(state.selectedLPToken, signer));\n            } finally {\n                setLoading(false);\n            }\n        }\n    }, [signer, state.selectedLPToken]);\n\n    useAsyncEffect(async () => {\n        if (signer && state.selectedLPToken) {\n            setLoading(true);\n            state.setSelectedLPTokenAllowed(false);\n            try {\n                const minAllowance = ethers.BigNumber.from(2)\n                    .pow(96)\n                    .sub(1);\n                const allowance = await getTokenAllowance(state.selectedLPToken.address, MASTER_CHEF);\n                state.setSelectedLPTokenAllowed(ethers.BigNumber.from(allowance).gte(minAllowance));\n            } finally {\n                setLoading(false);\n            }\n        }\n    }, [signer, state.selectedLPToken]);\n\n    useEffect(() => {\n        state.setAmount(\"\");\n    }, [action]);\n\n    const onDeposit = useCallback(async () => {\n        if (state.selectedLPToken?.id && state.amount && signer) {\n            setDepositing(true);\n            try {\n                const amount = parseBalance(state.amount, state.selectedLPToken.decimals);\n                const tx = await deposit(state.selectedLPToken.id, amount, signer);\n                await tx.wait();\n                state.setSelectedLPToken(undefined);\n                await state.updateLastTimeRefreshed();\n            } finally {\n                setDepositing(false);\n            }\n        }\n    }, [state.selectedLPToken, state.amount, signer]);\n\n    const onWithdraw = useCallback(async () => {\n        if (state.selectedLPToken?.id && state.amount && signer) {\n            setWithdrawing(true);\n            try {\n                const amount = parseBalance(state.amount, state.selectedLPToken.decimals);\n                const tx = await withdraw(state.selectedLPToken.id, amount, signer);\n                await tx.wait();\n                state.setSelectedLPToken(undefined);\n                await state.updateLastTimeRefreshed();\n            } finally {\n                setWithdrawing(false);\n            }\n        }\n    }, [state.selectedLPToken, state.amount, signer]);\n\n    return {\n        ...state,\n        loading: state.loading || loading,\n        filteredBy,\n        setFilteredBy,\n        action,\n        setAction,\n        expectedSushiRewardPerBlock,\n        onDeposit,\n        depositing,\n        onWithdraw,\n        withdrawing\n    };\n};\n\nexport default useFarmingState;\n","import React, { FC, useCallback, useState } from \"react\";\nimport { Image, Platform, TouchableHighlight, View } from \"react-native\";\nimport { Icon } from \"react-native-elements\";\nimport { Hoverable } from \"react-native-web-hover\";\n\nimport { ethers } from \"ethers\";\nimport useAsyncEffect from \"use-async-effect\";\nimport ApproveButton from \"../components/ApproveButton\";\nimport Button from \"../components/Button\";\nimport ButtonGroup from \"../components/ButtonGroup\";\nimport CloseIcon from \"../components/CloseIcon\";\nimport Column from \"../components/Column\";\nimport Container from \"../components/Container\";\nimport Content from \"../components/Content\";\nimport ErrorMessage from \"../components/ErrorMessage\";\nimport FetchingButton from \"../components/FetchingButton\";\nimport FlexView from \"../components/FlexView\";\nimport Heading from \"../components/Heading\";\nimport InsufficientBalanceButton from \"../components/InsufficientBalanceButton\";\nimport { ITEM_SEPARATOR_HEIGHT } from \"../components/ItemSeparator\";\nimport LPTokenSelect, { LPTokenItemProps } from \"../components/LPTokenSelect\";\nimport Meta from \"../components/Meta\";\nimport Notice from \"../components/Notice\";\nimport Selectable from \"../components/Selectable\";\nimport SelectIcon from \"../components/SelectIcon\";\nimport Text from \"../components/Text\";\nimport Title from \"../components/Title\";\nimport TokenInput from \"../components/TokenInput\";\nimport TokenLogo from \"../components/TokenLogo\";\nimport WebFooter from \"../components/web/WebFooter\";\nimport { MASTER_CHEF } from \"../constants/contracts\";\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport useFarmingState, { Action, FarmingState } from \"../hooks/useFarmingState\";\nimport useLinker from \"../hooks/useLinker\";\nimport LPToken from \"../types/LPToken\";\nimport MetamaskError from \"../types/MetamaskError\";\nimport { formatBalance, isEmptyValue, parseBalance, pow10 } from \"../utils\";\nimport Screen from \"./Screen\";\n\nconst Actions = [\"deposit\", \"withdraw\"];\n\nconst FarmingScreen = () => {\n    return (\n        <Screen>\n            <Container>\n                <Content>\n                    <Title text={\"Start Farming\"} />\n                    <Text light={true}>Stake your LP tokens earn additional income.</Text>\n                    <Farming />\n                    {Platform.OS === \"web\" && <WebFooter />}\n                </Content>\n            </Container>\n        </Screen>\n    );\n};\n\nconst Farming = () => {\n    const state = useFarmingState();\n    const emptyText =\n        state.filteredBy === \"amountDeposited\"\n            ? \"You don't have any pool with deposit.\"\n            : state.filteredBy === \"balance\"\n            ? \"You don't have any pool with balance.\"\n            : \"Temporarily unable to load pools.\";\n    return (\n        <View style={{ marginTop: Spacing.large }}>\n            <LPTokenSelect\n                state={state}\n                title={\"Active Pools\"}\n                emptyText={emptyText}\n                showFilter={!state.selectedLPToken}\n                filter={state.filteredBy}\n                onFilterChanged={state.setFilteredBy}\n                Item={TokenItem}\n            />\n            <ActionSelect state={state} />\n            <Deposit state={state} />\n            <Withdraw state={state} />\n        </View>\n    );\n};\n\n// tslint:disable-next-line:max-func-body-length\nconst TokenItem: FC<LPTokenItemProps> = props => {\n    const { background, backgroundLight, textMedium } = useColors();\n    const amount =\n        (props.filter === \"balance\"\n            ? props.token.balance\n            : props.filter === \"amountDeposited\"\n            ? props.token.amountDeposited\n            : props.token.totalDeposited) || \"0\";\n    const onPress = useCallback(() => {\n        props.onSelectToken(props.token);\n    }, [props.onSelectToken, props.token]);\n    const field =\n        props.filter === \"amountDeposited\" ? \"My Deposit\" : props.filter === \"balance\" ? \"My Balance\" : \"Total Deposit\";\n    return (\n        <Selectable\n            selected={props.selected}\n            onPress={onPress}\n            containerStyle={{ marginBottom: ITEM_SEPARATOR_HEIGHT }}>\n            <FlexView style={{ alignItems: \"center\" }}>\n                <TokenLogo token={props.token.tokenA} small={true} replaceWETH={true} />\n                <TokenLogo token={props.token.tokenB} small={true} replaceWETH={true} style={{ marginLeft: 4 }} />\n                <Text medium={true} caption={true} style={{ marginLeft: Spacing.tiny }}>\n                    {props.token.tokenA.symbol}-{props.token.tokenB.symbol}\n                </Text>\n                <View style={{ flex: 1 }}>\n                    <Text style={{ textAlign: \"right\", fontSize: 15 }}>{field}</Text>\n                    <Text light={true} style={{ textAlign: \"right\", fontSize: 22, color: textMedium }}>\n                        {formatBalance(amount, props.token.decimals, 8)}\n                    </Text>\n                </View>\n                {props.selected ? <CloseIcon /> : <SelectIcon />}\n            </FlexView>\n        </Selectable>\n    );\n};\n\nconst LogoSymbol = ({ token }) => {\n    const { textMedium } = useColors();\n    const [isEmpty, setIsEmpty] = useState(false);\n    const source = !token.logoURI || isEmpty ? require(\"../../assets/empty-token.png\") : { uri: token.logoURI };\n    return (\n        <FlexView style={{ alignItems: \"center\", marginBottom: Spacing.tiny }}>\n            <Image\n                source={source}\n                onError={() => setIsEmpty(true)}\n                style={{ width: 24, height: 24, backgroundColor: \"white\", borderRadius: 12 }}\n            />\n            <Text light={true} style={{ fontSize: 22, color: textMedium, marginLeft: Spacing.small }}>\n                {token.symbol.replace(/\\+/g, \"+\\n\")}\n            </Text>\n        </FlexView>\n    );\n};\n\nconst ActionSelect = ({ state }: { state: FarmingState }) => {\n    if (!state.selectedLPToken) {\n        return <Column noTopMargin={true} />;\n    }\n    const index = state.action ? Actions.indexOf(state.action) : null;\n    const onPress = useCallback((i: number) => {\n        state.setAction(Actions[i] as Action);\n    }, []);\n    const balance = formatBalance(state.selectedLPToken!.balance, state.selectedLPToken!.decimals);\n    const deposit = formatBalance(state.selectedLPToken.amountDeposited || \"0\", state.selectedLPToken!.decimals);\n    return (\n        <Column>\n            <Heading text={\"2. Do you want to DEPOSIT or WITHDRAW?\"} />\n            <View style={{ marginHorizontal: Spacing.small, marginBottom: Spacing.normal }}>\n                <Meta label={\"My Balance\"} text={balance} />\n                <Meta label={\"My Deposit\"} text={deposit} />\n            </View>\n            <ButtonGroup\n                selectedIndex={index}\n                onPress={onPress}\n                buttons={[{ element: DepositText }, { element: WithdrawText }]}\n                containerStyle={{ marginHorizontal: Spacing.small }}\n            />\n        </Column>\n    );\n};\n\nconst DepositText = () => {\n    return (\n        <FlexView style={{ alignItems: \"center\" }}>\n            <Text style={{ color: \"black\" }}>Deposit</Text>\n            <Icon\n                type={\"material-community\"}\n                name={\"chevron-right\"}\n                color={\"black\"}\n                style={{ marginLeft: Spacing.tiny, marginTop: 2 }}\n            />\n        </FlexView>\n    );\n};\n\nconst WithdrawText = () => {\n    return (\n        <FlexView style={{ alignItems: \"center\" }}>\n            <Text style={{ color: \"black\" }}>Withdraw</Text>\n            <Icon\n                type={\"material-community\"}\n                name={\"chevron-right\"}\n                color={\"black\"}\n                style={{ marginLeft: Spacing.tiny, marginTop: 2 }}\n            />\n        </FlexView>\n    );\n};\n\nconst Deposit = ({ state }: { state: FarmingState }) => {\n    if (!state.selectedLPToken || state.action !== \"deposit\") {\n        return <Column noTopMargin={true} />;\n    }\n    return (\n        <Column>\n            <AddLiquidityNotice state={state} />\n            <TokenInput\n                title={\"3. Amount of tokens to DEPOSIT:\"}\n                token={state.selectedLPToken}\n                hidden={state.selectedLPToken.balance.isZero()}\n                amount={state.amount}\n                onAmountChanged={state.setAmount}\n            />\n            <DepositInfo state={state} />\n            <DepositControls state={state} />\n        </Column>\n    );\n};\n\nconst AddLiquidityNotice = ({ state }: { state: FarmingState }) => {\n    const { green } = useColors();\n    if (!state.selectedLPToken!.balance.isZero()) {\n        return <Column noTopMargin={true} />;\n    }\n    return (\n        <>\n            <View style={{ marginHorizontal: Spacing.small }}>\n                <Notice\n                    color={green}\n                    text={\n                        \"You need some \" +\n                        state.selectedLPToken!.symbol +\n                        \" token to start farming. Add liquidity to get the LP token.\"\n                    }\n                />\n            </View>\n            <AddLiquidityButton />\n        </>\n    );\n};\n\nconst DepositInfo = ({ state }: { state: FarmingState }) => {\n    if (state.selectedLPToken!.balance.isZero()) {\n        return <Column noTopMargin={true} />;\n    }\n    const balance = formatBalance(state.selectedLPToken!.balance, state.selectedLPToken!.decimals);\n    const sushiReward =\n        state.expectedSushiRewardPerBlock && state.amount\n            ? formatBalance(state.expectedSushiRewardPerBlock.mul(parseBalance(state.amount, 18)).div(pow10(18)), 18)\n            : undefined;\n    return (\n        <Column noTopMargin={true}>\n            <Meta label={\"My Balance\"} text={balance} />\n            {!isEmptyValue(state.amount) && <Meta label={\"SUSHI Reward per Block\"} text={sushiReward} />}\n        </Column>\n    );\n};\n\nconst DepositControls = ({ state }: { state: FarmingState }) => {\n    const [error, setError] = useState<MetamaskError>({});\n    useAsyncEffect(() => setError({}), [state.selectedLPToken]);\n    if (state.selectedLPToken!.balance.isZero()) {\n        return <Column noTopMargin={true} />;\n    }\n    const approveRequired = !state.selectedLPTokenAllowed;\n    const disabled = approveRequired || isEmptyValue(state.amount);\n    return (\n        <Column>\n            {parseBalance(state.amount, state.selectedLPToken!.decimals).gt(state.selectedLPToken!.balance) ? (\n                <InsufficientBalanceButton symbol={state.selectedLPToken!.symbol} />\n            ) : state.loading ? (\n                <FetchingButton />\n            ) : (\n                <>\n                    <ApproveButton\n                        token={state.selectedLPToken!}\n                        spender={MASTER_CHEF}\n                        onSuccess={() => state.setSelectedLPTokenAllowed(true)}\n                        onError={setError}\n                        hidden={isEmptyValue(state.amount) || !approveRequired}\n                    />\n                    <DepositButton state={state} onError={setError} disabled={disabled} />\n                </>\n            )}\n            {error.message && error.code !== 4001 && <ErrorMessage error={error} />}\n        </Column>\n    );\n};\n\nconst AddLiquidityButton = () => {\n    const { green } = useColors();\n    const onPress = useLinker(\"/liquidity\", \"Liquidity\");\n    return (\n        <Button\n            color={green}\n            title={\"Add Liquidity\"}\n            containerStyle={{ marginTop: Spacing.normal }}\n            onPress={onPress}\n        />\n    );\n};\n\nconst DepositButton = ({\n    state,\n    onError,\n    disabled\n}: {\n    state: FarmingState;\n    onError: (e) => void;\n    disabled: boolean;\n}) => {\n    const onPress = useCallback(() => {\n        onError({});\n        state.onDeposit().catch(onError);\n    }, [state.onDeposit, onError]);\n    return <Button title={\"Deposit\"} disabled={disabled} loading={state.depositing} onPress={onPress} />;\n};\n\nconst Withdraw = ({ state }: { state: FarmingState }) => {\n    if (!state.selectedLPToken || state.action !== \"withdraw\") {\n        return <Column noTopMargin={true} />;\n    }\n    const token: LPToken = {\n        ...state.selectedLPToken,\n        balance: state.selectedLPToken.amountDeposited || ethers.constants.Zero\n    };\n    return (\n        <Column>\n            <NoLPTokenNotice state={state} />\n            <TokenInput\n                title={\"3. Amount of tokens to WITHDRAW:\"}\n                token={token}\n                hidden={state.loading || state.selectedLPToken.amountDeposited?.isZero() || false}\n                amount={state.amount}\n                onAmountChanged={state.setAmount}\n            />\n            <WithdrawInfo state={state} />\n            <WithdrawControls state={state} />\n        </Column>\n    );\n};\n\nconst NoLPTokenNotice = ({ state }: { state: FarmingState }) => {\n    if (state.loading || !state.selectedLPToken || !state.selectedLPToken.amountDeposited?.isZero()) {\n        return <Column noTopMargin={true} />;\n    }\n    return (\n        <Column noTopMargin={true}>\n            <View style={{ marginHorizontal: Spacing.small }}>\n                <Notice\n                    text={\"You don't have any \" + state.selectedLPToken!.symbol + \" token deposited. Deposit it first.\"}\n                />\n            </View>\n        </Column>\n    );\n};\n\nconst WithdrawInfo = ({ state }: { state: FarmingState }) => {\n    if (\n        state.loading ||\n        !state.selectedLPToken ||\n        !state.selectedLPToken.amountDeposited ||\n        state.selectedLPToken.amountDeposited?.isZero() ||\n        !state.selectedLPToken.pendingSushi\n    ) {\n        return <Column noTopMargin={true} />;\n    }\n    const deposit = formatBalance(state.selectedLPToken.amountDeposited, state.selectedLPToken!.decimals);\n    const pendingSushi = formatBalance(\n        state.selectedLPToken.pendingSushi || ethers.constants.Zero,\n        state.selectedLPToken!.decimals\n    );\n    return (\n        <Column noTopMargin={true}>\n            <Meta label={\"My Deposit\"} text={deposit} />\n            <Meta label={\"Pending Sushi Reward\"} text={pendingSushi} />\n            <View style={{ marginTop: Spacing.normal, marginHorizontal: Spacing.small }}>\n                <Notice text={\"All pending sushi reward will be transferred to you if you withdraw.\"} />\n            </View>\n        </Column>\n    );\n};\n\nconst WithdrawControls = ({ state }: { state: FarmingState }) => {\n    const [error, setError] = useState<MetamaskError>({});\n    useAsyncEffect(() => setError({}), [state.selectedLPToken]);\n    if (state.loading) {\n        return (\n            <Column>\n                <FetchingButton />\n            </Column>\n        );\n    }\n    if (\n        !state.selectedLPToken ||\n        !state.selectedLPToken.amountDeposited ||\n        state.selectedLPToken.amountDeposited.isZero()\n    ) {\n        return <Column noTopMargin={true} />;\n    }\n    return (\n        <Column>\n            {parseBalance(state.amount, state.selectedLPToken!.decimals).gt(state.selectedLPToken.amountDeposited) ? (\n                <InsufficientBalanceButton symbol={state.selectedLPToken!.symbol} />\n            ) : (\n                <WithdrawButton state={state} onError={setError} disabled={isEmptyValue(state.amount)} />\n            )}\n            {error.message && error.code !== 4001 && <ErrorMessage error={error} />}\n        </Column>\n    );\n};\n\nconst WithdrawButton = ({\n    state,\n    onError,\n    disabled\n}: {\n    state: FarmingState;\n    onError: (e) => void;\n    disabled: boolean;\n}) => {\n    const onPress = useCallback(() => {\n        onError({});\n        state.onWithdraw().catch(onError);\n    }, [state.onWithdraw, onError]);\n    return (\n        <Button size={\"large\"} title={\"Withdraw\"} disabled={disabled} loading={state.withdrawing} onPress={onPress} />\n    );\n};\n\nexport default FarmingScreen;\n"],"sourceRoot":""}