{"version":3,"sources":["src/components/InsufficientBalanceButton.tsx","src/components/AmountMeta.tsx","src/components/ApproveButton.tsx","src/components/Notice.tsx","src/hooks/useDelayedEffect.tsx","src/components/TokenAmount.tsx","src/components/TokenName.tsx","src/components/TokenSymbol.tsx","src/components/UnsupportedButton.tsx","src/components/TokenSearch.tsx","src/components/TokenSelect.tsx","src/components/ExperimentalNotice.tsx","src/hooks/useSwapState.tsx","src/screens/SwapScreen.tsx"],"names":["InsufficientBalanceButton","symbol","title","disabled","AmountMeta","props","useColors","textDark","textLight","placeholder","style","fontSize","IS_DESKTOP","marginBottom","Spacing","normal","color","amount","suffix","ApproveButton","approveToken","useContext","EthersContext","useState","loading","setLoading","onPress","useCallback","a","async","token","onError","address","spender","tx","wait","onSuccess","hidden","containerStyle","tiny","Notice","borderStyle","border","useStyles","clear","note","text","buttonText","onPressButton","type","size","fontWeight","titleStyle","buttonStyle","paddingHorizontal","paddingVertical","alignSelf","marginTop","handles","useDelayedEffect","effect","timeout","inputs","key","toString","useAsyncEffect","handle","setTimeout","clearTimeout","TokenAmount","caption","formatBalance","balance","decimals","TokenName","numberOfLines","ellipsizeMode","marginLeft","small","width","name","TokenSymbol","medium","UnsupportedButton","state","fromSymbol","toSymbol","Loading","ActivityIndicator","position","right","bottom","TokenItem","accent","onSelectToken","Selectable","selected","ITEM_SEPARATOR_HEIGHT","FlexView","alignItems","TokenLogo","View","flex","Button","duplicate","height","TokenSearch","provider","tokens","tokenToAdd","setTokenToAdd","findIndex","t","useEffect","undefined","trim","ethers","utils","isAddress","findOrFetchToken","Input","value","onChangeText","autoFocus","inputStyle","marginHorizontal","inputContainerStyle","borderBottomWidth","marginRight","labelStyle","paddingTop","paddingBottom","onAddToken","TokenList","loadingTokens","renderItem","item","data","useMemo","filter","sort","t1","t2","isZero","localeCompare","length","FlatList","keyExtractor","EmptyList","margin","Text","textAlign","selectable","CloseIcon","SelectIcon","TokenSelect","addCustomToken","search","setSearch","query","setQuery","find","toLowerCase","Expandable","expanded","onExpand","onChangeSymbol","includes","ExperimentalNotice","onPressContract","useLinker","contractURL","marginVertical","useSwapState","useTokenPairState","chainId","signer","kovanSigner","updateTokens","useSDK","getTrade","swap","createOrder","calculateSwapFee","calculateLimitOrderFee","calculateLimitOrderReturn","orderType","setOrderType","priceInETH","setPriceInETH","trade","setTrade","unsupported","setUnsupported","swapFee","setSwapFee","limitOrderPrice","setLimitOrderPrice","limitOrderFee","setLimitOrderFee","limitOrderSwapFee","setLimitOrderSwapFee","limitOrderReturn","setLimitOrderReturn","swapping","setSwapping","creatingOrder","setCreatingOrder","setFromSymbol","fromToken","constants","WeiPerEther","Token","toToken","WETH","Fetcher","fetchPairData","pair","parseBalance","priceOf","toFixed","isEmptyValue","fromAmount","useDelayedOnBlockEffect","block","sub","onSwap","result","onCreateOrder","amountIn","Fraction","parse","apply","mul","pow10","div","limitOrderUnsupported","Swap","large","Border","OrderTypeSelect","OrderTypeItem","desc","paddingLeft","paddingRight","FromTokenSelect","customTokens","Heading","ETH","ToTokenSelect","setToSymbol","AmountInput","TokenInput","onAmountChanged","setFromAmount","AmountNotice","lte","PriceInput","marketPrice","executionPrice","Zero","maxButtonText","LimitOrderUnsupportedNotice","NoPairNotice","TradeInfo","InfoBox","WrapInfo","SwapInfo","outputAmount","price","impact","priceImpact","Meta","label","SwapControls","error","setError","approveRequired","fromTokenAllowed","gt","FetchingButton","ROUTER","setFromTokenAllowed","message","code","ErrorMessage","SwapButton","catch","WrapButton","onWrap","wrapping","UnwrapButton","onUnwrap","unwrapping","LimitOrderInfo","d","LimitOrderControls","getTokenAllowance","allowed","setAllowed","SETTLEMENT","allowance","BigNumber","from","gte","PriceTooLowButton","PlaceOrderButton","goToLimitOrders","SwapScreen","Screen","Container","BackgroundImage","Content","Title","light","Platform","OS","WebFooter"],"mappings":"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","file":"static/js/10.ded8e7d7.chunk.js","sourcesContent":["import React from \"react\";\n\nimport Button from \"./Button\";\n\nconst InsufficientBalanceButton = ({ symbol }: { symbol: string }) => {\n    return <Button title={\"Insufficient \" + (symbol ? symbol : \"Balance\")} disabled={true} />;\n};\nexport default InsufficientBalanceButton;\n","import React, { FC } from \"react\";\n\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport Text from \"./Text\";\n\nexport interface AmountMetaProps {\n    amount?: string;\n    suffix?: string;\n    disabled?: boolean;\n}\n\nconst AmountMeta: FC<AmountMetaProps> = props => {\n    const { textDark, textLight, placeholder } = useColors();\n    return (\n        <Text\n            style={{\n                fontSize: IS_DESKTOP ? 28 : 20,\n                marginBottom: Spacing.normal,\n                color: props.disabled ? placeholder : props.amount ? textDark : textLight\n            }}>\n            {props.disabled ? \"N/A\" : props.amount ? props.amount + \" \" + (props.suffix || \"\") : \"Fetching…\"}\n        </Text>\n    );\n};\n\nexport default AmountMeta;\n","import React, { FC, useCallback, useContext, useState } from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport Token from \"../types/Token\";\nimport Button from \"./Button\";\n\nexport interface ApproveButtonProps {\n    token: Token;\n    spender: string;\n    onSuccess: () => void;\n    onError: (e) => void;\n    hidden?: boolean;\n}\n\nconst ApproveButton: FC<ApproveButtonProps> = props => {\n    const { approveToken } = useContext(EthersContext);\n    const [loading, setLoading] = useState(false);\n    const onPress = useCallback(async () => {\n        if (props.token) {\n            props.onError({});\n            setLoading(true);\n            try {\n                const tx = await approveToken(props.token.address, props.spender);\n                if (tx) {\n                    await tx.wait();\n                    props.onSuccess();\n                }\n            } catch (e) {\n                props.onError(e);\n            } finally {\n                setLoading(false);\n            }\n        }\n    }, [props.token]);\n    if (props.hidden) return <View />;\n    return (\n        <Button\n            title={\"Approve \" + (props.token?.symbol || \"\")}\n            onPress={onPress}\n            loading={loading}\n            containerStyle={{ marginBottom: Spacing.tiny }}\n        />\n    );\n};\n\nexport default ApproveButton;\n","import React from \"react\";\nimport { View, ViewStyle } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport useStyles from \"../hooks/useStyles\";\nimport Button from \"./Button\";\nimport Text from \"./Text\";\n\nexport interface NoticeProps {\n    text: string;\n    clear?: boolean;\n    color?: string;\n    buttonText?: string;\n    onPressButton?: () => void;\n    style?: ViewStyle;\n}\n\nconst Notice = (props: NoticeProps) => {\n    const { textLight } = useColors();\n    const { border } = useStyles();\n    const borderStyle = border({ color: props.color });\n    const color = props.color || textLight;\n    return (\n        <View style={[props.clear ? {} : borderStyle, props.style]}>\n            <Text note={true} style={{ color }}>\n                {props.text}\n            </Text>\n            {props.buttonText && props.onPressButton && (\n                <Button\n                    title={props.buttonText}\n                    type={\"clear\"}\n                    size={\"small\"}\n                    fontWeight={\"bold\"}\n                    onPress={props.onPressButton}\n                    titleStyle={{ color }}\n                    buttonStyle={{ paddingHorizontal: 0, paddingVertical: 0 }}\n                    style={{ alignSelf: \"flex-end\", marginTop: Spacing.tiny }}\n                />\n            )}\n        </View>\n    );\n};\n\nexport default Notice;\n","import useAsyncEffect from \"use-async-effect\";\n\nconst handles = {};\n\nconst useDelayedEffect = (\n    effect: (isMounted: () => boolean) => unknown | Promise<unknown>,\n    timeout: number,\n    inputs?: any[]\n) => {\n    const key = effect.toString();\n    useAsyncEffect<number>(\n        () => {\n            const handle = setTimeout(effect, timeout);\n            handles[key] = handle;\n            return handle;\n        },\n        handle => {\n            clearTimeout(handle);\n        },\n        inputs\n    );\n};\nexport default useDelayedEffect;\n","import React from \"react\";\nimport { TextStyle } from \"react-native\";\n\nimport { ethers } from \"ethers\";\nimport { IS_DESKTOP } from \"../constants/dimension\";\nimport Token from \"../types/Token\";\nimport { formatBalance } from \"../utils\";\nimport Text from \"./Text\";\n\nconst TokenAmount = (props: { token: Token; amount?: ethers.BigNumber; disabled?: boolean; style?: TextStyle }) => (\n    <Text caption={IS_DESKTOP} disabled={props.disabled} style={props.style}>\n        {formatBalance(props.amount || props.token.balance, props.token.decimals, 8)}\n    </Text>\n);\n\nexport default TokenAmount;\n","import React from \"react\";\n\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport Token from \"../types/Token\";\nimport Text from \"./Text\";\n\nconst TokenName = (props: { token: Token; disabled?: boolean }) => (\n    <Text\n        caption={true}\n        numberOfLines={1}\n        ellipsizeMode={\"tail\"}\n        style={{ marginLeft: Spacing.small, width: 180 }}\n        disabled={props.disabled}>\n        {IS_DESKTOP ? props.token.name : props.token.symbol}\n    </Text>\n);\n\nexport default TokenName;\n","import React from \"react\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport Token from \"../types/Token\";\nimport Text from \"./Text\";\n\nconst TokenSymbol = (props: { token: Token; disabled?: boolean }) => (\n    <Text medium={true} caption={true} disabled={props.disabled} style={{ marginLeft: Spacing.tiny }}>\n        {props.token.symbol}\n    </Text>\n);\n\nexport default TokenSymbol;\n","import React from \"react\";\n\nimport { TokenPairState } from \"../hooks/useTokenPairState\";\nimport Button from \"./Button\";\n\nconst UnsupportedButton = ({ state }: { state: TokenPairState }) => {\n    return <Button title={state.fromSymbol + \"-\" + state.toSymbol + \" Not Supported\"} disabled={true} />;\n};\n\nexport default UnsupportedButton;\n","import React, { FC, useCallback, useContext, useEffect, useState } from \"react\";\nimport { ActivityIndicator, View } from \"react-native\";\n\nimport { ethers } from \"ethers\";\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport useColors from \"../hooks/useColors\";\nimport useDelayedEffect from \"../hooks/useDelayedEffect\";\nimport useStyles from \"../hooks/useStyles\";\nimport Token from \"../types/Token\";\nimport { findOrFetchToken } from \"../utils/fetch-utils\";\nimport Button from \"./Button\";\nimport FlexView from \"./FlexView\";\nimport Input from \"./Input\";\nimport { ITEM_SEPARATOR_HEIGHT } from \"./ItemSeparator\";\nimport Selectable from \"./Selectable\";\nimport TokenLogo from \"./TokenLogo\";\nimport TokenName from \"./TokenName\";\n\nexport interface TokenSearchProps {\n    tokens?: Token[];\n    text: string;\n    onChangeText: (text: string) => void;\n    onAddToken?: (token: Token) => void;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst TokenSearch: FC<TokenSearchProps> = props => {\n    const { border } = useStyles();\n    const { provider, tokens } = useContext(EthersContext);\n    const [tokenToAdd, setTokenToAdd] = useState<Token>();\n    const [loading, setLoading] = useState(false);\n    const duplicate = !!tokenToAdd && tokens.findIndex(t => t.address === tokenToAdd.address) !== -1;\n    if (!props.tokens) return <View />;\n    useEffect(() => {\n        if (props.text === \"\") {\n            setLoading(false);\n            setTokenToAdd(undefined);\n        }\n    }, [props.text]);\n    useDelayedEffect(\n        async () => {\n            const address = props.text.trim();\n            if (provider && ethers.utils.isAddress(address)) {\n                setLoading(true);\n                try {\n                    const token = await findOrFetchToken(address, provider);\n                    if (token.name && token.symbol && token.decimals) {\n                        setTokenToAdd(token as Token);\n                    }\n                } finally {\n                    setLoading(false);\n                }\n            }\n        },\n        300,\n        [provider, props.text]\n    );\n    return (\n        <View>\n            <FlexView style={{ marginBottom: Spacing.small }}>\n                <Input\n                    value={props.text}\n                    onChangeText={props.onChangeText}\n                    placeholder={\"Token name, symbol or address\"}\n                    autoFocus={IS_DESKTOP}\n                    inputStyle={{ marginHorizontal: Spacing.tiny, fontSize: props.text ? 20 : 16 }}\n                    inputContainerStyle={{ borderBottomWidth: 0, marginRight: loading ? 32 : 0 }}\n                    labelStyle={{ height: 0 }}\n                    containerStyle={{\n                        ...border(),\n                        paddingHorizontal: Spacing.tiny,\n                        paddingTop: 12,\n                        paddingBottom: 0\n                    }}\n                />\n                {props.onAddToken && loading && <Loading />}\n            </FlexView>\n            {props.onAddToken && tokenToAdd && (\n                <TokenItem token={tokenToAdd} selected={true} onSelectToken={props.onAddToken} duplicate={duplicate} />\n            )}\n        </View>\n    );\n};\n\nconst Loading = () => <ActivityIndicator size={\"small\"} style={{ position: \"absolute\", right: 16, bottom: 16 }} />;\n\nconst TokenItem = (props: {\n    token: Token;\n    selected: boolean;\n    onSelectToken: (token: Token) => void;\n    duplicate: boolean;\n}) => {\n    const { accent } = useColors();\n    const onPress = useCallback(() => {\n        props.onSelectToken(props.token);\n    }, [props.onSelectToken, props.token]);\n    return (\n        <Selectable\n            selected={false}\n            disabled={true}\n            onPress={onPress}\n            containerStyle={{\n                marginBottom: ITEM_SEPARATOR_HEIGHT\n            }}>\n            <FlexView style={{ alignItems: \"center\" }}>\n                <TokenLogo token={props.token} />\n                <TokenName token={props.token} />\n                <View style={{ flex: 1 }} />\n                <Button\n                    type={\"clear\"}\n                    size={\"small\"}\n                    color={accent}\n                    title={props.duplicate ? \"Already Added\" : \"ADD \" + props.token.symbol}\n                    fontWeight={\"bold\"}\n                    onPress={onPress}\n                    disabled={props.duplicate}\n                    buttonStyle={{ paddingHorizontal: 4, height: 27 }}\n                />\n            </FlexView>\n        </Selectable>\n    );\n};\n\nexport default TokenSearch;\n","import React, { FC, useCallback, useContext, useEffect, useMemo, useState } from \"react\";\nimport { FlatList, View, ViewStyle } from \"react-native\";\n\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport useDelayedEffect from \"../hooks/useDelayedEffect\";\nimport Token from \"../types/Token\";\nimport CloseIcon from \"./CloseIcon\";\nimport Expandable from \"./Expandable\";\nimport FlexView from \"./FlexView\";\nimport { ITEM_SEPARATOR_HEIGHT } from \"./ItemSeparator\";\nimport Loading from \"./Loading\";\nimport Selectable from \"./Selectable\";\nimport SelectIcon from \"./SelectIcon\";\nimport Text from \"./Text\";\nimport TokenAmount from \"./TokenAmount\";\nimport TokenLogo from \"./TokenLogo\";\nimport TokenName from \"./TokenName\";\nimport TokenSearch from \"./TokenSearch\";\nimport TokenSymbol from \"./TokenSymbol\";\n\nexport interface TokenSelectProps {\n    title: string;\n    symbol: string;\n    onChangeSymbol: (symbol: string) => void;\n    disabled?: (token: Token) => boolean;\n    hidden?: (token: Token) => boolean;\n    style?: ViewStyle;\n}\n\nconst TokenSelect: FC<TokenSelectProps> = props => {\n    const { tokens, addCustomToken } = useContext(EthersContext);\n    const [search, setSearch] = useState(\"\");\n    const [query, setQuery] = useState(\"\");\n    const token = useMemo(() => tokens.find(t => t.symbol === props.symbol), [tokens, props.symbol]);\n    const onSelectToken = t => props.onChangeSymbol(t.symbol);\n    const onUnselectToken = () => props.onChangeSymbol(\"\");\n    const onAddToken = async (t: Token) => {\n        await addCustomToken(t);\n        setSearch(\"\");\n        setQuery(\"\");\n        props.onChangeSymbol(t.symbol);\n    };\n    const hidden = (t: Token) => {\n        if (query.length > 0) {\n            return !t.symbol.toLowerCase().includes(query) && !t.name.toLowerCase().includes(query);\n        }\n        return props.hidden?.(t) || false;\n    };\n    useEffect(() => setSearch(\"\"), [props.symbol]);\n    useDelayedEffect(() => setQuery(search.trim().toLowerCase()), 300, [search]);\n    return (\n        <View style={props.style}>\n            <Expandable title={props.title} expanded={!props.symbol} onExpand={() => props.onChangeSymbol(\"\")}>\n                <TokenSearch text={search} onChangeText={setSearch} tokens={tokens} onAddToken={onAddToken} />\n                <TokenList disabled={props.disabled} hidden={hidden} onSelectToken={onSelectToken} />\n            </Expandable>\n            {token && <TokenItem token={token} selected={true} onSelectToken={onUnselectToken} selectable={true} />}\n        </View>\n    );\n};\n\n// tslint:disable-next-line:max-func-body-length\nconst TokenList = (props: {\n    onSelectToken: (token: Token) => void;\n    disabled?: (token: Token) => boolean;\n    hidden?: (token: Token) => boolean;\n}) => {\n    const { loadingTokens, tokens } = useContext(EthersContext);\n    const renderItem = useCallback(\n        ({ item }) => {\n            return (\n                <TokenItem\n                    key={item.address}\n                    token={item}\n                    selected={false}\n                    onSelectToken={props.onSelectToken}\n                    disabled={props.disabled?.(item)}\n                />\n            );\n        },\n        [props.onSelectToken, props.disabled]\n    );\n    const data = useMemo(\n        () =>\n            tokens\n                .filter(token => (props.hidden ? !props.hidden(token) : true))\n                .sort(\n                    (t1, t2) =>\n                        (t2.balance.isZero() ? 0 : 10000000000) -\n                        (t1.balance.isZero() ? 0 : 10000000000) +\n                        t1.symbol.localeCompare(t2.symbol)\n                ),\n        [tokens, props.hidden]\n    );\n    return loadingTokens ? (\n        <Loading />\n    ) : data.length === 0 ? (\n        <EmptyList />\n    ) : (\n        <FlatList keyExtractor={item => item.address} data={data} renderItem={renderItem} />\n    );\n};\n\nconst EmptyList = () => {\n    return (\n        <View style={{ margin: Spacing.normal }}>\n            <Text disabled={true} style={{ textAlign: \"center\", width: \"100%\" }}>\n                {\"You don't have any matching tokens.\"}\n            </Text>\n        </View>\n    );\n};\n\nconst TokenItem = (props: {\n    token: Token;\n    selected: boolean;\n    onSelectToken: (token: Token) => void;\n    disabled?: boolean;\n    selectable?: boolean;\n}) => {\n    const onPress = useCallback(() => {\n        props.onSelectToken(props.token);\n    }, [props.onSelectToken, props.token]);\n    return (\n        <Selectable\n            selected={props.selected}\n            onPress={onPress}\n            disabled={props.disabled || props.selectable}\n            containerStyle={{\n                marginBottom: ITEM_SEPARATOR_HEIGHT\n            }}>\n            <FlexView style={{ alignItems: \"center\" }}>\n                <TokenLogo token={props.token} disabled={props.disabled} />\n                <TokenName token={props.token} disabled={props.disabled} />\n                <TokenAmount token={props.token} disabled={props.disabled} style={{ flex: 1, textAlign: \"right\" }} />\n                {IS_DESKTOP && <TokenSymbol token={props.token} disabled={props.disabled} />}\n                {props.selected ? <CloseIcon /> : <SelectIcon />}\n            </FlexView>\n        </Selectable>\n    );\n};\n\nexport default TokenSelect;\n","import React from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useLinker from \"../hooks/useLinker\";\nimport Notice from \"./Notice\";\n\nconst ExperimentalNotice = (props: { contractURL: string }) => {\n    const onPressContract = useLinker(props.contractURL, \"\", \"_blank\");\n    return (\n        <View style={{ marginVertical: Spacing.tiny }}>\n            <Notice\n                text={\n                    \"This feature is in beta and contracts are unaudited. Read the contract yourself and use it at your own risk.\"\n                }\n                color={\"orange\"}\n                buttonText={\"View Contract\"}\n                onPressButton={onPressContract}\n            />\n        </View>\n    );\n};\n\nexport default ExperimentalNotice;\n","import { useCallback, useContext, useEffect, useState } from \"react\";\n\nimport { Trade } from \"@sushiswap/sdk\";\nimport { Fetcher, Token, WETH } from \"@uniswap/sdk\";\nimport { ethers } from \"ethers\";\nimport useAsyncEffect from \"use-async-effect\";\nimport Fraction from \"../constants/Fraction\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport { formatBalance, isEmptyValue, parseBalance, pow10 } from \"../utils\";\nimport useDelayedEffect from \"./useDelayedEffect\";\nimport useDelayedOnBlockEffect from \"./useDelayedOnBlockEffect\";\nimport useSDK from \"./useSDK\";\nimport useTokenPairState, { TokenPairState } from \"./useTokenPairState\";\n\nexport type OrderType = \"market\" | \"limit\";\n\nexport interface SwapState extends TokenPairState {\n    orderType?: OrderType;\n    setOrderType: (orderType?: OrderType) => void;\n    priceInETH?: ethers.BigNumber | null;\n    trade?: Trade;\n    unsupported: boolean;\n    limitOrderUnsupported: boolean;\n    limitOrderPrice: string;\n    setLimitOrderPrice: (price: string) => void;\n    swapFee: string;\n    limitOrderFee: string;\n    limitOrderSwapFee: string;\n    limitOrderReturn: string;\n    onSwap: () => Promise<void>;\n    swapping: boolean;\n    onCreateOrder: () => Promise<void>;\n    creatingOrder: boolean;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst useSwapState: () => SwapState = () => {\n    const state = useTokenPairState();\n    const { chainId, provider, signer, kovanSigner, updateTokens } = useContext(EthersContext);\n    const {\n        getTrade,\n        swap,\n        createOrder,\n        calculateSwapFee,\n        calculateLimitOrderFee,\n        calculateLimitOrderReturn\n    } = useSDK();\n    const [loading, setLoading] = useState(true);\n    const [orderType, setOrderType] = useState<OrderType>();\n    const [priceInETH, setPriceInETH] = useState<ethers.BigNumber | null>();\n    const [trade, setTrade] = useState<Trade>();\n    const [unsupported, setUnsupported] = useState(false);\n    const [swapFee, setSwapFee] = useState(\"\");\n    const [limitOrderPrice, setLimitOrderPrice] = useState<string>(\"\");\n    const [limitOrderFee, setLimitOrderFee] = useState(\"\");\n    const [limitOrderSwapFee, setLimitOrderSwapFee] = useState(\"\");\n    const [limitOrderReturn, setLimitOrderReturn] = useState(\"\");\n    const [swapping, setSwapping] = useState(false);\n    const [creatingOrder, setCreatingOrder] = useState(false);\n\n    useEffect(() => {\n        if (!orderType) {\n            state.setFromSymbol(\"\");\n        }\n        setLimitOrderPrice(\"\");\n    }, [orderType]);\n\n    useAsyncEffect(async () => {\n        setPriceInETH(undefined);\n        if (provider && state.fromToken) {\n            if (state.fromToken.symbol === \"WETH\") {\n                setPriceInETH(ethers.constants.WeiPerEther);\n            } else {\n                try {\n                    const fromToken = new Token(chainId, state.fromToken.address, state.fromToken.decimals);\n                    const toToken = WETH[chainId];\n                    const pair = await Fetcher.fetchPairData(fromToken, toToken, provider);\n                    setPriceInETH(parseBalance(pair.priceOf(toToken).toFixed(), fromToken.decimals));\n                } catch (e) {\n                    setPriceInETH(null);\n                }\n            }\n        }\n    }, [chainId, provider, state.fromToken]);\n\n    useDelayedEffect(\n        () => {\n            if (isEmptyValue(state.fromAmount)) {\n                setLimitOrderPrice(\"\");\n                setTrade(undefined);\n            }\n        },\n        300,\n        [state.fromAmount]\n    );\n\n    useDelayedOnBlockEffect(\n        async block => {\n            if (!block) {\n                setLoading(true);\n            }\n            if (state.fromToken && state.toToken && state.fromAmount && provider) {\n                const amount = parseBalance(state.fromAmount, state.fromToken.decimals);\n                if (!amount.isZero()) {\n                    setUnsupported(false);\n                    try {\n                        setTrade(await getTrade(state.fromToken, state.toToken, amount, provider));\n                    } catch (e) {\n                        setUnsupported(true);\n                    } finally {\n                        setLoading(false);\n                    }\n                }\n            }\n        },\n        () => \"getTrade(\" + state.fromSymbol + \",\" + state.toSymbol + \",\" + state.fromAmount + \")\",\n        [state.fromSymbol, state.toSymbol, state.fromAmount]\n    );\n\n    useAsyncEffect(() => {\n        if (trade && !isEmptyValue(state.fromAmount)) {\n            const fromAmount = parseBalance(state.fromAmount, state.fromToken!.decimals);\n            setSwapFee(formatBalance(calculateSwapFee(fromAmount), state.fromToken!.decimals, 8));\n            if (orderType === \"limit\") {\n                setLimitOrderFee(formatBalance(calculateLimitOrderFee(fromAmount), state.fromToken!.decimals, 8));\n                setLimitOrderSwapFee(\n                    formatBalance(\n                        calculateSwapFee(fromAmount.sub(calculateLimitOrderFee(fromAmount))),\n                        state.fromToken!.decimals,\n                        8\n                    )\n                );\n            }\n        }\n    }, [orderType, trade, state.fromAmount]);\n\n    useAsyncEffect(() => {\n        if (state.fromToken && state.toToken && !isEmptyValue(state.fromAmount) && !isEmptyValue(limitOrderPrice)) {\n            setLimitOrderReturn(\n                formatBalance(\n                    calculateLimitOrderReturn(\n                        state.fromToken,\n                        state.toToken,\n                        parseBalance(state.fromAmount, state.fromToken.decimals),\n                        limitOrderPrice\n                    ),\n                    state.toToken.decimals\n                )\n            );\n        }\n    }, [state.fromToken, state.toToken, state.fromAmount, limitOrderPrice]);\n\n    const onSwap = useCallback(async () => {\n        if (state.fromToken && state.toToken && state.fromAmount && signer && trade) {\n            setSwapping(true);\n            try {\n                const result = await swap(trade, signer);\n                if (result) {\n                    await result.tx.wait();\n                    await updateTokens();\n                    setTrade(undefined);\n                    setOrderType(undefined);\n                }\n            } finally {\n                setSwapping(false);\n            }\n        }\n    }, [state.fromToken, state.toToken, state.fromAmount, signer, trade]);\n\n    const onCreateOrder = useCallback(async () => {\n        if (\n            state.fromToken &&\n            state.toToken &&\n            state.fromAmount &&\n            !isEmptyValue(limitOrderPrice) &&\n            signer &&\n            kovanSigner\n        ) {\n            setCreatingOrder(true);\n            try {\n                const amountIn = parseBalance(state.fromAmount, state.fromToken.decimals);\n                const tx = await createOrder(\n                    state.fromToken,\n                    state.toToken,\n                    amountIn,\n                    Fraction.parse(limitOrderPrice)\n                        .apply(amountIn)\n                        .mul(pow10(state.toToken.decimals))\n                        .div(pow10(state.fromToken.decimals)),\n                    signer,\n                    kovanSigner\n                );\n                await tx.wait();\n                setTrade(undefined);\n                setOrderType(undefined);\n            } finally {\n                setCreatingOrder(false);\n            }\n        }\n    }, [state.fromToken, state.toToken, state.fromAmount, signer, kovanSigner, limitOrderPrice]);\n\n    return {\n        ...state,\n        loading: loading || state.loading,\n        orderType,\n        setOrderType,\n        priceInETH,\n        trade,\n        unsupported,\n        swapFee,\n        limitOrderPrice,\n        setLimitOrderPrice,\n        limitOrderFee,\n        limitOrderSwapFee,\n        limitOrderReturn,\n        onSwap,\n        swapping,\n        limitOrderUnsupported: orderType === \"limit\" && (state.fromSymbol === \"ETH\" || state.toSymbol === \"ETH\"),\n        onCreateOrder,\n        creatingOrder\n    };\n};\n\nexport default useSwapState;\n","import React, { useCallback, useContext, useState } from \"react\";\nimport { Platform, View } from \"react-native\";\n\nimport { ethers } from \"ethers\";\nimport useAsyncEffect from \"use-async-effect\";\nimport AmountMeta from \"../components/AmountMeta\";\nimport ApproveButton from \"../components/ApproveButton\";\nimport BackgroundImage from \"../components/BackgroundImage\";\nimport Border from \"../components/Border\";\nimport Button from \"../components/Button\";\nimport CloseIcon from \"../components/CloseIcon\";\nimport Container from \"../components/Container\";\nimport Content from \"../components/Content\";\nimport ErrorMessage from \"../components/ErrorMessage\";\nimport Expandable from \"../components/Expandable\";\nimport ExperimentalNotice from \"../components/ExperimentalNotice\";\nimport FetchingButton from \"../components/FetchingButton\";\nimport FlexView from \"../components/FlexView\";\nimport Heading from \"../components/Heading\";\nimport InfoBox from \"../components/InfoBox\";\nimport InsufficientBalanceButton from \"../components/InsufficientBalanceButton\";\nimport { ITEM_SEPARATOR_HEIGHT } from \"../components/ItemSeparator\";\nimport Meta from \"../components/Meta\";\nimport Notice from \"../components/Notice\";\nimport Selectable from \"../components/Selectable\";\nimport SelectIcon from \"../components/SelectIcon\";\nimport Text from \"../components/Text\";\nimport Title from \"../components/Title\";\nimport TokenInput from \"../components/TokenInput\";\nimport TokenSelect from \"../components/TokenSelect\";\nimport UnsupportedButton from \"../components/UnsupportedButton\";\nimport WebFooter from \"../components/web/WebFooter\";\nimport { SwapSubMenu } from \"../components/web/WebSubMenu\";\nimport { ROUTER, SETTLEMENT } from \"../constants/contracts\";\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport Fraction from \"../constants/Fraction\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport useColors from \"../hooks/useColors\";\nimport useDelayedEffect from \"../hooks/useDelayedEffect\";\nimport useLinker from \"../hooks/useLinker\";\nimport useSwapState, { OrderType, SwapState } from \"../hooks/useSwapState\";\nimport MetamaskError from \"../types/MetamaskError\";\nimport Token from \"../types/Token\";\nimport { formatBalance, isEmptyValue, parseBalance } from \"../utils\";\nimport Screen from \"./Screen\";\n\nconst SwapScreen = () => {\n    return (\n        <Screen>\n            <Container>\n                <BackgroundImage />\n                <Content>\n                    <Title text={\"New Order\"} />\n                    <Text light={true}>Swap now or place a limit order with a desired price.</Text>\n                    <Swap />\n                </Content>\n                {Platform.OS === \"web\" && <WebFooter />}\n            </Container>\n            <SwapSubMenu />\n        </Screen>\n    );\n};\n\nconst Swap = () => {\n    const state = useSwapState();\n    return (\n        <View style={{ marginTop: Spacing.large }}>\n            <OrderTypeSelect state={state} />\n            <Border />\n            <FromTokenSelect state={state} />\n            <Border />\n            <ToTokenSelect state={state} />\n            <Border />\n            <AmountInput state={state} />\n            {state.orderType === \"limit\" && (\n                <View>\n                    <AmountNotice state={state} />\n                    <Border />\n                    <PriceInput state={state} />\n                </View>\n            )}\n            {!state.loading && !state.trade && <NoPairNotice state={state} />}\n            <TradeInfo state={state} />\n        </View>\n    );\n};\n\nconst OrderTypeSelect = ({ state }: { state: SwapState }) => {\n    return (\n        <View>\n            <Expandable title={\"Order Type\"} expanded={!state.orderType} onExpand={() => state.setOrderType()}>\n                <OrderTypeItem state={state} orderType={\"market\"} />\n                <OrderTypeItem state={state} orderType={\"limit\"} />\n            </Expandable>\n            {state.orderType && <OrderTypeItem state={state} orderType={state.orderType} selectable={true} />}\n            {state.orderType === \"limit\" && (\n                <ExperimentalNotice\n                    contractURL={\n                        \"https://github.com/sushiswap/sushiswap-settlement/blob/master/contracts/Settlement.sol\"\n                    }\n                />\n            )}\n        </View>\n    );\n};\n\nconst OrderTypeItem = ({\n    state,\n    orderType,\n    selectable\n}: {\n    state: SwapState;\n    orderType: OrderType;\n    selectable?: boolean;\n}) => {\n    const selected = state.orderType === orderType;\n    const type = orderType === \"market\" ? \"Market Order\" : \"Limit Order\";\n    const desc =\n        orderType === \"market\" ? \"Settle an order immediately\" : \"Place an order with a desired price to be settled\";\n    const onPress = () => state.setOrderType(state.orderType === orderType ? undefined : orderType);\n    return (\n        <Selectable\n            containerStyle={{ marginBottom: ITEM_SEPARATOR_HEIGHT }}\n            style={{ paddingLeft: Spacing.small + Spacing.tiny, paddingRight: Spacing.small }}\n            selected={selected}\n            disabled={selectable}\n            onPress={onPress}>\n            <FlexView style={{ alignItems: \"center\" }}>\n                <View style={{ flex: 1 }}>\n                    <Text fontWeight={\"regular\"}>{type}</Text>\n                    <Text note={true}>{desc}</Text>\n                </View>\n                {selected ? <CloseIcon /> : <SelectIcon />}\n            </FlexView>\n        </Selectable>\n    );\n};\n\nconst FromTokenSelect = ({ state }: { state: SwapState }) => {\n    const { tokens, customTokens } = useContext(EthersContext);\n    if (!state.orderType) {\n        return <Heading text={\"Token To Sell\"} disabled={true} />;\n    }\n    const ETH = tokens ? tokens.find(token => token.symbol === \"ETH\") : null;\n    return (\n        <View>\n            <TokenSelect\n                title={\"Token To Sell\"}\n                symbol={state.fromSymbol}\n                onChangeSymbol={state.setFromSymbol}\n                hidden={token =>\n                    (!customTokens.find(t => t.address === token.address) && token.balance.isZero()) ||\n                    (state.orderType === \"limit\" && token.symbol === \"ETH\")\n                }\n            />\n            {state.orderType === \"limit\" && !state.fromSymbol && ETH && !ETH.balance.isZero() && (\n                <LimitOrderUnsupportedNotice />\n            )}\n        </View>\n    );\n};\n\nconst ToTokenSelect = ({ state }: { state: SwapState }) => {\n    if (!state.orderType || !state.fromSymbol) {\n        return <Heading text={\"Token To Buy\"} disabled={true} />;\n    }\n    return (\n        <View>\n            <TokenSelect\n                title={\"Token To Buy\"}\n                symbol={state.toSymbol}\n                onChangeSymbol={state.setToSymbol}\n                hidden={token =>\n                    token.symbol === state.fromSymbol || (state.orderType === \"limit\" && token.symbol === \"ETH\")\n                }\n            />\n            {state.orderType === \"limit\" && !state.toSymbol && <LimitOrderUnsupportedNotice />}\n        </View>\n    );\n};\n\nconst AmountInput = ({ state }: { state: SwapState }) => {\n    if (!state.fromSymbol || !state.toSymbol) {\n        return <Heading text={\"Amount\"} disabled={true} />;\n    }\n    return (\n        <View>\n            <Heading text={state.fromSymbol + \" Amount\"} />\n            <TokenInput\n                token={state.fromToken}\n                amount={state.fromAmount}\n                onAmountChanged={state.setFromAmount}\n                autoFocus={IS_DESKTOP}\n            />\n        </View>\n    );\n};\n\nconst AmountNotice = ({ state }: { state: SwapState }) => {\n    if (\n        state.priceInETH === undefined ||\n        isEmptyValue(state.fromAmount) ||\n        !state.fromToken ||\n        (state.priceInETH && parseBalance(state.fromAmount, state.fromToken.decimals).lte(state.priceInETH.mul(10)))\n    ) {\n        return <View />;\n    }\n    return (\n        <View style={{ marginTop: Spacing.small }}>\n            <Notice\n                text={\n                    state.priceInETH === null\n                        ? \"This token is not supported in beta.\"\n                        : \"Maximum allowed amount in beta is \" +\n                          formatBalance(state.priceInETH.mul(10), state.fromToken!.decimals) +\n                          \" \" +\n                          state.fromSymbol +\n                          \" (≈ 10 ETH).\"\n                }\n                color={\"red\"}\n            />\n        </View>\n    );\n};\n\nconst PriceInput = ({ state }: { state: SwapState }) => {\n    if (!state.fromSymbol || !state.toSymbol) {\n        return <Heading text={\"Minimum Price\"} disabled={true} />;\n    }\n    const marketPrice =\n        state.toToken && state.trade\n            ? parseBalance(state.trade.executionPrice.toFixed(state.toToken.decimals), state.toToken.decimals)\n            : ethers.constants.Zero;\n    return (\n        <TokenInput\n            title={\"Minimum Price (\" + state.toSymbol + \"/\" + state.fromSymbol + \")\"}\n            token={\n                {\n                    ...state.toToken,\n                    balance: marketPrice\n                } as Token\n            }\n            amount={state.limitOrderPrice}\n            onAmountChanged={state.setLimitOrderPrice}\n            maxButtonText={\"MARKET\"}\n        />\n    );\n};\n\nconst LimitOrderUnsupportedNotice = () => {\n    const { placeholder } = useColors();\n    return (\n        <Notice\n            text={\"⚠️ ETH not supported for limit orders. Use WETH instead.\"}\n            color={placeholder}\n            clear={true}\n            style={{ marginVertical: Spacing.small, marginHorizontal: Spacing.tiny }}\n        />\n    );\n};\n\nconst NoPairNotice = ({ state }: { state: SwapState }) => {\n    return (\n        <Notice\n            text={state.fromSymbol + \"-\" + state.toSymbol + \" pair hasn't been created yet.\"}\n            color={\"red\"}\n            style={{ marginTop: Spacing.normal }}\n        />\n    );\n};\n\nconst TradeInfo = ({ state }: { state: SwapState }) => {\n    if (\n        (state.fromSymbol === \"ETH\" && state.toSymbol === \"WETH\") ||\n        (state.fromSymbol === \"WETH\" && state.toSymbol === \"ETH\")\n    ) {\n        return <WrapInfo state={state} />;\n    }\n    const disabled =\n        state.fromSymbol === \"\" ||\n        state.toSymbol === \"\" ||\n        isEmptyValue(state.fromAmount) ||\n        (state.orderType === \"limit\" && state.fromSymbol === \"ETH\") ||\n        (!state.loading && !state.trade);\n    return (\n        <InfoBox>\n            {state.orderType === \"limit\" ? (\n                <LimitOrderInfo state={state} />\n            ) : (\n                <SwapInfo state={state} disabled={disabled} />\n            )}\n        </InfoBox>\n    );\n};\n\nconst WrapInfo = ({ state }: { state: SwapState }) => {\n    const disabled = isEmptyValue(state.fromAmount);\n    return (\n        <InfoBox>\n            <Text style={{ fontSize: 28, marginBottom: Spacing.normal }} disabled={disabled}>\n                {disabled ? \"N/A\" : state.fromAmount + \" \" + state.toSymbol}\n            </Text>\n            <SwapControls state={state} />\n        </InfoBox>\n    );\n};\n\nconst SwapInfo = ({ state, disabled }: { state: SwapState; disabled: boolean }) => {\n    const amount = state.trade?.outputAmount?.toFixed();\n    const price = state.trade?.executionPrice?.toFixed();\n    const impact = state.trade?.priceImpact?.toFixed(2);\n    return (\n        <View>\n            <AmountMeta amount={amount} suffix={state.toSymbol} disabled={disabled} />\n            <Meta\n                label={\"Price\"}\n                text={price}\n                suffix={state.toSymbol + \"  = 1 \" + state.fromSymbol}\n                disabled={disabled}\n            />\n            <Meta label={\"Price Impact\"} text={impact} suffix={\"%\"} disabled={disabled} />\n            <Meta label={\"Fee (0.30%)\"} text={state.swapFee} suffix={state.fromSymbol} disabled={disabled} />\n            <SwapControls state={state} />\n        </View>\n    );\n};\n\n// tslint:disable-next-line:max-func-body-length\nconst SwapControls = ({ state }: { state: SwapState }) => {\n    const [error, setError] = useState<MetamaskError>({});\n    useAsyncEffect(() => setError({}), [state.fromSymbol, state.toSymbol, state.fromAmount]);\n    const approveRequired = state.fromSymbol !== \"ETH\" && !state.fromTokenAllowed;\n    return (\n        <View style={{ marginTop: Spacing.normal }}>\n            {!state.fromToken ||\n            !state.toToken ||\n            isEmptyValue(state.fromAmount) ||\n            (!state.loading && !state.trade) ? (\n                <SwapButton state={state} onError={setError} disabled={true} />\n            ) : parseBalance(state.fromAmount, state.fromToken.decimals).gt(state.fromToken.balance) ? (\n                <InsufficientBalanceButton symbol={state.fromSymbol} />\n            ) : state.fromSymbol === \"WETH\" && state.toSymbol === \"ETH\" ? (\n                <UnwrapButton state={state} onError={setError} />\n            ) : state.fromSymbol === \"ETH\" && state.toSymbol === \"WETH\" ? (\n                <WrapButton state={state} onError={setError} />\n            ) : state.unsupported ? (\n                <UnsupportedButton state={state} />\n            ) : state.loading || !state.trade ? (\n                <FetchingButton />\n            ) : (\n                <>\n                    <ApproveButton\n                        token={state.fromToken}\n                        spender={ROUTER}\n                        onSuccess={() => state.setFromTokenAllowed(true)}\n                        onError={setError}\n                        hidden={!approveRequired}\n                    />\n                    <SwapButton state={state} onError={setError} disabled={approveRequired} />\n                </>\n            )}\n            {error.message && error.code !== 4001 && <ErrorMessage error={error} />}\n        </View>\n    );\n};\n\nconst SwapButton = ({ state, onError, disabled }: { state: SwapState; onError: (e) => void; disabled: boolean }) => {\n    const onPress = useCallback(() => {\n        onError({});\n        state.onSwap().catch(onError);\n    }, [state.onSwap, onError]);\n    return (\n        <Button\n            title={state.fromSymbol && state.toSymbol ? \"Swap \" + state.fromSymbol + \"-\" + state.toSymbol : \"Swap\"}\n            disabled={disabled}\n            loading={state.swapping}\n            onPress={onPress}\n        />\n    );\n};\n\nconst WrapButton = ({ state, onError }: { state: SwapState; onError: (e) => void }) => {\n    const onPress = useCallback(async () => {\n        onError({});\n        state.onWrap().catch(onError);\n    }, []);\n    return <Button title={\"Wrap\"} loading={state.wrapping} onPress={onPress} />;\n};\n\nconst UnwrapButton = ({ state, onError }: { state: SwapState; onError: (e) => void }) => {\n    const onPress = useCallback(async () => {\n        onError({});\n        state.onUnwrap().catch(onError);\n    }, []);\n    return <Button title={\"Unwrap\"} loading={state.unwrapping} onPress={onPress} />;\n};\n\nconst LimitOrderInfo = ({ state }: { state: SwapState }) => {\n    const d = !state.trade?.executionPrice;\n    return (\n        <View>\n            <Text\n                disabled={isEmptyValue(state.limitOrderReturn)}\n                style={{ fontSize: 28, marginBottom: Spacing.normal }}>\n                {isEmptyValue(state.limitOrderReturn) ? \"N/A\" : state.limitOrderReturn + \" \" + state.toSymbol}\n            </Text>\n            <Meta\n                label={\"Market Price\"}\n                text={state.trade?.executionPrice?.toFixed(8) || undefined}\n                suffix={state.toSymbol + \" / \" + state.fromSymbol + \"\"}\n                disabled={d}\n            />\n            <Meta label={\"Relayer Fee (0.20%)\"} text={state.limitOrderFee} suffix={state.fromSymbol} disabled={d} />\n            <Meta label={\"Swap Fee (0.30%)\"} text={state.limitOrderSwapFee} suffix={state.fromSymbol} disabled={d} />\n            <Meta label={\"Expiration\"} text={\"24 Hours From Now\"} disabled={d} />\n            <LimitOrderControls state={state} />\n        </View>\n    );\n};\n\n// tslint:disable-next-line:max-func-body-length\nconst LimitOrderControls = ({ state }: { state: SwapState }) => {\n    const { getTokenAllowance } = useContext(EthersContext);\n    const [error, setError] = useState<MetamaskError>({});\n    const [allowed, setAllowed] = useState<boolean>();\n    useAsyncEffect(() => setError({}), [state.fromSymbol, state.toSymbol, state.fromAmount]);\n    useDelayedEffect(\n        async () => {\n            if (state.fromToken && !isEmptyValue(state.fromAmount)) {\n                const fromAmount = parseBalance(state.fromAmount, state.fromToken.decimals);\n                const allowance = await getTokenAllowance(state.fromToken.address, SETTLEMENT);\n                setAllowed(ethers.BigNumber.from(allowance).gte(fromAmount));\n            }\n        },\n        500,\n        [state.fromToken, state.fromAmount]\n    );\n    const disabled =\n        state.orderType === \"market\" ||\n        state.toSymbol === \"\" ||\n        !state.fromToken ||\n        !state.toToken ||\n        isEmptyValue(state.fromAmount) ||\n        !state.priceInETH ||\n        parseBalance(state.fromAmount, state.fromToken!.decimals).gt(state.priceInETH.mul(10)) ||\n        !state.trade ||\n        isEmptyValue(state.limitOrderPrice);\n    return (\n        <View style={{ marginTop: Spacing.normal }}>\n            {disabled ? (\n                <PlaceOrderButton state={state} onError={setError} disabled={true} />\n            ) : parseBalance(state.fromAmount, state.fromToken!.decimals).gt(state.fromToken!.balance) ? (\n                <InsufficientBalanceButton symbol={state.fromSymbol} />\n            ) : !Fraction.parse(state.limitOrderPrice).gt(\n                  Fraction.parse(state.trade!.executionPrice.toFixed(state.toToken!.decimals))\n              ) ? (\n                <PriceTooLowButton />\n            ) : state.unsupported ? (\n                <UnsupportedButton state={state} />\n            ) : state.loading || !state.trade ? (\n                <FetchingButton />\n            ) : (\n                <>\n                    <ApproveButton\n                        token={state.fromToken!}\n                        spender={SETTLEMENT}\n                        onSuccess={() => setAllowed(true)}\n                        onError={setError}\n                        hidden={allowed}\n                    />\n                    <PlaceOrderButton state={state} onError={setError} disabled={!allowed} />\n                </>\n            )}\n            {error.message && error.code !== 4001 && <ErrorMessage error={error} />}\n        </View>\n    );\n};\n\nconst PriceTooLowButton = () => {\n    return <Button title={\"Set Price Greater Than Market\"} disabled={true} />;\n};\n\nconst PlaceOrderButton = ({\n    state,\n    onError,\n    disabled\n}: {\n    state: SwapState;\n    onError: (e) => void;\n    disabled: boolean;\n}) => {\n    const goToLimitOrders = useLinker(\"/swap/my-orders\", \"LimitOrders\");\n    const onPress = useCallback(async () => {\n        onError({});\n        try {\n            await state.onCreateOrder();\n            goToLimitOrders();\n        } catch (e) {\n            onError(e);\n        }\n    }, [state.onCreateOrder, goToLimitOrders, onError]);\n    return <Button title={\"Place Limit Order\"} disabled={disabled} loading={state.creatingOrder} onPress={onPress} />;\n};\n\nexport default SwapScreen;\n"],"sourceRoot":""}