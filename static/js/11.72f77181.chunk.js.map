{"version":3,"sources":["src/components/InfoBox.tsx","src/components/Border.tsx","src/hooks/useLPTokensState.tsx","src/components/LPTokenSelect.tsx","src/hooks/useRemoveLiquidityState.tsx","src/screens/RemoveLiquidityScreen.tsx"],"names":["InfoBox","props","darkMode","useContext","GlobalContext","useColors","backgroundLight","borderDark","border","useStyles","style","color","backgroundColor","marginTop","Spacing","normal","small","padding","tiny","Border","height","width","marginBottom","useLPTokensState","mode","state","useTokenPairState","EthersContext","provider","address","tokens","useState","lastTimeRefreshed","setLastTimeRefreshed","loading","setLoading","lpTokens","setLPTokens","selectedLPToken","setSelectedLPToken","selectedLPTokenAllowed","setSelectedLPTokenAllowed","pair","setPair","amount","setAmount","getPair","useSDK","updateLPTokens","a","async","fetchPools","fetchMyLPTokens","fetchMyUniswapLPTokens","data","useEffect","useAsyncEffect","undefined","tokenA","tokenB","useDelayedOnBlockEffect","block","length","fromToken","toToken","updateLastTimeRefreshed","Date","now","LPTokenList","emptyText","filter","Item","renderItem","useCallback","item","key","token","selected","onSelectToken","sort","t1","t2","totalDeposited","ethers","constants","Zero","sub","div","pow10","toNumber","amountDeposited","gt","balance","Loading","text","FlatList","keyExtractor","EmptyList","View","margin","Text","disabled","textAlign","LPTokenItem","textMedium","formatBalance","decimals","onPress","Selectable","containerStyle","ITEM_SEPARATOR_HEIGHT","FlexView","alignItems","TokenLogo","replaceWETH","marginLeft","medium","caption","symbol","flex","light","LPTokenSelect","Expandable","title","expanded","onExpand","useRemoveLiquidityState","signer","getTokenAllowance","updateTokens","removeLiquidity","removeLiquidityETH","removing","setRemoving","setFromSymbol","setToSymbol","minAllowance","BigNumber","from","pow","ROUTER","allowance","gte","totalSupply","liquidityToken","fromReserve","parseCurrencyAmount","reserveOf","convertToken","toReserve","setFromAmount","parseBalance","mul","toString","setToAmount","onRemove","fromAmount","toAmount","liquidity","fromSymbol","toSymbol","amountToRemove","amountToRemoveETH","tx","wait","RemoveLiquidity","large","AmountInput","TokenInput","onAmountChanged","Heading","AmountInfo","Meta","label","Controls","error","setError","approveRequired","isEmptyValue","onError","InsufficientBalanceButton","FetchingButton","ApproveButton","spender","onSuccess","hidden","message","code","ErrorMessage","RemoveButton","catch","Button","RemoveLiquidityScreen","Screen","Container","BackgroundImage","Content","Title","Platform","OS","WebFooter"],"mappings":"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","file":"static/js/11.72f77181.chunk.js","sourcesContent":["import React, { PropsWithChildren, useContext } from \"react\";\nimport { View, ViewProps } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport { GlobalContext } from \"../context/GlobalContext\";\nimport useColors from \"../hooks/useColors\";\nimport useStyles from \"../hooks/useStyles\";\n\nconst InfoBox = (props: PropsWithChildren<ViewProps>) => {\n    const { darkMode } = useContext(GlobalContext);\n    const { backgroundLight, borderDark } = useColors();\n    const { border } = useStyles();\n    return (\n        <View\n            {...props}\n            style={[\n                {\n                    ...border({ color: darkMode ? borderDark : backgroundLight }),\n                    backgroundColor: backgroundLight,\n                    marginTop: Spacing.normal + Spacing.small,\n                    padding: Spacing.small + Spacing.tiny\n                },\n                props.style\n            ]}\n        />\n    );\n};\n\nexport default InfoBox;\n","import React from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\n\nconst Border = () => {\n    const { border } = useColors();\n    return (\n        <View\n            style={{\n                height: 1,\n                width: \"100%\",\n                backgroundColor: border,\n                marginTop: Spacing.small,\n                marginBottom: Spacing.small + Spacing.tiny\n            }}\n        />\n    );\n};\n\nexport default Border;\n","import { useContext, useEffect, useState } from \"react\";\n\nimport { Pair } from \"@sushiswap/sdk\";\nimport useAsyncEffect from \"use-async-effect\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport LPToken from \"../types/LPToken\";\nimport { fetchMyLPTokens, fetchMyUniswapLPTokens, fetchPools } from \"../utils/fetch-utils\";\nimport useDelayedOnBlockEffect from \"./useDelayedOnBlockEffect\";\nimport useSDK from \"./useSDK\";\nimport useTokenPairState, { TokenPairState } from \"./useTokenPairState\";\n\nexport interface LPTokensState extends TokenPairState {\n    updateLPTokens: () => Promise<void>;\n    lastTimeRefreshed: number;\n    updateLastTimeRefreshed: () => void;\n    lpTokens: LPToken[];\n    selectedLPToken?: LPToken;\n    setSelectedLPToken: (token?: LPToken) => void;\n    selectedLPTokenAllowed: boolean;\n    setSelectedLPTokenAllowed: (allowed: boolean) => void;\n    pair?: Pair;\n    amount: string;\n    setAmount: (amount: string) => void;\n}\n\ntype Mode = \"pools\" | \"my-lp-tokens\" | \"my-uniswap-lp-tokens\";\n\n// tslint:disable-next-line:max-func-body-length\nconst useLPTokensState: (mode: Mode) => LPTokensState = mode => {\n    const state = useTokenPairState();\n    const { provider, address, tokens } = useContext(EthersContext);\n    const [lastTimeRefreshed, setLastTimeRefreshed] = useState(0);\n    const [loading, setLoading] = useState(true);\n    const [lpTokens, setLPTokens] = useState<LPToken[]>([]);\n    const [selectedLPToken, setSelectedLPToken] = useState<LPToken>();\n    const [selectedLPTokenAllowed, setSelectedLPTokenAllowed] = useState(false);\n    const [pair, setPair] = useState<Pair>();\n    const [amount, setAmount] = useState(\"\");\n    const { getPair } = useSDK();\n\n    const updateLPTokens = async () => {\n        if (address && provider) {\n            try {\n                const data = await (mode === \"pools\"\n                    ? fetchPools(address, provider)\n                    : mode === \"my-lp-tokens\"\n                    ? fetchMyLPTokens(address, tokens, provider)\n                    : fetchMyUniswapLPTokens(address, tokens, provider));\n                if (data) {\n                    setLPTokens(data);\n                }\n            } finally {\n                setLoading(false);\n            }\n        }\n    };\n\n    useEffect(() => {\n        if (!selectedLPToken) {\n            setAmount(\"\");\n        }\n    }, [selectedLPToken]);\n\n    useAsyncEffect(async () => {\n        setLoading(true);\n        setPair(undefined);\n        if (selectedLPToken && provider) {\n            try {\n                setPair(await getPair(selectedLPToken.tokenA, selectedLPToken.tokenB, provider));\n            } catch (e) {\n            } finally {\n                setLoading(false);\n            }\n        } else {\n            setLoading(false);\n        }\n    }, [selectedLPToken, provider]);\n\n    useDelayedOnBlockEffect(\n        async block => {\n            if (address && (mode === \"pools\" || tokens.length > 0)) {\n                if (!block) {\n                    setLoading(true);\n                }\n                await updateLPTokens();\n            }\n        },\n        () => \"updateLPTokens()\",\n        [tokens.length, address, lastTimeRefreshed],\n        0\n    );\n\n    return {\n        ...state,\n        fromToken: state.fromToken || selectedLPToken?.tokenA,\n        toToken: state.toToken || selectedLPToken?.tokenB,\n        updateLPTokens,\n        loading: state.loading || loading,\n        lastTimeRefreshed,\n        updateLastTimeRefreshed: () => {\n            setLastTimeRefreshed(Date.now());\n        },\n        lpTokens,\n        selectedLPToken,\n        setSelectedLPToken,\n        selectedLPTokenAllowed,\n        setSelectedLPTokenAllowed,\n        pair,\n        amount,\n        setAmount\n    };\n};\n\nexport default useLPTokensState;\n","import React, { FC, useCallback } from \"react\";\nimport { FlatList, View, ViewStyle } from \"react-native\";\n\nimport { ethers } from \"ethers\";\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport { LPTokensState } from \"../hooks/useLPTokensState\";\nimport LPToken from \"../types/LPToken\";\nimport { formatBalance, pow10 } from \"../utils\";\nimport CheckBox from \"./CheckBox\";\nimport Expandable from \"./Expandable\";\nimport FlexView from \"./FlexView\";\nimport { ITEM_SEPARATOR_HEIGHT } from \"./ItemSeparator\";\nimport Loading from \"./Loading\";\nimport Selectable from \"./Selectable\";\nimport Text from \"./Text\";\nimport TokenLogo from \"./TokenLogo\";\n\nexport type LPTokenSelectFilter = \"balance\" | \"amountDeposited\" | \"\";\n\nexport interface LPTokenSelectProps {\n    state: LPTokensState;\n    title: string;\n    emptyText: string;\n    showFilter?: boolean;\n    filter?: LPTokenSelectFilter;\n    onFilterChanged?: (filter: LPTokenSelectFilter) => void;\n    Item: FC<LPTokenItemProps>;\n    style?: ViewStyle;\n}\n\nexport interface LPTokenItemProps {\n    token: LPToken;\n    selected: boolean;\n    filter?: LPTokenSelectFilter;\n    onSelectToken: (token: LPToken) => void;\n}\n\nconst LPTokenSelect: FC<LPTokenSelectProps> = props => {\n    const onUnselectToken = () => props.state.setSelectedLPToken();\n    return (\n        <View style={props.style}>\n            <Expandable\n                title={props.title}\n                expanded={!props.state.selectedLPToken}\n                onExpand={() => props.state.setSelectedLPToken()}>\n                <LPTokenList state={props.state} filter={props.filter} emptyText={props.emptyText} Item={props.Item} />\n            </Expandable>\n            {props.state.selectedLPToken && (\n                <LPTokenItem token={props.state.selectedLPToken} selected={true} onSelectToken={onUnselectToken} />\n            )}\n        </View>\n    );\n};\n\nconst Filter = ({ filter, onFilterChanged }) => {\n    const handler = (f: string) => () => onFilterChanged(f);\n    return (\n        <FlexView style={{ width: \"100%\", justifyContent: \"flex-end\" }}>\n            <CheckBox checked={filter === \"balance\"} onPress={handler(\"balance\")} title={\"with balance\"} />\n            <CheckBox\n                checked={filter === \"amountDeposited\"}\n                onPress={handler(\"amountDeposited\")}\n                title={\"with deposit\"}\n            />\n            <CheckBox checked={!filter} onPress={handler(\"\")} title={\"all\"} />\n        </FlexView>\n    );\n};\n\n// tslint:disable-next-line:max-func-body-length\nconst LPTokenList = ({\n    state,\n    emptyText,\n    filter,\n    Item\n}: {\n    state: LPTokensState;\n    emptyText: string;\n    filter?: LPTokenSelectFilter;\n    Item: FC<LPTokenItemProps>;\n}) => {\n    const renderItem = useCallback(\n        ({ item }) => {\n            return (\n                <Item\n                    key={item.address}\n                    token={item}\n                    selected={false}\n                    filter={filter}\n                    onSelectToken={state.setSelectedLPToken}\n                />\n            );\n        },\n        [filter, state.setSelectedLPToken]\n    );\n    let data = state.lpTokens.sort((t1, t2) => {\n        return (t2.totalDeposited || ethers.constants.Zero)\n            .sub(t1.totalDeposited || ethers.constants.Zero)\n            .div(pow10(14))\n            .toNumber();\n    });\n    if (filter === \"amountDeposited\") {\n        data = data.filter(token => token.amountDeposited?.gt(0));\n    } else if (filter === \"balance\") {\n        data = data.filter(token => token.balance.gt(0));\n    }\n    return state.loading ? (\n        <Loading />\n    ) : data.length === 0 ? (\n        <EmptyList text={emptyText} />\n    ) : (\n        <FlatList keyExtractor={item => item.address} data={data} renderItem={renderItem} />\n    );\n};\n\nconst EmptyList = ({ text }: { text: string }) => {\n    return (\n        <View style={{ margin: Spacing.normal }}>\n            <Text disabled={true} style={{ textAlign: \"center\", width: \"100%\" }}>\n                {text}\n            </Text>\n        </View>\n    );\n};\n\nexport const LPTokenItem: FC<LPTokenItemProps> = props => {\n    const { textMedium } = useColors();\n    const balance = formatBalance(props.token.balance, props.token.decimals, 8);\n    const onPress = useCallback(() => {\n        props.onSelectToken(props.token);\n    }, [props.onSelectToken, props.token]);\n    return (\n        <Selectable\n            selected={props.selected}\n            onPress={onPress}\n            containerStyle={{ marginBottom: ITEM_SEPARATOR_HEIGHT }}>\n            <FlexView style={{ alignItems: \"center\" }}>\n                <TokenLogo token={props.token.tokenA} small={true} replaceWETH={true} />\n                <TokenLogo token={props.token.tokenB} small={true} replaceWETH={true} style={{ marginLeft: 4 }} />\n                <Text medium={true} caption={true} style={{ marginLeft: Spacing.tiny }}>\n                    {props.token.tokenA.symbol}-{props.token.tokenB.symbol}\n                </Text>\n                <View style={{ flex: 1, marginLeft: Spacing.tiny }}>\n                    {/*<Text note={true} style={{ textAlign: \"right\", color: textLight }}>*/}\n                    {/*    My Balance*/}\n                    {/*</Text>*/}\n                    <Text caption={true} light={true} style={{ textAlign: \"right\", color: textMedium }}>\n                        {balance}\n                    </Text>\n                </View>\n            </FlexView>\n        </Selectable>\n    );\n};\n\nexport default LPTokenSelect;\n","import { useCallback, useContext, useState } from \"react\";\n\nimport { ethers } from \"ethers\";\nimport useAsyncEffect from \"use-async-effect\";\nimport { ROUTER } from \"../constants/contracts\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport { convertToken, formatBalance, parseBalance, parseCurrencyAmount } from \"../utils\";\nimport useLPTokensState, { LPTokensState } from \"./useLPTokensState\";\nimport useSDK from \"./useSDK\";\n\nexport interface RemoveLiquidityState extends LPTokensState {\n    onRemove: () => Promise<void>;\n    removing: boolean;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst useRemoveLiquidityState: () => RemoveLiquidityState = () => {\n    const state = useLPTokensState(\"my-lp-tokens\");\n    const { signer, getTokenAllowance, updateTokens } = useContext(EthersContext);\n    const { removeLiquidity, removeLiquidityETH } = useSDK();\n    const [loading, setLoading] = useState(false);\n    const [removing, setRemoving] = useState(false);\n\n    useAsyncEffect(async () => {\n        if (signer && state.selectedLPToken) {\n            state.setFromSymbol(state.selectedLPToken.tokenA.symbol);\n            state.setToSymbol(state.selectedLPToken.tokenB.symbol);\n\n            setLoading(true);\n            state.setSelectedLPTokenAllowed(false);\n            try {\n                const minAllowance = ethers.BigNumber.from(2)\n                    .pow(96)\n                    .sub(1);\n                const allowance = await getTokenAllowance(state.selectedLPToken.address, ROUTER);\n                state.setSelectedLPTokenAllowed(ethers.BigNumber.from(allowance).gte(minAllowance));\n            } finally {\n                setLoading(false);\n            }\n        }\n    }, [signer, state.selectedLPToken]);\n\n    // tslint:disable-next-line:max-func-body-length\n    useAsyncEffect(async () => {\n        if (\n            state.selectedLPToken &&\n            state.selectedLPToken.totalSupply &&\n            state.pair &&\n            state.fromToken &&\n            state.toToken\n        ) {\n            if (state.pair.liquidityToken.address === state.selectedLPToken.address) {\n                const fromReserve = parseCurrencyAmount(\n                    state.pair.reserveOf(convertToken(state.fromToken)),\n                    state.fromToken.decimals\n                );\n                const toReserve = parseCurrencyAmount(\n                    state.pair.reserveOf(convertToken(state.toToken)),\n                    state.toToken.decimals\n                );\n                state.setFromAmount(\n                    formatBalance(\n                        parseBalance(state.amount, state.selectedLPToken.decimals)\n                            .mul(fromReserve)\n                            .div(state.selectedLPToken.totalSupply)\n                            .toString(),\n                        state.selectedLPToken.tokenA.decimals\n                    )\n                );\n                state.setToAmount(\n                    formatBalance(\n                        parseBalance(state.amount, state.selectedLPToken.decimals)\n                            .mul(toReserve)\n                            .div(state.selectedLPToken.totalSupply)\n                            .toString(),\n                        state.selectedLPToken.tokenB.decimals\n                    )\n                );\n            }\n        }\n    }, [state.selectedLPToken, state.amount, state.pair, state.fromToken, state.toToken, signer]);\n\n    const onRemove = useCallback(async () => {\n        if (state.fromAmount && state.toAmount && state.selectedLPToken && state.amount && signer) {\n            setRemoving(true);\n            try {\n                const fromAmount = parseBalance(state.fromAmount, state.fromToken!.decimals);\n                const toAmount = parseBalance(state.toAmount, state.toToken!.decimals);\n                const liquidity = parseBalance(state.amount, state.selectedLPToken.decimals);\n                if (state.fromSymbol === \"WETH\" || state.toSymbol === \"WETH\") {\n                    const token = state.fromSymbol === \"WETH\" ? state.toToken! : state.fromToken!;\n                    const amountToRemove = state.fromSymbol === \"WETH\" ? toAmount : fromAmount;\n                    const amountToRemoveETH = state.fromSymbol === \"WETH\" ? fromAmount : toAmount;\n                    const tx = await removeLiquidityETH(token, liquidity, amountToRemove, amountToRemoveETH, signer);\n                    await tx.wait();\n                } else {\n                    const tx = await removeLiquidity(\n                        state.fromToken!,\n                        state.toToken!,\n                        liquidity,\n                        fromAmount,\n                        toAmount,\n                        signer\n                    );\n                    await tx.wait();\n                }\n                await updateTokens();\n                await state.updateLPTokens();\n                state.setSelectedLPToken(undefined);\n            } finally {\n                setRemoving(false);\n            }\n        }\n    }, [state.fromAmount, state.toAmount, state.selectedLPToken, state.amount, signer, state.updateLPTokens]);\n\n    return {\n        ...state,\n        loading: state.loading || loading,\n        onRemove,\n        removing\n    };\n};\n\nexport default useRemoveLiquidityState;\n","import React, { useCallback, useState } from \"react\";\nimport { Platform, View } from \"react-native\";\n\nimport useAsyncEffect from \"use-async-effect\";\nimport ApproveButton from \"../components/ApproveButton\";\nimport BackgroundImage from \"../components/BackgroundImage\";\nimport Border from \"../components/Border\";\nimport Button from \"../components/Button\";\nimport Container from \"../components/Container\";\nimport Content from \"../components/Content\";\nimport ErrorMessage from \"../components/ErrorMessage\";\nimport FetchingButton from \"../components/FetchingButton\";\nimport Heading from \"../components/Heading\";\nimport InfoBox from \"../components/InfoBox\";\nimport InsufficientBalanceButton from \"../components/InsufficientBalanceButton\";\nimport LPTokenSelect, { LPTokenItem } from \"../components/LPTokenSelect\";\nimport Meta from \"../components/Meta\";\nimport Text from \"../components/Text\";\nimport Title from \"../components/Title\";\nimport TokenInput from \"../components/TokenInput\";\nimport WebFooter from \"../components/web/WebFooter\";\nimport { LiquiditySubMenu } from \"../components/web/WebSubMenu\";\nimport { ROUTER } from \"../constants/contracts\";\nimport { Spacing } from \"../constants/dimension\";\nimport useRemoveLiquidityState, { RemoveLiquidityState } from \"../hooks/useRemoveLiquidityState\";\nimport MetamaskError from \"../types/MetamaskError\";\nimport { isEmptyValue, parseBalance } from \"../utils\";\nimport Screen from \"./Screen\";\n\nconst RemoveLiquidityScreen = () => {\n    return (\n        <Screen>\n            <Container>\n                <BackgroundImage />\n                <Content>\n                    <Title text={\"Remove Liquidity\"} />\n                    <Text light={true}>Scan your liquidity and remove one if needed.</Text>\n                    <RemoveLiquidity />\n                </Content>\n                {Platform.OS === \"web\" && <WebFooter />}\n            </Container>\n            <LiquiditySubMenu />\n        </Screen>\n    );\n};\n\nconst RemoveLiquidity = () => {\n    const state = useRemoveLiquidityState();\n    return (\n        <View style={{ marginTop: Spacing.large }}>\n            <LPTokenSelect\n                state={state}\n                title={\"Your Liquidity\"}\n                emptyText={\"You don't have any liquidity.\"}\n                Item={LPTokenItem}\n            />\n            <Border />\n            <AmountInput state={state} />\n            <AmountInfo state={state} />\n        </View>\n    );\n};\n\nconst AmountInput = ({ state }: { state: RemoveLiquidityState }) => {\n    if (!state.selectedLPToken) {\n        return <Heading text={\"Amount of Tokens\"} disabled={true} />;\n    }\n    return (\n        <TokenInput\n            title={\"Amount of Tokens\"}\n            token={state.selectedLPToken}\n            amount={state.amount}\n            onAmountChanged={state.setAmount}\n        />\n    );\n};\n\nconst AmountInfo = ({ state }: { state: RemoveLiquidityState }) => {\n    const disabled = !state.selectedLPToken || !state.fromToken || !state.toToken;\n    return (\n        <InfoBox>\n            <Meta\n                label={state.fromToken ? \"Amount of \" + state.fromToken.symbol : \"Amount of Token 1\"}\n                text={state.fromAmount}\n                disabled={disabled}\n            />\n            <Meta\n                label={state.toToken ? \"Amount of \" + state.toToken.symbol : \"Amount of Token 2\"}\n                text={state.toAmount}\n                disabled={disabled}\n            />\n            <Controls state={state} />\n        </InfoBox>\n    );\n};\n\n// tslint:disable-next-line:max-func-body-length\nconst Controls = ({ state }: { state: RemoveLiquidityState }) => {\n    const [error, setError] = useState<MetamaskError>({});\n    useAsyncEffect(() => setError({}), [state.fromSymbol, state.toSymbol, state.fromAmount]);\n    const approveRequired = !state.selectedLPTokenAllowed;\n    const disabled = approveRequired || isEmptyValue(state.amount);\n    return (\n        <View style={{ marginTop: Spacing.normal }}>\n            {!state.selectedLPToken || isEmptyValue(state.amount) ? (\n                <RemoveButton state={state} onError={setError} disabled={true} />\n            ) : parseBalance(state.amount, state.selectedLPToken.decimals).gt(state.selectedLPToken.balance) ? (\n                <InsufficientBalanceButton symbol={state.selectedLPToken.symbol} />\n            ) : state.loading || !state.pair ? (\n                <FetchingButton />\n            ) : (\n                <>\n                    <ApproveButton\n                        token={state.selectedLPToken}\n                        spender={ROUTER}\n                        onSuccess={() => state.setSelectedLPTokenAllowed(true)}\n                        onError={setError}\n                        hidden={!approveRequired}\n                    />\n                    <RemoveButton state={state} onError={setError} disabled={disabled} />\n                </>\n            )}\n            {error.message && error.code !== 4001 && <ErrorMessage error={error} />}\n        </View>\n    );\n};\n\nconst RemoveButton = ({\n    state,\n    onError,\n    disabled\n}: {\n    state: RemoveLiquidityState;\n    onError: (e) => void;\n    disabled: boolean;\n}) => {\n    const onPress = useCallback(() => {\n        onError({});\n        state.onRemove().catch(onError);\n    }, [state.onRemove, onError]);\n    return <Button title={\"Remove Liquidity\"} disabled={disabled} loading={state.removing} onPress={onPress} />;\n};\n\nexport default RemoveLiquidityScreen;\n"],"sourceRoot":""}