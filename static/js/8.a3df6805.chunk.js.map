{"version":3,"sources":["src/components/InfoBox.tsx","src/components/Notice.tsx","src/components/Border.tsx","src/hooks/useDelayedEffect.tsx","src/components/TokenAmount.tsx","src/components/TokenSymbol.tsx","src/components/UnsupportedButton.tsx","src/components/TokenName.tsx","src/components/TokenSearch.tsx","src/components/TokenSelect.tsx","src/hooks/useAddLiquidityState.tsx","src/screens/LiquidityScreen.tsx"],"names":["InfoBox","props","backgroundLight","useColors","border","useStyles","style","color","backgroundColor","marginTop","Spacing","normal","small","padding","tiny","Notice","borderStyle","borderColor","clear","paddingHorizontal","note","text","buttonText","onPressButton","title","type","size","fontWeight","onPress","titleStyle","buttonStyle","paddingVertical","alignSelf","Border","height","width","marginBottom","handles","useDelayedEffect","effect","timeout","inputs","key","toString","useAsyncEffect","handle","setTimeout","clearTimeout","TokenAmount","caption","disabled","formatBalance","amount","token","balance","decimals","TokenSymbol","medium","marginLeft","IS_DESKTOP","symbol","UnsupportedButton","state","fromSymbol","toSymbol","TokenName","Text","numberOfLines","ellipsizeMode","name","Loading","ActivityIndicator","position","right","bottom","TokenItem","accent","useCallback","onSelectToken","Selectable","selected","containerStyle","ITEM_SEPARATOR_HEIGHT","FlexView","alignItems","TokenLogo","View","flex","Button","duplicate","TokenSearch","useContext","EthersContext","provider","signer","tokens","useState","tokenToAdd","setTokenToAdd","loading","setLoading","findIndex","t","address","useEffect","undefined","a","async","trim","ethers","utils","isAddress","findOrFetchToken","Input","value","onChangeText","placeholder","autoFocus","inputStyle","marginHorizontal","fontSize","inputContainerStyle","borderBottomWidth","marginRight","labelStyle","paddingTop","paddingBottom","onAddToken","TokenList","loadingTokens","renderItem","item","data","useMemo","filter","hidden","sort","t1","t2","isZero","localeCompare","length","FlatList","keyExtractor","EmptyList","margin","textAlign","selectable","TokenSelect","addCustomToken","search","setSearch","query","setQuery","find","toLowerCase","Expandable","expanded","onExpand","onChangeSymbol","hide","includes","useAddLiquidityState","useTokenPairState","updateTokens","pair","setPair","adding","setAdding","useSDK","getPair","addLiquidity","addLiquidityETH","useDelayedOnBlockEffect","block","fromToken","toToken","onAdd","fromAmount","toAmount","parseBalance","amountETH","tx","wait","setFromSymbol","AddLiquidity","large","ItemSeparator","FromTokenSelect","customTokens","ToTokenSelect","setToSymbol","Heading","FromTokenInput","TokenInput","onAmountChanged","newAmount","setFromAmount","priceOf","convertToken","quote","convertAmount","toExact","setToAmount","isEmptyValue","hideMaxButton","ToTokenInput","PriceInfo","FirstProviderInfo","green","noAmount","initialPrice","Fraction","from","price","PairPriceInfo","setAmount","textDark","textLight","calculateAmountOfLPTokenMinted","minted","toFixed","PriceMeta","Meta","label","suffix","Controls","error","setError","fromApproveRequired","fromTokenAllowed","toApproveRequired","toTokenAllowed","onError","FetchingButton","gt","InsufficientBalanceButton","ApproveButton","spender","ROUTER","onSuccess","setFromTokenAllowed","setToTokenAllowed","message","code","ErrorMessage","SupplyButton","goToRemoveLiquidity","useLinker","LiquidityScreen","Screen","Container","Content","Title","light","Platform","OS","WebFooter"],"mappings":"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","file":"static/js/8.a3df6805.chunk.js","sourcesContent":["import React, { PropsWithChildren } from \"react\";\nimport { View, ViewProps } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport useStyles from \"../hooks/useStyles\";\n\nconst InfoBox = (props: PropsWithChildren<ViewProps>) => {\n    const { backgroundLight } = useColors();\n    const { border } = useStyles();\n    return (\n        <View\n            {...props}\n            style={[\n                {\n                    ...border({ color: backgroundLight }),\n                    backgroundColor: backgroundLight,\n                    marginTop: Spacing.normal + Spacing.small,\n                    padding: Spacing.small + Spacing.tiny\n                },\n                props.style\n            ]}\n        />\n    );\n};\n\nexport default InfoBox;\n","import React from \"react\";\nimport { View, ViewStyle } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useStyles from \"../hooks/useStyles\";\nimport Button from \"./Button\";\nimport Text from \"./Text\";\n\nexport interface NoticeProps {\n    text: string;\n    clear?: boolean;\n    color?: string;\n    buttonText?: string;\n    onPressButton?: () => void;\n    style?: ViewStyle;\n}\n\nconst Notice = (props: NoticeProps) => {\n    const { border } = useStyles();\n    const borderStyle = border({ color: props.color });\n    const color = props.color || borderStyle.borderColor;\n    return (\n        <View style={[props.clear ? { paddingHorizontal: Spacing.tiny } : borderStyle, props.style]}>\n            <Text\n                note={true}\n                style={{\n                    color\n                }}>\n                {props.text}\n            </Text>\n            {props.buttonText && props.onPressButton && (\n                <Button\n                    title={props.buttonText}\n                    type={\"clear\"}\n                    size={\"small\"}\n                    fontWeight={\"bold\"}\n                    onPress={props.onPressButton}\n                    titleStyle={{ color }}\n                    buttonStyle={{ paddingHorizontal: 0, paddingVertical: 0 }}\n                    style={{ alignSelf: \"flex-end\", marginTop: Spacing.tiny }}\n                />\n            )}\n        </View>\n    );\n};\n\nexport default Notice;\n","import React from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\n\nconst Border = () => {\n    const { border } = useColors();\n    return (\n        <View\n            style={{\n                height: 1,\n                width: \"100%\",\n                backgroundColor: border,\n                marginTop: Spacing.small,\n                marginBottom: Spacing.small + Spacing.tiny\n            }}\n        />\n    );\n};\n\nexport default Border;\n","import useAsyncEffect from \"use-async-effect\";\n\nconst handles = {};\n\nconst useDelayedEffect = (\n    effect: (isMounted: () => boolean) => unknown | Promise<unknown>,\n    timeout: number,\n    inputs?: any[]\n) => {\n    const key = effect.toString();\n    useAsyncEffect<number>(\n        () => {\n            const handle = setTimeout(effect, timeout);\n            handles[key] = handle;\n            return handle;\n        },\n        handle => {\n            clearTimeout(handle);\n        },\n        inputs\n    );\n};\nexport default useDelayedEffect;\n","import React from \"react\";\nimport { TextStyle } from \"react-native\";\n\nimport { ethers } from \"ethers\";\nimport Token from \"../types/Token\";\nimport { formatBalance } from \"../utils\";\nimport Text from \"./Text\";\n\nconst TokenAmount = (props: { token: Token; amount?: ethers.BigNumber; disabled?: boolean; style?: TextStyle }) => (\n    <Text caption={true} disabled={props.disabled} style={props.style}>\n        {formatBalance(props.amount || props.token.balance, props.token.decimals, 8)}\n    </Text>\n);\n\nexport default TokenAmount;\n","import React from \"react\";\n\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport Token from \"../types/Token\";\nimport Text from \"./Text\";\n\nconst TokenSymbol = (props: { token: Token; disabled?: boolean }) => (\n    <Text medium={true} caption={true} disabled={props.disabled} style={{ marginLeft: Spacing.tiny }}>\n        {IS_DESKTOP ? props.token.symbol : \"\"}\n    </Text>\n);\n\nexport default TokenSymbol;\n","import React from \"react\";\n\nimport { TokenPairState } from \"../hooks/useTokenPairState\";\nimport Button from \"./Button\";\n\nconst UnsupportedButton = ({ state }: { state: TokenPairState }) => {\n    return <Button title={state.fromSymbol + \"-\" + state.toSymbol + \" Not Supported\"} disabled={true} />;\n};\n\nexport default UnsupportedButton;\n","import React from \"react\";\n\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport Token from \"../types/Token\";\nimport Text from \"./Text\";\n\nconst TokenName = (props: { token: Token; disabled?: boolean }) => (\n    <Text\n        caption={true}\n        numberOfLines={1}\n        ellipsizeMode={\"tail\"}\n        style={{ marginLeft: Spacing.small, width: 180 }}\n        disabled={props.disabled}>\n        {IS_DESKTOP ? props.token.name : props.token.symbol}\n    </Text>\n);\n\nexport default TokenName;\n","import React, { FC, useCallback, useContext, useEffect, useState } from \"react\";\nimport { ActivityIndicator, View } from \"react-native\";\n\nimport { ethers } from \"ethers\";\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport useColors from \"../hooks/useColors\";\nimport useDelayedEffect from \"../hooks/useDelayedEffect\";\nimport useStyles from \"../hooks/useStyles\";\nimport Token from \"../types/Token\";\nimport { findOrFetchToken } from \"../utils/fetch-utils\";\nimport Button from \"./Button\";\nimport FlexView from \"./FlexView\";\nimport Input from \"./Input\";\nimport { ITEM_SEPARATOR_HEIGHT } from \"./ItemSeparator\";\nimport Selectable from \"./Selectable\";\nimport TokenLogo from \"./TokenLogo\";\nimport TokenName from \"./TokenName\";\n\nexport interface TokenSearchProps {\n    tokens?: Token[];\n    text: string;\n    onChangeText: (text: string) => void;\n    onAddToken?: (token: Token) => void;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst TokenSearch: FC<TokenSearchProps> = props => {\n    const { border } = useStyles();\n    const { provider, signer, tokens } = useContext(EthersContext);\n    const [tokenToAdd, setTokenToAdd] = useState<Token>();\n    const [loading, setLoading] = useState(false);\n    const duplicate = !!tokenToAdd && tokens.findIndex(t => t.address === tokenToAdd.address) !== -1;\n    if (!props.tokens) return <View />;\n    useEffect(() => {\n        if (props.text === \"\") {\n            setLoading(false);\n            setTokenToAdd(undefined);\n        }\n    }, [props.text]);\n    useDelayedEffect(\n        async () => {\n            const address = props.text.trim();\n            if (provider && signer && ethers.utils.isAddress(address)) {\n                setLoading(true);\n                try {\n                    const token = await findOrFetchToken(provider, address);\n                    if (token.name && token.symbol && token.decimals) {\n                        setTokenToAdd(token as Token);\n                    }\n                } finally {\n                    setLoading(false);\n                }\n            }\n        },\n        300,\n        [provider, signer, props.text]\n    );\n    return (\n        <View>\n            <FlexView style={{ marginBottom: Spacing.small }}>\n                <Input\n                    value={props.text}\n                    onChangeText={props.onChangeText}\n                    placeholder={\"Token name, symbol or address\"}\n                    autoFocus={IS_DESKTOP}\n                    inputStyle={{ marginHorizontal: Spacing.tiny, fontSize: props.text ? 20 : 16 }}\n                    inputContainerStyle={{ borderBottomWidth: 0, marginRight: loading ? 32 : 0 }}\n                    labelStyle={{ height: 0 }}\n                    containerStyle={{\n                        ...border(),\n                        paddingHorizontal: Spacing.tiny,\n                        paddingTop: 12,\n                        paddingBottom: 0\n                    }}\n                />\n                {props.onAddToken && loading && <Loading />}\n            </FlexView>\n            {props.onAddToken && tokenToAdd && (\n                <TokenItem token={tokenToAdd} selected={true} onSelectToken={props.onAddToken} duplicate={duplicate} />\n            )}\n        </View>\n    );\n};\n\nconst Loading = () => <ActivityIndicator size={\"small\"} style={{ position: \"absolute\", right: 16, bottom: 16 }} />;\n\nconst TokenItem = (props: {\n    token: Token;\n    selected: boolean;\n    onSelectToken: (token: Token) => void;\n    duplicate: boolean;\n}) => {\n    const { accent } = useColors();\n    const onPress = useCallback(() => {\n        props.onSelectToken(props.token);\n    }, [props.onSelectToken, props.token]);\n    return (\n        <Selectable\n            selected={false}\n            disabled={true}\n            onPress={onPress}\n            containerStyle={{\n                marginBottom: ITEM_SEPARATOR_HEIGHT\n            }}>\n            <FlexView style={{ alignItems: \"center\" }}>\n                <TokenLogo token={props.token} />\n                <TokenName token={props.token} />\n                <View style={{ flex: 1 }} />\n                <Button\n                    type={\"clear\"}\n                    size={\"small\"}\n                    color={accent}\n                    title={props.duplicate ? \"Already Added\" : \"ADD \" + props.token.symbol}\n                    fontWeight={\"bold\"}\n                    onPress={onPress}\n                    disabled={props.duplicate}\n                    buttonStyle={{ paddingHorizontal: 4, height: 27 }}\n                />\n            </FlexView>\n        </Selectable>\n    );\n};\n\nexport default TokenSearch;\n","import React, { FC, useCallback, useContext, useEffect, useMemo, useState } from \"react\";\nimport { FlatList, View, ViewStyle } from \"react-native\";\n\nimport { ethers } from \"ethers\";\nimport { Spacing } from \"../constants/dimension\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport useDelayedEffect from \"../hooks/useDelayedEffect\";\nimport Token from \"../types/Token\";\nimport Expandable from \"./Expandable\";\nimport FlexView from \"./FlexView\";\nimport { ITEM_SEPARATOR_HEIGHT } from \"./ItemSeparator\";\nimport Loading from \"./Loading\";\nimport Selectable from \"./Selectable\";\nimport Text from \"./Text\";\nimport TokenAmount from \"./TokenAmount\";\nimport TokenLogo from \"./TokenLogo\";\nimport TokenName from \"./TokenName\";\nimport TokenSearch from \"./TokenSearch\";\nimport TokenSymbol from \"./TokenSymbol\";\n\nexport interface TokenSelectProps {\n    title: string;\n    symbol: string;\n    onChangeSymbol: (symbol: string) => void;\n    disabled?: (token: Token) => boolean;\n    hidden?: (token: Token) => boolean;\n    style?: ViewStyle;\n}\n\nconst TokenSelect: FC<TokenSelectProps> = props => {\n    const { tokens, addCustomToken } = useContext(EthersContext);\n    const [search, setSearch] = useState(\"\");\n    const [query, setQuery] = useState(\"\");\n    const token = useMemo(() => tokens.find(t => t.symbol === props.symbol), [tokens, props.symbol]);\n    const onSelectToken = t => props.onChangeSymbol(t.symbol);\n    const onUnselectToken = () => props.onChangeSymbol(\"\");\n    const onAddToken = async (t: Token) => {\n        await addCustomToken(t);\n        setSearch(\"\");\n        setQuery(\"\");\n    };\n    const hidden = (t: Token) => {\n        let hide = props.hidden?.(t) || false;\n        if (!hide && query.length > 0 && !ethers.utils.isAddress(query)) {\n            hide = !t.symbol.toLowerCase().includes(query) && !t.name.toLowerCase().includes(query);\n        }\n        return hide;\n    };\n    useEffect(() => setSearch(\"\"), [props.symbol]);\n    useDelayedEffect(() => setQuery(search.trim().toLowerCase()), 300, [search]);\n    return (\n        <View style={props.style}>\n            <Expandable title={props.title} expanded={!props.symbol} onExpand={() => props.onChangeSymbol(\"\")}>\n                <TokenSearch text={search} onChangeText={setSearch} tokens={tokens} onAddToken={onAddToken} />\n                <TokenList disabled={props.disabled} hidden={hidden} onSelectToken={onSelectToken} />\n            </Expandable>\n            {token && <TokenItem token={token} selected={true} onSelectToken={onUnselectToken} selectable={true} />}\n        </View>\n    );\n};\n\n// tslint:disable-next-line:max-func-body-length\nconst TokenList = (props: {\n    onSelectToken: (token: Token) => void;\n    disabled?: (token: Token) => boolean;\n    hidden?: (token: Token) => boolean;\n}) => {\n    const { loadingTokens, tokens } = useContext(EthersContext);\n    const renderItem = useCallback(\n        ({ item }) => {\n            return (\n                <TokenItem\n                    key={item.address}\n                    token={item}\n                    selected={false}\n                    onSelectToken={props.onSelectToken}\n                    disabled={props.disabled?.(item)}\n                />\n            );\n        },\n        [props.onSelectToken, props.disabled]\n    );\n    const data = useMemo(\n        () =>\n            tokens\n                .filter(token => (props.hidden ? !props.hidden(token) : true))\n                .sort(\n                    (t1, t2) =>\n                        (t2.balance.isZero() ? 0 : 10000000000) -\n                        (t1.balance.isZero() ? 0 : 10000000000) +\n                        t1.symbol.localeCompare(t2.symbol)\n                ),\n        [tokens, props.hidden]\n    );\n    return loadingTokens ? (\n        <Loading />\n    ) : data.length === 0 ? (\n        <EmptyList />\n    ) : (\n        <FlatList keyExtractor={item => item.address} data={data} renderItem={renderItem} />\n    );\n};\n\nconst EmptyList = () => {\n    return (\n        <View style={{ margin: Spacing.normal }}>\n            <Text disabled={true} style={{ textAlign: \"center\", width: \"100%\" }}>\n                {\"You don't have any matching tokens.\"}\n            </Text>\n        </View>\n    );\n};\n\nconst TokenItem = (props: {\n    token: Token;\n    selected: boolean;\n    onSelectToken: (token: Token) => void;\n    disabled?: boolean;\n    selectable?: boolean;\n}) => {\n    const onPress = useCallback(() => {\n        props.onSelectToken(props.token);\n    }, [props.onSelectToken, props.token]);\n    return (\n        <Selectable\n            selected={props.selected}\n            onPress={onPress}\n            disabled={props.disabled || props.selectable}\n            containerStyle={{\n                marginBottom: ITEM_SEPARATOR_HEIGHT\n            }}>\n            <FlexView style={{ alignItems: \"center\" }}>\n                <TokenLogo token={props.token} disabled={props.disabled} />\n                <TokenName token={props.token} disabled={props.disabled} />\n                <TokenAmount token={props.token} disabled={props.disabled} style={{ flex: 1, textAlign: \"right\" }} />\n                <TokenSymbol token={props.token} disabled={props.disabled} />\n            </FlexView>\n        </Selectable>\n    );\n};\n\nexport default TokenSelect;\n","import { useCallback, useContext, useState } from \"react\";\n\nimport { Pair } from \"@sushiswap/sdk\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport { parseBalance } from \"../utils\";\nimport useDelayedOnBlockEffect from \"./useDelayedOnBlockEffect\";\nimport useSDK from \"./useSDK\";\nimport useTokenPairState, { TokenPairState } from \"./useTokenPairState\";\n\nexport interface AddLiquidityState extends TokenPairState {\n    pair?: Pair;\n    onAdd: () => Promise<void>;\n    adding: boolean;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst useAddLiquidityState: () => AddLiquidityState = () => {\n    const state = useTokenPairState();\n    const { provider, signer, updateTokens } = useContext(EthersContext);\n    const [loading, setLoading] = useState(false);\n    const [pair, setPair] = useState<Pair>();\n    const [adding, setAdding] = useState(false);\n    const { getPair, addLiquidity, addLiquidityETH } = useSDK();\n\n    useDelayedOnBlockEffect(\n        async block => {\n            if (!block) {\n                setLoading(true);\n                setPair(undefined);\n            }\n            if (state.fromToken && state.toToken && provider) {\n                try {\n                    setPair(await getPair(state.fromToken, state.toToken, provider));\n                } catch (e) {\n                } finally {\n                    setLoading(false);\n                }\n            } else {\n                setLoading(false);\n            }\n        },\n        () => \"getPair(\" + state.fromSymbol + \",\" + state.toSymbol + \")\",\n        [state.fromSymbol, state.toSymbol, provider],\n        0\n    );\n\n    const onAdd = useCallback(async () => {\n        if (state.fromToken && state.toToken && state.fromAmount && state.toAmount && signer) {\n            setAdding(true);\n            try {\n                const fromAmount = parseBalance(state.fromAmount, state.fromToken.decimals);\n                const toAmount = parseBalance(state.toAmount, state.toToken.decimals);\n                if (state.fromSymbol === \"ETH\" || state.toSymbol === \"ETH\") {\n                    const [token, amount, amountETH] =\n                        state.fromSymbol === \"ETH\"\n                            ? [state.toToken, toAmount, fromAmount]\n                            : [state.fromToken, fromAmount, toAmount];\n                    const tx = await addLiquidityETH(token, amount, amountETH, signer);\n                    await tx.wait();\n                } else {\n                    const tx = await addLiquidity(state.fromToken, state.toToken, fromAmount, toAmount, signer);\n                    await tx.wait();\n                }\n                await updateTokens();\n                state.setFromSymbol(\"\");\n            } finally {\n                setAdding(false);\n            }\n        }\n    }, [state.fromToken, state.toToken, state.fromAmount, state.toAmount, signer]);\n\n    return {\n        ...state,\n        loading: loading || state.loading,\n        pair,\n        onAdd,\n        adding\n    };\n};\n\nexport default useAddLiquidityState;\n","import React, { useCallback, useContext, useState } from \"react\";\nimport { Platform, View } from \"react-native\";\n\nimport useAsyncEffect from \"use-async-effect\";\nimport ApproveButton from \"../components/ApproveButton\";\nimport Border from \"../components/Border\";\nimport Button from \"../components/Button\";\nimport Container from \"../components/Container\";\nimport Content from \"../components/Content\";\nimport ErrorMessage from \"../components/ErrorMessage\";\nimport FetchingButton from \"../components/FetchingButton\";\nimport Heading from \"../components/Heading\";\nimport InfoBox from \"../components/InfoBox\";\nimport InsufficientBalanceButton from \"../components/InsufficientBalanceButton\";\nimport ItemSeparator from \"../components/ItemSeparator\";\nimport Meta from \"../components/Meta\";\nimport Notice from \"../components/Notice\";\nimport Text from \"../components/Text\";\nimport Title from \"../components/Title\";\nimport TokenInput from \"../components/TokenInput\";\nimport TokenSelect from \"../components/TokenSelect\";\nimport UnsupportedButton from \"../components/UnsupportedButton\";\nimport WebFooter from \"../components/web/WebFooter\";\nimport { LiquiditySubMenu } from \"../components/web/WebSubMenu\";\nimport { ROUTER } from \"../constants/contracts\";\nimport { Spacing } from \"../constants/dimension\";\nimport Fraction from \"../constants/Fraction\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport useAddLiquidityState, { AddLiquidityState } from \"../hooks/useAddLiquidityState\";\nimport useColors from \"../hooks/useColors\";\nimport useLinker from \"../hooks/useLinker\";\nimport useSDK from \"../hooks/useSDK\";\nimport MetamaskError from \"../types/MetamaskError\";\nimport { convertAmount, convertToken, isEmptyValue, parseBalance } from \"../utils\";\nimport Screen from \"./Screen\";\n\nconst LiquidityScreen = () => {\n    return (\n        <Screen>\n            <LiquiditySubMenu />\n            <Container>\n                <Content>\n                    <Title text={\"Add Liquidity\"} />\n                    <Text light={true}>Add liquidity to a pool and get LP tokens of the pair.</Text>\n                    <AddLiquidity />\n                    {Platform.OS === \"web\" && <WebFooter />}\n                </Content>\n            </Container>\n        </Screen>\n    );\n};\n\nconst AddLiquidity = () => {\n    const state = useAddLiquidityState();\n    return (\n        <View style={{ marginTop: Spacing.large }}>\n            <FromTokenSelect state={state} />\n            <Border />\n            <ToTokenSelect state={state} />\n            <Border />\n            <FromTokenInput state={state} />\n            <ItemSeparator />\n            <ToTokenInput state={state} />\n            <ItemSeparator />\n            <PriceInfo state={state} />\n        </View>\n    );\n};\n\nconst FromTokenSelect = ({ state }: { state: AddLiquidityState }) => {\n    const { customTokens } = useContext(EthersContext);\n    return (\n        <TokenSelect\n            title={\"1st Token\"}\n            symbol={state.fromSymbol}\n            onChangeSymbol={state.setFromSymbol}\n            hidden={token => !customTokens.find(t => t.address === token.address) && token.balance.isZero()}\n        />\n    );\n};\n\nconst ToTokenSelect = ({ state }: { state: AddLiquidityState }) => {\n    const { customTokens } = useContext(EthersContext);\n    if (!state.fromSymbol) {\n        return <Heading text={\"2nd Token\"} disabled={true} />;\n    }\n    return (\n        <View>\n            <TokenSelect\n                title={\"2nd Token\"}\n                symbol={state.toSymbol}\n                onChangeSymbol={state.setToSymbol}\n                hidden={token =>\n                    token.symbol === state.fromSymbol ||\n                    (!customTokens.find(t => t.address === token.address) && token.balance.isZero())\n                }\n            />\n        </View>\n    );\n};\n\nconst FromTokenInput = ({ state }: { state: AddLiquidityState }) => {\n    if (!state.fromSymbol || !state.toSymbol) {\n        return <Heading text={\"Amount of Tokens\"} disabled={true} />;\n    }\n    const onAmountChanged = (newAmount: string) => {\n        state.setFromAmount(newAmount);\n        if (state.pair && state.fromToken) {\n            const fromPrice = state.pair.priceOf(convertToken(state.fromToken));\n            const toAmount = fromPrice.quote(convertAmount(state.fromToken, newAmount)).toExact();\n            state.setToAmount(isEmptyValue(toAmount) ? \"\" : toAmount);\n        }\n    };\n    return (\n        <TokenInput\n            title={\"Amount of Tokens\"}\n            token={state.fromToken}\n            amount={state.fromAmount}\n            onAmountChanged={onAmountChanged}\n            hideMaxButton={state.loading && !state.pair}\n        />\n    );\n};\n\nconst ToTokenInput = ({ state }: { state: AddLiquidityState }) => {\n    if (!state.fromSymbol || !state.toSymbol) {\n        return <View />;\n    }\n    const onAmountChanged = (newAmount: string) => {\n        state.setToAmount(newAmount);\n        if (state.pair && state.toToken) {\n            const toPrice = state.pair.priceOf(convertToken(state.toToken));\n            const fromAmount = toPrice.quote(convertAmount(state.toToken, newAmount)).toExact();\n            state.setFromAmount(isEmptyValue(fromAmount) ? \"\" : fromAmount);\n        }\n    };\n    return (\n        <TokenInput\n            token={state.toToken}\n            amount={state.toAmount}\n            onAmountChanged={onAmountChanged}\n            hideMaxButton={state.loading && !state.pair}\n        />\n    );\n};\n\nconst PriceInfo = ({ state }: { state: AddLiquidityState }) => {\n    if (state.fromToken && state.toToken && !state.loading && !state.pair) {\n        return <FirstProviderInfo state={state} />;\n    } else {\n        return <PairPriceInfo state={state} />;\n    }\n};\n\nconst FirstProviderInfo = ({ state }: { state: AddLiquidityState }) => {\n    const { green } = useColors();\n    const noAmount = isEmptyValue(state.fromAmount) || isEmptyValue(state.toAmount);\n    const initialPrice = Fraction.from(\n        parseBalance(state.toAmount, state.toToken!.decimals),\n        parseBalance(state.fromAmount, state.fromToken!.decimals)\n    ).toString(8);\n    return (\n        <View>\n            <InfoBox style={{ marginTop: Spacing.normal }}>\n                <PriceMeta state={state} price={initialPrice} disabled={noAmount} />\n            </InfoBox>\n            <Notice\n                text={\n                    \"You are the first liquidity provider.\\n\" +\n                    \"The ratio of tokens you add will set the price of this pool.\"\n                }\n                color={green}\n                style={{ marginTop: Spacing.small }}\n            />\n        </View>\n    );\n};\n\nconst PairPriceInfo = ({ state }: { state: AddLiquidityState }) => {\n    const [amount, setAmount] = useState<string>();\n    const { textDark, textLight, placeholder } = useColors();\n    const { calculateAmountOfLPTokenMinted } = useSDK();\n    useAsyncEffect(async () => {\n        if (state.pair && !isEmptyValue(state.fromAmount) && !isEmptyValue(state.toAmount)) {\n            const minted = await calculateAmountOfLPTokenMinted(\n                state.pair,\n                convertAmount(state.fromToken!, state.fromAmount),\n                convertAmount(state.toToken!, state.toAmount)\n            );\n            setAmount(minted?.toFixed(8));\n        }\n    }, [state.pair, state.fromAmount, state.toAmount]);\n    const disabled = isEmptyValue(state.fromAmount) || isEmptyValue(state.toAmount);\n    const price =\n        state.pair && state.fromToken ? state.pair.priceOf(convertToken(state.fromToken)).toFixed(8) : undefined;\n    const color = disabled ? placeholder : amount ? textDark : textLight;\n    const symbol = state.fromSymbol + \"-\" + state.toSymbol;\n    return (\n        <InfoBox>\n            <Text style={{ fontSize: 28, marginBottom: Spacing.normal, color }}>\n                {disabled ? \"N/A\" : amount ? amount + \" \" + symbol : \"Fetching…\"}\n            </Text>\n            <PriceMeta state={state} price={price} disabled={!state.fromSymbol || !state.toSymbol} />\n            <Controls state={state} />\n        </InfoBox>\n    );\n};\n\nconst PriceMeta = ({ state, price, disabled }) => (\n    <Meta label={\"Price\"} text={price} suffix={state.toSymbol + \" = 1 \" + state.fromSymbol} disabled={disabled} />\n);\n\n// tslint:disable-next-line:max-func-body-length\nconst Controls = ({ state }: { state: AddLiquidityState }) => {\n    const [error, setError] = useState<MetamaskError>({});\n    useAsyncEffect(() => setError({}), [state.fromSymbol, state.toSymbol, state.fromAmount]);\n    const fromApproveRequired = state.fromSymbol !== \"ETH\" && !state.fromTokenAllowed;\n    const toApproveRequired = state.toSymbol !== \"ETH\" && !state.toTokenAllowed;\n    const disabled =\n        fromApproveRequired || toApproveRequired || isEmptyValue(state.fromAmount) || isEmptyValue(state.toAmount);\n    return (\n        <View style={{ marginTop: Spacing.normal }}>\n            {!state.fromToken ||\n            !state.toToken ||\n            state.loading ||\n            isEmptyValue(state.fromAmount) ||\n            isEmptyValue(state.toAmount) ? (\n                <SupplyButton state={state} onError={setError} disabled={true} />\n            ) : state.loading || !state.pair ? (\n                <FetchingButton />\n            ) : parseBalance(state.fromAmount, state.fromToken.decimals).gt(state.fromToken.balance) ? (\n                <InsufficientBalanceButton symbol={state.fromSymbol} />\n            ) : parseBalance(state.toAmount, state.toToken.decimals).gt(state.toToken.balance) ? (\n                <InsufficientBalanceButton symbol={state.toSymbol} />\n            ) : (state.fromSymbol === \"ETH\" && state.toSymbol === \"WETH\") ||\n              (state.fromSymbol === \"WETH\" && state.toSymbol === \"ETH\") ? (\n                <UnsupportedButton state={state} />\n            ) : (\n                <>\n                    <ApproveButton\n                        token={state.fromToken}\n                        spender={ROUTER}\n                        onSuccess={() => state.setFromTokenAllowed(true)}\n                        onError={setError}\n                        hidden={!fromApproveRequired}\n                    />\n                    <ApproveButton\n                        token={state.toToken}\n                        spender={ROUTER}\n                        onSuccess={() => state.setToTokenAllowed(true)}\n                        onError={setError}\n                        hidden={!toApproveRequired}\n                    />\n                    <SupplyButton state={state} onError={setError} disabled={disabled} />\n                </>\n            )}\n            {error.message && error.code !== 4001 && <ErrorMessage error={error} />}\n        </View>\n    );\n};\n\nconst SupplyButton = ({\n    state,\n    onError,\n    disabled\n}: {\n    state: AddLiquidityState;\n    onError: (e) => void;\n    disabled: boolean;\n}) => {\n    const goToRemoveLiquidity = useLinker(\"/liquidity/remove\", \"RemoveLiquidity\");\n    const onPress = useCallback(async () => {\n        onError({});\n        try {\n            await state.onAdd();\n            goToRemoveLiquidity();\n        } catch (e) {\n            onError(e);\n        }\n    }, [state.onAdd, onError]);\n    return (\n        <Button\n            title={state.fromSymbol && state.toSymbol ? \"Supply \" + state.fromSymbol + \"-\" + state.toSymbol : \"Supply\"}\n            disabled={disabled}\n            loading={state.adding}\n            onPress={onPress}\n        />\n    );\n};\n\nexport default LiquidityScreen;\n"],"sourceRoot":""}