{"version":3,"sources":["src/components/Notice.tsx","src/hooks/useLPTokensState.tsx","src/components/LPTokenSelect.tsx","src/components/ExperimentalNotice.tsx","src/hooks/useMigrateState.tsx","src/screens/MigrateScreen.tsx"],"names":["Notice","props","borderStyle","border","useStyles","color","borderColor","style","clear","paddingHorizontal","Spacing","tiny","note","text","buttonText","onPressButton","title","type","size","fontWeight","onPress","titleStyle","buttonStyle","paddingVertical","alignSelf","marginTop","useLPTokensState","mode","state","useTokenPairState","useContext","EthersContext","provider","signer","address","tokens","useState","lastTimeRefreshed","setLastTimeRefreshed","loading","setLoading","lpTokens","setLPTokens","selectedLPToken","setSelectedLPToken","selectedLPTokenAllowed","setSelectedLPTokenAllowed","pair","setPair","amount","setAmount","getPair","useSDK","updateLPTokens","a","async","fetchPools","fetchMyLPTokens","fetchMyUniswapLPTokens","data","useEffect","useAsyncEffect","undefined","tokenA","tokenB","useDelayedOnBlockEffect","block","length","fromToken","toToken","updateLastTimeRefreshed","Date","now","LPTokenList","emptyText","filter","Item","renderItem","useCallback","item","key","token","selected","onSelectToken","sort","t1","t2","totalDeposited","ethers","constants","Zero","sub","div","pow10","toNumber","amountDeposited","gt","balance","Loading","FlatList","keyExtractor","JSON","stringify","EmptyList","View","margin","normal","Text","disabled","textAlign","width","LPTokenItem","useColors","textMedium","textLight","formatBalance","decimals","Selectable","marginBottom","ITEM_SEPARATOR_HEIGHT","FlexView","alignItems","TokenLogo","small","replaceWETH","marginLeft","TokenSymbol","flex","caption","light","LPTokenSelect","Expandable","expanded","onExpand","ExperimentalNotice","onPressContract","useLinker","contractURL","marginVertical","useMigrateState","getTokenAllowance","updateTokens","migrate","migrating","setMigrating","minAllowance","BigNumber","from","pow","MIGRATOR2","allowance","gte","onMigrate","parseBalance","tx","wait","Migrate","large","Border","AmountInput","TokenInput","onAmountChanged","Heading","AmountInfo","textDark","placeholder","isEmptyValue","InfoBox","fontSize","Controls","error","setError","onError","InsufficientBalanceButton","symbol","FetchingButton","ApproveButton","spender","onSuccess","hidden","message","code","ErrorMessage","MigrateButton","Button","MigrateScreen","Screen","Container","Content","Title","Platform","OS","WebFooter"],"mappings":"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","file":"static/js/11.76a83fbc.chunk.js","sourcesContent":["import React from \"react\";\nimport { View, ViewStyle } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useStyles from \"../hooks/useStyles\";\nimport Button from \"./Button\";\nimport Text from \"./Text\";\n\nexport interface NoticeProps {\n    text: string;\n    clear?: boolean;\n    color?: string;\n    buttonText?: string;\n    onPressButton?: () => void;\n    style?: ViewStyle;\n}\n\nconst Notice = (props: NoticeProps) => {\n    const { border } = useStyles();\n    const borderStyle = border({ color: props.color });\n    const color = props.color || borderStyle.borderColor;\n    return (\n        <View style={[props.clear ? { paddingHorizontal: Spacing.tiny } : borderStyle, props.style]}>\n            <Text\n                note={true}\n                style={{\n                    color\n                }}>\n                {props.text}\n            </Text>\n            {props.buttonText && props.onPressButton && (\n                <Button\n                    title={props.buttonText}\n                    type={\"clear\"}\n                    size={\"small\"}\n                    fontWeight={\"bold\"}\n                    onPress={props.onPressButton}\n                    titleStyle={{ color }}\n                    buttonStyle={{ paddingHorizontal: 0, paddingVertical: 0 }}\n                    style={{ alignSelf: \"flex-end\", marginTop: Spacing.tiny }}\n                />\n            )}\n        </View>\n    );\n};\n\nexport default Notice;\n","import { useContext, useEffect, useState } from \"react\";\n\nimport { Pair } from \"@sushiswap/sdk\";\nimport useAsyncEffect from \"use-async-effect\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport LPToken from \"../types/LPToken\";\nimport { fetchMyLPTokens, fetchMyUniswapLPTokens, fetchPools } from \"../utils/fetch-utils\";\nimport useDelayedOnBlockEffect from \"./useDelayedOnBlockEffect\";\nimport useSDK from \"./useSDK\";\nimport useTokenPairState, { TokenPairState } from \"./useTokenPairState\";\n\nexport interface LPTokensState extends TokenPairState {\n    updateLPTokens: () => Promise<void>;\n    lastTimeRefreshed: number;\n    updateLastTimeRefreshed: () => void;\n    lpTokens: LPToken[];\n    selectedLPToken?: LPToken;\n    setSelectedLPToken: (token?: LPToken) => void;\n    selectedLPTokenAllowed: boolean;\n    setSelectedLPTokenAllowed: (allowed: boolean) => void;\n    pair?: Pair;\n    amount: string;\n    setAmount: (amount: string) => void;\n}\n\ntype Mode = \"pools\" | \"my-lp-tokens\" | \"my-uniswap-lp-tokens\";\n\n// tslint:disable-next-line:max-func-body-length\nconst useLPTokensState: (mode: Mode) => LPTokensState = mode => {\n    const state = useTokenPairState();\n    const { provider, signer, address, tokens } = useContext(EthersContext);\n    const [lastTimeRefreshed, setLastTimeRefreshed] = useState(0);\n    const [loading, setLoading] = useState(true);\n    const [lpTokens, setLPTokens] = useState<LPToken[]>([]);\n    const [selectedLPToken, setSelectedLPToken] = useState<LPToken>();\n    const [selectedLPTokenAllowed, setSelectedLPTokenAllowed] = useState(false);\n    const [pair, setPair] = useState<Pair>();\n    const [amount, setAmount] = useState(\"\");\n    const { getPair } = useSDK();\n\n    const updateLPTokens = async () => {\n        if (provider && signer) {\n            try {\n                const data = await (mode === \"pools\"\n                    ? fetchPools(provider, signer)\n                    : mode === \"my-lp-tokens\"\n                    ? fetchMyLPTokens(tokens, provider, signer)\n                    : fetchMyUniswapLPTokens(tokens, provider, signer));\n                if (data) {\n                    setLPTokens(data);\n                }\n            } finally {\n                setLoading(false);\n            }\n        }\n    };\n\n    useEffect(() => {\n        if (!selectedLPToken) {\n            setAmount(\"\");\n        }\n    }, [selectedLPToken]);\n\n    useAsyncEffect(async () => {\n        setLoading(true);\n        setPair(undefined);\n        if (selectedLPToken && provider) {\n            try {\n                setPair(await getPair(selectedLPToken.tokenA, selectedLPToken.tokenB, provider));\n            } catch (e) {\n            } finally {\n                setLoading(false);\n            }\n        } else {\n            setLoading(false);\n        }\n    }, [selectedLPToken, provider]);\n\n    useDelayedOnBlockEffect(\n        async block => {\n            if (address && (mode === \"pools\" || tokens.length > 0)) {\n                if (!block) {\n                    setLoading(true);\n                }\n                await updateLPTokens();\n            }\n        },\n        () => \"updateLPTokens()\",\n        [tokens.length, address, lastTimeRefreshed],\n        0\n    );\n\n    return {\n        ...state,\n        fromToken: state.fromToken || selectedLPToken?.tokenA,\n        toToken: state.toToken || selectedLPToken?.tokenB,\n        updateLPTokens,\n        loading: state.loading || loading,\n        lastTimeRefreshed,\n        updateLastTimeRefreshed: () => {\n            setLastTimeRefreshed(Date.now());\n        },\n        lpTokens,\n        selectedLPToken,\n        setSelectedLPToken,\n        selectedLPTokenAllowed,\n        setSelectedLPTokenAllowed,\n        pair,\n        amount,\n        setAmount\n    };\n};\n\nexport default useLPTokensState;\n","import React, { FC, useCallback } from \"react\";\nimport { FlatList, View, ViewStyle } from \"react-native\";\n\nimport { ethers } from \"ethers\";\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport { LPTokensState } from \"../hooks/useLPTokensState\";\nimport LPToken from \"../types/LPToken\";\nimport { formatBalance, pow10 } from \"../utils\";\nimport CheckBox from \"./CheckBox\";\nimport Expandable from \"./Expandable\";\nimport FlexView from \"./FlexView\";\nimport { ITEM_SEPARATOR_HEIGHT } from \"./ItemSeparator\";\nimport Loading from \"./Loading\";\nimport Selectable from \"./Selectable\";\nimport Text from \"./Text\";\nimport TokenLogo from \"./TokenLogo\";\nimport TokenSymbol from \"./TokenSymbol\";\n\nexport type LPTokenSelectFilter = \"balance\" | \"amountDeposited\" | \"\";\n\nexport interface LPTokenSelectProps {\n    state: LPTokensState;\n    title: string;\n    emptyText: string;\n    showFilter?: boolean;\n    filter?: LPTokenSelectFilter;\n    onFilterChanged?: (filter: LPTokenSelectFilter) => void;\n    Item: FC<LPTokenItemProps>;\n    style?: ViewStyle;\n}\n\nexport interface LPTokenItemProps {\n    token: LPToken;\n    selected: boolean;\n    filter?: LPTokenSelectFilter;\n    onSelectToken: (token: LPToken) => void;\n}\n\nconst LPTokenSelect: FC<LPTokenSelectProps> = props => {\n    const onUnselectToken = () => props.state.setSelectedLPToken();\n    return (\n        <View style={props.style}>\n            <Expandable\n                title={props.title}\n                expanded={!props.state.selectedLPToken}\n                onExpand={() => props.state.setSelectedLPToken()}>\n                <LPTokenList state={props.state} filter={props.filter} emptyText={props.emptyText} Item={props.Item} />\n            </Expandable>\n            {props.state.selectedLPToken && (\n                <LPTokenItem token={props.state.selectedLPToken} selected={true} onSelectToken={onUnselectToken} />\n            )}\n        </View>\n    );\n};\n\nconst Filter = ({ filter, onFilterChanged }) => {\n    const handler = (f: string) => () => onFilterChanged(f);\n    return (\n        <FlexView style={{ width: \"100%\", justifyContent: \"flex-end\" }}>\n            <CheckBox checked={filter === \"balance\"} onPress={handler(\"balance\")} title={\"with balance\"} />\n            <CheckBox\n                checked={filter === \"amountDeposited\"}\n                onPress={handler(\"amountDeposited\")}\n                title={\"with deposit\"}\n            />\n            <CheckBox checked={!filter} onPress={handler(\"\")} title={\"all\"} />\n        </FlexView>\n    );\n};\n\n// tslint:disable-next-line:max-func-body-length\nconst LPTokenList = ({\n    state,\n    emptyText,\n    filter,\n    Item\n}: {\n    state: LPTokensState;\n    emptyText: string;\n    filter?: LPTokenSelectFilter;\n    Item: FC<LPTokenItemProps>;\n}) => {\n    const renderItem = useCallback(\n        ({ item }) => {\n            return (\n                <Item\n                    key={item.address}\n                    token={item}\n                    selected={false}\n                    filter={filter}\n                    onSelectToken={state.setSelectedLPToken}\n                />\n            );\n        },\n        [filter, state.setSelectedLPToken]\n    );\n    let data = state.lpTokens.sort((t1, t2) => {\n        return (t2.totalDeposited || ethers.constants.Zero)\n            .sub(t1.totalDeposited || ethers.constants.Zero)\n            .div(pow10(14))\n            .toNumber();\n    });\n    if (filter === \"amountDeposited\") {\n        data = data.filter(token => token.amountDeposited?.gt(0));\n    } else if (filter === \"balance\") {\n        data = data.filter(token => token.balance.gt(0));\n    }\n    return state.loading ? (\n        <Loading />\n    ) : data.length === 0 ? (\n        <EmptyList text={emptyText} />\n    ) : (\n        <FlatList keyExtractor={item => JSON.stringify(item)} data={data} renderItem={renderItem} />\n    );\n};\n\nconst EmptyList = ({ text }: { text: string }) => {\n    return (\n        <View style={{ margin: Spacing.normal }}>\n            <Text disabled={true} style={{ textAlign: \"center\", width: \"100%\" }}>\n                {text}\n            </Text>\n        </View>\n    );\n};\n\nexport const LPTokenItem: FC<LPTokenItemProps> = props => {\n    const { textMedium, textLight } = useColors();\n    const balance = formatBalance(props.token.balance, props.token.decimals, 8);\n    const onPress = useCallback(() => {\n        props.onSelectToken(props.token);\n    }, [props.onSelectToken, props.token]);\n    return (\n        <Selectable selected={props.selected} onPress={onPress} style={{ marginBottom: ITEM_SEPARATOR_HEIGHT }}>\n            <FlexView style={{ alignItems: \"center\" }}>\n                <TokenLogo token={props.token.tokenA} small={true} replaceWETH={true} />\n                <TokenLogo token={props.token.tokenB} small={true} replaceWETH={true} style={{ marginLeft: 4 }} />\n                <TokenSymbol token={props.token} />\n                <View style={{ flex: 1, marginLeft: Spacing.tiny }}>\n                    {/*<Text note={true} style={{ textAlign: \"right\", color: textLight }}>*/}\n                    {/*    My Balance*/}\n                    {/*</Text>*/}\n                    <Text caption={true} light={true} style={{ textAlign: \"right\", color: textMedium }}>\n                        {balance}\n                    </Text>\n                </View>\n            </FlexView>\n        </Selectable>\n    );\n};\n\nexport default LPTokenSelect;\n","import React from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useLinker from \"../hooks/useLinker\";\nimport Notice from \"./Notice\";\n\nconst ExperimentalNotice = (props: { contractURL: string }) => {\n    const onPressContract = useLinker(props.contractURL, \"\", \"_blank\");\n    return (\n        <View style={{ marginVertical: Spacing.tiny }}>\n            <Notice\n                text={\n                    \"This feature is in beta and contracts are unaudited. Read the contract yourself and use it at your own risk.\"\n                }\n                color={\"orange\"}\n                buttonText={\"View Contract\"}\n                onPressButton={onPressContract}\n            />\n        </View>\n    );\n};\n\nexport default ExperimentalNotice;\n","import { useCallback, useContext, useState } from \"react\";\n\nimport { ethers } from \"ethers\";\nimport useAsyncEffect from \"use-async-effect\";\nimport { MIGRATOR2 } from \"../constants/contracts\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport { parseBalance } from \"../utils\";\nimport useLPTokensState, { LPTokensState } from \"./useLPTokensState\";\nimport useSDK from \"./useSDK\";\n\nexport interface MigrateState extends LPTokensState {\n    onMigrate: () => Promise<void>;\n    migrating: boolean;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst useMigrateState: () => MigrateState = () => {\n    const state = useLPTokensState(\"my-uniswap-lp-tokens\");\n    const { provider, signer, getTokenAllowance, updateTokens } = useContext(EthersContext);\n    const { migrate } = useSDK();\n    const [loading, setLoading] = useState(false);\n    const [migrating, setMigrating] = useState(false);\n\n    useAsyncEffect(async () => {\n        if (provider && signer && state.selectedLPToken) {\n            setLoading(true);\n            state.setSelectedLPTokenAllowed(false);\n            try {\n                const minAllowance = ethers.BigNumber.from(2)\n                    .pow(96)\n                    .sub(1);\n                const allowance = await getTokenAllowance(state.selectedLPToken.address, MIGRATOR2);\n                state.setSelectedLPTokenAllowed(ethers.BigNumber.from(allowance).gte(minAllowance));\n            } finally {\n                setLoading(false);\n            }\n        }\n    }, [provider, signer, state.selectedLPToken]);\n\n    const onMigrate = useCallback(async () => {\n        if (state.selectedLPToken && state.amount && signer) {\n            setMigrating(true);\n            try {\n                const amount = parseBalance(state.amount, state.selectedLPToken.decimals);\n                const tx = await migrate(state.selectedLPToken, amount, signer);\n                await tx.wait();\n                await updateTokens();\n                await state.updateLPTokens();\n                state.setSelectedLPToken(undefined);\n            } finally {\n                setMigrating(false);\n            }\n        }\n    }, [state.selectedLPToken, state.amount, signer, updateTokens]);\n\n    return {\n        ...state,\n        loading: state.loading || loading,\n        onMigrate,\n        migrating\n    };\n};\n\nexport default useMigrateState;\n","import React, { useCallback, useState } from \"react\";\nimport { Platform, View } from \"react-native\";\n\nimport useAsyncEffect from \"use-async-effect\";\nimport ApproveButton from \"../components/ApproveButton\";\nimport Border from \"../components/Border\";\nimport Button from \"../components/Button\";\nimport Container from \"../components/Container\";\nimport Content from \"../components/Content\";\nimport ErrorMessage from \"../components/ErrorMessage\";\nimport ExperimentalNotice from \"../components/ExperimentalNotice\";\nimport FetchingButton from \"../components/FetchingButton\";\nimport Heading from \"../components/Heading\";\nimport InfoBox from \"../components/InfoBox\";\nimport InsufficientBalanceButton from \"../components/InsufficientBalanceButton\";\nimport LPTokenSelect, { LPTokenItem } from \"../components/LPTokenSelect\";\nimport Text from \"../components/Text\";\nimport Title from \"../components/Title\";\nimport TokenInput from \"../components/TokenInput\";\nimport WebFooter from \"../components/web/WebFooter\";\nimport { LiquiditySubMenu } from \"../components/web/WebSubMenu\";\nimport { MIGRATOR2 } from \"../constants/contracts\";\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport useMigrateState, { MigrateState } from \"../hooks/useMigrateState\";\nimport MetamaskError from \"../types/MetamaskError\";\nimport { isEmptyValue, parseBalance } from \"../utils\";\nimport Screen from \"./Screen\";\n\nconst MigrateScreen = () => {\n    return (\n        <Screen>\n            <LiquiditySubMenu />\n            <Container>\n                <Content>\n                    <Title text={\"Migrate Liquidity\"} />\n                    <Text light={true}>Migrate your Uniswap LP tokens to SushiSwap LP tokens.</Text>\n                    <Migrate />\n                    {Platform.OS === \"web\" && <WebFooter />}\n                </Content>\n            </Container>\n        </Screen>\n    );\n};\n\nconst Migrate = () => {\n    const state = useMigrateState();\n    return (\n        <View style={{ marginTop: Spacing.large }}>\n            <LPTokenSelect\n                state={state}\n                title={\"Your Uniswap Liquidity\"}\n                emptyText={\"You don't have any liquidity on Uniswap.\"}\n                Item={LPTokenItem}\n            />\n            <ExperimentalNotice\n                contractURL={\"https://github.com/sushiswap/sushiswap/blob/master/contracts/Migrator2.sol\"}\n            />\n            <Border />\n            <AmountInput state={state} />\n            <AmountInfo state={state} />\n        </View>\n    );\n};\n\nconst AmountInput = ({ state }: { state: MigrateState }) => {\n    if (!state.selectedLPToken) {\n        return <Heading text={\"Amount of Tokens\"} disabled={true} />;\n    }\n    return (\n        <TokenInput\n            title={\"Amount of Tokens\"}\n            token={state.selectedLPToken}\n            amount={state.amount}\n            onAmountChanged={state.setAmount}\n        />\n    );\n};\n\nconst AmountInfo = ({ state }: { state: MigrateState }) => {\n    const { textDark, textLight, placeholder } = useColors();\n    const disabled = !state.selectedLPToken || isEmptyValue(state.amount);\n    const color = disabled ? placeholder : state.amount ? textDark : textLight;\n    return (\n        <InfoBox>\n            <Text style={{ fontSize: 28, color }}>{disabled ? \"N/A\" : state.amount + \" SLP\"}</Text>\n            <Controls state={state} />\n        </InfoBox>\n    );\n};\n\nconst Controls = ({ state }: { state: MigrateState }) => {\n    const [error, setError] = useState<MetamaskError>({});\n    useAsyncEffect(() => setError({}), [state.amount]);\n    return (\n        <View style={{ marginTop: Spacing.normal }}>\n            {!state.selectedLPToken || isEmptyValue(state.amount) ? (\n                <MigrateButton state={state} onError={setError} disabled={true} />\n            ) : parseBalance(state.amount, state.selectedLPToken.decimals).gt(state.selectedLPToken.balance) ? (\n                <InsufficientBalanceButton symbol={state.selectedLPToken.symbol} />\n            ) : state.loading ? (\n                <FetchingButton />\n            ) : (\n                <>\n                    <ApproveButton\n                        token={state.selectedLPToken}\n                        spender={MIGRATOR2}\n                        onSuccess={() => state.setSelectedLPTokenAllowed(true)}\n                        onError={setError}\n                        hidden={state.selectedLPTokenAllowed}\n                    />\n                    <MigrateButton state={state} onError={setError} disabled={!state.selectedLPTokenAllowed} />\n                </>\n            )}\n            {error.message && error.code !== 4001 && <ErrorMessage error={error} />}\n        </View>\n    );\n};\n\nconst MigrateButton = ({\n    state,\n    onError,\n    disabled\n}: {\n    state: MigrateState;\n    onError: (e) => void;\n    disabled: boolean;\n}) => {\n    const onPress = useCallback(async () => {\n        onError({});\n        try {\n            await state.onMigrate();\n        } catch (e) {\n            onError(e);\n        }\n    }, []);\n    return <Button title={\"Migrate Liquidity\"} loading={state.migrating} onPress={onPress} disabled={disabled} />;\n};\n\nexport default MigrateScreen;\n"],"sourceRoot":""}