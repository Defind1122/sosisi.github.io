{"version":3,"sources":["src/components/Notice.tsx","src/hooks/useLPTokensState.tsx","src/components/LPTokenSelect.tsx","src/hooks/useMigrateState.tsx","src/screens/MigrateScreen.tsx"],"names":["Notice","props","borderStyle","border","useStyles","color","borderColor","style","clear","paddingHorizontal","Spacing","tiny","note","text","buttonText","onPressButton","title","type","size","fontWeight","onPress","titleStyle","buttonStyle","paddingVertical","alignSelf","marginTop","useLPTokensState","mode","state","useTokenPairState","useContext","EthersContext","provider","signer","address","tokens","useState","lastTimeRefreshed","setLastTimeRefreshed","loading","setLoading","lpTokens","setLPTokens","selectedLPToken","setSelectedLPToken","pair","setPair","amount","setAmount","getPair","useSDK","updateLPTokens","a","async","fetchPools","fetchMyLPTokens","fetchMyUniswapLPTokens","data","useEffect","useAsyncEffect","undefined","tokenA","tokenB","useDelayedOnBlockEffect","block","length","fromToken","toToken","updateLastTimeRefreshed","Date","now","LPTokenList","emptyText","filter","Item","renderItem","useCallback","item","key","token","selected","onSelectToken","sort","t1","t2","totalDeposited","ethers","constants","Zero","sub","div","pow10","toNumber","amountDeposited","gt","balance","Loading","FlatList","keyExtractor","JSON","stringify","EmptyList","View","margin","normal","Text","disabled","textAlign","width","LPTokenItem","textMedium","useColors","formatBalance","decimals","Selectable","containerStyle","marginBottom","ITEM_SEPARATOR_HEIGHT","FlexView","alignItems","TokenLogo","small","replaceWETH","marginLeft","medium","caption","symbol","flex","light","LPTokenSelect","Expandable","expanded","onExpand","useMigrateState","updateTokens","migrate","migrating","setMigrating","onMigrate","parseBalance","tx","wait","Migrate","large","Border","AmountInput","TokenInput","onAmountChanged","Heading","AmountInfo","isEmptyValue","InfoBox","Meta","label","Controls","error","setError","onError","InsufficientBalanceButton","FetchingButton","message","code","ErrorMessage","MigrateButton","Button","window","open","MigrateScreen","Screen","Container","Content","Title","Platform","OS","WebFooter"],"mappings":"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","file":"static/js/12.6e113fc1.chunk.js","sourcesContent":["import React from \"react\";\nimport { View, ViewStyle } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useStyles from \"../hooks/useStyles\";\nimport Button from \"./Button\";\nimport Text from \"./Text\";\n\nexport interface NoticeProps {\n    text: string;\n    clear?: boolean;\n    color?: string;\n    buttonText?: string;\n    onPressButton?: () => void;\n    style?: ViewStyle;\n}\n\nconst Notice = (props: NoticeProps) => {\n    const { border } = useStyles();\n    const borderStyle = border({ color: props.color });\n    const color = props.color || borderStyle.borderColor;\n    return (\n        <View style={[props.clear ? { paddingHorizontal: Spacing.tiny } : borderStyle, props.style]}>\n            <Text\n                note={true}\n                style={{\n                    color\n                }}>\n                {props.text}\n            </Text>\n            {props.buttonText && props.onPressButton && (\n                <Button\n                    title={props.buttonText}\n                    type={\"clear\"}\n                    size={\"small\"}\n                    fontWeight={\"bold\"}\n                    onPress={props.onPressButton}\n                    titleStyle={{ color }}\n                    buttonStyle={{ paddingHorizontal: 0, paddingVertical: 0 }}\n                    style={{ alignSelf: \"flex-end\", marginTop: Spacing.tiny }}\n                />\n            )}\n        </View>\n    );\n};\n\nexport default Notice;\n","import { useContext, useEffect, useState } from \"react\";\n\nimport { Pair } from \"@sushiswap/sdk\";\nimport useAsyncEffect from \"use-async-effect\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport LPToken from \"../types/LPToken\";\nimport { fetchMyLPTokens, fetchMyUniswapLPTokens, fetchPools } from \"../utils/fetch-utils\";\nimport useDelayedOnBlockEffect from \"./useDelayedOnBlockEffect\";\nimport useSDK from \"./useSDK\";\nimport useTokenPairState, { TokenPairState } from \"./useTokenPairState\";\n\nexport interface LPTokensState extends TokenPairState {\n    updateLPTokens: () => Promise<void>;\n    lastTimeRefreshed: number;\n    updateLastTimeRefreshed: () => void;\n    lpTokens: LPToken[];\n    selectedLPToken?: LPToken;\n    setSelectedLPToken: (token?: LPToken) => void;\n    pair?: Pair;\n    amount: string;\n    setAmount: (amount: string) => void;\n}\n\ntype Mode = \"pools\" | \"my-lp-tokens\" | \"my-uniswap-lp-tokens\";\n\n// tslint:disable-next-line:max-func-body-length\nconst useLPTokensState: (mode: Mode) => LPTokensState = mode => {\n    const state = useTokenPairState();\n    const { provider, signer, address, tokens } = useContext(EthersContext);\n    const [lastTimeRefreshed, setLastTimeRefreshed] = useState(0);\n    const [loading, setLoading] = useState(true);\n    const [lpTokens, setLPTokens] = useState<LPToken[]>([]);\n    const [selectedLPToken, setSelectedLPToken] = useState<LPToken>();\n    const [pair, setPair] = useState<Pair>();\n    const [amount, setAmount] = useState(\"\");\n    const { getPair } = useSDK();\n\n    const updateLPTokens = async () => {\n        if (provider && signer) {\n            try {\n                const data = await (mode === \"pools\"\n                    ? fetchPools(provider, signer)\n                    : mode === \"my-lp-tokens\"\n                    ? fetchMyLPTokens(tokens, provider, signer)\n                    : fetchMyUniswapLPTokens(tokens, provider, signer));\n                if (data) {\n                    setLPTokens(data);\n                }\n            } finally {\n                setLoading(false);\n            }\n        }\n    };\n\n    useEffect(() => {\n        if (!selectedLPToken) {\n            setAmount(\"\");\n        }\n    }, [selectedLPToken]);\n\n    useAsyncEffect(async () => {\n        setLoading(true);\n        setPair(undefined);\n        if (selectedLPToken && provider) {\n            try {\n                setPair(await getPair(selectedLPToken.tokenA, selectedLPToken.tokenB, provider));\n            } catch (e) {\n            } finally {\n                setLoading(false);\n            }\n        } else {\n            setLoading(false);\n        }\n    }, [selectedLPToken, provider]);\n\n    useDelayedOnBlockEffect(\n        async block => {\n            if (address && (mode === \"pools\" || tokens.length > 0)) {\n                if (!block) {\n                    setLoading(true);\n                }\n                await updateLPTokens();\n            }\n        },\n        () => \"updateLPTokens()\",\n        [tokens.length, address, lastTimeRefreshed],\n        0\n    );\n\n    return {\n        ...state,\n        fromToken: state.fromToken || selectedLPToken?.tokenA,\n        toToken: state.toToken || selectedLPToken?.tokenB,\n        updateLPTokens,\n        loading: state.loading || loading,\n        lastTimeRefreshed,\n        updateLastTimeRefreshed: () => {\n            setLastTimeRefreshed(Date.now());\n        },\n        lpTokens,\n        selectedLPToken,\n        setSelectedLPToken,\n        pair,\n        amount,\n        setAmount\n    };\n};\n\nexport default useLPTokensState;\n","import React, { FC, useCallback } from \"react\";\nimport { FlatList, View, ViewStyle } from \"react-native\";\n\nimport { ethers } from \"ethers\";\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport { LPTokensState } from \"../hooks/useLPTokensState\";\nimport LPToken from \"../types/LPToken\";\nimport { formatBalance, pow10 } from \"../utils\";\nimport CheckBox from \"./CheckBox\";\nimport Expandable from \"./Expandable\";\nimport FlexView from \"./FlexView\";\nimport { ITEM_SEPARATOR_HEIGHT } from \"./ItemSeparator\";\nimport Loading from \"./Loading\";\nimport Selectable from \"./Selectable\";\nimport Text from \"./Text\";\nimport TokenLogo from \"./TokenLogo\";\n\nexport type LPTokenSelectFilter = \"balance\" | \"amountDeposited\" | \"\";\n\nexport interface LPTokenSelectProps {\n    state: LPTokensState;\n    title: string;\n    emptyText: string;\n    showFilter?: boolean;\n    filter?: LPTokenSelectFilter;\n    onFilterChanged?: (filter: LPTokenSelectFilter) => void;\n    Item: FC<LPTokenItemProps>;\n    style?: ViewStyle;\n}\n\nexport interface LPTokenItemProps {\n    token: LPToken;\n    selected: boolean;\n    filter?: LPTokenSelectFilter;\n    onSelectToken: (token: LPToken) => void;\n}\n\nconst LPTokenSelect: FC<LPTokenSelectProps> = props => {\n    const onUnselectToken = () => props.state.setSelectedLPToken();\n    return (\n        <View style={props.style}>\n            <Expandable\n                title={props.title}\n                expanded={!props.state.selectedLPToken}\n                onExpand={() => props.state.setSelectedLPToken()}>\n                <LPTokenList state={props.state} filter={props.filter} emptyText={props.emptyText} Item={props.Item} />\n            </Expandable>\n            {props.state.selectedLPToken && (\n                <LPTokenItem token={props.state.selectedLPToken} selected={true} onSelectToken={onUnselectToken} />\n            )}\n        </View>\n    );\n};\n\nconst Filter = ({ filter, onFilterChanged }) => {\n    const handler = (f: string) => () => onFilterChanged(f);\n    return (\n        <FlexView style={{ width: \"100%\", justifyContent: \"flex-end\" }}>\n            <CheckBox checked={filter === \"balance\"} onPress={handler(\"balance\")} title={\"with balance\"} />\n            <CheckBox\n                checked={filter === \"amountDeposited\"}\n                onPress={handler(\"amountDeposited\")}\n                title={\"with deposit\"}\n            />\n            <CheckBox checked={!filter} onPress={handler(\"\")} title={\"all\"} />\n        </FlexView>\n    );\n};\n\n// tslint:disable-next-line:max-func-body-length\nconst LPTokenList = ({\n    state,\n    emptyText,\n    filter,\n    Item\n}: {\n    state: LPTokensState;\n    emptyText: string;\n    filter?: LPTokenSelectFilter;\n    Item: FC<LPTokenItemProps>;\n}) => {\n    const renderItem = useCallback(\n        ({ item }) => {\n            return (\n                <Item\n                    key={item.address}\n                    token={item}\n                    selected={false}\n                    filter={filter}\n                    onSelectToken={state.setSelectedLPToken}\n                />\n            );\n        },\n        [filter, state.setSelectedLPToken]\n    );\n    let data = state.lpTokens.sort((t1, t2) => {\n        return (t2.totalDeposited || ethers.constants.Zero)\n            .sub(t1.totalDeposited || ethers.constants.Zero)\n            .div(pow10(14))\n            .toNumber();\n    });\n    if (filter === \"amountDeposited\") {\n        data = data.filter(token => token.amountDeposited?.gt(0));\n    } else if (filter === \"balance\") {\n        data = data.filter(token => token.balance.gt(0));\n    }\n    return state.loading ? (\n        <Loading />\n    ) : data.length === 0 ? (\n        <EmptyList text={emptyText} />\n    ) : (\n        <FlatList keyExtractor={item => JSON.stringify(item)} data={data} renderItem={renderItem} />\n    );\n};\n\nconst EmptyList = ({ text }: { text: string }) => {\n    return (\n        <View style={{ margin: Spacing.normal }}>\n            <Text disabled={true} style={{ textAlign: \"center\", width: \"100%\" }}>\n                {text}\n            </Text>\n        </View>\n    );\n};\n\nexport const LPTokenItem: FC<LPTokenItemProps> = props => {\n    const { textMedium } = useColors();\n    const balance = formatBalance(props.token.balance, props.token.decimals, 8);\n    const onPress = useCallback(() => {\n        props.onSelectToken(props.token);\n    }, [props.onSelectToken, props.token]);\n    return (\n        <Selectable\n            selected={props.selected}\n            onPress={onPress}\n            containerStyle={{ marginBottom: ITEM_SEPARATOR_HEIGHT }}>\n            <FlexView style={{ alignItems: \"center\" }}>\n                <TokenLogo token={props.token.tokenA} small={true} replaceWETH={true} />\n                <TokenLogo token={props.token.tokenB} small={true} replaceWETH={true} style={{ marginLeft: 4 }} />\n                <Text medium={true} caption={true} style={{ marginLeft: Spacing.tiny }}>\n                    {props.token.tokenA.symbol}-{props.token.tokenB.symbol}\n                </Text>\n                <View style={{ flex: 1, marginLeft: Spacing.tiny }}>\n                    {/*<Text note={true} style={{ textAlign: \"right\", color: textLight }}>*/}\n                    {/*    My Balance*/}\n                    {/*</Text>*/}\n                    <Text caption={true} light={true} style={{ textAlign: \"right\", color: textMedium }}>\n                        {balance}\n                    </Text>\n                </View>\n            </FlexView>\n        </Selectable>\n    );\n};\n\nexport default LPTokenSelect;\n","import { useCallback, useContext, useState } from \"react\";\n\nimport { EthersContext } from \"../context/EthersContext\";\nimport { parseBalance } from \"../utils\";\nimport useLPTokensState, { LPTokensState } from \"./useLPTokensState\";\nimport useSDK from \"./useSDK\";\n\nexport interface MigrateState extends LPTokensState {\n    onMigrate: () => Promise<void>;\n    migrating: boolean;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst useMigrateState: () => MigrateState = () => {\n    const state = useLPTokensState(\"my-uniswap-lp-tokens\");\n    const { signer, updateTokens } = useContext(EthersContext);\n    const { migrate } = useSDK();\n    const [migrating, setMigrating] = useState(false);\n\n    const onMigrate = useCallback(async () => {\n        if (state.selectedLPToken && state.amount && signer) {\n            setMigrating(true);\n            try {\n                const amount = parseBalance(state.amount, state.selectedLPToken.decimals);\n                const tx = await migrate(state.selectedLPToken, amount, signer);\n                await tx.wait();\n                await updateTokens();\n                await state.updateLPTokens();\n                state.setSelectedLPToken(undefined);\n            } finally {\n                setMigrating(false);\n            }\n        }\n    }, [state.selectedLPToken, state.amount, signer, migrate, updateTokens]);\n\n    return {\n        ...state,\n        onMigrate,\n        migrating\n    };\n};\n\nexport default useMigrateState;\n","import React, { useState } from \"react\";\nimport { Platform, View } from \"react-native\";\n\nimport useAsyncEffect from \"use-async-effect\";\nimport Border from \"../components/Border\";\nimport Button from \"../components/Button\";\nimport Container from \"../components/Container\";\nimport Content from \"../components/Content\";\nimport ErrorMessage from \"../components/ErrorMessage\";\nimport FetchingButton from \"../components/FetchingButton\";\nimport Heading from \"../components/Heading\";\nimport InfoBox from \"../components/InfoBox\";\nimport InsufficientBalanceButton from \"../components/InsufficientBalanceButton\";\nimport LPTokenSelect, { LPTokenItem } from \"../components/LPTokenSelect\";\nimport Meta from \"../components/Meta\";\nimport Notice from \"../components/Notice\";\nimport Text from \"../components/Text\";\nimport Title from \"../components/Title\";\nimport TokenInput from \"../components/TokenInput\";\nimport WebFooter from \"../components/web/WebFooter\";\nimport { MigrateSubMenu } from \"../components/web/WebSubMenu\";\nimport { Spacing } from \"../constants/dimension\";\nimport useMigrateState, { MigrateState } from \"../hooks/useMigrateState\";\nimport MetamaskError from \"../types/MetamaskError\";\nimport { isEmptyValue, parseBalance } from \"../utils\";\nimport Screen from \"./Screen\";\n\nconst MigrateScreen = () => {\n    return (\n        <Screen>\n            <MigrateSubMenu />\n            <Container>\n                <Content>\n                    <Title text={\"Migrate Liquidity\"} />\n                    <Text light={true}>Migrate your Uniswap LP tokens to SushiSwap LP tokens.</Text>\n                    <Migrate />\n                    {Platform.OS === \"web\" && <WebFooter />}\n                </Content>\n            </Container>\n        </Screen>\n    );\n};\n\nconst Migrate = () => {\n    const state = useMigrateState();\n    return (\n        <View style={{ marginTop: Spacing.large }}>\n            <LPTokenSelect\n                state={state}\n                title={\"Your Uniswap Liquidity\"}\n                emptyText={\"You don't have any liquidity on Uniswap.\"}\n                Item={LPTokenItem}\n            />\n            <Border />\n            <AmountInput state={state} />\n            <Notice\n                text={\"You'll be redirected to the farming page after the migration finishes.\"}\n                style={{ marginTop: Spacing.normal }}\n            />\n            <AmountInfo state={state} />\n        </View>\n    );\n};\n\nconst AmountInput = ({ state }: { state: MigrateState }) => {\n    if (!state.selectedLPToken) {\n        return <Heading text={\"Amount of Tokens\"} disabled={true} />;\n    }\n    return (\n        <TokenInput\n            title={\"Amount of Tokens\"}\n            token={state.selectedLPToken}\n            amount={state.amount}\n            onAmountChanged={state.setAmount}\n        />\n    );\n};\n\nconst AmountInfo = ({ state }: { state: MigrateState }) => {\n    const disabled = !state.selectedLPToken || isEmptyValue(state.amount);\n    return (\n        <InfoBox>\n            <Meta label={state.selectedLPToken?.symbol || \"SushiSwap LP\"} text={state.amount} disabled={disabled} />\n            <Controls state={state} />\n        </InfoBox>\n    );\n};\n\nconst Controls = ({ state }: { state: MigrateState }) => {\n    const [error, setError] = useState<MetamaskError>({});\n    useAsyncEffect(() => setError({}), [state.amount]);\n    return (\n        <View style={{ marginTop: Spacing.normal }}>\n            {!state.selectedLPToken || isEmptyValue(state.amount) ? (\n                <MigrateButton state={state} onError={setError} disabled={true} />\n            ) : parseBalance(state.amount, state.selectedLPToken.decimals).gt(state.selectedLPToken.balance) ? (\n                <InsufficientBalanceButton symbol={state.selectedLPToken.symbol} />\n            ) : state.loading ? (\n                <FetchingButton />\n            ) : (\n                <MigrateButton state={state} onError={setError} disabled={false} />\n            )}\n            {error.message && error.code !== 4001 && <ErrorMessage error={error} />}\n        </View>\n    );\n};\n\nconst MigrateButton = ({\n    state,\n    onError,\n    disabled\n}: {\n    state: MigrateState;\n    onError: (e) => void;\n    disabled: boolean;\n}) => {\n    const onPress = async () => {\n        onError({});\n        try {\n            await state.onMigrate();\n            if (state.selectedLPToken) {\n                window.open(\"https://sushiswap.fi/pair/\" + state.selectedLPToken.address, \"_blank\");\n            }\n        } catch (e) {\n            onError(e);\n        }\n    };\n    return <Button title={\"Migrate Liquidity\"} loading={state.migrating} onPress={onPress} disabled={disabled} />;\n};\n\nexport default MigrateScreen;\n"],"sourceRoot":""}