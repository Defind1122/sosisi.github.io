{"version":3,"sources":["src/components/Notice.tsx","src/components/InfoBox.tsx","src/components/Border.tsx","src/hooks/useLPTokensState.tsx","src/components/LPTokenSelect.tsx","src/components/ExperimentalNotice.tsx","src/hooks/useMigrateState.tsx","src/screens/MigrateScreen.tsx"],"names":["Notice","props","borderStyle","border","useStyles","color","borderColor","style","clear","paddingHorizontal","Spacing","tiny","note","text","buttonText","onPressButton","title","type","size","fontWeight","onPress","titleStyle","buttonStyle","paddingVertical","alignSelf","marginTop","InfoBox","backgroundLight","useColors","backgroundColor","normal","small","padding","Border","height","width","marginBottom","useLPTokensState","mode","state","useLiquidityState","useContext","EthersContext","provider","signer","address","tokens","useState","lastTimeRefreshed","setLastTimeRefreshed","loading","setLoading","lpTokens","setLPTokens","selectedLPToken","setSelectedLPToken","selectedLPTokenAllowed","setSelectedLPTokenAllowed","amount","setAmount","updateLPTokens","a","async","fetchPools","fetchMyLPTokens","fetchMyUniswapLPTokens","data","useEffect","useDelayedOnBlockEffect","block","length","updateLastTimeRefreshed","Date","now","LPTokenList","emptyText","filter","Item","renderItem","useCallback","item","key","token","selected","onSelectToken","sort","t1","t2","totalDeposited","ethers","constants","Zero","sub","div","pow10","toNumber","amountDeposited","gt","balance","Loading","FlatList","keyExtractor","JSON","stringify","EmptyList","View","margin","Text","disabled","textAlign","LPTokenItem","textMedium","textLight","formatBalance","decimals","Selectable","ITEM_SEPARATOR_HEIGHT","FlexView","alignItems","TokenLogo","tokenA","replaceWETH","tokenB","marginLeft","TokenSymbol","flex","caption","light","LPTokenSelect","Expandable","expanded","onExpand","ExperimentalNotice","onPressContract","useLinker","contractURL","marginVertical","useMigrateState","getTokenAllowance","updateTokens","migrate","useSDK","migrating","setMigrating","useAsyncEffect","minAllowance","BigNumber","from","pow","MIGRATOR2","allowance","gte","onMigrate","parseBalance","tx","wait","undefined","Migrate","large","AmountInput","TokenInput","onAmountChanged","Heading","AmountInfo","textDark","placeholder","isEmptyValue","fontSize","Controls","error","setError","onError","InsufficientBalanceButton","symbol","FetchingButton","ApproveButton","spender","onSuccess","hidden","message","code","ErrorMessage","MigrateButton","Button","MigrateScreen","Screen","Container","Content","Title","Platform","OS","WebFooter"],"mappings":"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","file":"static/js/9.e5771d99.chunk.js","sourcesContent":["import React from \"react\";\nimport { View, ViewStyle } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useStyles from \"../hooks/useStyles\";\nimport Button from \"./Button\";\nimport Text from \"./Text\";\n\nexport interface NoticeProps {\n    text: string;\n    clear?: boolean;\n    color?: string;\n    buttonText?: string;\n    onPressButton?: () => void;\n    style?: ViewStyle;\n}\n\nconst Notice = (props: NoticeProps) => {\n    const { border } = useStyles();\n    const borderStyle = border({ color: props.color });\n    const color = props.color || borderStyle.borderColor;\n    return (\n        <View style={[props.clear ? { paddingHorizontal: Spacing.tiny } : borderStyle, props.style]}>\n            <Text\n                note={true}\n                style={{\n                    color\n                }}>\n                {props.text}\n            </Text>\n            {props.buttonText && props.onPressButton && (\n                <Button\n                    title={props.buttonText}\n                    type={\"clear\"}\n                    size={\"small\"}\n                    fontWeight={\"bold\"}\n                    onPress={props.onPressButton}\n                    titleStyle={{ color }}\n                    buttonStyle={{ paddingHorizontal: 0, paddingVertical: 0 }}\n                    style={{ alignSelf: \"flex-end\", marginTop: Spacing.tiny }}\n                />\n            )}\n        </View>\n    );\n};\n\nexport default Notice;\n","import React, { PropsWithChildren } from \"react\";\nimport { View, ViewProps } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport useStyles from \"../hooks/useStyles\";\n\nconst InfoBox = (props: PropsWithChildren<ViewProps>) => {\n    const { backgroundLight } = useColors();\n    const { border } = useStyles();\n    return (\n        <View\n            {...props}\n            style={[\n                {\n                    ...border({ color: backgroundLight }),\n                    backgroundColor: backgroundLight,\n                    marginTop: Spacing.normal + Spacing.small,\n                    padding: Spacing.small + Spacing.tiny\n                },\n                props.style\n            ]}\n        />\n    );\n};\n\nexport default InfoBox;\n","import React from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\n\nconst Border = () => {\n    const { border } = useColors();\n    return (\n        <View\n            style={{\n                height: 1,\n                width: \"100%\",\n                backgroundColor: border,\n                marginTop: Spacing.small,\n                marginBottom: Spacing.small + Spacing.tiny\n            }}\n        />\n    );\n};\n\nexport default Border;\n","import { useContext, useEffect, useState } from \"react\";\n\nimport { EthersContext } from \"../context/EthersContext\";\nimport LPToken from \"../types/LPToken\";\nimport { fetchMyLPTokens, fetchMyUniswapLPTokens, fetchPools } from \"../utils/fetch-utils\";\nimport useDelayedOnBlockEffect from \"./useDelayedOnBlockEffect\";\nimport useLiquidityState, { LiquidityState } from \"./useLiquidityState\";\n\nexport interface LPTokensState extends LiquidityState {\n    updateLPTokens: () => Promise<void>;\n    lastTimeRefreshed: number;\n    updateLastTimeRefreshed: () => void;\n    lpTokens: LPToken[];\n    selectedLPToken?: LPToken;\n    setSelectedLPToken: (token?: LPToken) => void;\n    selectedLPTokenAllowed: boolean;\n    setSelectedLPTokenAllowed: (allowed: boolean) => void;\n    amount: string;\n    setAmount: (amount: string) => void;\n}\n\ntype Mode = \"pools\" | \"my-lp-tokens\" | \"my-uniswap-lp-tokens\";\n\n// tslint:disable-next-line:max-func-body-length\nconst useLPTokensState: (mode: Mode) => LPTokensState = mode => {\n    const state = useLiquidityState();\n    const { provider, signer, address, tokens } = useContext(EthersContext);\n    const [lastTimeRefreshed, setLastTimeRefreshed] = useState(0);\n    const [loading, setLoading] = useState(true);\n    const [lpTokens, setLPTokens] = useState<LPToken[]>([]);\n    const [selectedLPToken, setSelectedLPToken] = useState<LPToken>();\n    const [selectedLPTokenAllowed, setSelectedLPTokenAllowed] = useState(false);\n    const [amount, setAmount] = useState(\"\");\n\n    const updateLPTokens = async () => {\n        try {\n            const data = await (mode === \"pools\"\n                ? fetchPools(provider, signer)\n                : mode === \"my-lp-tokens\"\n                ? fetchMyLPTokens(tokens, provider, signer)\n                : fetchMyUniswapLPTokens(tokens, provider, signer));\n            if (data) {\n                setLPTokens(data);\n            }\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    useEffect(() => {\n        if (!selectedLPToken) {\n            setAmount(\"\");\n        }\n    }, [selectedLPToken]);\n\n    useDelayedOnBlockEffect(\n        async block => {\n            if (address && (mode === \"pools\" || tokens.length > 0)) {\n                if (!block) {\n                    setLoading(true);\n                }\n                await updateLPTokens();\n            }\n        },\n        () => \"updateLPTokens()\",\n        [tokens.length, address, lastTimeRefreshed],\n        0\n    );\n\n    return {\n        ...state,\n        updateLPTokens,\n        loading: state.loading || loading,\n        lastTimeRefreshed,\n        updateLastTimeRefreshed: () => {\n            setLastTimeRefreshed(Date.now());\n        },\n        lpTokens,\n        selectedLPToken,\n        setSelectedLPToken,\n        selectedLPTokenAllowed,\n        setSelectedLPTokenAllowed,\n        amount,\n        setAmount\n    };\n};\n\nexport default useLPTokensState;\n","import React, { FC, useCallback } from \"react\";\nimport { FlatList, View, ViewStyle } from \"react-native\";\n\nimport { ethers } from \"ethers\";\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport { LPTokensState } from \"../hooks/useLPTokensState\";\nimport LPToken from \"../types/LPToken\";\nimport { formatBalance, pow10 } from \"../utils\";\nimport CheckBox from \"./CheckBox\";\nimport Expandable from \"./Expandable\";\nimport FlexView from \"./FlexView\";\nimport { ITEM_SEPARATOR_HEIGHT } from \"./ItemSeparator\";\nimport Loading from \"./Loading\";\nimport Selectable from \"./Selectable\";\nimport Text from \"./Text\";\nimport TokenLogo from \"./TokenLogo\";\nimport TokenSymbol from \"./TokenSymbol\";\n\nexport type LPTokenSelectFilter = \"balance\" | \"amountDeposited\" | \"\";\n\nexport interface LPTokenSelectProps {\n    state: LPTokensState;\n    title: string;\n    emptyText: string;\n    showFilter?: boolean;\n    filter?: LPTokenSelectFilter;\n    onFilterChanged?: (filter: LPTokenSelectFilter) => void;\n    Item: FC<LPTokenItemProps>;\n    style?: ViewStyle;\n}\n\nexport interface LPTokenItemProps {\n    token: LPToken;\n    selected: boolean;\n    filter?: LPTokenSelectFilter;\n    onSelectToken: (token: LPToken) => void;\n}\n\nconst LPTokenSelect: FC<LPTokenSelectProps> = props => {\n    const onUnselectToken = () => props.state.setSelectedLPToken();\n    return (\n        <View style={props.style}>\n            <Expandable\n                title={props.title}\n                expanded={!props.state.selectedLPToken}\n                onExpand={() => props.state.setSelectedLPToken()}>\n                <LPTokenList state={props.state} filter={props.filter} emptyText={props.emptyText} Item={props.Item} />\n            </Expandable>\n            {props.state.selectedLPToken && (\n                <LPTokenItem token={props.state.selectedLPToken} selected={true} onSelectToken={onUnselectToken} />\n            )}\n        </View>\n    );\n};\n\nconst Filter = ({ filter, onFilterChanged }) => {\n    const handler = (f: string) => () => onFilterChanged(f);\n    return (\n        <FlexView style={{ width: \"100%\", justifyContent: \"flex-end\" }}>\n            <CheckBox checked={filter === \"balance\"} onPress={handler(\"balance\")} title={\"with balance\"} />\n            <CheckBox\n                checked={filter === \"amountDeposited\"}\n                onPress={handler(\"amountDeposited\")}\n                title={\"with deposit\"}\n            />\n            <CheckBox checked={!filter} onPress={handler(\"\")} title={\"all\"} />\n        </FlexView>\n    );\n};\n\n// tslint:disable-next-line:max-func-body-length\nconst LPTokenList = ({\n    state,\n    emptyText,\n    filter,\n    Item\n}: {\n    state: LPTokensState;\n    emptyText: string;\n    filter?: LPTokenSelectFilter;\n    Item: FC<LPTokenItemProps>;\n}) => {\n    const renderItem = useCallback(\n        ({ item }) => {\n            return (\n                <Item\n                    key={item.address}\n                    token={item}\n                    selected={false}\n                    filter={filter}\n                    onSelectToken={state.setSelectedLPToken}\n                />\n            );\n        },\n        [filter, state.setSelectedLPToken]\n    );\n    let data = state.lpTokens.sort((t1, t2) => {\n        return (t2.totalDeposited || ethers.constants.Zero)\n            .sub(t1.totalDeposited || ethers.constants.Zero)\n            .div(pow10(14))\n            .toNumber();\n    });\n    if (filter === \"amountDeposited\") {\n        data = data.filter(token => token.amountDeposited?.gt(0));\n    } else if (filter === \"balance\") {\n        data = data.filter(token => token.balance.gt(0));\n    }\n    return state.loading ? (\n        <Loading />\n    ) : data.length === 0 ? (\n        <EmptyList text={emptyText} />\n    ) : (\n        <FlatList keyExtractor={item => JSON.stringify(item)} data={data} renderItem={renderItem} />\n    );\n};\n\nconst EmptyList = ({ text }: { text: string }) => {\n    return (\n        <View style={{ margin: Spacing.normal }}>\n            <Text disabled={true} style={{ textAlign: \"center\", width: \"100%\" }}>\n                {text}\n            </Text>\n        </View>\n    );\n};\n\nexport const LPTokenItem: FC<LPTokenItemProps> = props => {\n    const { textMedium, textLight } = useColors();\n    const balance = formatBalance(props.token.balance, props.token.decimals, 8);\n    const onPress = useCallback(() => {\n        props.onSelectToken(props.token);\n    }, [props.onSelectToken, props.token]);\n    return (\n        <Selectable selected={props.selected} onPress={onPress} style={{ marginBottom: ITEM_SEPARATOR_HEIGHT }}>\n            <FlexView style={{ alignItems: \"center\" }}>\n                <TokenLogo token={props.token.tokenA} small={true} replaceWETH={true} />\n                <TokenLogo token={props.token.tokenB} small={true} replaceWETH={true} style={{ marginLeft: 4 }} />\n                <TokenSymbol token={props.token} />\n                <View style={{ flex: 1, marginLeft: Spacing.tiny }}>\n                    {/*<Text note={true} style={{ textAlign: \"right\", color: textLight }}>*/}\n                    {/*    My Balance*/}\n                    {/*</Text>*/}\n                    <Text caption={true} light={true} style={{ textAlign: \"right\", color: textMedium }}>\n                        {balance}\n                    </Text>\n                </View>\n            </FlexView>\n        </Selectable>\n    );\n};\n\nexport default LPTokenSelect;\n","import React from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useLinker from \"../hooks/useLinker\";\nimport Notice from \"./Notice\";\n\nconst ExperimentalNotice = (props: { contractURL: string }) => {\n    const onPressContract = useLinker(props.contractURL, \"\", \"_blank\");\n    return (\n        <View style={{ marginVertical: Spacing.tiny }}>\n            <Notice\n                text={\n                    \"This feature is in beta and contracts are unaudited. Read the contract yourself and use it at your own risk.\"\n                }\n                color={\"orange\"}\n                buttonText={\"View Contract\"}\n                onPressButton={onPressContract}\n            />\n        </View>\n    );\n};\n\nexport default ExperimentalNotice;\n","import { useCallback, useContext, useState } from \"react\";\n\nimport { ethers } from \"ethers\";\nimport useAsyncEffect from \"use-async-effect\";\nimport { MIGRATOR2 } from \"../constants/contracts\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport { parseBalance } from \"../utils\";\nimport useLPTokensState, { LPTokensState } from \"./useLPTokensState\";\nimport useSDK from \"./useSDK\";\n\nexport interface MigrateState extends LPTokensState {\n    onMigrate: () => Promise<void>;\n    migrating: boolean;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst useMigrateState: () => MigrateState = () => {\n    const state = useLPTokensState(\"my-uniswap-lp-tokens\");\n    const { provider, signer, getTokenAllowance, updateTokens } = useContext(EthersContext);\n    const { migrate } = useSDK();\n    const [loading, setLoading] = useState(false);\n    const [migrating, setMigrating] = useState(false);\n\n    useAsyncEffect(async () => {\n        if (provider && signer && state.selectedLPToken) {\n            setLoading(true);\n            state.setSelectedLPTokenAllowed(false);\n            try {\n                const minAllowance = ethers.BigNumber.from(2)\n                    .pow(96)\n                    .sub(1);\n                const allowance = await getTokenAllowance(state.selectedLPToken.address, MIGRATOR2);\n                state.setSelectedLPTokenAllowed(ethers.BigNumber.from(allowance).gte(minAllowance));\n            } finally {\n                setLoading(false);\n            }\n        }\n    }, [provider, signer, state.selectedLPToken]);\n\n    const onMigrate = useCallback(async () => {\n        if (state.selectedLPToken && state.amount && signer) {\n            setMigrating(true);\n            try {\n                const amount = parseBalance(state.amount, state.selectedLPToken.decimals);\n                const tx = await migrate(state.selectedLPToken, amount, signer);\n                await tx.wait();\n                await updateTokens();\n                await state.updateLPTokens();\n                state.setSelectedLPToken(undefined);\n            } finally {\n                setMigrating(false);\n            }\n        }\n    }, [state.selectedLPToken, state.amount, signer, updateTokens]);\n\n    return {\n        ...state,\n        loading: state.loading || loading,\n        onMigrate,\n        migrating\n    };\n};\n\nexport default useMigrateState;\n","import React, { useCallback, useState } from \"react\";\nimport { Platform, View } from \"react-native\";\n\nimport useAsyncEffect from \"use-async-effect\";\nimport ApproveButton from \"../components/ApproveButton\";\nimport Border from \"../components/Border\";\nimport Button from \"../components/Button\";\nimport Container from \"../components/Container\";\nimport Content from \"../components/Content\";\nimport ErrorMessage from \"../components/ErrorMessage\";\nimport ExperimentalNotice from \"../components/ExperimentalNotice\";\nimport FetchingButton from \"../components/FetchingButton\";\nimport Heading from \"../components/Heading\";\nimport InfoBox from \"../components/InfoBox\";\nimport InsufficientBalanceButton from \"../components/InsufficientBalanceButton\";\nimport LPTokenSelect, { LPTokenItem } from \"../components/LPTokenSelect\";\nimport Text from \"../components/Text\";\nimport Title from \"../components/Title\";\nimport TokenInput from \"../components/TokenInput\";\nimport WebFooter from \"../components/web/WebFooter\";\nimport { LiquiditySubMenu } from \"../components/web/WebSubMenu\";\nimport { MIGRATOR2 } from \"../constants/contracts\";\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport useMigrateState, { MigrateState } from \"../hooks/useMigrateState\";\nimport MetamaskError from \"../types/MetamaskError\";\nimport { isEmptyValue, parseBalance } from \"../utils\";\nimport Screen from \"./Screen\";\n\nconst MigrateScreen = () => {\n    return (\n        <Screen>\n            <LiquiditySubMenu />\n            <Container>\n                <Content>\n                    <Title text={\"Migrate Liquidity\"} />\n                    <Text light={true}>Migrate your Uniswap LP tokens to SushiSwap LP tokens.</Text>\n                    <Migrate />\n                    {Platform.OS === \"web\" && <WebFooter />}\n                </Content>\n            </Container>\n        </Screen>\n    );\n};\n\nconst Migrate = () => {\n    const state = useMigrateState();\n    return (\n        <View style={{ marginTop: Spacing.large }}>\n            <LPTokenSelect\n                state={state}\n                title={\"Your Uniswap Liquidity\"}\n                emptyText={\"You don't have any liquidity on Uniswap.\"}\n                Item={LPTokenItem}\n            />\n            <ExperimentalNotice\n                contractURL={\"https://github.com/sushiswap/sushiswap/blob/master/contracts/Migrator2.sol\"}\n            />\n            <Border />\n            <AmountInput state={state} />\n            <AmountInfo state={state} />\n        </View>\n    );\n};\n\nconst AmountInput = ({ state }: { state: MigrateState }) => {\n    if (!state.selectedLPToken) {\n        return <Heading text={\"Amount of Tokens\"} disabled={true} />;\n    }\n    return (\n        <TokenInput\n            title={\"Amount of Tokens\"}\n            token={state.selectedLPToken}\n            amount={state.amount}\n            onAmountChanged={state.setAmount}\n        />\n    );\n};\n\nconst AmountInfo = ({ state }: { state: MigrateState }) => {\n    const { textDark, textLight, placeholder } = useColors();\n    const disabled = !state.selectedLPToken || isEmptyValue(state.amount);\n    const color = disabled ? placeholder : state.amount ? textDark : textLight;\n    return (\n        <InfoBox>\n            <Text style={{ fontSize: 28, color }}>{disabled ? \"N/A\" : state.amount + \" SLP\"}</Text>\n            <Controls state={state} />\n        </InfoBox>\n    );\n};\n\nconst Controls = ({ state }: { state: MigrateState }) => {\n    const [error, setError] = useState<MetamaskError>({});\n    useAsyncEffect(() => setError({}), [state.amount]);\n    return (\n        <View style={{ marginTop: Spacing.normal }}>\n            {!state.selectedLPToken || isEmptyValue(state.amount) ? (\n                <MigrateButton state={state} onError={setError} disabled={true} />\n            ) : parseBalance(state.amount, state.selectedLPToken.decimals).gt(state.selectedLPToken.balance) ? (\n                <InsufficientBalanceButton symbol={state.selectedLPToken.symbol} />\n            ) : state.loading ? (\n                <FetchingButton />\n            ) : (\n                <>\n                    <ApproveButton\n                        token={state.selectedLPToken}\n                        spender={MIGRATOR2}\n                        onSuccess={() => state.setSelectedLPTokenAllowed(true)}\n                        onError={setError}\n                        hidden={state.selectedLPTokenAllowed}\n                    />\n                    <MigrateButton state={state} onError={setError} disabled={!state.selectedLPTokenAllowed} />\n                </>\n            )}\n            {error.message && error.code !== 4001 && <ErrorMessage error={error} />}\n        </View>\n    );\n};\n\nconst MigrateButton = ({\n    state,\n    onError,\n    disabled\n}: {\n    state: MigrateState;\n    onError: (e) => void;\n    disabled: boolean;\n}) => {\n    const onPress = useCallback(async () => {\n        onError({});\n        try {\n            await state.onMigrate();\n        } catch (e) {\n            onError(e);\n        }\n    }, []);\n    return <Button title={\"Migrate Liquidity\"} loading={state.migrating} onPress={onPress} disabled={disabled} />;\n};\n\nexport default MigrateScreen;\n"],"sourceRoot":""}