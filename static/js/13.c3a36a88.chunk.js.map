{"version":3,"sources":["src/components/InsufficientBalanceButton.tsx","src/components/ApproveButton.tsx","src/components/LPTokenSelect.tsx","src/hooks/useLPTokensState.tsx","src/hooks/useMigrateState.tsx","src/screens/MigrateScreen.tsx"],"names":["InsufficientBalanceButton","symbol","title","disabled","ApproveButton","props","approveToken","useContext","EthersContext","useState","loading","setLoading","onPress","useCallback","a","async","token","onError","address","spender","tx","wait","onSuccess","hidden","containerStyle","marginBottom","Spacing","tiny","LPTokenList","state","emptyText","Item","renderItem","item","key","selected","onSelectToken","setSelectedLPToken","data","lpTokens","sort","p1","p2","m1","multiplier","m2","apy","length","EmptyList","text","keyExtractor","style","margin","normal","textAlign","width","LPTokenItem","textMedium","useColors","balance","formatBalance","decimals","ITEM_SEPARATOR_HEIGHT","alignItems","tokenA","small","replaceWETH","tokenB","marginLeft","medium","caption","flex","light","color","LPTokenSelect","expanded","selectedLPToken","onExpand","updatingLPTokens","useLPTokensState","mode","useTokenPairState","provider","tokens","lastTimeRefreshed","setLastTimeRefreshed","setLPTokens","selectedLPTokenAllowed","setSelectedLPTokenAllowed","pair","setPair","amount","setAmount","getPair","useSDK","updateLPTokens","fetchMyPools","fetchPools","fetchMyLPTokens","fetchMyUniswapLPTokens","useEffect","useAsyncEffect","undefined","useDelayedOnBlockEffect","block","fromToken","toToken","updateLastTimeRefreshed","Date","now","useMigrateState","ethereum","signer","getTokenAllowance","updateTokens","migrate","migrateWithPermit","setMode","migrating","setMigrating","isWalletConnect","minAllowance","ethers","BigNumber","from","pow","sub","SUSHI_ROLL","allowance","gte","onMigrate","parseBalance","func","Migrate","View","marginTop","large","Border","MigrateModeSelect","Expandable","selectable","MigrateModeItem","type","desc","Selectable","paddingLeft","paddingRight","FlexView","Text","fontWeight","note","CloseIcon","SelectIcon","UniswapLiquidityScreen","Heading","AmountInput","TokenInput","onAmountChanged","AmountInfo","isEmptyValue","InfoBox","Meta","label","Controls","error","setError","gt","FetchingButton","message","code","ErrorMessage","MigrateButton","goToFarm","useLinker","Button","MigrateScreen","Screen","Container","BackgroundImage","Content","Title","Platform","OS","WebFooter"],"mappings":"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","file":"static/js/13.c3a36a88.chunk.js","sourcesContent":["import React from \"react\";\n\nimport Button from \"./Button\";\n\nconst InsufficientBalanceButton = ({ symbol }: { symbol: string }) => {\n    return <Button title={\"Insufficient \" + (symbol ? symbol : \"Balance\")} disabled={true} />;\n};\nexport default InsufficientBalanceButton;\n","import React, { FC, useCallback, useContext, useState } from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport Token from \"../types/Token\";\nimport Button from \"./Button\";\n\nexport interface ApproveButtonProps {\n    token: Token;\n    spender: string;\n    onSuccess: () => void;\n    onError: (e) => void;\n    hidden?: boolean;\n}\n\nconst ApproveButton: FC<ApproveButtonProps> = props => {\n    const { approveToken } = useContext(EthersContext);\n    const [loading, setLoading] = useState(false);\n    const onPress = useCallback(async () => {\n        if (props.token) {\n            props.onError({});\n            setLoading(true);\n            try {\n                const tx = await approveToken(props.token.address, props.spender);\n                if (tx) {\n                    await tx.wait();\n                    props.onSuccess();\n                }\n            } catch (e) {\n                props.onError(e);\n            } finally {\n                setLoading(false);\n            }\n        }\n    }, [props.token]);\n    if (props.hidden) return <View />;\n    return (\n        <Button\n            title={\"Approve \" + (props.token?.symbol || \"\")}\n            onPress={onPress}\n            loading={loading}\n            containerStyle={{ marginBottom: Spacing.tiny }}\n        />\n    );\n};\n\nexport default ApproveButton;\n","import React, { FC, useCallback } from \"react\";\nimport { FlatList, View, ViewStyle } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport { LPTokensState } from \"../hooks/useLPTokensState\";\nimport LPToken from \"../types/LPToken\";\nimport { formatBalance } from \"../utils\";\nimport CloseIcon from \"./CloseIcon\";\nimport Expandable from \"./Expandable\";\nimport FlexView from \"./FlexView\";\nimport { ITEM_SEPARATOR_HEIGHT } from \"./ItemSeparator\";\nimport Loading from \"./Loading\";\nimport Selectable from \"./Selectable\";\nimport SelectIcon from \"./SelectIcon\";\nimport Text from \"./Text\";\nimport TokenLogo from \"./TokenLogo\";\n\nexport type LPTokenSelectFilter = \"balance\" | \"amountDeposited\" | \"\";\n\nexport interface LPTokenSelectProps {\n    state: LPTokensState;\n    title: string;\n    emptyText: string;\n    Item: FC<LPTokenItemProps>;\n    style?: ViewStyle;\n}\n\nexport interface LPTokenItemProps {\n    token: LPToken;\n    selected: boolean;\n    onSelectToken: (token: LPToken) => void;\n}\n\nconst LPTokenSelect: FC<LPTokenSelectProps> = props => {\n    const onUnselectToken = () => props.state.setSelectedLPToken();\n    return (\n        <View style={props.style}>\n            <Expandable\n                title={props.title}\n                expanded={!props.state.selectedLPToken}\n                onExpand={() => props.state.setSelectedLPToken()}>\n                <LPTokenList state={props.state} emptyText={props.emptyText} Item={props.Item} />\n            </Expandable>\n            {props.state.selectedLPToken && (\n                <props.Item token={props.state.selectedLPToken} selected={true} onSelectToken={onUnselectToken} />\n            )}\n        </View>\n    );\n};\n\n// tslint:disable-next-line:max-func-body-length\nconst LPTokenList = ({\n    state,\n    emptyText,\n    Item\n}: {\n    state: LPTokensState;\n    emptyText: string;\n    Item: FC<LPTokenItemProps>;\n}) => {\n    const renderItem = useCallback(\n        ({ item }) => {\n            return <Item key={item.symbol} token={item} selected={false} onSelectToken={state.setSelectedLPToken} />;\n        },\n        [state.setSelectedLPToken]\n    );\n    const data = state.lpTokens.sort((p1, p2) => {\n        const m1 = p1.multiplier || 0;\n        const m2 = p2.multiplier || 0;\n        return m1 === m2 ? (p2.apy || 0) - (p1.apy || 0) : m2 - m1;\n    });\n    return state.loading ? (\n        <Loading />\n    ) : data.length === 0 ? (\n        <EmptyList text={emptyText} />\n    ) : (\n        <FlatList keyExtractor={item => item.symbol} data={data} renderItem={renderItem} />\n    );\n};\n\nconst EmptyList = ({ text }: { text: string }) => {\n    return (\n        <View style={{ margin: Spacing.normal }}>\n            <Text disabled={true} style={{ textAlign: \"center\", width: \"100%\" }}>\n                {text}\n            </Text>\n        </View>\n    );\n};\n\nexport const LPTokenItem: FC<LPTokenItemProps> = props => {\n    const { textMedium } = useColors();\n    const balance = formatBalance(props.token.balance, props.token.decimals, 6);\n    const onPress = useCallback(() => {\n        props.onSelectToken(props.token);\n    }, [props.onSelectToken, props.token]);\n    return (\n        <Selectable\n            selected={props.selected}\n            onPress={onPress}\n            containerStyle={{ marginBottom: ITEM_SEPARATOR_HEIGHT }}>\n            <FlexView style={{ alignItems: \"center\" }}>\n                <TokenLogo token={props.token.tokenA} small={true} replaceWETH={true} />\n                <TokenLogo token={props.token.tokenB} small={true} replaceWETH={true} style={{ marginLeft: 4 }} />\n                <Text medium={true} caption={true} style={{ marginLeft: Spacing.tiny }}>\n                    {props.token.tokenA.symbol}-{props.token.tokenB.symbol}\n                </Text>\n                <View style={{ flex: 1, marginLeft: Spacing.tiny }}>\n                    <Text caption={true} light={true} style={{ textAlign: \"right\", color: textMedium }}>\n                        {balance}\n                    </Text>\n                </View>\n                {props.selected ? <CloseIcon /> : <SelectIcon />}\n            </FlexView>\n        </Selectable>\n    );\n};\n\nexport default LPTokenSelect;\n","import { useContext, useEffect, useState } from \"react\";\n\nimport { Pair } from \"@sushiswap/sdk\";\nimport useAsyncEffect from \"use-async-effect\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport LPToken from \"../types/LPToken\";\nimport { fetchMyLPTokens, fetchMyPools, fetchMyUniswapLPTokens, fetchPools } from \"../utils/fetch-utils\";\nimport useDelayedOnBlockEffect from \"./useDelayedOnBlockEffect\";\nimport useSDK from \"./useSDK\";\nimport useTokenPairState, { TokenPairState } from \"./useTokenPairState\";\n\nexport interface LPTokensState extends TokenPairState {\n    updateLPTokens: () => Promise<void>;\n    lastTimeRefreshed: number;\n    updateLastTimeRefreshed: () => void;\n    lpTokens: LPToken[];\n    selectedLPToken?: LPToken;\n    setSelectedLPToken: (token?: LPToken) => void;\n    selectedLPTokenAllowed: boolean;\n    setSelectedLPTokenAllowed: (allowed: boolean) => void;\n    pair?: Pair;\n    amount: string;\n    setAmount: (amount: string) => void;\n}\n\ntype Mode = \"pools\" | \"my-pools\" | \"my-lp-tokens\" | \"my-uniswap-lp-tokens\";\n\nlet updatingLPTokens = false;\n\n// tslint:disable-next-line:max-func-body-length\nconst useLPTokensState: (mode: Mode) => LPTokensState = mode => {\n    const state = useTokenPairState();\n    const { provider, address, tokens } = useContext(EthersContext);\n    const [lastTimeRefreshed, setLastTimeRefreshed] = useState(0);\n    const [loading, setLoading] = useState(true);\n    const [lpTokens, setLPTokens] = useState<LPToken[]>([]);\n    const [selectedLPToken, setSelectedLPToken] = useState<LPToken>();\n    const [selectedLPTokenAllowed, setSelectedLPTokenAllowed] = useState(false);\n    const [pair, setPair] = useState<Pair>();\n    const [amount, setAmount] = useState(\"\");\n    const { getPair } = useSDK();\n\n    const updateLPTokens = async () => {\n        if (address && provider && tokens.length > 0 && !updatingLPTokens) {\n            try {\n                updatingLPTokens = true;\n                const data = await (mode === \"my-pools\"\n                    ? fetchMyPools(address, tokens, provider)\n                    : mode === \"pools\"\n                    ? fetchPools(address, tokens, provider)\n                    : mode === \"my-lp-tokens\"\n                    ? fetchMyLPTokens(address, tokens, provider)\n                    : fetchMyUniswapLPTokens(address, tokens, provider));\n                if (data) {\n                    setLPTokens(data);\n                }\n            } finally {\n                updatingLPTokens = false;\n                setLoading(false);\n            }\n        }\n    };\n\n    useEffect(() => {\n        if (!selectedLPToken) {\n            setAmount(\"\");\n        }\n    }, [selectedLPToken]);\n\n    useAsyncEffect(async () => {\n        setLoading(true);\n        setPair(undefined);\n        if (selectedLPToken && provider) {\n            try {\n                setPair(await getPair(selectedLPToken.tokenA, selectedLPToken.tokenB, provider));\n            } catch (e) {\n            } finally {\n                setLoading(false);\n            }\n        } else {\n            setLoading(false);\n        }\n    }, [selectedLPToken, provider]);\n\n    useDelayedOnBlockEffect(\n        async block => {\n            if (address && (mode === \"pools\" || tokens.length > 0)) {\n                if (!block) {\n                    setLoading(true);\n                }\n                await updateLPTokens();\n            }\n        },\n        () => \"updateLPTokens()\",\n        [tokens.length, address, lastTimeRefreshed],\n        0\n    );\n\n    return {\n        ...state,\n        fromToken: state.fromToken || selectedLPToken?.tokenA,\n        toToken: state.toToken || selectedLPToken?.tokenB,\n        updateLPTokens,\n        loading: state.loading || loading,\n        lastTimeRefreshed,\n        updateLastTimeRefreshed: () => {\n            setLastTimeRefreshed(Date.now());\n        },\n        lpTokens,\n        selectedLPToken,\n        setSelectedLPToken,\n        selectedLPTokenAllowed,\n        setSelectedLPTokenAllowed,\n        pair,\n        amount,\n        setAmount\n    };\n};\n\nexport default useLPTokensState;\n","import { useCallback, useContext, useEffect, useState } from \"react\";\n\nimport { ethers } from \"ethers\";\nimport useAsyncEffect from \"use-async-effect\";\nimport { SUSHI_ROLL } from \"../constants/contracts\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport { parseBalance } from \"../utils\";\nimport useLPTokensState, { LPTokensState } from \"./useLPTokensState\";\nimport useSDK from \"./useSDK\";\n\nexport type MigrateMode = \"permit\" | \"approve\";\n\nexport interface MigrateState extends LPTokensState {\n    mode?: MigrateMode;\n    setMode: (_mode?: MigrateMode) => void;\n    onMigrate: () => Promise<void>;\n    migrating: boolean;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst useMigrateState: () => MigrateState = () => {\n    const { ethereum } = useContext(EthersContext);\n    const state = useLPTokensState(\"my-uniswap-lp-tokens\");\n    const { provider, signer, getTokenAllowance, updateTokens } = useContext(EthersContext);\n    const { migrate, migrateWithPermit } = useSDK();\n    const [loading, setLoading] = useState(false);\n    const [mode, setMode] = useState<MigrateMode>();\n    const [migrating, setMigrating] = useState(false);\n\n    useEffect(() => {\n        if (ethereum?.isWalletConnect) {\n            setMode(\"approve\");\n        } else {\n            setMode(undefined);\n        }\n    }, [ethereum]);\n\n    useEffect(() => {\n        state.setSelectedLPToken();\n    }, [mode]);\n\n    useAsyncEffect(async () => {\n        if (provider && signer && state.selectedLPToken) {\n            setLoading(true);\n            state.setSelectedLPTokenAllowed(false);\n            try {\n                const minAllowance = ethers.BigNumber.from(2)\n                    .pow(96)\n                    .sub(1);\n                const allowance = await getTokenAllowance(state.selectedLPToken.address, SUSHI_ROLL);\n                state.setSelectedLPTokenAllowed(ethers.BigNumber.from(allowance).gte(minAllowance));\n            } finally {\n                setLoading(false);\n            }\n        }\n    }, [provider, signer, state.selectedLPToken]);\n\n    const onMigrate = useCallback(async () => {\n        if (mode && state.selectedLPToken && state.amount && provider && signer) {\n            setMigrating(true);\n            try {\n                const amount = parseBalance(state.amount, state.selectedLPToken.decimals);\n                const func = mode === \"approve\" ? migrate : migrateWithPermit;\n                const tx = await func(state.selectedLPToken, amount, signer);\n                await tx.wait();\n                await updateTokens();\n                await state.updateLPTokens();\n                state.setSelectedLPToken(undefined);\n            } finally {\n                setMigrating(false);\n            }\n        }\n    }, [mode, state.selectedLPToken, state.amount, provider, signer, migrateWithPermit, updateTokens]);\n\n    return {\n        ...state,\n        loading: state.loading || loading,\n        mode,\n        setMode,\n        onMigrate,\n        migrating\n    };\n};\n\nexport default useMigrateState;\n","import React, { useContext, useState } from \"react\";\nimport { Platform, View } from \"react-native\";\n\nimport useAsyncEffect from \"use-async-effect\";\nimport ApproveButton from \"../components/ApproveButton\";\nimport BackgroundImage from \"../components/BackgroundImage\";\nimport Border from \"../components/Border\";\nimport Button from \"../components/Button\";\nimport CloseIcon from \"../components/CloseIcon\";\nimport Container from \"../components/Container\";\nimport Content from \"../components/Content\";\nimport ErrorMessage from \"../components/ErrorMessage\";\nimport Expandable from \"../components/Expandable\";\nimport FetchingButton from \"../components/FetchingButton\";\nimport FlexView from \"../components/FlexView\";\nimport Heading from \"../components/Heading\";\nimport InfoBox from \"../components/InfoBox\";\nimport InsufficientBalanceButton from \"../components/InsufficientBalanceButton\";\nimport { ITEM_SEPARATOR_HEIGHT } from \"../components/ItemSeparator\";\nimport LPTokenSelect, { LPTokenItem } from \"../components/LPTokenSelect\";\nimport Meta from \"../components/Meta\";\nimport Selectable from \"../components/Selectable\";\nimport SelectIcon from \"../components/SelectIcon\";\nimport Text from \"../components/Text\";\nimport Title from \"../components/Title\";\nimport TokenInput from \"../components/TokenInput\";\nimport WebFooter from \"../components/web/WebFooter\";\nimport { MigrateSubMenu } from \"../components/web/WebSubMenu\";\nimport { SUSHI_ROLL } from \"../constants/contracts\";\nimport { Spacing } from \"../constants/dimension\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport useLinker from \"../hooks/useLinker\";\nimport useMigrateState, { MigrateMode, MigrateState } from \"../hooks/useMigrateState\";\nimport MetamaskError from \"../types/MetamaskError\";\nimport { isEmptyValue, parseBalance } from \"../utils\";\nimport Screen from \"./Screen\";\n\nconst MigrateScreen = () => {\n    return (\n        <Screen>\n            <Container>\n                <BackgroundImage />\n                <Content>\n                    <Title text={\"Migrate Liquidity\"} />\n                    <Text light={true}>Migrate your Uniswap LP tokens to SushiSwap LP tokens.</Text>\n                    <Migrate />\n                </Content>\n                {Platform.OS === \"web\" && <WebFooter />}\n            </Container>\n            <MigrateSubMenu />\n        </Screen>\n    );\n};\n\nconst Migrate = () => {\n    const { ethereum } = useContext(EthersContext);\n    const state = useMigrateState();\n    return (\n        <View style={{ marginTop: Spacing.large }}>\n            {!ethereum?.isWalletConnect && (\n                <>\n                    <MigrateModeSelect state={state} />\n                    <Border />\n                </>\n            )}\n            <UniswapLiquidityScreen state={state} />\n            <Border />\n            <AmountInput state={state} />\n            <AmountInfo state={state} />\n        </View>\n    );\n};\n\nconst MigrateModeSelect = ({ state }: { state: MigrateState }) => {\n    return (\n        <View>\n            <Expandable title={\"Wallet Type\"} expanded={!state.mode} onExpand={() => state.setMode()}>\n                <MigrateModeItem state={state} mode={\"permit\"} />\n                <MigrateModeItem state={state} mode={\"approve\"} />\n            </Expandable>\n            {state.mode && <MigrateModeItem state={state} mode={state.mode} selectable={true} />}\n        </View>\n    );\n};\n\nconst MigrateModeItem = ({\n    state,\n    mode,\n    selectable\n}: {\n    state: MigrateState;\n    mode: MigrateMode;\n    selectable?: boolean;\n}) => {\n    const selected = state.mode === mode;\n    const type = mode === \"permit\" ? \"Non-hardware Wallet\" : \"Hardware Wallet (Trezor, Ledger, etc.)\";\n    const desc =\n        mode === \"permit\"\n            ? \"Migration in done in one-click using your signature(permit).\"\n            : \"You need to first approve LP tokens and then migrate it.\";\n    const onPress = () => state.setMode(state.mode === mode ? undefined : mode);\n    return (\n        <Selectable\n            containerStyle={{ marginBottom: ITEM_SEPARATOR_HEIGHT }}\n            style={{ paddingLeft: Spacing.small + Spacing.tiny, paddingRight: Spacing.small }}\n            selected={selected}\n            disabled={selectable}\n            onPress={onPress}>\n            <FlexView style={{ alignItems: \"center\" }}>\n                <View style={{ flex: 1 }}>\n                    <Text fontWeight={\"regular\"}>{type}</Text>\n                    <Text note={true}>{desc}</Text>\n                </View>\n                {selected ? <CloseIcon /> : <SelectIcon />}\n            </FlexView>\n        </Selectable>\n    );\n};\n\nconst UniswapLiquidityScreen = ({ state }: { state: MigrateState }) => {\n    if (!state.mode) {\n        return <Heading text={\"Your Uniswap Liquidity\"} disabled={true} />;\n    }\n    return (\n        <LPTokenSelect\n            state={state}\n            title={\"Your Uniswap Liquidity\"}\n            emptyText={\"You don't have any liquidity on Uniswap.\"}\n            Item={LPTokenItem}\n        />\n    );\n};\n\nconst AmountInput = ({ state }: { state: MigrateState }) => {\n    if (!state.selectedLPToken) {\n        return <Heading text={\"Amount of Tokens\"} disabled={true} />;\n    }\n    return (\n        <TokenInput\n            title={\"Amount of Tokens\"}\n            token={state.selectedLPToken}\n            amount={state.amount}\n            onAmountChanged={state.setAmount}\n        />\n    );\n};\n\nconst AmountInfo = ({ state }: { state: MigrateState }) => {\n    const disabled = !state.selectedLPToken || isEmptyValue(state.amount);\n    return (\n        <InfoBox>\n            <Meta label={state.selectedLPToken?.symbol || \"SushiSwap LP\"} text={state.amount} disabled={disabled} />\n            <Controls state={state} />\n        </InfoBox>\n    );\n};\n\nconst Controls = ({ state }: { state: MigrateState }) => {\n    const [error, setError] = useState<MetamaskError>({});\n    useAsyncEffect(() => setError({}), [state.amount]);\n    return (\n        <View style={{ marginTop: Spacing.normal }}>\n            {!state.selectedLPToken || isEmptyValue(state.amount) ? (\n                <MigrateButton state={state} onError={setError} disabled={true} />\n            ) : parseBalance(state.amount, state.selectedLPToken.decimals).gt(state.selectedLPToken.balance) ? (\n                <InsufficientBalanceButton symbol={state.selectedLPToken.symbol} />\n            ) : state.loading ? (\n                <FetchingButton />\n            ) : (\n                <>\n                    {state.mode === \"approve\" && !state.selectedLPTokenAllowed && (\n                        <ApproveButton\n                            token={state.selectedLPToken}\n                            spender={SUSHI_ROLL}\n                            onSuccess={() => state.setSelectedLPTokenAllowed(true)}\n                            onError={setError}\n                        />\n                    )}\n                    <MigrateButton\n                        state={state}\n                        onError={setError}\n                        disabled={state.mode === \"approve\" && !state.selectedLPTokenAllowed}\n                    />\n                </>\n            )}\n            {error.message && error.code !== 4001 && <ErrorMessage error={error} />}\n        </View>\n    );\n};\n\nconst MigrateButton = ({\n    state,\n    onError,\n    disabled\n}: {\n    state: MigrateState;\n    onError: (e) => void;\n    disabled: boolean;\n}) => {\n    const goToFarm = useLinker(\"/farming\", \"Farming\");\n    const onPress = async () => {\n        onError({});\n        try {\n            await state.onMigrate();\n            goToFarm();\n        } catch (e) {\n            onError(e);\n        }\n    };\n    return <Button title={\"Migrate Liquidity\"} loading={state.migrating} onPress={onPress} disabled={disabled} />;\n};\n\nexport default MigrateScreen;\n"],"sourceRoot":""}