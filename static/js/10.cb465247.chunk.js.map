{"version":3,"sources":["src/components/InfoBox.tsx","src/components/Notice.tsx","src/components/Border.tsx","src/hooks/useLPTokensState.tsx","src/components/LPTokenSelect.tsx","src/hooks/useMigrateState.tsx","src/screens/MigrateScreen.tsx"],"names":["InfoBox","props","backgroundLight","useColors","border","useStyles","style","color","backgroundColor","marginTop","Spacing","normal","small","padding","tiny","Notice","borderStyle","borderColor","clear","paddingHorizontal","note","text","buttonText","onPressButton","title","type","size","fontWeight","onPress","titleStyle","buttonStyle","paddingVertical","alignSelf","Border","height","width","marginBottom","useLPTokensState","mode","state","useTokenPairState","useContext","EthersContext","provider","address","tokens","useState","lastTimeRefreshed","setLastTimeRefreshed","loading","setLoading","lpTokens","setLPTokens","selectedLPToken","setSelectedLPToken","selectedLPTokenAllowed","setSelectedLPTokenAllowed","pair","setPair","amount","setAmount","getPair","useSDK","updateLPTokens","a","async","fetchPools","fetchMyLPTokens","fetchMyUniswapLPTokens","data","useEffect","useAsyncEffect","undefined","tokenA","tokenB","useDelayedOnBlockEffect","block","length","fromToken","toToken","updateLastTimeRefreshed","Date","now","LPTokenList","emptyText","filter","Item","renderItem","useCallback","item","key","token","selected","onSelectToken","sort","t1","t2","totalDeposited","ethers","constants","Zero","sub","div","pow10","toNumber","amountDeposited","gt","balance","Loading","FlatList","keyExtractor","EmptyList","View","margin","Text","disabled","textAlign","LPTokenItem","textMedium","formatBalance","decimals","Selectable","containerStyle","ITEM_SEPARATOR_HEIGHT","FlexView","alignItems","TokenLogo","replaceWETH","marginLeft","medium","caption","symbol","flex","light","LPTokenSelect","Expandable","expanded","onExpand","useMigrateState","ethereum","signer","getTokenAllowance","updateTokens","migrate","migrateWithPermit","setMode","migrating","setMigrating","isWalletConnect","minAllowance","BigNumber","from","pow","SUSHI_ROLL","allowance","gte","onMigrate","parseBalance","func","tx","wait","Fetcher","fetchPairData","convertToken","window","open","liquidityToken","Migrate","large","MigrateModeSelect","selectable","MigrateModeItem","desc","UniswapLiquidityScreen","Heading","AmountInput","TokenInput","onAmountChanged","AmountInfo","isEmptyValue","Meta","label","Controls","error","setError","onError","InsufficientBalanceButton","FetchingButton","ApproveButton","spender","onSuccess","message","code","ErrorMessage","MigrateButton","Button","MigrateScreen","Screen","Container","Content","Title","Platform","OS","WebFooter"],"mappings":"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","file":"static/js/10.cb465247.chunk.js","sourcesContent":["import React, { PropsWithChildren } from \"react\";\nimport { View, ViewProps } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport useStyles from \"../hooks/useStyles\";\n\nconst InfoBox = (props: PropsWithChildren<ViewProps>) => {\n    const { backgroundLight } = useColors();\n    const { border } = useStyles();\n    return (\n        <View\n            {...props}\n            style={[\n                {\n                    ...border({ color: backgroundLight }),\n                    backgroundColor: backgroundLight,\n                    marginTop: Spacing.normal + Spacing.small,\n                    padding: Spacing.small + Spacing.tiny\n                },\n                props.style\n            ]}\n        />\n    );\n};\n\nexport default InfoBox;\n","import React from \"react\";\nimport { View, ViewStyle } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useStyles from \"../hooks/useStyles\";\nimport Button from \"./Button\";\nimport Text from \"./Text\";\n\nexport interface NoticeProps {\n    text: string;\n    clear?: boolean;\n    color?: string;\n    buttonText?: string;\n    onPressButton?: () => void;\n    style?: ViewStyle;\n}\n\nconst Notice = (props: NoticeProps) => {\n    const { border } = useStyles();\n    const borderStyle = border({ color: props.color });\n    const color = props.color || borderStyle.borderColor;\n    return (\n        <View style={[props.clear ? { paddingHorizontal: Spacing.tiny } : borderStyle, props.style]}>\n            <Text\n                note={true}\n                style={{\n                    color\n                }}>\n                {props.text}\n            </Text>\n            {props.buttonText && props.onPressButton && (\n                <Button\n                    title={props.buttonText}\n                    type={\"clear\"}\n                    size={\"small\"}\n                    fontWeight={\"bold\"}\n                    onPress={props.onPressButton}\n                    titleStyle={{ color }}\n                    buttonStyle={{ paddingHorizontal: 0, paddingVertical: 0 }}\n                    style={{ alignSelf: \"flex-end\", marginTop: Spacing.tiny }}\n                />\n            )}\n        </View>\n    );\n};\n\nexport default Notice;\n","import React from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\n\nconst Border = () => {\n    const { border } = useColors();\n    return (\n        <View\n            style={{\n                height: 1,\n                width: \"100%\",\n                backgroundColor: border,\n                marginTop: Spacing.small,\n                marginBottom: Spacing.small + Spacing.tiny\n            }}\n        />\n    );\n};\n\nexport default Border;\n","import { useContext, useEffect, useState } from \"react\";\n\nimport { Pair } from \"@sushiswap/sdk\";\nimport useAsyncEffect from \"use-async-effect\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport LPToken from \"../types/LPToken\";\nimport { fetchMyLPTokens, fetchMyUniswapLPTokens, fetchPools } from \"../utils/fetch-utils\";\nimport useDelayedOnBlockEffect from \"./useDelayedOnBlockEffect\";\nimport useSDK from \"./useSDK\";\nimport useTokenPairState, { TokenPairState } from \"./useTokenPairState\";\n\nexport interface LPTokensState extends TokenPairState {\n    updateLPTokens: () => Promise<void>;\n    lastTimeRefreshed: number;\n    updateLastTimeRefreshed: () => void;\n    lpTokens: LPToken[];\n    selectedLPToken?: LPToken;\n    setSelectedLPToken: (token?: LPToken) => void;\n    selectedLPTokenAllowed: boolean;\n    setSelectedLPTokenAllowed: (allowed: boolean) => void;\n    pair?: Pair;\n    amount: string;\n    setAmount: (amount: string) => void;\n}\n\ntype Mode = \"pools\" | \"my-lp-tokens\" | \"my-uniswap-lp-tokens\";\n\n// tslint:disable-next-line:max-func-body-length\nconst useLPTokensState: (mode: Mode) => LPTokensState = mode => {\n    const state = useTokenPairState();\n    const { provider, address, tokens } = useContext(EthersContext);\n    const [lastTimeRefreshed, setLastTimeRefreshed] = useState(0);\n    const [loading, setLoading] = useState(true);\n    const [lpTokens, setLPTokens] = useState<LPToken[]>([]);\n    const [selectedLPToken, setSelectedLPToken] = useState<LPToken>();\n    const [selectedLPTokenAllowed, setSelectedLPTokenAllowed] = useState(false);\n    const [pair, setPair] = useState<Pair>();\n    const [amount, setAmount] = useState(\"\");\n    const { getPair } = useSDK();\n\n    const updateLPTokens = async () => {\n        if (address && provider) {\n            try {\n                const data = await (mode === \"pools\"\n                    ? fetchPools(address, provider)\n                    : mode === \"my-lp-tokens\"\n                    ? fetchMyLPTokens(address, tokens, provider)\n                    : fetchMyUniswapLPTokens(address, tokens, provider));\n                if (data) {\n                    setLPTokens(data);\n                }\n            } finally {\n                setLoading(false);\n            }\n        }\n    };\n\n    useEffect(() => {\n        if (!selectedLPToken) {\n            setAmount(\"\");\n        }\n    }, [selectedLPToken]);\n\n    useAsyncEffect(async () => {\n        setLoading(true);\n        setPair(undefined);\n        if (selectedLPToken && provider) {\n            try {\n                setPair(await getPair(selectedLPToken.tokenA, selectedLPToken.tokenB, provider));\n            } catch (e) {\n            } finally {\n                setLoading(false);\n            }\n        } else {\n            setLoading(false);\n        }\n    }, [selectedLPToken, provider]);\n\n    useDelayedOnBlockEffect(\n        async block => {\n            if (address && (mode === \"pools\" || tokens.length > 0)) {\n                if (!block) {\n                    setLoading(true);\n                }\n                await updateLPTokens();\n            }\n        },\n        () => \"updateLPTokens()\",\n        [tokens.length, address, lastTimeRefreshed],\n        0\n    );\n\n    return {\n        ...state,\n        fromToken: state.fromToken || selectedLPToken?.tokenA,\n        toToken: state.toToken || selectedLPToken?.tokenB,\n        updateLPTokens,\n        loading: state.loading || loading,\n        lastTimeRefreshed,\n        updateLastTimeRefreshed: () => {\n            setLastTimeRefreshed(Date.now());\n        },\n        lpTokens,\n        selectedLPToken,\n        setSelectedLPToken,\n        selectedLPTokenAllowed,\n        setSelectedLPTokenAllowed,\n        pair,\n        amount,\n        setAmount\n    };\n};\n\nexport default useLPTokensState;\n","import React, { FC, useCallback } from \"react\";\nimport { FlatList, View, ViewStyle } from \"react-native\";\n\nimport { ethers } from \"ethers\";\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport { LPTokensState } from \"../hooks/useLPTokensState\";\nimport LPToken from \"../types/LPToken\";\nimport { formatBalance, pow10 } from \"../utils\";\nimport CheckBox from \"./CheckBox\";\nimport Expandable from \"./Expandable\";\nimport FlexView from \"./FlexView\";\nimport { ITEM_SEPARATOR_HEIGHT } from \"./ItemSeparator\";\nimport Loading from \"./Loading\";\nimport Selectable from \"./Selectable\";\nimport Text from \"./Text\";\nimport TokenLogo from \"./TokenLogo\";\n\nexport type LPTokenSelectFilter = \"balance\" | \"amountDeposited\" | \"\";\n\nexport interface LPTokenSelectProps {\n    state: LPTokensState;\n    title: string;\n    emptyText: string;\n    showFilter?: boolean;\n    filter?: LPTokenSelectFilter;\n    onFilterChanged?: (filter: LPTokenSelectFilter) => void;\n    Item: FC<LPTokenItemProps>;\n    style?: ViewStyle;\n}\n\nexport interface LPTokenItemProps {\n    token: LPToken;\n    selected: boolean;\n    filter?: LPTokenSelectFilter;\n    onSelectToken: (token: LPToken) => void;\n}\n\nconst LPTokenSelect: FC<LPTokenSelectProps> = props => {\n    const onUnselectToken = () => props.state.setSelectedLPToken();\n    return (\n        <View style={props.style}>\n            <Expandable\n                title={props.title}\n                expanded={!props.state.selectedLPToken}\n                onExpand={() => props.state.setSelectedLPToken()}>\n                <LPTokenList state={props.state} filter={props.filter} emptyText={props.emptyText} Item={props.Item} />\n            </Expandable>\n            {props.state.selectedLPToken && (\n                <LPTokenItem token={props.state.selectedLPToken} selected={true} onSelectToken={onUnselectToken} />\n            )}\n        </View>\n    );\n};\n\nconst Filter = ({ filter, onFilterChanged }) => {\n    const handler = (f: string) => () => onFilterChanged(f);\n    return (\n        <FlexView style={{ width: \"100%\", justifyContent: \"flex-end\" }}>\n            <CheckBox checked={filter === \"balance\"} onPress={handler(\"balance\")} title={\"with balance\"} />\n            <CheckBox\n                checked={filter === \"amountDeposited\"}\n                onPress={handler(\"amountDeposited\")}\n                title={\"with deposit\"}\n            />\n            <CheckBox checked={!filter} onPress={handler(\"\")} title={\"all\"} />\n        </FlexView>\n    );\n};\n\n// tslint:disable-next-line:max-func-body-length\nconst LPTokenList = ({\n    state,\n    emptyText,\n    filter,\n    Item\n}: {\n    state: LPTokensState;\n    emptyText: string;\n    filter?: LPTokenSelectFilter;\n    Item: FC<LPTokenItemProps>;\n}) => {\n    const renderItem = useCallback(\n        ({ item }) => {\n            return (\n                <Item\n                    key={item.address}\n                    token={item}\n                    selected={false}\n                    filter={filter}\n                    onSelectToken={state.setSelectedLPToken}\n                />\n            );\n        },\n        [filter, state.setSelectedLPToken]\n    );\n    let data = state.lpTokens.sort((t1, t2) => {\n        return (t2.totalDeposited || ethers.constants.Zero)\n            .sub(t1.totalDeposited || ethers.constants.Zero)\n            .div(pow10(14))\n            .toNumber();\n    });\n    if (filter === \"amountDeposited\") {\n        data = data.filter(token => token.amountDeposited?.gt(0));\n    } else if (filter === \"balance\") {\n        data = data.filter(token => token.balance.gt(0));\n    }\n    return state.loading ? (\n        <Loading />\n    ) : data.length === 0 ? (\n        <EmptyList text={emptyText} />\n    ) : (\n        <FlatList keyExtractor={item => item.address} data={data} renderItem={renderItem} />\n    );\n};\n\nconst EmptyList = ({ text }: { text: string }) => {\n    return (\n        <View style={{ margin: Spacing.normal }}>\n            <Text disabled={true} style={{ textAlign: \"center\", width: \"100%\" }}>\n                {text}\n            </Text>\n        </View>\n    );\n};\n\nexport const LPTokenItem: FC<LPTokenItemProps> = props => {\n    const { textMedium } = useColors();\n    const balance = formatBalance(props.token.balance, props.token.decimals, 8);\n    const onPress = useCallback(() => {\n        props.onSelectToken(props.token);\n    }, [props.onSelectToken, props.token]);\n    return (\n        <Selectable\n            selected={props.selected}\n            onPress={onPress}\n            containerStyle={{ marginBottom: ITEM_SEPARATOR_HEIGHT }}>\n            <FlexView style={{ alignItems: \"center\" }}>\n                <TokenLogo token={props.token.tokenA} small={true} replaceWETH={true} />\n                <TokenLogo token={props.token.tokenB} small={true} replaceWETH={true} style={{ marginLeft: 4 }} />\n                <Text medium={true} caption={true} style={{ marginLeft: Spacing.tiny }}>\n                    {props.token.tokenA.symbol}-{props.token.tokenB.symbol}\n                </Text>\n                <View style={{ flex: 1, marginLeft: Spacing.tiny }}>\n                    {/*<Text note={true} style={{ textAlign: \"right\", color: textLight }}>*/}\n                    {/*    My Balance*/}\n                    {/*</Text>*/}\n                    <Text caption={true} light={true} style={{ textAlign: \"right\", color: textMedium }}>\n                        {balance}\n                    </Text>\n                </View>\n            </FlexView>\n        </Selectable>\n    );\n};\n\nexport default LPTokenSelect;\n","import { useCallback, useContext, useEffect, useState } from \"react\";\n\nimport { Fetcher } from \"@sushiswap/sdk\";\nimport { ethers } from \"ethers\";\nimport useAsyncEffect from \"use-async-effect\";\nimport { SUSHI_ROLL } from \"../constants/contracts\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport { convertToken, parseBalance } from \"../utils\";\nimport useLPTokensState, { LPTokensState } from \"./useLPTokensState\";\nimport useSDK from \"./useSDK\";\n\nexport type MigrateMode = \"permit\" | \"approve\";\n\nexport interface MigrateState extends LPTokensState {\n    mode?: MigrateMode;\n    setMode: (_mode?: MigrateMode) => void;\n    onMigrate: () => Promise<void>;\n    migrating: boolean;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst useMigrateState: () => MigrateState = () => {\n    const { ethereum } = useContext(EthersContext);\n    const state = useLPTokensState(\"my-uniswap-lp-tokens\");\n    const { provider, signer, getTokenAllowance, updateTokens } = useContext(EthersContext);\n    const { migrate, migrateWithPermit } = useSDK();\n    const [loading, setLoading] = useState(false);\n    const [mode, setMode] = useState<MigrateMode>();\n    const [migrating, setMigrating] = useState(false);\n\n    useEffect(() => {\n        if (ethereum?.isWalletConnect) {\n            setMode(\"approve\");\n        } else {\n            setMode(undefined);\n        }\n    }, [ethereum]);\n\n    useEffect(() => {\n        state.setSelectedLPToken();\n    }, [mode]);\n\n    useAsyncEffect(async () => {\n        if (provider && signer && state.selectedLPToken) {\n            setLoading(true);\n            state.setSelectedLPTokenAllowed(false);\n            try {\n                const minAllowance = ethers.BigNumber.from(2)\n                    .pow(96)\n                    .sub(1);\n                const allowance = await getTokenAllowance(state.selectedLPToken.address, SUSHI_ROLL);\n                state.setSelectedLPTokenAllowed(ethers.BigNumber.from(allowance).gte(minAllowance));\n            } finally {\n                setLoading(false);\n            }\n        }\n    }, [provider, signer, state.selectedLPToken]);\n\n    const onMigrate = useCallback(async () => {\n        if (mode && state.selectedLPToken && state.amount && provider && signer) {\n            setMigrating(true);\n            try {\n                const amount = parseBalance(state.amount, state.selectedLPToken.decimals);\n                const func = mode === \"approve\" ? migrate : migrateWithPermit;\n                const tx = await func(state.selectedLPToken, amount, signer);\n                await tx.wait();\n                await updateTokens();\n                await state.updateLPTokens();\n                state.setSelectedLPToken(undefined);\n\n                const pair = await Fetcher.fetchPairData(\n                    convertToken(state.selectedLPToken.tokenA),\n                    convertToken(state.selectedLPToken.tokenB),\n                    provider\n                );\n                window.open(\"https://sushiswap.fi/pair/\" + pair.liquidityToken.address, \"_blank\");\n            } finally {\n                setMigrating(false);\n            }\n        }\n    }, [mode, state.selectedLPToken, state.amount, provider, signer, migrateWithPermit, updateTokens]);\n\n    return {\n        ...state,\n        loading: state.loading || loading,\n        mode,\n        setMode,\n        onMigrate,\n        migrating\n    };\n};\n\nexport default useMigrateState;\n","import React, { useContext, useState } from \"react\";\nimport { Platform, View } from \"react-native\";\n\nimport useAsyncEffect from \"use-async-effect\";\nimport ApproveButton from \"../components/ApproveButton\";\nimport Border from \"../components/Border\";\nimport Button from \"../components/Button\";\nimport Container from \"../components/Container\";\nimport Content from \"../components/Content\";\nimport ErrorMessage from \"../components/ErrorMessage\";\nimport Expandable from \"../components/Expandable\";\nimport FetchingButton from \"../components/FetchingButton\";\nimport Heading from \"../components/Heading\";\nimport InfoBox from \"../components/InfoBox\";\nimport InsufficientBalanceButton from \"../components/InsufficientBalanceButton\";\nimport { ITEM_SEPARATOR_HEIGHT } from \"../components/ItemSeparator\";\nimport LPTokenSelect, { LPTokenItem } from \"../components/LPTokenSelect\";\nimport Meta from \"../components/Meta\";\nimport Notice from \"../components/Notice\";\nimport Selectable from \"../components/Selectable\";\nimport Text from \"../components/Text\";\nimport Title from \"../components/Title\";\nimport TokenInput from \"../components/TokenInput\";\nimport WebFooter from \"../components/web/WebFooter\";\nimport { MigrateSubMenu } from \"../components/web/WebSubMenu\";\nimport { SUSHI_ROLL } from \"../constants/contracts\";\nimport { Spacing } from \"../constants/dimension\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport useMigrateState, { MigrateMode, MigrateState } from \"../hooks/useMigrateState\";\nimport MetamaskError from \"../types/MetamaskError\";\nimport { isEmptyValue, parseBalance } from \"../utils\";\nimport Screen from \"./Screen\";\n\nconst MigrateScreen = () => {\n    return (\n        <Screen>\n            <MigrateSubMenu />\n            <Container>\n                <Content>\n                    <Title text={\"Migrate Liquidity\"} />\n                    <Text light={true}>Migrate your Uniswap LP tokens to SushiSwap LP tokens.</Text>\n                    <Migrate />\n                    {Platform.OS === \"web\" && <WebFooter />}\n                </Content>\n            </Container>\n        </Screen>\n    );\n};\n\nconst Migrate = () => {\n    const { ethereum } = useContext(EthersContext);\n    const state = useMigrateState();\n    return (\n        <View style={{ marginTop: Spacing.large }}>\n            {!ethereum?.isWalletConnect && (\n                <>\n                    <MigrateModeSelect state={state} />\n                    <Border />\n                </>\n            )}\n            <UniswapLiquidityScreen state={state} />\n            <Border />\n            <AmountInput state={state} />\n            <Border />\n            <AmountInfo state={state} />\n            <Notice\n                text={\n                    \"☘️ You'll be redirected to the pair page after the migration finishes.\\n\" +\n                    \"Start earning additional income with 'Stake' on that page.\"\n                }\n                clear={true}\n                style={{ marginTop: Spacing.normal }}\n            />\n        </View>\n    );\n};\n\nconst MigrateModeSelect = ({ state }: { state: MigrateState }) => {\n    return (\n        <View>\n            <Expandable title={\"Wallet Type\"} expanded={!state.mode} onExpand={() => state.setMode()}>\n                <MigrateModeItem state={state} mode={\"permit\"} />\n                <MigrateModeItem state={state} mode={\"approve\"} />\n            </Expandable>\n            {state.mode && <MigrateModeItem state={state} mode={state.mode} selectable={true} />}\n        </View>\n    );\n};\n\nconst MigrateModeItem = ({\n    state,\n    mode,\n    selectable\n}: {\n    state: MigrateState;\n    mode: MigrateMode;\n    selectable?: boolean;\n}) => {\n    const selected = state.mode === mode;\n    const type = mode === \"permit\" ? \"Non-hardware Wallet\" : \"Hardware Wallet (Trezor, Ledger, etc.)\";\n    const desc =\n        mode === \"permit\"\n            ? \"Migration in done in one-click using your signature(permit).\"\n            : \"You need to first approve LP tokens and then migrate it.\";\n    const onPress = () => state.setMode(state.mode === mode ? undefined : mode);\n    return (\n        <Selectable\n            containerStyle={{ marginBottom: ITEM_SEPARATOR_HEIGHT }}\n            style={{\n                paddingHorizontal: Spacing.small + Spacing.tiny\n            }}\n            selected={selected}\n            disabled={selectable}\n            onPress={onPress}>\n            <Text fontWeight={\"regular\"}>{type}</Text>\n            <Text note={true}>{desc}</Text>\n        </Selectable>\n    );\n};\n\nconst UniswapLiquidityScreen = ({ state }: { state: MigrateState }) => {\n    if (!state.mode) {\n        return <Heading text={\"Your Uniswap Liquidity\"} disabled={true} />;\n    }\n    return (\n        <LPTokenSelect\n            state={state}\n            title={\"Your Uniswap Liquidity\"}\n            emptyText={\"You don't have any liquidity on Uniswap.\"}\n            Item={LPTokenItem}\n        />\n    );\n};\n\nconst AmountInput = ({ state }: { state: MigrateState }) => {\n    if (!state.selectedLPToken) {\n        return <Heading text={\"Amount of Tokens\"} disabled={true} />;\n    }\n    return (\n        <TokenInput\n            title={\"Amount of Tokens\"}\n            token={state.selectedLPToken}\n            amount={state.amount}\n            onAmountChanged={state.setAmount}\n        />\n    );\n};\n\nconst AmountInfo = ({ state }: { state: MigrateState }) => {\n    const disabled = !state.selectedLPToken || isEmptyValue(state.amount);\n    return (\n        <InfoBox>\n            <Meta label={state.selectedLPToken?.symbol || \"SushiSwap LP\"} text={state.amount} disabled={disabled} />\n            <Controls state={state} />\n        </InfoBox>\n    );\n};\n\nconst Controls = ({ state }: { state: MigrateState }) => {\n    const [error, setError] = useState<MetamaskError>({});\n    useAsyncEffect(() => setError({}), [state.amount]);\n    return (\n        <View style={{ marginTop: Spacing.normal }}>\n            {!state.selectedLPToken || isEmptyValue(state.amount) ? (\n                <MigrateButton state={state} onError={setError} disabled={true} />\n            ) : parseBalance(state.amount, state.selectedLPToken.decimals).gt(state.selectedLPToken.balance) ? (\n                <InsufficientBalanceButton symbol={state.selectedLPToken.symbol} />\n            ) : state.loading ? (\n                <FetchingButton />\n            ) : (\n                <>\n                    {state.mode === \"approve\" && !state.selectedLPTokenAllowed && (\n                        <ApproveButton\n                            token={state.selectedLPToken}\n                            spender={SUSHI_ROLL}\n                            onSuccess={() => state.setSelectedLPTokenAllowed(true)}\n                            onError={setError}\n                        />\n                    )}\n                    <MigrateButton\n                        state={state}\n                        onError={setError}\n                        disabled={state.mode === \"approve\" && !state.selectedLPTokenAllowed}\n                    />\n                </>\n            )}\n            {error.message && error.code !== 4001 && <ErrorMessage error={error} />}\n        </View>\n    );\n};\n\nconst MigrateButton = ({\n    state,\n    onError,\n    disabled\n}: {\n    state: MigrateState;\n    onError: (e) => void;\n    disabled: boolean;\n}) => {\n    const onPress = async () => {\n        onError({});\n        try {\n            await state.onMigrate();\n        } catch (e) {\n            onError(e);\n        }\n    };\n    return <Button title={\"Migrate Liquidity\"} loading={state.migrating} onPress={onPress} disabled={disabled} />;\n};\n\nexport default MigrateScreen;\n"],"sourceRoot":""}