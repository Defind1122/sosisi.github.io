{"version":3,"sources":["src/components/AmountMeta.tsx","src/components/LPTokenSelect.tsx","src/hooks/useLPTokensState.tsx","src/hooks/useFarmingState.tsx","src/screens/HarvestScreen.tsx"],"names":["AmountMeta","props","useColors","textDark","textLight","placeholder","style","fontSize","IS_DESKTOP","marginBottom","Spacing","normal","color","disabled","amount","suffix","LPTokenList","state","emptyText","Item","renderItem","useCallback","item","key","symbol","token","selected","onSelectToken","setSelectedLPToken","data","lpTokens","sort","p1","p2","apy","loading","length","EmptyList","text","keyExtractor","margin","textAlign","width","LPTokenItem","textMedium","balance","formatBalance","decimals","onPress","containerStyle","ITEM_SEPARATOR_HEIGHT","alignItems","tokenA","small","replaceWETH","tokenB","marginLeft","medium","caption","tiny","flex","light","LPTokenSelect","title","expanded","selectedLPToken","onExpand","updatingLPTokens","useLPTokensState","mode","useTokenPairState","useContext","EthersContext","provider","address","tokens","useState","lastTimeRefreshed","setLastTimeRefreshed","setLoading","setLPTokens","selectedLPTokenAllowed","setSelectedLPTokenAllowed","pair","setPair","setAmount","getPair","useSDK","updateLPTokens","a","async","fetchMyPools","fetchPools","fetchMyLPTokens","fetchMyUniswapLPTokens","useEffect","useAsyncEffect","undefined","useDelayedOnBlockEffect","block","fromToken","toToken","updateLastTimeRefreshed","Date","now","useFarmingState","myPools","signer","getTokenAllowance","deposit","withdraw","depositing","setDepositing","withdrawing","setWithdrawing","setFromAmount","setToAmount","minAllowance","ethers","BigNumber","from","pow","sub","MASTER_CHEF","allowance","gte","totalSupply","amountDeposited","lpToken","convertToken","TokenAmount","toString","lpTokenAmount","tokenAAmount","involvesToken","getLiquidityValue","toFixed","tokenBAmount","onDeposit","id","parseBalance","tx","wait","onWithdraw","Harvest","marginTop","large","TokenItem","Withdraw","WithdrawInfo","marginRight","onAmountChanged","autoFocus","total","sushi","lte","pendingSushi","mul","div","isEmptyValue","label","fromAmount","toAmount","WithdrawControls","error","setError","isZero","WithdrawButton","onError","gt","message","code","catch","HarvestScreen","Platform","OS"],"mappings":"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","file":"static/js/11.bc8ea55d.chunk.js","sourcesContent":["import React, { FC } from \"react\";\n\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport Text from \"./Text\";\n\nexport interface AmountMetaProps {\n    amount?: string;\n    suffix?: string;\n    disabled?: boolean;\n}\n\nconst AmountMeta: FC<AmountMetaProps> = props => {\n    const { textDark, textLight, placeholder } = useColors();\n    return (\n        <Text\n            style={{\n                fontSize: IS_DESKTOP ? 28 : 20,\n                marginBottom: Spacing.normal,\n                color: props.disabled ? placeholder : props.amount ? textDark : textLight\n            }}>\n            {props.disabled ? \"N/A\" : props.amount ? props.amount + \" \" + (props.suffix || \"\") : \"Fetching…\"}\n        </Text>\n    );\n};\n\nexport default AmountMeta;\n","import React, { FC, useCallback } from \"react\";\nimport { FlatList, View, ViewStyle } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport { LPTokensState } from \"../hooks/useLPTokensState\";\nimport LPToken from \"../types/LPToken\";\nimport { formatBalance } from \"../utils\";\nimport CloseIcon from \"./CloseIcon\";\nimport Expandable from \"./Expandable\";\nimport FlexView from \"./FlexView\";\nimport { ITEM_SEPARATOR_HEIGHT } from \"./ItemSeparator\";\nimport Loading from \"./Loading\";\nimport Selectable from \"./Selectable\";\nimport SelectIcon from \"./SelectIcon\";\nimport Text from \"./Text\";\nimport TokenLogo from \"./TokenLogo\";\n\nexport type LPTokenSelectFilter = \"balance\" | \"amountDeposited\" | \"\";\n\nexport interface LPTokenSelectProps {\n    state: LPTokensState;\n    title: string;\n    emptyText: string;\n    Item: FC<LPTokenItemProps>;\n    style?: ViewStyle;\n}\n\nexport interface LPTokenItemProps {\n    token: LPToken;\n    selected: boolean;\n    onSelectToken: (token: LPToken) => void;\n}\n\nconst LPTokenSelect: FC<LPTokenSelectProps> = props => {\n    const onUnselectToken = () => props.state.setSelectedLPToken();\n    return (\n        <View style={props.style}>\n            <Expandable\n                title={props.title}\n                expanded={!props.state.selectedLPToken}\n                onExpand={() => props.state.setSelectedLPToken()}>\n                <LPTokenList state={props.state} emptyText={props.emptyText} Item={props.Item} />\n            </Expandable>\n            {props.state.selectedLPToken && (\n                <props.Item token={props.state.selectedLPToken} selected={true} onSelectToken={onUnselectToken} />\n            )}\n        </View>\n    );\n};\n\n// tslint:disable-next-line:max-func-body-length\nconst LPTokenList = ({\n    state,\n    emptyText,\n    Item\n}: {\n    state: LPTokensState;\n    emptyText: string;\n    Item: FC<LPTokenItemProps>;\n}) => {\n    const renderItem = useCallback(\n        ({ item }) => {\n            return <Item key={item.symbol} token={item} selected={false} onSelectToken={state.setSelectedLPToken} />;\n        },\n        [state.setSelectedLPToken]\n    );\n    const data = state.lpTokens.sort((p1, p2) => (p2.apy || 0) - (p1.apy || 0));\n    return state.loading ? (\n        <Loading />\n    ) : data.length === 0 ? (\n        <EmptyList text={emptyText} />\n    ) : (\n        <FlatList keyExtractor={item => item.symbol} data={data} renderItem={renderItem} />\n    );\n};\n\nconst EmptyList = ({ text }: { text: string }) => {\n    return (\n        <View style={{ margin: Spacing.normal }}>\n            <Text disabled={true} style={{ textAlign: \"center\", width: \"100%\" }}>\n                {text}\n            </Text>\n        </View>\n    );\n};\n\nexport const LPTokenItem: FC<LPTokenItemProps> = props => {\n    const { textMedium } = useColors();\n    const balance = formatBalance(props.token.balance, props.token.decimals, 6);\n    const onPress = useCallback(() => {\n        props.onSelectToken(props.token);\n    }, [props.onSelectToken, props.token]);\n    return (\n        <Selectable\n            selected={props.selected}\n            onPress={onPress}\n            containerStyle={{ marginBottom: ITEM_SEPARATOR_HEIGHT }}>\n            <FlexView style={{ alignItems: \"center\" }}>\n                <TokenLogo token={props.token.tokenA} small={true} replaceWETH={true} />\n                <TokenLogo token={props.token.tokenB} small={true} replaceWETH={true} style={{ marginLeft: 4 }} />\n                <Text medium={true} caption={true} style={{ marginLeft: Spacing.tiny }}>\n                    {props.token.tokenA.symbol}-{props.token.tokenB.symbol}\n                </Text>\n                <View style={{ flex: 1, marginLeft: Spacing.tiny }}>\n                    <Text caption={true} light={true} style={{ textAlign: \"right\", color: textMedium }}>\n                        {balance}\n                    </Text>\n                </View>\n                {props.selected ? <CloseIcon /> : <SelectIcon />}\n            </FlexView>\n        </Selectable>\n    );\n};\n\nexport default LPTokenSelect;\n","import { useContext, useEffect, useState } from \"react\";\n\nimport { Pair } from \"@sushiswap/sdk\";\nimport useAsyncEffect from \"use-async-effect\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport LPToken from \"../types/LPToken\";\nimport { fetchMyLPTokens, fetchMyPools, fetchMyUniswapLPTokens, fetchPools } from \"../utils/fetch-utils\";\nimport useDelayedOnBlockEffect from \"./useDelayedOnBlockEffect\";\nimport useSDK from \"./useSDK\";\nimport useTokenPairState, { TokenPairState } from \"./useTokenPairState\";\n\nexport interface LPTokensState extends TokenPairState {\n    updateLPTokens: () => Promise<void>;\n    lastTimeRefreshed: number;\n    updateLastTimeRefreshed: () => void;\n    lpTokens: LPToken[];\n    selectedLPToken?: LPToken;\n    setSelectedLPToken: (token?: LPToken) => void;\n    selectedLPTokenAllowed: boolean;\n    setSelectedLPTokenAllowed: (allowed: boolean) => void;\n    pair?: Pair;\n    amount: string;\n    setAmount: (amount: string) => void;\n}\n\ntype Mode = \"pools\" | \"my-pools\" | \"my-lp-tokens\" | \"my-uniswap-lp-tokens\";\n\nlet updatingLPTokens = false;\n\n// tslint:disable-next-line:max-func-body-length\nconst useLPTokensState: (mode: Mode) => LPTokensState = mode => {\n    const state = useTokenPairState();\n    const { provider, address, tokens } = useContext(EthersContext);\n    const [lastTimeRefreshed, setLastTimeRefreshed] = useState(0);\n    const [loading, setLoading] = useState(true);\n    const [lpTokens, setLPTokens] = useState<LPToken[]>([]);\n    const [selectedLPToken, setSelectedLPToken] = useState<LPToken>();\n    const [selectedLPTokenAllowed, setSelectedLPTokenAllowed] = useState(false);\n    const [pair, setPair] = useState<Pair>();\n    const [amount, setAmount] = useState(\"\");\n    const { getPair } = useSDK();\n\n    const updateLPTokens = async () => {\n        if (address && provider && tokens.length > 0 && !updatingLPTokens) {\n            try {\n                updatingLPTokens = true;\n                const data = await (mode === \"my-pools\"\n                    ? fetchMyPools(address, tokens, provider)\n                    : mode === \"pools\"\n                    ? fetchPools(address, tokens, provider)\n                    : mode === \"my-lp-tokens\"\n                    ? fetchMyLPTokens(address, tokens, provider)\n                    : fetchMyUniswapLPTokens(address, tokens, provider));\n                if (data) {\n                    setLPTokens(data);\n                }\n            } finally {\n                updatingLPTokens = false;\n                setLoading(false);\n            }\n        }\n    };\n\n    useEffect(() => {\n        if (!selectedLPToken) {\n            setAmount(\"\");\n        }\n    }, [selectedLPToken]);\n\n    useAsyncEffect(async () => {\n        setLoading(true);\n        setPair(undefined);\n        if (selectedLPToken && provider) {\n            try {\n                setPair(await getPair(selectedLPToken.tokenA, selectedLPToken.tokenB, provider));\n            } catch (e) {\n            } finally {\n                setLoading(false);\n            }\n        } else {\n            setLoading(false);\n        }\n    }, [selectedLPToken, provider]);\n\n    useDelayedOnBlockEffect(\n        async block => {\n            if (address && (mode === \"pools\" || tokens.length > 0)) {\n                if (!block) {\n                    setLoading(true);\n                }\n                await updateLPTokens();\n            }\n        },\n        () => \"updateLPTokens()\",\n        [tokens.length, address, lastTimeRefreshed],\n        0\n    );\n\n    return {\n        ...state,\n        fromToken: state.fromToken || selectedLPToken?.tokenA,\n        toToken: state.toToken || selectedLPToken?.tokenB,\n        updateLPTokens,\n        loading: state.loading || loading,\n        lastTimeRefreshed,\n        updateLastTimeRefreshed: () => {\n            setLastTimeRefreshed(Date.now());\n        },\n        lpTokens,\n        selectedLPToken,\n        setSelectedLPToken,\n        selectedLPTokenAllowed,\n        setSelectedLPTokenAllowed,\n        pair,\n        amount,\n        setAmount\n    };\n};\n\nexport default useLPTokensState;\n","import { useCallback, useContext, useEffect, useState } from \"react\";\n\nimport { TokenAmount } from \"@sushiswap/sdk\";\nimport { ethers } from \"ethers\";\nimport useAsyncEffect from \"use-async-effect\";\nimport { MASTER_CHEF } from \"../constants/contracts\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport { convertToken, parseBalance } from \"../utils\";\nimport useLPTokensState, { LPTokensState } from \"./useLPTokensState\";\nimport useSDK from \"./useSDK\";\n\nexport interface FarmingState extends LPTokensState {\n    onDeposit: () => Promise<void>;\n    depositing: boolean;\n    onWithdraw: () => Promise<void>;\n    withdrawing: boolean;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst useFarmingState: (myPools: boolean) => FarmingState = myPools => {\n    const state = useLPTokensState(myPools ? \"my-pools\" : \"pools\");\n    const { signer, getTokenAllowance } = useContext(EthersContext);\n    const { deposit, withdraw } = useSDK();\n    const [loading, setLoading] = useState(false);\n    const [depositing, setDepositing] = useState(false);\n    const [withdrawing, setWithdrawing] = useState(false);\n\n    useEffect(() => {\n        setLoading(false);\n        setDepositing(false);\n        setWithdrawing(false);\n        state.setFromAmount(\"\");\n        state.setToAmount(\"\");\n    }, [state.selectedLPToken]);\n\n    useAsyncEffect(async () => {\n        if (signer && state.selectedLPToken) {\n            setLoading(true);\n            state.setSelectedLPTokenAllowed(false);\n            try {\n                const minAllowance = ethers.BigNumber.from(2)\n                    .pow(96)\n                    .sub(1);\n                const allowance = await getTokenAllowance(state.selectedLPToken.address, MASTER_CHEF);\n                state.setSelectedLPTokenAllowed(ethers.BigNumber.from(allowance).gte(minAllowance));\n            } finally {\n                setLoading(false);\n            }\n        }\n    }, [signer, state.selectedLPToken]);\n\n    useAsyncEffect(() => {\n        if (\n            state.pair &&\n            state.selectedLPToken &&\n            state.selectedLPToken.totalSupply &&\n            state.selectedLPToken.amountDeposited\n        ) {\n            const lpToken = convertToken(state.selectedLPToken);\n            const tokenA = convertToken(state.selectedLPToken.tokenA);\n            const tokenB = convertToken(state.selectedLPToken.tokenB);\n            const totalSupply = new TokenAmount(lpToken, state.selectedLPToken.totalSupply.toString());\n            const lpTokenAmount = new TokenAmount(lpToken, state.selectedLPToken.amountDeposited.toString());\n            const tokenAAmount = state.pair.involvesToken(tokenA)\n                ? state.pair.getLiquidityValue(tokenA, totalSupply, lpTokenAmount)\n                : null;\n            state.setFromAmount(tokenAAmount?.toFixed() || \"\");\n            const tokenBAmount = state.pair.involvesToken(tokenA)\n                ? state.pair.getLiquidityValue(tokenB, totalSupply, lpTokenAmount)\n                : null;\n            state.setToAmount(tokenBAmount?.toFixed() || \"\");\n        }\n    }, [state.pair, state.selectedLPToken]);\n\n    const onDeposit = useCallback(async () => {\n        if (state.selectedLPToken?.id && state.amount && signer) {\n            setDepositing(true);\n            try {\n                const amount = parseBalance(state.amount, state.selectedLPToken.decimals);\n                const tx = await deposit(state.selectedLPToken.id, amount, signer);\n                await tx.wait();\n                state.setSelectedLPToken(undefined);\n                await state.updateLastTimeRefreshed();\n            } finally {\n                setDepositing(false);\n            }\n        }\n    }, [state.selectedLPToken, state.amount, signer]);\n\n    const onWithdraw = useCallback(async () => {\n        if (state.selectedLPToken?.id && state.amount && signer) {\n            setWithdrawing(true);\n            try {\n                const amount = parseBalance(state.amount, state.selectedLPToken.decimals);\n                const tx = await withdraw(state.selectedLPToken.id, amount, signer);\n                await tx.wait();\n                state.setSelectedLPToken(undefined);\n                await state.updateLastTimeRefreshed();\n            } finally {\n                setWithdrawing(false);\n            }\n        }\n    }, [state.selectedLPToken, state.amount, signer]);\n\n    return {\n        ...state,\n        loading: state.loading || loading,\n        onDeposit,\n        depositing,\n        onWithdraw,\n        withdrawing\n    };\n};\n\nexport default useFarmingState;\n","import React, { FC, useCallback, useState } from \"react\";\nimport { Platform, View } from \"react-native\";\n\nimport useAsyncEffect from \"use-async-effect\";\nimport AmountMeta from \"../components/AmountMeta\";\nimport BackgroundImage from \"../components/BackgroundImage\";\nimport Border from \"../components/Border\";\nimport Button from \"../components/Button\";\nimport CloseIcon from \"../components/CloseIcon\";\nimport Container from \"../components/Container\";\nimport Content from \"../components/Content\";\nimport ErrorMessage from \"../components/ErrorMessage\";\nimport FetchingButton from \"../components/FetchingButton\";\nimport FlexView from \"../components/FlexView\";\nimport Heading from \"../components/Heading\";\nimport InfoBox from \"../components/InfoBox\";\nimport { ITEM_SEPARATOR_HEIGHT } from \"../components/ItemSeparator\";\nimport LPTokenSelect, { LPTokenItemProps } from \"../components/LPTokenSelect\";\nimport Meta from \"../components/Meta\";\nimport Selectable from \"../components/Selectable\";\nimport SelectIcon from \"../components/SelectIcon\";\nimport Text from \"../components/Text\";\nimport Title from \"../components/Title\";\nimport TokenInput from \"../components/TokenInput\";\nimport TokenLogo from \"../components/TokenLogo\";\nimport WebFooter from \"../components/web/WebFooter\";\nimport { FarmingSubMenu } from \"../components/web/WebSubMenu\";\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport useFarmingState, { FarmingState } from \"../hooks/useFarmingState\";\nimport MetamaskError from \"../types/MetamaskError\";\nimport Token from \"../types/Token\";\nimport { formatBalance, isEmptyValue, parseBalance } from \"../utils\";\nimport Screen from \"./Screen\";\n\nconst HarvestScreen = () => {\n    return (\n        <Screen>\n            <Container>\n                <BackgroundImage />\n                <Content>\n                    <Title text={\"Harvest SUSHI\"} />\n                    <Text light={true}>Withdraw your LP tokens to harvest SUSHI rewards.</Text>\n                    <Harvest />\n                </Content>\n                {Platform.OS === \"web\" && <WebFooter />}\n            </Container>\n            <FarmingSubMenu />\n        </Screen>\n    );\n};\n\nconst Harvest = () => {\n    const state = useFarmingState(true);\n    const emptyText = \"You don't have any LP tokens deposited.\";\n    return (\n        <View style={{ marginTop: Spacing.large }}>\n            <LPTokenSelect state={state} title={\"My Pools\"} emptyText={emptyText} Item={TokenItem} />\n            <Border />\n            <Withdraw state={state} />\n            <WithdrawInfo state={state} />\n        </View>\n    );\n};\n\n// tslint:disable-next-line:max-func-body-length\nconst TokenItem: FC<LPTokenItemProps> = props => {\n    const amount = formatBalance(props.token?.amountDeposited || 0, props.token.decimals, 8);\n    const onPress = useCallback(() => {\n        props.onSelectToken(props.token);\n    }, [props.onSelectToken, props.token]);\n    return (\n        <Selectable\n            selected={props.selected}\n            onPress={onPress}\n            containerStyle={{ marginBottom: ITEM_SEPARATOR_HEIGHT }}>\n            <FlexView style={{ alignItems: \"center\" }}>\n                <TokenLogo token={props.token.tokenA} small={true} replaceWETH={true} />\n                <TokenLogo token={props.token.tokenB} small={true} replaceWETH={true} style={{ marginLeft: 4 }} />\n                <Text medium={true} caption={true} style={{ marginLeft: Spacing.tiny }}>\n                    {props.token.tokenA.symbol}-{props.token.tokenB.symbol}\n                </Text>\n                <Text caption={IS_DESKTOP} medium={true} style={{ flex: 1, textAlign: \"right\", marginRight: 4 }}>\n                    {amount}\n                </Text>\n                {props.selected ? <CloseIcon /> : <SelectIcon />}\n            </FlexView>\n        </Selectable>\n    );\n};\n\nconst Withdraw = ({ state }: { state: FarmingState }) => {\n    if (!state.selectedLPToken) {\n        return <Heading text={\"Amount\"} disabled={true} />;\n    }\n    // This enables MAX button\n    const token = {\n        ...state.selectedLPToken,\n        balance: state.selectedLPToken.amountDeposited\n    } as Token;\n    return (\n        <View>\n            <Heading text={state.selectedLPToken.symbol + \" Amount\"} />\n            <TokenInput token={token} amount={state.amount} onAmountChanged={state.setAmount} autoFocus={IS_DESKTOP} />\n        </View>\n    );\n};\n\nconst WithdrawInfo = ({ state }: { state: FarmingState }) => {\n    const amount = parseBalance(state.amount);\n    const total = state.selectedLPToken?.amountDeposited;\n    const sushi = total && amount.lte(total) ? state.selectedLPToken!.pendingSushi?.mul(amount).div(total) : null;\n    const disabled = !state.pair || !state.selectedLPToken;\n    return (\n        <InfoBox>\n            <AmountMeta\n                amount={sushi ? formatBalance(sushi) : \"\"}\n                suffix={\"SUSHI\"}\n                disabled={disabled || isEmptyValue(state.amount)}\n            />\n            <Meta label={\"Deposited LP Token\"} text={total ? formatBalance(total) : \"\"} disabled={disabled} />\n            <Meta\n                label={\"Deposited \" + (state.selectedLPToken ? state.selectedLPToken.tokenA.symbol : \"Token 1\")}\n                text={state.fromAmount}\n                disabled={disabled}\n            />\n            <Meta\n                label={\"Deposited \" + (state.selectedLPToken ? state.selectedLPToken.tokenB.symbol : \"Token 2\")}\n                text={state.toAmount}\n                disabled={disabled}\n            />\n            <WithdrawControls state={state} />\n        </InfoBox>\n    );\n};\n\nconst WithdrawControls = ({ state }: { state: FarmingState }) => {\n    const [error, setError] = useState<MetamaskError>({});\n    useAsyncEffect(() => setError({}), [state.selectedLPToken]);\n    const disabled = isEmptyValue(state.amount);\n    return (\n        <View style={{ marginTop: Spacing.normal }}>\n            {!state.selectedLPToken || state.selectedLPToken.amountDeposited?.isZero() ? (\n                <WithdrawButton state={state} onError={setError} disabled={true} />\n            ) : parseBalance(state.amount, state.selectedLPToken!.decimals).gt(\n                  state.selectedLPToken!.amountDeposited!\n              ) ? (\n                <Button title={\"Insufficient Amount\"} disabled={true} />\n            ) : state.loading ? (\n                <FetchingButton />\n            ) : (\n                <WithdrawButton state={state} onError={setError} disabled={disabled} />\n            )}\n            {error.message && error.code !== 4001 && <ErrorMessage error={error} />}\n        </View>\n    );\n};\n\nconst WithdrawButton = ({\n    state,\n    onError,\n    disabled\n}: {\n    state: FarmingState;\n    onError: (e) => void;\n    disabled: boolean;\n}) => {\n    const onPress = useCallback(() => {\n        onError({});\n        state.onWithdraw().catch(onError);\n    }, [state.onWithdraw, onError]);\n    return <Button title={\"Withdraw\"} disabled={disabled} loading={state.withdrawing} onPress={onPress} />;\n};\n\nexport default HarvestScreen;\n"],"sourceRoot":""}