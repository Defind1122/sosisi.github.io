{"version":3,"sources":["node_modules/typescript/lib sync","src/constants/dimension.ts","src/constants/linking.ts","src/constants/tokens.ts","src/utils/index.ts","src/context/EthersContext.tsx","src/hooks/useAllCommonPairs.tsx","src/hooks/useSDK.tsx","src/context/GlobalContext.tsx","src/constants/colors.ts","src/hooks/useColors.tsx","src/components/FlexView.tsx","src/components/Text.tsx","src/components/Header.tsx","src/components/MobileNotSupported.tsx","src/context/index.tsx","src/hooks/useStyles.tsx","src/components/Button.tsx","src/components/ApproveButton.tsx","src/components/ButtonGroup.tsx","src/components/CloseIcon.tsx","src/components/Column.tsx","src/components/Container.tsx","src/components/Content.tsx","src/components/ErrorMessage.tsx","src/components/FetchingButton.tsx","src/components/InsufficientBalanceButton.tsx","src/components/Border.tsx","src/components/Subtitle.tsx","src/components/LPTokenSelect.tsx","src/components/Meta.tsx","src/components/Notice.tsx","src/components/SelectIcon.tsx","src/components/Input.tsx","src/components/TokenInput.tsx","src/hooks/useTokenPairState.tsx","src/hooks/useLiquidityState.tsx","src/hooks/useLPTokensState.tsx","src/hooks/useFarmingState.tsx","src/components/ConnectToWallet.tsx","src/components/Footer.tsx","src/components/Status.tsx","src/screens/Screen.tsx","src/screens/FarmingScreen.tsx","src/components/TokenSelect.tsx","src/components/UnsupportedButton.tsx","src/components/AddLiquidity.tsx","src/components/RemoveLiquidity.tsx","src/hooks/useAddLiquidityState.tsx","src/hooks/useRemoveLiquidityState.tsx","src/screens/LiquidityScreen.tsx","src/hooks/useSwapState.tsx","src/screens/SwapScreen.tsx","App.tsx","web-build/register-service-worker.js","node_modules/@levx/sushiswap-core/build/contracts sync /^/.//.*/.json$","assets/levx-typography-dark.png","assets/levx-typography.png","assets/sushiswap.jpg","assets/metamask-dark.png","assets/metamask.png"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","SCREEN_HEIGHT","Math","round","Dimensions","get","width","height","Spacing","tiny","small","normal","large","huge","content","linking","prefixes","config","screens","Home","Liquidity","Farming","ETH","address","ethers","constants","AddressZero","decimals","symbol","logoURI","balance","BigNumber","from","formatBalance","value","maxFraction","formatted","utils","formatUnits","split","length","substr","parseBalance","parseUnits","isEmptyValue","text","isBigNumber","isZero","replaceAll","convertToken","token","WETH","SDKToken","ChainId","MAINNET","convertAmount","amount","TokenAmount","toString","parseCurrencyAmount","toExact","getContract","name","signer","abi","require","ContractFactory","EthersContext","React","createContext","provider","undefined","chainId","addOnBlockListener","listener","removeOnBlockListener","getToken","a","async","approveToken","spender","getTokenAllowance","Zero","EthersContextProvider","children","useState","setProvider","setSigner","setChainId","setAddress","onBlockListeners","setOnBlockListeners","useAsyncEffect","window","ethereum","web3","providers","Web3Provider","alchemy","AlchemyProvider","network","process","API_KEY","getSigner","useEffect","onAccountsChanged","selectedAddress","onChainChanged","getNetwork","on","off","useCallback","send","meta","logo","MaxUint256","erc20","estimateGas","approve","gasLimit","getAddress","contract","owner","old","onBlock","block","Object","entries","Provider","Consumer","DAI","Token","USDC","USDT","SUSHI","YAM","AMPL","BASES_TO_CHECK_TRADES_AGAINST","CUSTOM_BASES","wrappedCurrency","currency","ETHER","useAllCommonPairs","loadAllCommonPairs","currencyA","currencyB","bases","tokenA","tokenB","basePairs","flatMap","base","map","otherBase","filter","t0","t1","allPairCombinations","tokens","Boolean","b","customBases","customBasesA","customBasesB","find","equals","Promise","all","pair","Fetcher","fetchPairData","pairs","ROUTER","MASTER_CHEF","findOrGetToken","t","toLowerCase","minAmount","percent","sub","mul","numerator","div","denominator","useSDK","useContext","GlobalContext","allowedSlippage","Percent","getTrade","fromToken","toToken","fromAmount","isETH","to","CurrencyAmount","ether","Trade","bestTradeExactIn","maxHops","maxNumResults","swap","trade","Router","feeOnTransfer","recipient","ttl","params","swapCallParameters","router","methodName","args","functions","tx","wrapETH","weth","deposit","unwrapETH","withdraw","getPair","addLiquidity","toAmount","deadline","floor","Date","getTime","removeLiquidityETH","liquidity","amountETH","removeLiquidity","addLiquidityETH","getExpectedSushiRewardPerBlock","masterChef","totalAllocPoint","sushiPerBlock","poolInfo","allocPoint","lpTokenId","getTokens","fetch","response","json","account","balances","getBalance","i","tokenBalances","tokenBalance","sort","t2","pow","toNumber","getMyLPTokens","factory","FACTORY_ADDRESS","allPairsLength","Array","_","allPairs","Number","totalSupply","token0","token1","result","getPools","pools","pool","poolToken","balanceOf","totalDeposited","calculateFee","load","clear","darkMode","setDarkMode","updateTokens","loadingTokens","tradeHistory","addToTradeHistory","GlobalContextProvider","colorScheme","useColorScheme","setTokens","setLoadingTokens","setTradeHistory","data","AsyncStorage","getItem","mode","JSON","parse","removeItem","setItem","String","list","push","newHistory","stringify","Colors","common","white","transparent","primary","secondary","green","twitter","facebook","light","background","backgroundHovered","border","borderDark","textDark","textMedium","textLight","disabled","shadow","placeholder","underlay","dark","useColors","FlexView","props","flexDirection","direction","View","style","Text","fontFamily","fontWeight","h1Style","h2Style","h3Style","h4Style","fontSize","note","caption","color","medium","Title","alignSelf","alignItems","Image","source","Menu","title","routeName","MenuItem","current","setCurrent","route","useRoute","marginLeft","marginBottom","padding","position","left","right","bottom","backgroundColor","Stats","target","type","size","marginTop","DarkModeSwitch","onChange","transform","scale","Header","top","paddingBottom","flex","justifyContent","paddingTop","paddingHorizontal","Social","onPressTwitter","Linking","onPressGithub","onPressDiscord","reverseColor","reverse","raised","onPress","MobileNotSupported","ContextProvider","useStyles","shadowColor","borderRadius","elevation","shadowOffset","shadowOpacity","shadowRadius","overflow","Button","buttonStyle","borderColor","titleStyle","containerStyle","ApproveButton","loading","setLoading","onError","wait","onSuccess","hidden","ButtonGroup","selectedButtonStyle","marginHorizontal","marginVertical","CloseIcon","Column","noTopMargin","Container","ScrollView","nestedScrollEnabled","contentContainerStyle","Content","multiplier","contentPadding","paddingVertical","ErrorMessage","error","borderWidth","message","FetchingButton","InsufficientBalanceButton","Border","Subtitle","LPTokenList","state","emptyText","Item","renderItem","item","key","selected","onSelectToken","setSelectedLPToken","lpTokens","ActivityIndicator","FlatList","keyExtractor","ItemSeparatorComponent","EmptyList","margin","textAlign","LPTokenSelect","onUnselectToken","selectedLPToken","Meta","label","Notice","SelectIcon","Input","onChangeText","errors","forbidden","forEach","validation","match","regexp","allowed","join","inputStyle","outline","labelStyle","placeholderTextColor","errorStyle","MaxButton","onPressMax","fee","gt","updateAmount","TokenInput","onAmountChanged","endsWith","indexOf","useTokenPairState","fromSymbol","setFromSymbol","toSymbol","setToSymbol","setFromAmount","setToAmount","fromTokenAllowed","setFromTokenAllowed","toTokenAllowed","setToTokenAllowed","wrapping","setWrapping","unwrapping","setUnwrapping","minAllowance","fromAllowance","gte","toAllowance","onWrap","onUnwrap","useLiquidityState","setPair","updatePair","useLPTokensState","loadPools","setLPTokens","selectedLPTokenAllowed","setSelectedLPTokenAllowed","setAmount","updateLPTokens","method","useFarmingState","action","setAction","expectedSushiRewardPerBlock","setExpectedSushiRewardPerBlock","amountDeposited","setAmountDeposited","pendingSushi","setPendingSushi","depositing","setDepositing","withdrawing","setWithdrawing","userInfo","pending","allowance","onDeposit","onWithdraw","ConnectWallet","enable","Link","textDecorationLine","marginRight","Footer","Status","connected","Screen","ConnectToWallet","h4","TokenItem","hovered","TouchableHighlight","LogoSymbol","uri","ActionSelect","actions","index","radius","selectedIndex","buttons","borderTopLeftRadius","borderBottomLeftRadius","borderTopRightRadius","borderBottomRightRadius","Deposit","AddLiquidityNotice","DepositInfo","sushiReward","DepositControls","setError","approveRequired","AddLiquidityButton","navigate","useNavigation","DepositButton","catch","Withdraw","NoLPTokenNotice","WithdrawInfo","WithdrawControls","WithdrawButton","FarmingScreen","TokenList","useMemo","filterTokens","localeCompare","TokenSelect","onChangeSymbol","UnsupportedButton","FromTokenInput","newAmount","fromPrice","priceOf","quote","ToTokenInput","toPrice","PriceInfo","initialPrice","price","toSignificant","Price","Controls","insufficientFromToken","insufficientToToken","fromApproveRequired","toApproveRequired","SupplyButton","onAdd","adding","AddLiquidity","AmountInfo","ArrowDown","Amount","RemoveButton","onRemove","removing","RemoveLiquidity","useAddLiquidityState","setAdding","useRemoveLiquidityState","setRemoving","liquidityToken","fromReserve","reserveOf","toReserve","amountToRemove","amountToRemoveETH","OR","Line","LiquidityScreen","addLiquidityState","removeLiquidityState","useSwapState","setTrade","unsupported","setUnsupported","swapping","setSwapping","updateTrade","onSwap","Swap","TradeInfo","WrapInfo","SwapInfo","outputAmount","executionPrice","impact","priceImpact","SwapButton","WrapButton","UnwrapButton","SwapScreen","Stack","createStackNavigator","Main","Navigation","theme","DefaultTheme","colors","card","notification","NavigationContainer","Navigator","screenOptions","header","component","App","deviceType","setDeviceType","useFonts","UnicaOne_400Regular","OpenSans_300Light","regular","OpenSans_400Regular","bold","OpenSans_700Bold","fontsLoaded","getDeviceTypeAsync","DeviceType","PHONE","AppLoading","navigator","addEventListener","serviceWorker","register","scope","then","info","console","webpackContext","webpackContextResolve","__webpack_require__","o"],"mappings":"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","file":"static/js/app.e4edfb81.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 334;","import { Dimensions } from \"react-native\";\n\nexport const SCREEN_WIDTH = Math.round(Dimensions.get(\"window\").width);\nexport const SCREEN_HEIGHT = Math.round(Dimensions.get(\"window\").height);\nexport const IS_HIGH_RESOLUTION = SCREEN_HEIGHT > 667;\nexport const HEADER_HEIGHT = 96;\n\nexport const Spacing = IS_HIGH_RESOLUTION\n    ? {\n          tiny: 8,\n          small: 16,\n          normal: 32,\n          large: 48,\n          huge: 64,\n          content: 40\n      }\n    : {\n          tiny: 6,\n          small: 12,\n          normal: 24,\n          large: 32,\n          huge: 48,\n          content: 30\n      };\n","const linking = {\n    prefixes: [\"https://sushiswap.levx.io\"],\n    config: {\n        screens: {\n            Home: \"\",\n            Liquidity: \"liquidity\",\n            Farming: \"farming\"\n        }\n    }\n};\n\nexport default linking;\n","import { ethers } from \"ethers\";\nimport Token from \"../types/Token\";\n\nexport const ETH: Token = {\n    address: ethers.constants.AddressZero,\n    decimals: 18,\n    symbol: \"ETH\",\n    logoURI: \"/images/tokens/ETH.png\",\n    balance: ethers.BigNumber.from(0)\n};\n","import { ChainId, CurrencyAmount, Token as SDKToken, TokenAmount, WETH } from \"@levx/sushiswap-sdk\";\nimport { ethers } from \"ethers\";\nimport Token from \"../types/Token\";\n\nexport const formatBalance = (value: ethers.BigNumberish, decimals = 18, maxFraction = 0) => {\n    const formatted = ethers.utils.formatUnits(value, decimals);\n    if (maxFraction > 0) {\n        const split = formatted.split(\".\");\n        if (split.length > 1) {\n            return split[0] + \".\" + split[1].substr(0, maxFraction);\n        }\n    }\n    return formatted;\n};\n\nexport const parseBalance = (value: string, decimals = 18) => {\n    return ethers.utils.parseUnits(value || \"0\", decimals);\n};\n\nexport const isEmptyValue = (text: string) =>\n    ethers.BigNumber.isBigNumber(text)\n        ? ethers.BigNumber.from(text).isZero()\n        : text === \"\" || text.replaceAll(\"0\", \"\").replaceAll(\".\", \"\") === \"\";\n\nexport const convertToken = (token: Token) => {\n    return token.symbol === \"ETH\" ? WETH[\"1\"] : new SDKToken(ChainId.MAINNET, token.address, token.decimals);\n};\n\nexport const convertAmount = (token: Token, amount: string) => {\n    return new TokenAmount(convertToken(token), parseBalance(amount, token.decimals).toString());\n};\n\nexport const parseCurrencyAmount = (value: CurrencyAmount, decimals = 18) => {\n    return ethers.BigNumber.from(parseBalance(value.toExact(), decimals));\n};\n\nexport const getContract = (name: string, address: string, signer: ethers.Signer) => {\n    const { abi } = require(\"@levx/sushiswap-core/build/contracts/\" + name + \".json\");\n    return ethers.ContractFactory.getContract(address, abi, signer);\n};\n","import React, { useCallback, useEffect, useState } from \"react\";\n\nimport { EventType, Listener } from \"@ethersproject/abstract-provider\";\nimport { ethers } from \"ethers\";\nimport useAsyncEffect from \"use-async-effect\";\nimport Token from \"../types/Token\";\nimport { getContract } from \"../utils\";\n\nexport type OnBlockListener = (block: number) => Promise<void>;\n\nexport const EthersContext = React.createContext({\n    provider: undefined as ethers.providers.JsonRpcProvider | undefined,\n    signer: undefined as ethers.providers.JsonRpcSigner | undefined,\n    chainId: 0,\n    address: null as string | null,\n    addOnBlockListener: (name: string, listener: OnBlockListener) => {},\n    removeOnBlockListener: (name: string) => {},\n    getToken: async (token: string) => {\n        return {} as Token | undefined;\n    },\n    approveToken: async (token: string, spender: string, amount?: ethers.BigNumber) => {\n        return {} as ethers.providers.TransactionResponse;\n    },\n    getTokenAllowance: async (token: string, spender: string) => {\n        return ethers.constants.Zero as ethers.BigNumber | undefined;\n    }\n});\n\n// tslint:disable-next-line:max-func-body-length\nexport const EthersContextProvider = ({ children }) => {\n    const [provider, setProvider] = useState<ethers.providers.JsonRpcProvider>();\n    const [signer, setSigner] = useState<ethers.providers.JsonRpcSigner>();\n    const [chainId, setChainId] = useState<number>(1);\n    const [address, setAddress] = useState<string | null>(ethers.constants.AddressZero);\n    const [onBlockListeners, setOnBlockListeners] = useState<{ [name: string]: OnBlockListener }>({});\n\n    useAsyncEffect(async () => {\n        if (window.ethereum) {\n            const web3 = new ethers.providers.Web3Provider(window.ethereum);\n            const alchemy = new ethers.providers.AlchemyProvider(web3.network, process.env.API_KEY);\n            setProvider(alchemy);\n            setSigner(await web3.getSigner());\n        }\n    }, [window.ethereum]);\n\n    useEffect(() => {\n        if (window.ethereum) {\n            const onAccountsChanged = () => {\n                setAddress(window.ethereum.selectedAddress);\n            };\n            const onChainChanged = async () => {\n                const network = await signer?.provider?.getNetwork();\n                if (network) {\n                    setChainId(network.chainId);\n                }\n            };\n            onAccountsChanged();\n            onChainChanged();\n            window.ethereum.on(\"accountsChanged\", onAccountsChanged);\n            window.ethereum.on(\"chainChanged\", onChainChanged);\n            return () => {\n                window.ethereum.off(\"accountsChanged\", onAccountsChanged);\n                window.ethereum.off(\"chainChanged\", onAccountsChanged);\n            };\n        }\n    }, [window.ethereum, signer]);\n\n    const getToken = useCallback(\n        async (token: string) => {\n            if (provider && signer) {\n                const meta = await provider.send(\"alchemy_getTokenMetadata\", [token]);\n                return {\n                    address: token,\n                    symbol: meta.symbol,\n                    decimals: meta.decimals,\n                    logoURI: meta.logo,\n                    balance: ethers.constants.Zero\n                } as Token;\n            }\n        },\n        [provider, signer]\n    );\n\n    const approveToken = useCallback(\n        async (token: string, spender: string, amount?: ethers.BigNumber) => {\n            if (signer) {\n                amount = amount || ethers.constants.MaxUint256;\n                const erc20 = getContract(\"ERC20\", token, signer);\n                const gasLimit = await erc20.estimateGas.approve(spender, amount);\n                return await erc20.approve(spender, amount, {\n                    gasLimit\n                });\n            }\n        },\n        [signer]\n    );\n\n    const getTokenAllowance = useCallback(\n        async (token: string, spender: string) => {\n            if (provider && signer) {\n                return await provider.send(\"alchemy_getTokenAllowance\", [\n                    {\n                        contract: token,\n                        owner: await signer.getAddress(),\n                        spender\n                    }\n                ]);\n            }\n        },\n        [provider, signer]\n    );\n\n    const addOnBlockListener = useCallback(\n        (name, listener) => {\n            setOnBlockListeners(old => ({ ...old, [name]: listener }));\n        },\n        [setOnBlockListeners]\n    );\n\n    const removeOnBlockListener = useCallback(\n        name => {\n            setOnBlockListeners(old => {\n                delete old[name];\n                return old;\n            });\n        },\n        [setOnBlockListeners]\n    );\n\n    useEffect(() => {\n        if (provider && signer && chainId === 1) {\n            const onBlock = async (block: number) => {\n                for (const listener of Object.entries(onBlockListeners)) {\n                    await listener[1]?.(block);\n                }\n            };\n            provider.on(\"block\", onBlock);\n            return () => {\n                provider.off(\"block\", onBlock);\n            };\n        }\n    }, [provider, signer, chainId, onBlockListeners]);\n\n    return (\n        <EthersContext.Provider\n            value={{\n                provider,\n                signer,\n                chainId,\n                address,\n                getToken,\n                approveToken,\n                getTokenAllowance,\n                addOnBlockListener,\n                removeOnBlockListener\n            }}>\n            {children}\n        </EthersContext.Provider>\n    );\n};\n\ninterface JsonRPCRequest {\n    jsonrpc: string;\n    method: string;\n    params: any[];\n    id: number;\n}\n\ninterface JsonRPCResponse {\n    jsonrpc: string;\n    id: number;\n    result?: any;\n    error?: string;\n}\n\ninterface Callback<ResultType> {\n    (error: Error): void;\n    (error: null, val: ResultType): void;\n}\n\ndeclare global {\n    interface Window {\n        ethereum: {\n            enable(): void;\n            send(payload: any, callback: any): any;\n            send(payload: JsonRPCRequest, callback: Callback<JsonRPCResponse>): any;\n            selectedAddress: string;\n            on(eventName: EventType, listener: Listener);\n            off(eventName: EventType, listener: Listener);\n        };\n    }\n}\n\nexport const EthersContextConsumer = EthersContext.Consumer;\n","import { useCallback } from \"react\";\n\nimport { ChainId, Currency, ETHER, Fetcher, Pair, Token, WETH } from \"@levx/sushiswap-sdk\";\nimport { ethers } from \"ethers\";\nimport { flatMap } from \"tslint/lib/utils\";\n\nconst DAI = new Token(ChainId.MAINNET, \"0x6B175474E89094C44Da98b954EedeAC495271d0F\", 18, \"DAI\", \"Dai Stablecoin\");\nconst USDC = new Token(ChainId.MAINNET, \"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\", 6, \"USDC\", \"USD//C\");\nconst USDT = new Token(ChainId.MAINNET, \"0xdAC17F958D2ee523a2206206994597C13D831ec7\", 6, \"USDT\", \"Tether USD\");\nconst SUSHI = new Token(ChainId.MAINNET, \"0x6B3595068778DD592e39A122f4f5a5cF09C90fE2\", 18, \"SUSHI\", \"SushiSwap\");\nconst YAM = new Token(ChainId.MAINNET, \"0x0e2298E3B3390e3b945a5456fBf59eCc3f55DA16\", 18, \"YAM\", \"YAM\");\nconst AMPL = new Token(ChainId.MAINNET, \"0xD46bA6D942050d489DBd938a2C909A5d5039A161\", 9, \"AMPL\", \"Ampleforth\");\n\nconst BASES_TO_CHECK_TRADES_AGAINST = [WETH[ChainId.MAINNET], DAI, USDC, USDT, SUSHI, YAM];\nconst CUSTOM_BASES = {\n    [AMPL.address]: [DAI, WETH[ChainId.MAINNET]]\n};\n\nfunction wrappedCurrency(currency: Currency | undefined): Token | undefined {\n    return currency === ETHER ? WETH[ChainId.MAINNET] : currency instanceof Token ? currency : undefined;\n}\n\n// Source: https://github.com/Uniswap/uniswap-interface/blob/master/src/hooks/Trades.ts\nconst useAllCommonPairs = () => {\n    const loadAllCommonPairs = useCallback(\n        // tslint:disable-next-line:max-func-body-length\n        async (currencyA?: Currency, currencyB?: Currency, provider?: ethers.providers.BaseProvider) => {\n            const bases: Token[] = BASES_TO_CHECK_TRADES_AGAINST;\n            const [tokenA, tokenB] = [wrappedCurrency(currencyA), wrappedCurrency(currencyB)];\n            const basePairs: [Token, Token][] = flatMap(bases, (base): [Token, Token][] =>\n                bases.map(otherBase => [base, otherBase])\n            ).filter(([t0, t1]) => t0.address !== t1.address);\n\n            const allPairCombinations =\n                tokenA && tokenB\n                    ? [\n                          // the direct pair\n                          [tokenA, tokenB],\n                          // token A against all bases\n                          ...bases.map((base): [Token, Token] => [tokenA, base]),\n                          // token B against all bases\n                          ...bases.map((base): [Token, Token] => [tokenB, base]),\n                          // each base against all bases\n                          ...basePairs\n                      ]\n                          .filter((tokens): tokens is [Token, Token] => Boolean(tokens[0] && tokens[1]))\n                          .filter(([t0, t1]) => t0.address !== t1.address)\n                          .filter(([a, b]) => {\n                              const customBases = CUSTOM_BASES;\n                              if (!customBases) return true;\n\n                              const customBasesA: Token[] | undefined = customBases[a.address];\n                              const customBasesB: Token[] | undefined = customBases[b.address];\n\n                              if (!customBasesA && !customBasesB) return true;\n\n                              if (customBasesA && !customBasesA.find(base => tokenB.equals(base))) return false;\n                              return !(customBasesB && !customBasesB.find(base => tokenA.equals(base)));\n                          })\n                    : [];\n\n            const pairs = await Promise.all(\n                allPairCombinations.map(async pair => {\n                    try {\n                        return await Fetcher.fetchPairData(pair[0], pair[1], provider);\n                    } catch (e) {\n                        return null;\n                    }\n                })\n            );\n            return pairs.filter(pair => pair !== null) as Pair[];\n        },\n        []\n    );\n\n    return { loadAllCommonPairs };\n};\n\nexport default useAllCommonPairs;\n","import { useCallback, useContext } from \"react\";\n\nimport {\n    CurrencyAmount,\n    FACTORY_ADDRESS,\n    Fetcher,\n    Percent,\n    Router,\n    TokenAmount,\n    Trade,\n    WETH\n} from \"@levx/sushiswap-sdk\";\nimport { ethers } from \"ethers\";\nimport { ETH } from \"../constants/tokens\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport { GlobalContext } from \"../context/GlobalContext\";\nimport LPToken from \"../types/LPToken\";\nimport Token from \"../types/Token\";\nimport { convertToken, getContract } from \"../utils\";\nimport useAllCommonPairs from \"./useAllCommonPairs\";\n\n// export const UNISWAP_ROUTER = \"0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\";\nexport const SUSHISWAP_ROUTER = \"0xd9e1ce17f2641f24ae83637ab66a2cca9c378b9f\";\nexport const ROUTER = SUSHISWAP_ROUTER;\nexport const MASTER_CHEF = \"0xc2edad668740f1aa35e4d8f227fb8e17dca888cd\";\n\n// tslint:disable-next-line:max-func-body-length\nconst useSDK = () => {\n    const { provider, signer, getToken } = useContext(EthersContext);\n    const { tokens } = useContext(GlobalContext);\n    const { loadAllCommonPairs } = useAllCommonPairs();\n    const allowedSlippage = new Percent(\"50\", \"10000\"); // 0.05%\n    const ttl = 60 * 20;\n\n    const getTokens = async () => {\n        if (provider && signer) {\n            const response = await fetch(\"/tokens.json\");\n            const json = await response.json();\n\n            const account = await signer.getAddress();\n            const balances = await provider.send(\"alchemy_getTokenBalances\", [\n                account,\n                json.tokens.map(token => token.address)\n            ]);\n            return [\n                {\n                    ...ETH,\n                    balance: await provider.getBalance(account)\n                },\n                ...json.tokens.map((token, i) => ({\n                    ...token,\n                    balance: ethers.BigNumber.from(balances.tokenBalances[i].tokenBalance || 0)\n                }))\n            ].sort((t1, t2) => {\n                return t2.balance\n                    .sub(t1.balance)\n                    .div(ethers.BigNumber.from(10).pow(10))\n                    .toNumber();\n            });\n        }\n    };\n\n    const getMyLPTokens = async () => {\n        if (provider && signer && tokens) {\n            const factory = getContract(\"IUniswapV2Factory\", FACTORY_ADDRESS, signer);\n            const length = await factory.allPairsLength();\n            const pairs = await Promise.all(\n                Array.from({ length }).map((_, i) => {\n                    return factory.allPairs(i);\n                })\n            );\n            const balances = await provider.send(\"alchemy_getTokenBalances\", [await signer.getAddress(), pairs]);\n            const result = await Promise.all(\n                pairs.map(async (address, i) => {\n                    const balance = ethers.BigNumber.from(balances.tokenBalances[i].tokenBalance);\n                    if (balance.isZero()) {\n                        return null;\n                    }\n                    const pair = getContract(\"IUniswapV2Pair\", address, signer);\n                    const erc20 = getContract(\"ERC20\", address, signer);\n                    const decimals = Number(await erc20.decimals());\n                    const totalSupply = await erc20.totalSupply();\n                    const tokenA = await findOrGetToken(await pair.token0(), tokens, getToken);\n                    const tokenB = await findOrGetToken(await pair.token1(), tokens, getToken);\n                    return { address, decimals, balance, totalSupply, tokenA, tokenB } as LPToken;\n                })\n            );\n            return result.filter(token => !!token) as LPToken[];\n        }\n    };\n\n    const getPools = async () => {\n        if (provider && signer) {\n            const response = await fetch(\"/pools.json\");\n            const pools = await response.json();\n            const address = await signer.getAddress();\n            const balances = await provider.send(\"alchemy_getTokenBalances\", [\n                address,\n                pools.map(pool => pool.address)\n            ]);\n            return (await Promise.all(\n                pools.map(async (pool, i) => {\n                    const poolToken = getContract(\"ERC20\", pool.address, signer);\n                    const totalDeposited = await poolToken.balanceOf(MASTER_CHEF);\n                    return {\n                        ...pool,\n                        id: i,\n                        symbol: pool.tokenA.symbol + \"-\" + pool.tokenB.symbol + \" LP\",\n                        balance: ethers.BigNumber.from(balances.tokenBalances[i].tokenBalance || 0),\n                        totalDeposited\n                    };\n                })\n            )) as LPToken[];\n        }\n    };\n\n    const getTrade = useCallback(\n        async (fromToken: Token, toToken: Token, fromAmount: ethers.BigNumber) => {\n            if (provider) {\n                const isETH = fromToken.symbol === \"ETH\";\n                const from = convertToken(fromToken);\n                const to = convertToken(toToken);\n                const pairs = await loadAllCommonPairs(from, to, provider);\n                const amount = isETH\n                    ? CurrencyAmount.ether(fromAmount.toString())\n                    : new TokenAmount(from, fromAmount.toString());\n                return Trade.bestTradeExactIn(pairs, amount, to, { maxHops: 3, maxNumResults: 1 })[0];\n            }\n        },\n        [provider]\n    );\n\n    const swap = useCallback(\n        async (trade: Trade) => {\n            if (signer) {\n                if (trade) {\n                    const params = Router.swapCallParameters(trade, {\n                        feeOnTransfer: false,\n                        allowedSlippage,\n                        recipient: await signer.getAddress(),\n                        ttl\n                    });\n                    const router = getContract(\"IUniswapV2Router02\", ROUTER, signer);\n                    const gasLimit = await router.estimateGas[params.methodName](...params.args, {\n                        value: params.value\n                    });\n                    const tx = await router.functions[params.methodName](...params.args, {\n                        value: params.value,\n                        gasLimit: gasLimit.mul(120).div(100)\n                    });\n                    return {\n                        trade,\n                        tx\n                    };\n                }\n            }\n        },\n        [signer]\n    );\n\n    const wrapETH = useCallback(\n        async (amount: ethers.BigNumber) => {\n            if (signer) {\n                const weth = getContract(\"IWETH\", WETH[1].address, signer);\n                const gasLimit = await weth.estimateGas.deposit({\n                    value: amount\n                });\n                return await weth.deposit({\n                    value: amount,\n                    gasLimit\n                });\n            }\n        },\n        [signer]\n    );\n\n    const unwrapETH = useCallback(\n        async (amount: ethers.BigNumber) => {\n            if (signer) {\n                const weth = getContract(\"IWETH\", WETH[1].address, signer);\n                const gasLimit = await weth.estimateGas.withdraw(amount);\n                return await weth.withdraw(amount, {\n                    gasLimit\n                });\n            }\n        },\n        [signer]\n    );\n\n    const getPair = useCallback(\n        async (fromToken: Token, toToken: Token) => {\n            if (provider) {\n                const from = convertToken(fromToken);\n                const to = convertToken(toToken);\n                return await Fetcher.fetchPairData(from, to, provider);\n            }\n        },\n        [provider]\n    );\n\n    const addLiquidity = useCallback(\n        async (fromToken: Token, toToken: Token, fromAmount: ethers.BigNumber, toAmount: ethers.BigNumber) => {\n            if (signer) {\n                const router = getContract(\"IUniswapV2Router02\", ROUTER, signer);\n                const deadline = `0x${(Math.floor(new Date().getTime() / 1000) + ttl).toString(16)}`;\n                const args = [\n                    fromToken.address,\n                    toToken.address,\n                    fromAmount,\n                    toAmount,\n                    minAmount(fromAmount, allowedSlippage),\n                    minAmount(toAmount, allowedSlippage),\n                    await signer.getAddress(),\n                    deadline\n                ];\n                const gasLimit = await router.estimateGas.addLiquidity(...args);\n                return await router.functions.addLiquidity(...args, {\n                    gasLimit: gasLimit.mul(120).div(100)\n                });\n            }\n        },\n        [signer]\n    );\n\n    const removeLiquidityETH = useCallback(\n        async (token: Token, liquidity: ethers.BigNumber, amount: ethers.BigNumber, amountETH: ethers.BigNumber) => {\n            if (signer) {\n                const router = getContract(\"IUniswapV2Router02\", ROUTER, signer);\n                const deadline = `0x${(Math.floor(new Date().getTime() / 1000) + ttl).toString(16)}`;\n                const args = [\n                    token.address,\n                    liquidity,\n                    minAmount(amount, allowedSlippage),\n                    minAmount(amountETH, allowedSlippage),\n                    await signer.getAddress(),\n                    deadline\n                ];\n                const gasLimit = await router.estimateGas.removeLiquidityETH(...args);\n                return await router.functions.removeLiquidityETH(...args, {\n                    gasLimit: gasLimit.mul(120).div(100)\n                });\n            }\n        },\n        [signer]\n    );\n\n    const removeLiquidity = useCallback(\n        async (\n            fromToken: Token,\n            toToken: Token,\n            liquidity: ethers.BigNumber,\n            fromAmount: ethers.BigNumber,\n            toAmount: ethers.BigNumber\n        ) => {\n            if (signer) {\n                const router = getContract(\"IUniswapV2Router02\", ROUTER, signer);\n                const deadline = `0x${(Math.floor(new Date().getTime() / 1000) + ttl).toString(16)}`;\n                const args = [\n                    fromToken.address,\n                    toToken.address,\n                    liquidity,\n                    minAmount(fromAmount, allowedSlippage),\n                    minAmount(toAmount, allowedSlippage),\n                    await signer.getAddress(),\n                    deadline\n                ];\n                const gasLimit = await router.estimateGas.removeLiquidity(...args);\n                return await router.functions.removeLiquidity(...args, {\n                    gasLimit: gasLimit.mul(120).div(100)\n                });\n            }\n        },\n        [signer]\n    );\n\n    const addLiquidityETH = useCallback(\n        async (token: Token, amount: ethers.BigNumber, amountETH: ethers.BigNumber) => {\n            if (signer) {\n                const router = getContract(\"IUniswapV2Router02\", ROUTER, signer);\n                const deadline = `0x${(Math.floor(new Date().getTime() / 1000) + ttl).toString(16)}`;\n                const args = [\n                    token.address,\n                    amount,\n                    minAmount(amount, allowedSlippage),\n                    minAmount(amountETH, allowedSlippage),\n                    await signer.getAddress(),\n                    deadline\n                ];\n                const gasLimit = await router.estimateGas.addLiquidityETH(...args, {\n                    value: amountETH\n                });\n                return await router.functions.addLiquidityETH(...args, {\n                    gasLimit: gasLimit.mul(120).div(100),\n                    value: amountETH\n                });\n            }\n        },\n        [signer]\n    );\n\n    const getExpectedSushiRewardPerBlock = useCallback(\n        async (token: LPToken) => {\n            if (signer) {\n                const masterChef = getContract(\"MasterChef\", MASTER_CHEF, signer);\n                const totalAllocPoint = await masterChef.totalAllocPoint();\n                const sushiPerBlock = await masterChef.sushiPerBlock();\n                const { allocPoint } = await masterChef.poolInfo(token.id);\n                return ethers.BigNumber.from(sushiPerBlock)\n                    .mul(allocPoint)\n                    .div(totalAllocPoint);\n            }\n        },\n        [signer]\n    );\n\n    const deposit = useCallback(\n        async (lpTokenId: number, amount: ethers.BigNumber) => {\n            if (signer) {\n                const masterChef = getContract(\"MasterChef\", MASTER_CHEF, signer);\n                const gasLimit = await masterChef.estimateGas.deposit(lpTokenId, amount);\n                return await masterChef.deposit(lpTokenId, amount, {\n                    gasLimit: gasLimit.mul(120).div(100)\n                });\n            }\n        },\n        [signer]\n    );\n\n    const withdraw = useCallback(\n        async (lpTokenId: number, amount: ethers.BigNumber) => {\n            if (signer) {\n                const masterChef = getContract(\"MasterChef\", MASTER_CHEF, signer);\n                const gasLimit = await masterChef.estimateGas.withdraw(lpTokenId, amount);\n                return await masterChef.withdraw(lpTokenId, amount, {\n                    gasLimit: gasLimit.mul(120).div(100)\n                });\n            }\n        },\n        [signer]\n    );\n\n    const calculateFee = (fromAmount: ethers.BigNumber) => {\n        return fromAmount.mul(3).div(1000);\n    };\n\n    return {\n        allowedSlippage,\n        getTokens,\n        getMyLPTokens,\n        getPools,\n        getTrade,\n        swap,\n        wrapETH,\n        unwrapETH,\n        getPair,\n        addLiquidity,\n        addLiquidityETH,\n        removeLiquidity,\n        removeLiquidityETH,\n        getExpectedSushiRewardPerBlock,\n        deposit,\n        withdraw,\n        calculateFee\n    };\n};\n\nconst findOrGetToken = async (\n    address: string,\n    tokens: Token[],\n    getToken: (address: string) => Promise<Token | undefined>\n) => {\n    const token = tokens.find(t => t.address.toLowerCase() === address.toLowerCase());\n    return token || (await getToken(address));\n};\n\nconst minAmount = (amount: ethers.BigNumber, percent: Percent) => {\n    return amount.sub(amount.mul(percent.numerator.toString()).div(percent.denominator.toString()));\n};\nexport default useSDK;\n","import React, { useContext, useState } from \"react\";\nimport { useColorScheme } from \"react-native-appearance\";\n\nimport { Trade } from \"@levx/sushiswap-sdk\";\nimport AsyncStorage from \"@react-native-community/async-storage\";\nimport useAsyncEffect from \"use-async-effect\";\nimport { ETH } from \"../constants/tokens\";\nimport useSDK from \"../hooks/useSDK\";\nimport Token from \"../types/Token\";\nimport { EthersContext } from \"./EthersContext\";\n\nexport const GlobalContext = React.createContext({\n    load: async () => {},\n    clear: async () => {},\n    darkMode: false as boolean,\n    setDarkMode: async darkMode => {},\n    tokens: [ETH] as Token[],\n    updateTokens: async () => {},\n    loadingTokens: false,\n    tradeHistory: {},\n    addToTradeHistory: async trade => {}\n});\n\n// tslint:disable-next-line:max-func-body-length\nexport const GlobalContextProvider = ({ children }) => {\n    const { provider, signer, address, addOnBlockListener, removeOnBlockListener } = useContext(EthersContext);\n    const { getTokens } = useSDK();\n    const colorScheme = useColorScheme();\n    const [darkMode, setDarkMode] = useState(colorScheme === \"dark\");\n    const [tokens, setTokens] = useState<Token[]>([]);\n    const [loadingTokens, setLoadingTokens] = useState(true);\n    const [tradeHistory, setTradeHistory] = useState([] as Trade[]);\n    const updateTokens = async () => {\n        try {\n            const data = await getTokens();\n            if (data) {\n                await setTokens(data);\n            }\n        } finally {\n            setLoadingTokens(false);\n        }\n    };\n    // useEffect(() => {\n    //     updateTokens();\n    //     addOnBlockListener(\"updateTokens()\", updateTokens);\n    //     return () => {\n    //         removeOnBlockListener(\"updateTokens()\");\n    //     };\n    // }, [updateTokens]);\n    useAsyncEffect(async () => {\n        if (provider && signer) {\n            setLoadingTokens(true);\n            await updateTokens();\n        }\n    }, [provider, signer, address]);\n    return (\n        <GlobalContext.Provider\n            value={{\n                load: async () => {\n                    const mode = await AsyncStorage.getItem(\"dark_mode\");\n                    setDarkMode(mode === \"true\");\n                    setTradeHistory(JSON.parse((await AsyncStorage.getItem(\"trade_history\")) || \"[]\"));\n                },\n                clear: async () => {\n                    setDarkMode(false);\n                    await AsyncStorage.removeItem(\"dark_mode\");\n                    await AsyncStorage.removeItem(\"trade_history\");\n                },\n                darkMode,\n                setDarkMode: async (mode: boolean) => {\n                    await AsyncStorage.setItem(\"dark_mode\", String(mode));\n                    setDarkMode(mode);\n                },\n                tokens,\n                updateTokens,\n                loadingTokens,\n                tradeHistory,\n                addToTradeHistory: async (trade: Trade) => {\n                    if (address) {\n                        const list = tradeHistory[address] || [];\n                        list.push(trade);\n                        const newHistory = {\n                            ...tradeHistory,\n                            [address]: list\n                        };\n                        await AsyncStorage.setItem(\"trade_history\", JSON.stringify(newHistory));\n                        setTradeHistory(newHistory);\n                    }\n                }\n            }}>\n            {children}\n        </GlobalContext.Provider>\n    );\n};\n\nexport const GlobalContextConsumer = GlobalContext.Consumer;\n","export const Colors = {\n    common: {\n        white: \"#ffffff\",\n        transparent: \"#ffffff00\",\n        primary: \"#291C64\",\n        secondary: \"#9BECEE\",\n        green: \"#32CD32\",\n        twitter: \"#1da1f2\",\n        facebook: \"#3B5998\"\n    },\n    light: {\n        background: \"#ffffff\",\n        backgroundHovered: \"#f0f0f0\",\n        border: \"#e5e5e5\",\n        borderDark: \"#cccccc\",\n        textDark: \"#000000\",\n        textMedium: \"#121212\",\n        textLight: \"#888888\",\n        disabled: \"#b4b4b4\",\n        shadow: \"#444444\",\n        placeholder: \"#d8d8d8\",\n        underlay: \"#b4b4b4\"\n    },\n    dark: {\n        background: \"#121212\",\n        backgroundHovered: \"#202020\",\n        border: \"#ffffff33\",\n        borderDark: \"#666666\",\n        textDark: \"#ffffff\",\n        textMedium: \"#ededed\",\n        textLight: \"#aaaaaa\",\n        disabled: \"#aaaaaa80\",\n        shadow: \"#03080c\",\n        placeholder: \"#666666\",\n        underlay: \"#aaaaaa80\"\n    }\n};\n","import { useContext } from \"react\";\n\nimport { Colors } from \"../constants/colors\";\nimport { GlobalContext } from \"../context/GlobalContext\";\n\nconst useColors = () => {\n    const { darkMode } = useContext(GlobalContext);\n    return {\n        ...Colors[darkMode ? \"dark\" : \"light\"],\n        ...Colors.common\n    };\n};\n\nexport default useColors;\n","import React, { FunctionComponent } from \"react\";\nimport { View, ViewProps } from \"react-native\";\n\ninterface FlexViewProps extends ViewProps {\n    direction?: \"row\" | \"column\";\n}\n\nconst FlexView: FunctionComponent<FlexViewProps> = props => {\n    const flexDirection = props.direction || \"row\";\n    return <View {...props} style={[{ flexDirection }, props.style]} />;\n};\nexport default FlexView;\n","import React, { FC } from \"react\";\nimport { Text as NativeText, TextProps as NativeTextProps } from \"react-native-elements\";\n\nimport useColors from \"../hooks/useColors\";\n\nexport interface TextProps extends NativeTextProps {\n    note?: boolean;\n    caption?: boolean;\n    dark?: boolean;\n    medium?: boolean;\n    light?: boolean;\n    fontWeight?: \"light\" | \"regular\" | \"bold\";\n}\n\nconst Text: FC<TextProps> = props => {\n    const { textDark, textMedium, textLight } = useColors();\n    const fontFamily = props.fontWeight || \"regular\";\n    return (\n        <NativeText\n            {...props}\n            h1Style={[{ fontFamily }, props.h1Style]}\n            h2Style={[{ fontFamily }, props.h2Style]}\n            h3Style={[{ fontFamily }, props.h3Style]}\n            h4Style={[{ fontFamily }, props.h4Style]}\n            style={[\n                {\n                    fontFamily,\n                    fontSize: props.note ? 15 : props.caption ? 22 : 18,\n                    color: props.note || props.light ? textLight : props.medium ? textMedium : textDark\n                },\n                props.style\n            ]}\n        />\n    );\n};\nexport default Text;\n","import React, { useCallback, useContext, useEffect, useState } from \"react\";\nimport { Image, View } from \"react-native\";\nimport { Icon } from \"react-native-elements\";\n\nimport Switch from \"expo-dark-mode-switch\";\n\nimport { Link, useRoute } from \"@react-navigation/native\";\nimport { HEADER_HEIGHT, Spacing } from \"../constants/dimension\";\nimport linking from \"../constants/linking\";\nimport { GlobalContext } from \"../context/GlobalContext\";\nimport useColors from \"../hooks/useColors\";\nimport FlexView from \"./FlexView\";\nimport Text from \"./Text\";\n\nconst Header = () => {\n    const { background } = useColors();\n    return (\n        <View\n            // @ts-ignore\n            style={{\n                position: \"fixed\",\n                top: 0,\n                width: \"100%\",\n                height: HEADER_HEIGHT,\n                paddingBottom: 16,\n                backgroundColor: background\n            }}>\n            <FlexView\n                style={{\n                    flex: 1,\n                    justifyContent: \"space-between\",\n                    alignItems: \"flex-end\",\n                    paddingTop: Spacing.small,\n                    paddingHorizontal: Spacing.content\n                }}>\n                <Title />\n                <Menu />\n            </FlexView>\n        </View>\n    );\n};\n\nexport const Title = () => {\n    const { darkMode } = useContext(GlobalContext);\n    const { primary, white } = useColors();\n    return (\n        <View style={{ alignSelf: \"flex-end\", alignItems: \"center\" }}>\n            <Link to={\"/\"}>\n                <Text style={{ fontFamily: \"title\", fontSize: 40, color: darkMode ? white : primary }}>SushiSwap</Text>\n            </Link>\n            <Image\n                source={\n                    darkMode\n                        ? require(\"../../assets/levx-typography-dark.png\")\n                        : require(\"../../assets/levx-typography.png\")\n                }\n                style={{ width: 76, height: 13 }}\n            />\n        </View>\n    );\n};\n\nconst Menu = () => {\n    return (\n        <FlexView\n            style={{\n                height: \"100%\",\n                alignItems: \"flex-end\"\n            }}>\n            <MenuItem title={\"SWAP\"} routeName={\"Home\"} />\n            <MenuItem title={\"LIQUIDITY\"} routeName={\"Liquidity\"} />\n            <MenuItem title={\"FARMING\"} routeName={\"Farming\"} />\n            <Stats />\n            <DarkModeSwitch />\n        </FlexView>\n    );\n};\n\nconst MenuItem = ({ title, routeName }) => {\n    const { textDark } = useColors();\n    const [current, setCurrent] = useState(false);\n    const route = useRoute();\n    useEffect(() => {\n        setCurrent(route.name === routeName);\n    }, [route]);\n    return (\n        <Link to={\"/\" + linking.config.screens[routeName]} style={{ marginLeft: Spacing.small, marginBottom: 4 }}>\n            <View>\n                <Text style={{ fontFamily: \"regular\", fontSize: 20, color: textDark, padding: 4 }}>{title}</Text>\n                {current && (\n                    <View\n                        style={{\n                            position: \"absolute\",\n                            height: 2,\n                            left: 0,\n                            right: 0,\n                            bottom: 0,\n                            backgroundColor: textDark\n                        }}\n                    />\n                )}\n            </View>\n        </Link>\n    );\n};\n\nconst Stats = () => {\n    const { textDark } = useColors();\n    return (\n        <Link to={\"https://sushiswap.vision\"} target={\"_blank\"} style={{ marginLeft: Spacing.small, marginBottom: 4 }}>\n            <FlexView style={{ alignItems: \"flex-start\" }}>\n                <Text style={{ fontFamily: \"regular\", fontSize: 20, color: textDark, padding: 4 }}>{\"STATS\"}</Text>\n                <Icon\n                    name={\"arrow-top-right\"}\n                    type={\"material-community\"}\n                    size={18}\n                    color={textDark}\n                    style={{ marginTop: 6 }}\n                />\n            </FlexView>\n        </Link>\n    );\n};\n\nconst DarkModeSwitch = () => {\n    const { darkMode, setDarkMode } = useContext(GlobalContext);\n    const onChange = useCallback(\n        async dark => {\n            await setDarkMode(dark);\n        },\n        [setDarkMode]\n    );\n    return (\n        <View style={{ marginLeft: Spacing.small, marginBottom: 4 }}>\n            <Switch\n                value={darkMode}\n                onChange={onChange}\n                style={{\n                    transform: [\n                        {\n                            scale: 0.7\n                        }\n                    ]\n                }}\n            />\n        </View>\n    );\n};\n\nexport default Header;\n","import React, { useCallback } from \"react\";\nimport { Image, View } from \"react-native\";\nimport { Icon, SocialIcon } from \"react-native-elements\";\n\nimport * as Linking from \"expo-linking\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport FlexView from \"./FlexView\";\nimport { Title } from \"./Header\";\nimport Text from \"./Text\";\n\nconst MobileNotSupported = () => {\n    const { background } = useColors();\n    return (\n        <View\n            style={{\n                justifyContent: \"center\",\n                alignItems: \"center\",\n                backgroundColor: background,\n                height: \"100%\",\n                padding: Spacing.normal\n            }}>\n            <Title />\n            <Image source={require(\"../../assets/sushiswap.jpg\")} style={{ width: 192, height: 192 }} />\n            <Text style={{ marginTop: Spacing.normal }}>Mobile devices not supported yet.</Text>\n            <Social />\n        </View>\n    );\n};\n\nconst Social = () => {\n    const onPressTwitter = useCallback(() => Linking.openURL(\"https://twitter.com/LevxApp\"), []);\n    const onPressGithub = useCallback(() => Linking.openURL(\"https://github.com/lev-x\"), []);\n    const onPressDiscord = useCallback(() => Linking.openURL(\"https://discord.gg/3QKsgf\"), []);\n    return (\n        <FlexView style={{ marginTop: Spacing.large, marginBottom: Spacing.huge, justifyContent: \"center\" }}>\n            <Icon\n                type={\"material-community\"}\n                name={\"github-face\"}\n                color={\"white\"}\n                reverseColor={\"black\"}\n                reverse={true}\n                raised={true}\n                onPress={onPressGithub}\n            />\n            <SocialIcon type=\"twitter\" onPress={onPressTwitter} />\n            <Icon\n                type={\"material-community\"}\n                name={\"discord\"}\n                color={\"#7289da\"}\n                reverse={true}\n                raised={true}\n                onPress={onPressDiscord}\n            />\n        </FlexView>\n    );\n};\n\nexport default MobileNotSupported;\n","import React from \"react\";\n\nimport { EthersContextConsumer, EthersContextProvider } from \"./EthersContext\";\nimport { GlobalContextConsumer, GlobalContextProvider } from \"./GlobalContext\";\n\nexport const ContextProvider = ({ children }) => {\n    return (\n        <EthersContextProvider>\n            <GlobalContextProvider>{children}</GlobalContextProvider>\n        </EthersContextProvider>\n    );\n};\n\nexport const ContextConsumer = ({ children }) => {\n    return (\n        <EthersContextConsumer>\n            {ethersContext => (\n                <GlobalContextConsumer>\n                    {globalContext =>\n                        children({\n                            ...globalContext,\n                            ...ethersContext\n                        })\n                    }\n                </GlobalContextConsumer>\n            )}\n        </EthersContextConsumer>\n    );\n};\n","import { ViewStyle } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"./useColors\";\n\nconst useStyles = () => {\n    const { shadow: shadowColor } = useColors();\n    const shadow: ViewStyle = {\n        borderRadius: Spacing.tiny,\n        elevation: Spacing.small,\n        shadowColor,\n        shadowOffset: { width: 0, height: 4 },\n        shadowOpacity: 0.5,\n        shadowRadius: 4,\n        overflow: \"visible\"\n    };\n    return { shadow };\n};\n\nexport default useStyles;\n","import React, { FC } from \"react\";\nimport { Button as NativeButton, ButtonProps as NativeButtonProps } from \"react-native-elements\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport useStyles from \"../hooks/useStyles\";\n\nexport interface ButtonProps extends NativeButtonProps {\n    color?: string;\n    size?: \"small\" | \"normal\" | \"large\";\n    fontWeight?: \"light\" | \"regular\" | \"bold\";\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst Button: FC<ButtonProps> = props => {\n    const { primary, borderDark, textMedium } = useColors();\n    const { shadow } = useStyles();\n    const type = props.type || \"solid\";\n    const size = props.size || \"normal\";\n    const height = props.size === \"small\" ? 40 : size === \"normal\" ? 48 : 56;\n    const fontSize = props.size === \"small\" ? 14 : size === \"normal\" ? 16 : 18;\n    const fontFamily = props.fontWeight || \"regular\";\n    const color = type === \"solid\" ? \"white\" : props.color || textMedium;\n    return (\n        <NativeButton\n            {...props}\n            type={type}\n            buttonStyle={[\n                {\n                    height,\n                    paddingHorizontal: Spacing.small,\n                    backgroundColor: type === \"solid\" ? props.color || primary : \"transparent\",\n                    borderColor: borderDark\n                },\n                props.buttonStyle\n            ]}\n            titleStyle={[{ fontSize, fontFamily, color }, props.titleStyle]}\n            containerStyle={[type === \"solid\" || type === \"outline\" ? shadow : {}, props.containerStyle]}\n        />\n    );\n};\nexport default Button;\n","import React, { FC, useCallback, useContext, useState } from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport Token from \"../types/Token\";\nimport Button from \"./Button\";\n\nexport interface ApproveButtonProps {\n    token: Token;\n    spender: string;\n    onSuccess: () => void;\n    onError: (e) => void;\n    hidden?: boolean;\n}\n\nconst ApproveButton: FC<ApproveButtonProps> = props => {\n    const { approveToken } = useContext(EthersContext);\n    const [loading, setLoading] = useState(false);\n    const onPress = useCallback(async () => {\n        if (props.token) {\n            props.onError({});\n            setLoading(true);\n            try {\n                const tx = await approveToken(props.token.address, props.spender);\n                await tx.wait();\n                props.onSuccess();\n            } catch (e) {\n                props.onError(e);\n            } finally {\n                setLoading(false);\n            }\n        }\n    }, [props.token]);\n    if (props.hidden) {\n        return <View />;\n    }\n    return (\n        <Button\n            size={\"large\"}\n            title={\"Approve \" + (props.token?.symbol || \"\")}\n            onPress={onPress}\n            loading={loading}\n            containerStyle={{ marginBottom: Spacing.small }}\n        />\n    );\n};\n\nexport default ApproveButton;\n","import React, { FC } from \"react\";\nimport { ButtonGroup as NativeButtonGroup, ButtonGroupProps } from \"react-native-elements\";\n\nimport useColors from \"../hooks/useColors\";\nimport useStyles from \"../hooks/useStyles\";\n\n// tslint:disable-next-line:max-func-body-length\nconst ButtonGroup: FC<ButtonGroupProps> = props => {\n    const { borderDark } = useColors();\n    const { shadow } = useStyles();\n    return (\n        <NativeButtonGroup\n            {...props}\n            selectedButtonStyle={[\n                {\n                    backgroundColor: borderDark\n                },\n                props.selectedButtonStyle\n            ]}\n            containerStyle={[\n                {\n                    marginHorizontal: 0,\n                    marginVertical: 0,\n                    height: 56,\n                    ...shadow\n                },\n                props.containerStyle\n            ]}\n        />\n    );\n};\n\nexport default ButtonGroup;\n","import React from \"react\";\nimport { Icon } from \"react-native-elements\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\n\nconst CloseIcon = () => {\n    const { textLight } = useColors();\n    return <Icon type={\"material-community\"} name={\"close\"} color={textLight} style={{ marginLeft: Spacing.tiny }} />;\n};\n\nexport default CloseIcon;\n","import React, { FC } from \"react\";\nimport { View, ViewProps } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\n\ninterface ColumnProps extends ViewProps {\n    noTopMargin?: boolean;\n}\n\nconst Column: FC<ColumnProps> = props => (\n    <View {...props} style={{ width: 440, marginTop: props.noTopMargin ? 0 : Spacing.large }} />\n);\n\nexport default Column;\n","import React, { FC } from \"react\";\nimport { ScrollView, ViewProps } from \"react-native\";\n\nimport { HEADER_HEIGHT } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\n\nexport interface ContainerProps extends ViewProps {\n    scrollToBottomLength?: number;\n    showScrollToBottomButton?: boolean;\n}\n\nconst Container: FC<ContainerProps> = props => {\n    const { background } = useColors();\n    return (\n        <ScrollView\n            nestedScrollEnabled={true}\n            contentContainerStyle={{ flex: 1 }}\n            style={[{ backgroundColor: background, marginTop: HEADER_HEIGHT }, props.style]}\n            {...props}\n        />\n    );\n};\n\nexport default Container;\n","import React from \"react\";\nimport { View, ViewProps } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\n\ninterface ContentProps extends ViewProps {\n    contentPadding?: \"small\" | \"normal\" | \"large\";\n}\n\nconst Content: React.FunctionComponent<ContentProps> = props => {\n    const { background } = useColors();\n    const multiplier = {\n        small: 0.75,\n        normal: 1,\n        large: 1.5\n    }[props.contentPadding || \"normal\"];\n    return (\n        <View style={{ alignItems: \"center\", flex: 1, backgroundColor: background }}>\n            <View style={{ width: 1280, flex: 1 }}>\n                <View\n                    {...props}\n                    style={[\n                        {\n                            paddingHorizontal: Spacing.content * multiplier,\n                            paddingVertical: Spacing.normal * multiplier,\n                            backgroundColor: background\n                        },\n                        props.style\n                    ]}\n                />\n            </View>\n        </View>\n    );\n};\nexport default Content;\n","import React from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport MetamaskError from \"../types/MetamaskError\";\nimport Text from \"./Text\";\n\nconst ErrorMessage = ({ error }: { error: MetamaskError }) => (\n    <View\n        style={{\n            borderColor: \"red\",\n            borderWidth: 1,\n            width: \"100%\",\n            padding: Spacing.tiny,\n            marginTop: Spacing.small\n        }}>\n        {error.code && (\n            <Text fontWeight={\"bold\"} style={{ color: \"red\", fontSize: 14 }}>\n                Error Code {error.code}\n            </Text>\n        )}\n        <Text note={true} style={{ color: \"red\", fontSize: 14 }}>\n            {error.message}\n        </Text>\n    </View>\n);\n\nexport default ErrorMessage;\n","import React from \"react\";\n\nimport Button from \"./Button\";\n\nconst FetchingButton = () => {\n    return <Button size={\"large\"} title={\"Fetching…\"} disabled={true} />;\n};\nexport default FetchingButton;\n","import React from \"react\";\n\nimport Button from \"./Button\";\n\nconst InsufficientBalanceButton = ({ symbol }: { symbol: string }) => {\n    return <Button size={\"large\"} title={\"Insufficient \" + symbol + \" Balance\"} disabled={true} />;\n};\nexport default InsufficientBalanceButton;\n","import React from \"react\";\nimport { View } from \"react-native\";\n\nimport useColors from \"../hooks/useColors\";\n\nconst Border = () => {\n    const { border } = useColors();\n    return <View style={{ height: 1, width: \"100%\", backgroundColor: border }} />;\n};\n\nexport default Border;\n","import React, { FC } from \"react\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport Text from \"./Text\";\n\ninterface SubtitleProps {\n    text: string;\n}\n\nconst Subtitle: FC<SubtitleProps> = props => {\n    return (\n        <Text fontWeight={\"bold\"} medium={true} style={{ marginBottom: Spacing.normal, fontSize: 20 }}>\n            {props.text}\n        </Text>\n    );\n};\n\nexport default Subtitle;\n","import React, { FC, useCallback } from \"react\";\nimport { ActivityIndicator, FlatList, View } from \"react-native\";\n\nimport { ethers } from \"ethers\";\nimport { Spacing } from \"../constants/dimension\";\nimport { LPTokensState } from \"../hooks/useLPTokensState\";\nimport LPToken from \"../types/LPToken\";\nimport Border from \"./Border\";\nimport Column from \"./Column\";\nimport Subtitle from \"./Subtitle\";\nimport Text from \"./Text\";\n\nexport interface LPTokenSelectProps {\n    state: LPTokensState;\n    title: string;\n    emptyText: string;\n    Item: FC<LPTokenItemProps>;\n}\n\nexport interface LPTokenItemProps {\n    token: LPToken;\n    selected: boolean;\n    onSelectToken: (token: LPToken) => void;\n}\n\nconst LPTokenSelect: FC<LPTokenSelectProps> = props => {\n    const onUnselectToken = useCallback(() => {\n        props.state.setSelectedLPToken(undefined);\n    }, [props.state.setSelectedLPToken]);\n    return (\n        <Column>\n            <Subtitle text={props.title} />\n            {props.state.selectedLPToken ? (\n                <props.Item token={props.state.selectedLPToken} selected={true} onSelectToken={onUnselectToken} />\n            ) : (\n                <LPTokenList state={props.state} emptyText={props.emptyText} Item={props.Item} />\n            )}\n        </Column>\n    );\n};\n\nconst LPTokenList = ({\n    state,\n    emptyText,\n    Item\n}: {\n    state: LPTokensState;\n    emptyText: string;\n    Item: FC<LPTokenItemProps>;\n}) => {\n    const renderItem = useCallback(({ item }) => {\n        return <Item key={item.address} token={item} selected={false} onSelectToken={state.setSelectedLPToken} />;\n    }, []);\n    const data = state.lpTokens.sort((t1, t2) => {\n        return (t2.totalDeposited || ethers.constants.Zero)\n            .sub(t1.totalDeposited || ethers.constants.Zero)\n            .div(ethers.BigNumber.from(10).pow(14))\n            .toNumber();\n    });\n    return state.loading ? (\n        <ActivityIndicator size={\"large\"} style={{ marginTop: Spacing.large }} />\n    ) : state.lpTokens.length === 0 ? (\n        <EmptyList text={emptyText} />\n    ) : (\n        <FlatList\n            keyExtractor={item => JSON.stringify(item)}\n            data={data}\n            renderItem={renderItem}\n            ItemSeparatorComponent={Border}\n        />\n    );\n};\n\nconst EmptyList = ({ text }: { text: string }) => {\n    return (\n        <View style={{ margin: Spacing.normal }}>\n            <Text light={true} style={{ textAlign: \"center\", width: \"100%\" }}>\n                {text}\n            </Text>\n        </View>\n    );\n};\n\nexport default LPTokenSelect;\n","import React from \"react\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport FlexView from \"./FlexView\";\nimport Text from \"./Text\";\n\nconst Meta = ({ label, text }: { label: string; text: string }) => {\n    return (\n        <FlexView style={{ justifyContent: \"space-between\", marginTop: Spacing.tiny, marginHorizontal: Spacing.small }}>\n            <Text fontWeight={\"bold\"} style={{ fontSize: 14 }}>\n                {label}\n            </Text>\n            <Text style={{ fontSize: 14 }}>{text}</Text>\n        </FlexView>\n    );\n};\n\nexport default Meta;\n","import React, { useContext } from \"react\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport { GlobalContext } from \"../context/GlobalContext\";\nimport useColors from \"../hooks/useColors\";\nimport Text from \"./Text\";\n\nconst Notice = (props: { text: string; color?: string }) => {\n    const { darkMode } = useContext(GlobalContext);\n    const { primary, secondary } = useColors();\n    const color = props.color || (darkMode ? secondary : primary);\n    return (\n        <Text\n            note={true}\n            style={{\n                color,\n                borderColor: color,\n                borderWidth: 1,\n                borderRadius: 4,\n                padding: Spacing.small\n            }}>\n            {props.text}\n        </Text>\n    );\n};\n\nexport default Notice;\n","import React, { useContext } from \"react\";\nimport { Icon } from \"react-native-elements\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport { GlobalContext } from \"../context/GlobalContext\";\nimport useColors from \"../hooks/useColors\";\n\nconst SelectIcon = () => {\n    const { darkMode } = useContext(GlobalContext);\n    const { primary, secondary } = useColors();\n    return (\n        <Icon\n            type={\"material-community\"}\n            name={\"chevron-right\"}\n            color={darkMode ? secondary : primary}\n            style={{ marginLeft: Spacing.tiny }}\n        />\n    );\n};\n\nexport default SelectIcon;\n","import React, { FC, useCallback } from \"react\";\nimport { Input as NativeInput, InputProps as NativeInputProps } from \"react-native-elements\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\n\nexport interface Validation {\n    regexp: RegExp;\n    error: string;\n}\n\nexport interface InputProps extends NativeInputProps {\n    color?: string;\n    size?: \"small\" | \"normal\" | \"large\";\n    allowed?: Validation[];\n    forbidden?: Validation[];\n    onError?: (error: string) => void;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst Input: FC<InputProps> = props => {\n    const { textDark, textMedium, textLight } = useColors();\n    const size = props.size || \"normal\";\n    const color = props.color || textDark;\n    const fontSize = size === \"small\" ? 24 : size === \"large\" ? 36 : 30;\n    const onChangeText = useCallback(\n        (text: string) => {\n            props.onChangeText?.(text);\n            props.onError?.(\"\");\n            const errors = [] as string[];\n            if (text !== \"\" && props.forbidden) {\n                props.forbidden.forEach(validation => {\n                    if (text.match(validation.regexp)) {\n                        errors.push(validation.error);\n                    }\n                });\n            }\n            if (text !== \"\" && props.allowed) {\n                props.allowed.forEach(validation => {\n                    if (!text.match(validation.regexp)) {\n                        errors.push(validation.error);\n                    }\n                });\n            }\n            if (errors.length > 0) {\n                props.onError?.(errors.join(\"\\n\"));\n            }\n        },\n        [props.onChangeText, props.onError, props.forbidden, props.allowed]\n    );\n    return (\n        <NativeInput\n            {...props}\n            inputStyle={[\n                // @ts-ignore\n                { fontSize, fontFamily: \"regular\", paddingBottom: 4, color, outline: \"none\", marginTop: 0 },\n                props.inputStyle\n            ]}\n            labelStyle={[{ color: textMedium }, props.labelStyle]}\n            placeholderTextColor={props.placeholderTextColor || textLight}\n            errorStyle={props.onError ? { height: 0 } : props.errorStyle}\n            containerStyle={[{ paddingHorizontal: 0, marginTop: Spacing.tiny }, props.containerStyle]}\n            onChangeText={onChangeText}\n        />\n    );\n};\n\nexport default Input;\n","import React, { FC, useCallback, useContext } from \"react\";\nimport { View } from \"react-native\";\n\nimport { ethers } from \"ethers\";\nimport { Spacing } from \"../constants/dimension\";\nimport { GlobalContext } from \"../context/GlobalContext\";\nimport useColors from \"../hooks/useColors\";\nimport Token from \"../types/Token\";\nimport { formatBalance, parseBalance } from \"../utils\";\nimport Button from \"./Button\";\nimport Column from \"./Column\";\nimport Input from \"./Input\";\nimport Subtitle from \"./Subtitle\";\n\nexport interface TokenInputProps {\n    title?: string;\n    token?: Token;\n    hidden: boolean;\n    amount: string;\n    onAmountChanged: (amount: string) => void;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst TokenInput: FC<TokenInputProps> = props => {\n    const onChangeText = useCallback(\n        (text: string) => {\n            if (props.token && props.onAmountChanged) {\n                try {\n                    parseBalance(text, props.token.decimals);\n                    props.onAmountChanged(text);\n                } catch (e) {\n                    if (text.endsWith(\".\") && text.indexOf(\".\") === text.length - 1) {\n                        props.onAmountChanged(text);\n                    }\n                }\n            }\n        },\n        [props.token, props.onAmountChanged]\n    );\n    if (props.hidden) {\n        return <Column noTopMargin={true} />;\n    }\n    const label = props.token?.symbol;\n    return (\n        <Column noTopMargin={!props.title}>\n            {props.title && <Subtitle text={props.title} />}\n            <View style={{ marginHorizontal: Spacing.small }}>\n                <Input label={label} value={props.amount} onChangeText={onChangeText} placeholder={\"0.0\"} />\n                {props.token?.balance?.gt(0) && <MaxButton token={props.token} updateAmount={props.onAmountChanged} />}\n            </View>\n        </Column>\n    );\n};\n\nconst MaxButton = (props: { token: Token; updateAmount }) => {\n    const { darkMode } = useContext(GlobalContext);\n    const { primary, secondary } = useColors();\n    const onPressMax = useCallback(() => {\n        if (props.token) {\n            let balance = props.token.balance;\n            if (props.token.symbol === \"ETH\") {\n                // Subtract 0.01 ETH for gas fee\n                const fee = ethers.BigNumber.from(10).pow(16);\n                balance = balance.gt(fee) ? balance.sub(fee) : ethers.constants.Zero;\n            }\n            props.updateAmount(formatBalance(balance, props.token.decimals));\n        }\n    }, [props.token, props.updateAmount]);\n    return (\n        <View style={{ position: \"absolute\", right: 0, bottom: 12 }}>\n            <Button\n                type={\"clear\"}\n                color={darkMode ? secondary : primary}\n                title={\"MAX\"}\n                fontWeight={\"bold\"}\n                onPress={onPressMax}\n                buttonStyle={{ paddingHorizontal: 0 }}\n            />\n        </View>\n    );\n};\n\nexport default TokenInput;\n","import { useCallback, useContext, useEffect, useState } from \"react\";\n\nimport { ethers } from \"ethers\";\nimport useAsyncEffect from \"use-async-effect\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport { GlobalContext } from \"../context/GlobalContext\";\nimport Token from \"../types/Token\";\nimport { parseBalance } from \"../utils\";\nimport useSDK, { ROUTER } from \"./useSDK\";\n\nexport interface TokenPairState {\n    fromSymbol: string;\n    setFromSymbol: (symbol: string) => void;\n    toSymbol: string;\n    setToSymbol: (symbol: string) => void;\n    fromToken?: Token;\n    toToken?: Token;\n    fromAmount: string;\n    setFromAmount: (amount: string) => void;\n    toAmount: string;\n    setToAmount: (amount: string) => void;\n    fromTokenAllowed: boolean;\n    setFromTokenAllowed: (allowed: boolean) => void;\n    toTokenAllowed: boolean;\n    setToTokenAllowed: (allowed: boolean) => void;\n    loading: boolean;\n    onWrap: () => Promise<void>;\n    wrapping: boolean;\n    onUnwrap: () => Promise<void>;\n    unwrapping: boolean;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst useTokenPairState: () => TokenPairState = () => {\n    const { tokens, updateTokens } = useContext(GlobalContext);\n    const { provider, signer, address, getTokenAllowance } = useContext(EthersContext);\n    const { wrapETH, unwrapETH } = useSDK();\n    const [fromSymbol, setFromSymbol] = useState(\"\");\n    const [toSymbol, setToSymbol] = useState(\"\");\n    const [fromAmount, setFromAmount] = useState(\"\");\n    const [toAmount, setToAmount] = useState(\"\");\n    const [fromTokenAllowed, setFromTokenAllowed] = useState(false);\n    const [toTokenAllowed, setToTokenAllowed] = useState(false);\n    const [loading, setLoading] = useState(false);\n    const [wrapping, setWrapping] = useState(false);\n    const [unwrapping, setUnwrapping] = useState(false);\n\n    const fromToken = tokens.find(token => token.symbol === fromSymbol);\n    const toToken = tokens.find(token => token.symbol === toSymbol);\n\n    useEffect(() => {\n        if (fromSymbol === \"\") {\n            setToSymbol(\"\");\n        }\n        setFromAmount(\"\");\n        setToAmount(\"\");\n    }, [fromSymbol, toSymbol]);\n\n    useEffect(() => {\n        setFromSymbol(\"\");\n    }, [address]);\n\n    useAsyncEffect(async () => {\n        if (fromToken && toToken && provider && signer) {\n            setFromTokenAllowed(false);\n            setToTokenAllowed(false);\n            setLoading(true);\n            try {\n                const minAllowance = ethers.BigNumber.from(2)\n                    .pow(96)\n                    .sub(1);\n                if (fromToken.symbol !== \"ETH\") {\n                    const fromAllowance = await getTokenAllowance(fromToken.address, ROUTER);\n                    setFromTokenAllowed(ethers.BigNumber.from(fromAllowance).gte(minAllowance));\n                }\n                if (toToken.symbol !== \"ETH\") {\n                    const toAllowance = await getTokenAllowance(toToken.address, ROUTER);\n                    setToTokenAllowed(ethers.BigNumber.from(toAllowance).gte(minAllowance));\n                }\n            } finally {\n                setLoading(false);\n            }\n        }\n    }, [fromToken, toToken, provider, signer]);\n\n    const onWrap = useCallback(async () => {\n        if (fromAmount && signer) {\n            setWrapping(true);\n            try {\n                const tx = await wrapETH(parseBalance(fromAmount));\n                if (tx) {\n                    await tx.wait();\n                    await updateTokens();\n                    setFromSymbol(\"\");\n                }\n            } finally {\n                setWrapping(false);\n            }\n        }\n    }, [fromAmount, signer]);\n\n    const onUnwrap = useCallback(async () => {\n        if (fromAmount && signer) {\n            setUnwrapping(true);\n            try {\n                const tx = await unwrapETH(parseBalance(fromAmount));\n                if (tx) {\n                    await tx.wait();\n                    await updateTokens();\n                    setFromSymbol(\"\");\n                }\n            } finally {\n                setUnwrapping(false);\n            }\n        }\n    }, [fromAmount, signer]);\n\n    return {\n        fromSymbol,\n        setFromSymbol,\n        toSymbol,\n        setToSymbol,\n        fromToken,\n        toToken,\n        fromAmount,\n        setFromAmount,\n        toAmount,\n        setToAmount,\n        fromTokenAllowed,\n        setFromTokenAllowed,\n        toTokenAllowed,\n        setToTokenAllowed,\n        loading,\n        onWrap,\n        wrapping,\n        onUnwrap,\n        unwrapping\n    };\n};\n\nexport default useTokenPairState;\n","import { useContext, useEffect, useState } from \"react\";\n\nimport { Pair } from \"@levx/sushiswap-sdk\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport useSDK from \"./useSDK\";\nimport useTokenPairState, { TokenPairState } from \"./useTokenPairState\";\n\nexport interface LiquidityState extends TokenPairState {\n    pair?: Pair;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst useLiquidityState: () => LiquidityState = () => {\n    const state = useTokenPairState();\n    const { provider, addOnBlockListener, removeOnBlockListener } = useContext(EthersContext);\n    const [loading, setLoading] = useState(false);\n    const [pair, setPair] = useState<Pair>();\n    const { getPair } = useSDK();\n\n    useEffect(() => {\n        if (state.fromSymbol && state.toSymbol) {\n            const updatePair = async () => {\n                if (state.fromToken && state.toToken && provider) {\n                    setLoading(true);\n                    setPair(undefined);\n                    try {\n                        setPair(await getPair(state.fromToken, state.toToken));\n                    } catch (e) {\n                    } finally {\n                        setLoading(false);\n                    }\n                }\n            };\n\n            updatePair();\n            const name = \"updatePair(\" + state.fromSymbol + \",\" + state.toSymbol + \")\";\n\n            addOnBlockListener(name, updatePair);\n            return () => {\n                removeOnBlockListener(name);\n            };\n        }\n    }, [state.fromSymbol, state.toSymbol]);\n\n    return {\n        ...state,\n        loading: loading || state.loading,\n        pair\n    };\n};\n\nexport default useLiquidityState;\n","import { useContext, useEffect, useState } from \"react\";\n\nimport { EthersContext } from \"../context/EthersContext\";\nimport { GlobalContext } from \"../context/GlobalContext\";\nimport LPToken from \"../types/LPToken\";\nimport useLiquidityState, { LiquidityState } from \"./useLiquidityState\";\nimport useSDK from \"./useSDK\";\n\nexport interface LPTokensState extends LiquidityState {\n    lpTokens: LPToken[];\n    updateLPTokens: () => Promise<void>;\n    selectedLPToken?: LPToken;\n    setSelectedLPToken: (token?: LPToken) => void;\n    selectedLPTokenAllowed: boolean;\n    setSelectedLPTokenAllowed: (allowed: boolean) => void;\n    amount: string;\n    setAmount: (amount: string) => void;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst useLPTokensState: (loadPools: boolean) => LPTokensState = loadPools => {\n    const state = useLiquidityState();\n    const { provider, signer, address, addOnBlockListener, removeOnBlockListener } = useContext(EthersContext);\n    const { tokens } = useContext(GlobalContext);\n    const { getMyLPTokens, getPools } = useSDK();\n    const [loading, setLoading] = useState(true);\n    const [lpTokens, setLPTokens] = useState<LPToken[]>([]);\n    const [selectedLPToken, setSelectedLPToken] = useState<LPToken>();\n    const [selectedLPTokenAllowed, setSelectedLPTokenAllowed] = useState(false);\n    const [amount, setAmount] = useState(\"\");\n\n    const updateLPTokens = async () => {\n        try {\n            const method = loadPools ? getPools : getMyLPTokens;\n            const data = await method();\n            if (data) {\n                setLPTokens(data);\n            }\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    useEffect(() => {\n        if (!selectedLPToken) {\n            setAmount(\"\");\n        }\n    }, [selectedLPToken]);\n\n    useEffect(() => {\n        if (provider && signer && (loadPools || tokens.length > 0)) {\n            updateLPTokens();\n\n            const name = \"updateLPTokens()\";\n            addOnBlockListener(name, updateLPTokens);\n            return () => {\n                removeOnBlockListener(name);\n            };\n        }\n    }, [provider, signer, tokens.length, address]);\n\n    return {\n        ...state,\n        loading: state.loading || loading,\n        lpTokens,\n        updateLPTokens,\n        selectedLPToken,\n        setSelectedLPToken,\n        selectedLPTokenAllowed,\n        setSelectedLPTokenAllowed,\n        amount,\n        setAmount\n    };\n};\n\nexport default useLPTokensState;\n","import { useCallback, useContext, useEffect, useState } from \"react\";\n\nimport { ethers } from \"ethers\";\nimport useAsyncEffect from \"use-async-effect\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport { getContract, parseBalance } from \"../utils\";\nimport useLPTokensState, { LPTokensState } from \"./useLPTokensState\";\nimport useSDK, { MASTER_CHEF } from \"./useSDK\";\n\nexport interface FarmingState extends LPTokensState {\n    action?: Action;\n    setAction: (action?: Action) => void;\n    expectedSushiRewardPerBlock?: ethers.BigNumber;\n    amountDeposited?: ethers.BigNumber;\n    pendingSushi?: ethers.BigNumber;\n    onDeposit: () => Promise<void>;\n    depositing: boolean;\n    onWithdraw: () => Promise<void>;\n    withdrawing: boolean;\n}\n\nexport type Action = \"deposit\" | \"withdraw\";\n\n// tslint:disable-next-line:max-func-body-length\nconst useFarmingState: () => FarmingState = () => {\n    const state = useLPTokensState(true);\n    const { provider, signer, getTokenAllowance } = useContext(EthersContext);\n    const { getExpectedSushiRewardPerBlock, deposit, withdraw } = useSDK();\n    const [action, setAction] = useState<Action>();\n    const [loading, setLoading] = useState(false);\n    const [expectedSushiRewardPerBlock, setExpectedSushiRewardPerBlock] = useState<ethers.BigNumber>();\n    const [amountDeposited, setAmountDeposited] = useState<ethers.BigNumber>();\n    const [pendingSushi, setPendingSushi] = useState<ethers.BigNumber>();\n    const [depositing, setDepositing] = useState(false);\n    const [withdrawing, setWithdrawing] = useState(false);\n\n    useEffect(() => {\n        setAction(undefined);\n        setLoading(false);\n        setDepositing(false);\n        setWithdrawing(false);\n        setExpectedSushiRewardPerBlock(undefined);\n    }, [state.selectedLPToken]);\n\n    useAsyncEffect(async () => {\n        if (signer && state.selectedLPToken) {\n            setLoading(true);\n            try {\n                setExpectedSushiRewardPerBlock(await getExpectedSushiRewardPerBlock(state.selectedLPToken));\n\n                const address = await signer.getAddress();\n                const masterChef = getContract(\"MasterChef\", MASTER_CHEF, signer);\n                const id = state.selectedLPToken.id!;\n                const { amount } = await masterChef.userInfo(id, address);\n                const pending = await masterChef.pendingSushi(id, address);\n                setAmountDeposited(amount);\n                setPendingSushi(pending);\n            } finally {\n                setLoading(false);\n            }\n        }\n    }, [signer, state.selectedLPToken]);\n\n    useAsyncEffect(async () => {\n        if (provider && signer && state.selectedLPToken) {\n            setLoading(true);\n            state.setSelectedLPTokenAllowed(false);\n            try {\n                const minAllowance = ethers.BigNumber.from(2)\n                    .pow(96)\n                    .sub(1);\n                const allowance = await getTokenAllowance(state.selectedLPToken.address, MASTER_CHEF);\n                state.setSelectedLPTokenAllowed(ethers.BigNumber.from(allowance).gte(minAllowance));\n            } finally {\n                setLoading(false);\n            }\n        }\n    }, [provider, signer, state.selectedLPToken]);\n\n    const onDeposit = useCallback(async () => {\n        if (state.selectedLPToken?.id && state.amount && signer) {\n            setDepositing(true);\n            try {\n                const amount = parseBalance(state.amount, state.selectedLPToken.decimals);\n                const tx = await deposit(state.selectedLPToken.id, amount);\n                await tx.wait();\n                await state.updateLPTokens();\n                state.setSelectedLPToken(undefined);\n            } finally {\n                setDepositing(false);\n            }\n        }\n    }, [state.selectedLPToken, state.amount, signer]);\n\n    const onWithdraw = useCallback(async () => {\n        if (state.selectedLPToken?.id && state.amount && signer) {\n            setWithdrawing(true);\n            try {\n                const amount = parseBalance(state.amount, state.selectedLPToken.decimals);\n                const tx = await withdraw(state.selectedLPToken.id, amount);\n                await tx.wait();\n                await state.updateLPTokens();\n                state.setSelectedLPToken(undefined);\n            } finally {\n                setWithdrawing(false);\n            }\n        }\n    }, [state.selectedLPToken, state.amount, signer]);\n\n    return {\n        ...state,\n        loading: state.loading || loading,\n        action,\n        setAction,\n        expectedSushiRewardPerBlock,\n        amountDeposited,\n        pendingSushi,\n        onDeposit,\n        depositing,\n        onWithdraw,\n        withdrawing\n    };\n};\n\nexport default useFarmingState;\n","import React, { useCallback, useContext } from \"react\";\nimport { Image, View } from \"react-native\";\n\nimport * as Linking from \"expo-linking\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport { GlobalContext } from \"../context/GlobalContext\";\nimport Button from \"./Button\";\n\nconst ConnectWallet = () => {\n    const { darkMode } = useContext(GlobalContext);\n    const onPress = useCallback(async () => {\n        if (window.ethereum) {\n            await window.ethereum.enable();\n        } else {\n            await Linking.openURL(\"https://metamask.io/\");\n        }\n    }, [window.ethereum]);\n    const title = window.ethereum ? \"Connect\" : \"Install MetaMask\";\n    return (\n        <View style={{ flex: 1, alignItems: \"center\", justifyContent: \"center\" }}>\n            <Image\n                source={darkMode ? require(\"../../assets/metamask-dark.png\") : require(\"../../assets/metamask.png\")}\n                style={{ width: 223, height: 183, marginBottom: Spacing.huge }}\n            />\n            <Button type={\"outline\"} size={\"large\"} onPress={onPress} title={title} containerStyle={{ width: 440 }} />\n        </View>\n    );\n};\nexport default ConnectWallet;\n","import React from \"react\";\nimport { View } from \"react-native\";\n\nimport { Link as NativeLink } from \"@react-navigation/native\";\nimport { Spacing } from \"../constants/dimension\";\nimport FlexView from \"./FlexView\";\nimport Text from \"./Text\";\n\nconst Footer = () => (\n    <View\n        // @ts-ignore\n        style={{\n            position: \"fixed\",\n            bottom: 0,\n            width: \"100%\",\n            margin: Spacing.content\n        }}>\n        <Text note={true}>\n            © 2020 Built by <Link to={\"https://levx.io\"} text={\"Team LevX\"} />\n        </Text>\n        <FlexView style={{ marginLeft: Spacing.small }}>\n            <Link to={\"https://github.com/lev-x\"} text={\"GitHub\"} />\n            <Link to={\"https://twitter.com/LevxApp\"} text={\"Twitter\"} />\n            <Link to={\"mailto:team@levx.io\"} text={\"Email\"} />\n        </FlexView>\n    </View>\n);\n\nconst Link = ({ to, text }) => (\n    <NativeLink to={to} target={\"_blank\"}>\n        <Text note={true} style={{ textDecorationLine: \"underline\", marginRight: 8 }}>\n            {text}\n        </Text>\n    </NativeLink>\n);\n\nexport default Footer;\n","import React, { useContext } from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport useColors from \"../hooks/useColors\";\nimport FlexView from \"./FlexView\";\nimport Text from \"./Text\";\n\nconst Status = () => {\n    const { shadow, textMedium, textLight, green } = useColors();\n    const { chainId } = useContext(EthersContext);\n    const connected = chainId === 1;\n    const title = connected ? \"Connected\" : \"Not connected\";\n    const color = connected ? green : textLight;\n    return (\n        <FlexView\n            // @ts-ignore\n            style={{\n                position: \"fixed\",\n                right: Spacing.content,\n                bottom: Spacing.normal,\n                height: 40,\n                alignItems: \"center\",\n                justifyContent: \"center\",\n                paddingHorizontal: Spacing.small,\n                borderRadius: 16,\n                shadowColor: shadow,\n                shadowOffset: { width: 0, height: 4 },\n                shadowOpacity: 0.5,\n                shadowRadius: 8\n            }}>\n            <View style={{ backgroundColor: color, width: 6, height: 6, borderRadius: 3, marginRight: 12 }} />\n            <Text style={{ fontSize: 16, color: textMedium, marginRight: 2 }}>{title}</Text>\n            {/*<Icon type={\"material-community\"} name={\"chevron-down\"} color={textLight} size={22} />*/}\n        </FlexView>\n    );\n};\n\nexport default Status;\n","import React, { useContext } from \"react\";\nimport { View } from \"react-native\";\n\nimport ConnectToWallet from \"../components/ConnectToWallet\";\nimport Footer from \"../components/Footer\";\nimport Status from \"../components/Status\";\nimport Text from \"../components/Text\";\nimport { EthersContext } from \"../context/EthersContext\";\n\nconst Screen = props => {\n    const { address, chainId } = useContext(EthersContext);\n    if (!address) {\n        return <ConnectToWallet />;\n    }\n    if (chainId !== 1) {\n        return (\n            <View style={{ flex: 1, alignItems: \"center\", justifyContent: \"center\" }}>\n                <Text light={true} style={{ textAlign: \"center\" }}>\n                    {\"Please switch network to\\n'Ethereum Mainnet'\"}\n                </Text>\n            </View>\n        );\n    }\n    return (\n        <View style={{ flex: 1 }}>\n            <View {...props} />\n            <Status />\n            <Footer />\n        </View>\n    );\n};\n\nexport default Screen;\n","import React, { FC, useCallback, useState } from \"react\";\nimport { Image, TouchableHighlight, View } from \"react-native\";\nimport { Hoverable } from \"react-native-web-hover\";\n\nimport { useNavigation } from \"@react-navigation/native\";\nimport { ethers } from \"ethers\";\nimport useAsyncEffect from \"use-async-effect\";\nimport ApproveButton from \"../components/ApproveButton\";\nimport Button from \"../components/Button\";\nimport ButtonGroup from \"../components/ButtonGroup\";\nimport CloseIcon from \"../components/CloseIcon\";\nimport Column from \"../components/Column\";\nimport Container from \"../components/Container\";\nimport Content from \"../components/Content\";\nimport ErrorMessage from \"../components/ErrorMessage\";\nimport FetchingButton from \"../components/FetchingButton\";\nimport FlexView from \"../components/FlexView\";\nimport InsufficientBalanceButton from \"../components/InsufficientBalanceButton\";\nimport LPTokenSelect, { LPTokenItemProps } from \"../components/LPTokenSelect\";\nimport Meta from \"../components/Meta\";\nimport Notice from \"../components/Notice\";\nimport SelectIcon from \"../components/SelectIcon\";\nimport Subtitle from \"../components/Subtitle\";\nimport Text from \"../components/Text\";\nimport TokenInput from \"../components/TokenInput\";\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport useFarmingState, { Action, FarmingState } from \"../hooks/useFarmingState\";\nimport { MASTER_CHEF } from \"../hooks/useSDK\";\nimport LPToken from \"../types/LPToken\";\nimport MetamaskError from \"../types/MetamaskError\";\nimport { formatBalance, isEmptyValue, parseBalance } from \"../utils\";\nimport Screen from \"./Screen\";\n\nconst FarmingScreen = () => {\n    return (\n        <Screen>\n            <Container>\n                <Content>\n                    <View style={{ alignItems: \"center\", marginBottom: Spacing.large }}>\n                        <Farming />\n                    </View>\n                </Content>\n            </Container>\n        </Screen>\n    );\n};\n\nconst Farming = () => {\n    const state = useFarmingState();\n    return (\n        <>\n            <Column>\n                <Text h4={true} style={{ textAlign: \"center\" }}>\n                    🌾 Farming\n                </Text>\n            </Column>\n            <LPTokenSelect\n                state={state}\n                title={\"1. Select a pool for yield farming:\"}\n                emptyText={\"Temporarily unable to load pools.\"}\n                Item={TokenItem}\n            />\n            <ActionSelect state={state} />\n            <Deposit state={state} />\n            <Withdraw state={state} />\n        </>\n    );\n};\n\nconst TokenItem: FC<LPTokenItemProps> = props => {\n    const { background, backgroundHovered, textMedium } = useColors();\n    const amount = formatBalance(props.token.totalDeposited || \"0\", props.token.decimals, 4);\n    const onPress = useCallback(() => {\n        props.onSelectToken(props.token);\n    }, [props.onSelectToken, props.token]);\n    return (\n        <Hoverable>\n            {({ hovered }) => (\n                <TouchableHighlight onPress={onPress}>\n                    <View style={{ backgroundColor: hovered ? backgroundHovered : background }}>\n                        <FlexView style={{ alignItems: \"center\", margin: Spacing.small }}>\n                            <View>\n                                <LogoSymbol token={props.token.tokenA} />\n                                <LogoSymbol token={props.token.tokenB} />\n                            </View>\n                            <View style={{ flex: 1 }}>\n                                <Text style={{ textAlign: \"right\", fontSize: 15 }}>Total Deposited</Text>\n                                <Text light={true} style={{ textAlign: \"right\", fontSize: 22, color: textMedium }}>\n                                    {amount}\n                                </Text>\n                            </View>\n                            {props.selected ? <CloseIcon /> : <SelectIcon />}\n                        </FlexView>\n                    </View>\n                </TouchableHighlight>\n            )}\n        </Hoverable>\n    );\n};\n\nconst LogoSymbol = ({ token }) => {\n    const { textMedium } = useColors();\n    return (\n        <FlexView style={{ alignItems: \"center\", marginBottom: Spacing.tiny }}>\n            <Image\n                source={{ uri: token.logoURI }}\n                style={{ width: 24, height: 24, backgroundColor: \"white\", borderRadius: 12 }}\n            />\n            <Text light={true} style={{ fontSize: 22, color: textMedium, marginLeft: Spacing.small }}>\n                {token.symbol}\n            </Text>\n        </FlexView>\n    );\n};\n\nconst ActionSelect = ({ state }: { state: FarmingState }) => {\n    if (!state.selectedLPToken) {\n        return <Column noTopMargin={true} />;\n    }\n    const actions = [\"deposit\", \"withdraw\"];\n    const index = state.action ? actions.indexOf(state.action) : null;\n    const onPress = useCallback((i: number) => {\n        state.setAction(actions[i] as Action);\n    }, []);\n    const radius = Spacing.tiny;\n    return (\n        <Column>\n            <Subtitle text={\"2. What do you want to do with this pool?\"} />\n            <ButtonGroup\n                selectedIndex={index}\n                onPress={onPress}\n                buttons={[\"☘️ Deposit\", \"🚜 Withdraw\"]}\n                buttonStyle={{\n                    borderTopLeftRadius: index === 0 ? radius : 0,\n                    borderBottomLeftRadius: index === 0 ? radius : 0,\n                    borderTopRightRadius: index === 1 ? radius : 0,\n                    borderBottomRightRadius: index === 1 ? radius : 0\n                }}\n                containerStyle={{ marginHorizontal: Spacing.small }}\n            />\n        </Column>\n    );\n};\n\nconst Deposit = ({ state }: { state: FarmingState }) => {\n    if (!state.selectedLPToken || state.action !== \"deposit\") {\n        return <Column noTopMargin={true} />;\n    }\n    return (\n        <>\n            <AddLiquidityNotice state={state} />\n            <TokenInput\n                title={\"3. How many tokens would you DEPOSIT?\"}\n                token={state.selectedLPToken}\n                hidden={state.selectedLPToken.balance.isZero()}\n                amount={state.amount}\n                onAmountChanged={state.setAmount}\n            />\n            <DepositInfo state={state} />\n            <DepositControls state={state} />\n        </>\n    );\n};\n\nconst AddLiquidityNotice = ({ state }: { state: FarmingState }) => {\n    if (!state.selectedLPToken!.balance.isZero()) {\n        return <Column noTopMargin={true} />;\n    }\n    return (\n        <Column noTopMargin={true}>\n            <View style={{ marginTop: Spacing.large, marginHorizontal: Spacing.small }}>\n                <Notice\n                    color={\"red\"}\n                    text={\n                        \"You need some \" +\n                        state.selectedLPToken!.symbol +\n                        \" token to start farming. Add liquidity to get the LP token.\"\n                    }\n                />\n            </View>\n            <AddLiquidityButton />\n        </Column>\n    );\n};\n\nconst DepositInfo = ({ state }: { state: FarmingState }) => {\n    if (state.selectedLPToken!.balance.isZero()) {\n        return <Column noTopMargin={true} />;\n    }\n    const balance = formatBalance(state.selectedLPToken!.balance, state.selectedLPToken!.decimals);\n    const sushiReward =\n        state.expectedSushiRewardPerBlock && state.amount\n            ? formatBalance(\n                  state.expectedSushiRewardPerBlock\n                      .mul(parseBalance(state.amount, 18))\n                      .div(ethers.BigNumber.from(10).pow(18)),\n                  18\n              )\n            : null;\n    return (\n        <Column noTopMargin={true}>\n            <Meta label={\"My Balance\"} text={balance} />\n            {!isEmptyValue(state.amount) && <Meta label={\"SUSHI Reward per Block\"} text={sushiReward || \"…\"} />}\n        </Column>\n    );\n};\n\nconst DepositControls = ({ state }: { state: FarmingState }) => {\n    const [error, setError] = useState<MetamaskError>({});\n    useAsyncEffect(() => setError({}), [state.selectedLPToken]);\n    if (state.selectedLPToken!.balance.isZero()) {\n        return <Column noTopMargin={true} />;\n    }\n    const approveRequired = !state.selectedLPTokenAllowed;\n    const disabled = approveRequired || isEmptyValue(state.amount);\n    return (\n        <Column>\n            {parseBalance(state.amount, state.selectedLPToken!.decimals).gt(state.selectedLPToken!.balance) ? (\n                <InsufficientBalanceButton symbol={state.selectedLPToken!.symbol} />\n            ) : state.loading ? (\n                <FetchingButton />\n            ) : (\n                <>\n                    <ApproveButton\n                        token={state.selectedLPToken!}\n                        spender={MASTER_CHEF}\n                        onSuccess={() => state.setSelectedLPTokenAllowed(true)}\n                        onError={setError}\n                        hidden={isEmptyValue(state.amount) || !approveRequired}\n                    />\n                    <DepositButton state={state} onError={setError} disabled={disabled} />\n                </>\n            )}\n            {error.message && error.code !== 4001 && <ErrorMessage error={error} />}\n        </Column>\n    );\n};\n\nconst AddLiquidityButton = () => {\n    const { navigate } = useNavigation();\n    const onPress = useCallback(() => {\n        navigate(\"Liquidity\");\n    }, [navigate]);\n    return (\n        <Button\n            color={\"red\"}\n            title={\"Add Liquidity\"}\n            containerStyle={{ marginTop: Spacing.normal }}\n            onPress={onPress}\n        />\n    );\n};\n\nconst DepositButton = ({\n    state,\n    onError,\n    disabled\n}: {\n    state: FarmingState;\n    onError: (e) => void;\n    disabled: boolean;\n}) => {\n    const onPress = useCallback(() => {\n        onError({});\n        state.onDeposit().catch(onError);\n    }, [state.onDeposit, onError]);\n    return <Button size={\"large\"} title={\"Deposit\"} disabled={disabled} loading={state.depositing} onPress={onPress} />;\n};\n\nconst Withdraw = ({ state }: { state: FarmingState }) => {\n    if (!state.selectedLPToken || state.action !== \"withdraw\") {\n        return <Column noTopMargin={true} />;\n    }\n    const token: LPToken = {\n        ...state.selectedLPToken,\n        balance: state.amountDeposited || ethers.constants.Zero\n    };\n    return (\n        <Column>\n            <NoLPTokenNotice state={state} />\n            <TokenInput\n                title={\"3. How many tokens would you WITHDRAW?\"}\n                token={token}\n                hidden={state.loading || state.amountDeposited?.isZero() || false}\n                amount={state.amount}\n                onAmountChanged={state.setAmount}\n            />\n            <WithdrawInfo state={state} />\n            <WithdrawControls state={state} />\n        </Column>\n    );\n};\n\nconst NoLPTokenNotice = ({ state }: { state: FarmingState }) => {\n    if (state.loading || !state.amountDeposited?.isZero()) {\n        return <Column noTopMargin={true} />;\n    }\n    return (\n        <Column noTopMargin={true}>\n            <View style={{ marginHorizontal: Spacing.small }}>\n                <Notice\n                    text={\"You don't have any \" + state.selectedLPToken!.symbol + \" token deposited. Deposit it first.\"}\n                />\n            </View>\n        </Column>\n    );\n};\n\nconst WithdrawInfo = ({ state }: { state: FarmingState }) => {\n    if (state.loading || !state.amountDeposited || state.amountDeposited.isZero()) {\n        return <Column noTopMargin={true} />;\n    }\n    const deposit = formatBalance(state.amountDeposited, state.selectedLPToken!.decimals);\n    const pendingSushi = formatBalance(state.pendingSushi || ethers.constants.Zero, state.selectedLPToken!.decimals);\n    return (\n        <Column noTopMargin={true}>\n            <Meta label={\"My Deposit\"} text={deposit} />\n            <Meta label={\"Pending Sushi Reward\"} text={pendingSushi} />\n            <View style={{ marginTop: Spacing.normal, marginHorizontal: Spacing.small }}>\n                <Notice text={\"All pending sushi reward will be transferred to you if you withdraw.\"} />\n            </View>\n        </Column>\n    );\n};\n\nconst WithdrawControls = ({ state }: { state: FarmingState }) => {\n    const [error, setError] = useState<MetamaskError>({});\n    useAsyncEffect(() => setError({}), [state.selectedLPToken]);\n    if (state.loading) {\n        return (\n            <Column>\n                <FetchingButton />\n            </Column>\n        );\n    }\n    if (!state.amountDeposited || state.amountDeposited.isZero()) {\n        return <Column noTopMargin={true} />;\n    }\n    return (\n        <Column>\n            {parseBalance(state.amount, state.selectedLPToken!.decimals).gt(state.amountDeposited) ? (\n                <InsufficientBalanceButton symbol={state.selectedLPToken!.symbol} />\n            ) : (\n                <WithdrawButton state={state} onError={setError} disabled={isEmptyValue(state.amount)} />\n            )}\n            {error.message && error.code !== 4001 && <ErrorMessage error={error} />}\n        </Column>\n    );\n};\n\nconst WithdrawButton = ({\n    state,\n    onError,\n    disabled\n}: {\n    state: FarmingState;\n    onError: (e) => void;\n    disabled: boolean;\n}) => {\n    const onPress = useCallback(() => {\n        onError({});\n        state.onWithdraw().catch(onError);\n    }, [state.onWithdraw, onError]);\n    return (\n        <Button size={\"large\"} title={\"Withdraw\"} disabled={disabled} loading={state.withdrawing} onPress={onPress} />\n    );\n};\n\nexport default FarmingScreen;\n","import React, { FC, useCallback, useContext, useMemo } from \"react\";\nimport { ActivityIndicator, FlatList, Image, TouchableHighlight, View } from \"react-native\";\nimport { Hoverable } from \"react-native-web-hover\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport { GlobalContext } from \"../context/GlobalContext\";\nimport useColors from \"../hooks/useColors\";\nimport Token from \"../types/Token\";\nimport { formatBalance } from \"../utils\";\nimport Border from \"./Border\";\nimport CloseIcon from \"./CloseIcon\";\nimport Column from \"./Column\";\nimport FlexView from \"./FlexView\";\nimport SelectIcon from \"./SelectIcon\";\nimport Subtitle from \"./Subtitle\";\nimport Text from \"./Text\";\n\ninterface TokenSelectProps {\n    title: string;\n    hidden: boolean;\n    symbol: string;\n    onChangeSymbol: (symbol: string) => void;\n    filterTokens: (token: Token) => boolean;\n}\n\nconst TokenSelect: FC<TokenSelectProps> = props => {\n    const { tokens } = useContext(GlobalContext);\n    const token = tokens.find(t => t.symbol === props.symbol);\n    const onSelectToken = useCallback(\n        t => {\n            props.onChangeSymbol(t.symbol);\n        },\n        [props.onChangeSymbol]\n    );\n    const onUnselectToken = useCallback(() => {\n        props.onChangeSymbol(\"\");\n    }, [props.onChangeSymbol]);\n    if (/*!props.from && props.oppositeSymbol === \"\"*/ props.hidden) {\n        return <Column noTopMargin={true} />;\n    }\n    return (\n        <Column>\n            <Subtitle text={props.title} />\n            {token ? (\n                <TokenItem token={token} selected={true} onSelectToken={onUnselectToken} />\n            ) : (\n                <TokenList filterTokens={props.filterTokens} onSelectToken={onSelectToken} />\n            )}\n        </Column>\n    );\n};\n\nconst TokenList = (props: { filterTokens: (token: Token) => boolean; onSelectToken: (token: Token) => void }) => {\n    const { loadingTokens } = useContext(GlobalContext);\n    const { tokens } = useContext(GlobalContext);\n    const renderItem = useCallback(({ item }) => {\n        return <TokenItem key={item.address} token={item} selected={false} onSelectToken={props.onSelectToken} />;\n    }, []);\n    const data = useMemo(\n        () =>\n            tokens\n                .filter(props.filterTokens)\n                .sort(\n                    (t1, t2) =>\n                        (t2.balance.isZero() ? 0 : 10000000000) -\n                        (t1.balance.isZero() ? 0 : 10000000000) +\n                        t1.symbol.localeCompare(t2.symbol)\n                ),\n        [tokens]\n    );\n    return loadingTokens ? (\n        <ActivityIndicator size={\"large\"} style={{ marginTop: Spacing.large }} />\n    ) : data.length === 0 ? (\n        <EmptyList />\n    ) : (\n        <FlatList\n            keyExtractor={item => JSON.stringify(item)}\n            data={data}\n            renderItem={renderItem}\n            ItemSeparatorComponent={Border}\n        />\n    );\n};\n\nconst EmptyList = () => {\n    return (\n        <View style={{ margin: Spacing.normal }}>\n            <Text light={true} style={{ textAlign: \"center\", width: \"100%\" }}>\n                {\"You don't have any token with balance.\\nTransfer tokens to your address first.\"}\n            </Text>\n        </View>\n    );\n};\n\nconst TokenItem = (props: { token: Token; selected: boolean; onSelectToken: (token: Token) => void }) => {\n    const { background, backgroundHovered, textMedium } = useColors();\n    const onPress = useCallback(() => {\n        props.onSelectToken(props.token);\n    }, [props.onSelectToken, props.token]);\n    return (\n        <Hoverable>\n            {({ hovered }) => (\n                <TouchableHighlight onPress={onPress}>\n                    <View style={{ backgroundColor: hovered ? backgroundHovered : background }}>\n                        <FlexView style={{ alignItems: \"center\", margin: Spacing.small }}>\n                            <Image\n                                source={{ uri: props.token.logoURI }}\n                                style={{ width: 24, height: 24, backgroundColor: \"white\", borderRadius: 12 }}\n                            />\n                            <Text light={true} style={{ marginLeft: Spacing.small, fontSize: 22, color: textMedium }}>\n                                {props.token.symbol}\n                            </Text>\n                            <Text light={true} style={{ flex: 1, textAlign: \"right\", fontSize: 22, color: textMedium }}>\n                                {formatBalance(props.token.balance, props.token.decimals, 8)}\n                            </Text>\n                            {props.selected ? <CloseIcon /> : <SelectIcon />}\n                        </FlexView>\n                    </View>\n                </TouchableHighlight>\n            )}\n        </Hoverable>\n    );\n};\n\nexport default TokenSelect;\n","import React from \"react\";\n\nimport { TokenPairState } from \"../hooks/useTokenPairState\";\nimport Button from \"./Button\";\n\nconst UnsupportedButton = ({ state }: { state: TokenPairState }) => {\n    return <Button size={\"large\"} title={state.fromSymbol + \"-\" + state.toSymbol + \" Not Supported\"} disabled={true} />;\n};\n\nexport default UnsupportedButton;\n","import React, { useCallback, useState } from \"react\";\n\nimport { ethers } from \"ethers\";\nimport useAsyncEffect from \"use-async-effect\";\nimport { AddLiquidityState } from \"../hooks/useAddLiquidityState\";\nimport { ROUTER } from \"../hooks/useSDK\";\nimport MetamaskError from \"../types/MetamaskError\";\nimport { convertAmount, convertToken, formatBalance, isEmptyValue, parseBalance } from \"../utils\";\nimport ApproveButton from \"./ApproveButton\";\nimport Button from \"./Button\";\nimport Column from \"./Column\";\nimport ErrorMessage from \"./ErrorMessage\";\nimport FetchingButton from \"./FetchingButton\";\nimport InsufficientBalanceButton from \"./InsufficientBalanceButton\";\nimport Meta from \"./Meta\";\nimport Notice from \"./Notice\";\nimport Text from \"./Text\";\nimport TokenInput from \"./TokenInput\";\nimport TokenSelect from \"./TokenSelect\";\nimport UnsupportedButton from \"./UnsupportedButton\";\n\nconst AddLiquidity = ({ state }: { state: AddLiquidityState }) => (\n    <>\n        <Column>\n            <Text h4={true} style={{ textAlign: \"center\" }}>\n                🔥 Add Liquidity\n            </Text>\n        </Column>\n        <TokenSelect\n            title={\"1. Select the 1st token you want to ADD:\"}\n            hidden={false}\n            symbol={state.fromSymbol}\n            onChangeSymbol={state.setFromSymbol}\n            filterTokens={token => token.balance && !token.balance.isZero()}\n        />\n        <TokenSelect\n            title={\"2. Select the 2nd token you want to ADD:\"}\n            hidden={state.fromSymbol === \"\"}\n            symbol={state.toSymbol}\n            onChangeSymbol={state.setToSymbol}\n            filterTokens={token => token.symbol !== state.fromSymbol && token.balance && !token.balance.isZero()}\n        />\n        <FromTokenInput state={state} />\n        <ToTokenInput state={state} />\n        <PriceInfo state={state} />\n        <Controls state={state} />\n    </>\n);\n\nconst FromTokenInput = ({ state }: { state: AddLiquidityState }) => {\n    const onAmountChanged = useCallback(\n        (newAmount: string) => {\n            state.setFromAmount(newAmount);\n            if (state.pair && state.fromToken) {\n                const fromPrice = state.pair.priceOf(convertToken(state.fromToken));\n                state.setToAmount(fromPrice.quote(convertAmount(state.fromToken, newAmount)).toExact());\n            }\n        },\n        [state.pair, state.fromToken]\n    );\n    return (\n        <TokenInput\n            title={\"3. How many \" + state.fromSymbol + \"-\" + state.toSymbol + \" do you want to supply?\"}\n            token={state.fromToken}\n            hidden={!state.fromToken || !state.toToken}\n            amount={state.fromAmount}\n            onAmountChanged={onAmountChanged}\n        />\n    );\n};\n\nconst ToTokenInput = ({ state }: { state: AddLiquidityState }) => {\n    const onAmountChanged = useCallback(\n        (newAmount: string) => {\n            state.setToAmount(newAmount);\n            if (state.pair && state.toToken) {\n                const toPrice = state.pair.priceOf(convertToken(state.toToken));\n                state.setFromAmount(toPrice.quote(convertAmount(state.toToken, newAmount)).toExact());\n            }\n        },\n        [state.pair, state.toToken]\n    );\n    return (\n        <TokenInput\n            token={state.toToken}\n            hidden={!state.fromToken || !state.toToken}\n            amount={state.toAmount}\n            onAmountChanged={onAmountChanged}\n        />\n    );\n};\n\nconst PriceInfo = ({ state }: { state: AddLiquidityState }) => {\n    if (!isEmptyValue(state.fromAmount) && !state.loading && !state.pair) {\n        const initialPrice = formatBalance(\n            parseBalance(state.toAmount, state.toToken?.decimals)\n                .mul(ethers.BigNumber.from(10).pow(8))\n                .div(parseBalance(state.fromAmount, state.fromToken?.decimals)),\n            8\n        );\n        return (\n            <Column noTopMargin={true}>\n                <Notice\n                    text={\n                        \"You are the first liquidity provider.\\n\" +\n                        \"The ratio of tokens you add will set the price of this pool.\"\n                    }\n                />\n                {!!state.fromAmount && !!state.toAmount && (\n                    <Price price={initialPrice} fromSymbol={state.fromSymbol} toSymbol={state.toSymbol} />\n                )}\n            </Column>\n        );\n    }\n    if (!state.fromToken || !state.toToken) {\n        return <Column noTopMargin={true} />;\n    }\n    const price = state.pair ? state.pair.priceOf(convertToken(state.fromToken)).toSignificant(8) : \"…\";\n    return (\n        <Column noTopMargin={true}>\n            <Price price={price} fromSymbol={state.fromSymbol} toSymbol={state.toSymbol} />\n        </Column>\n    );\n};\n\nconst Price = ({ price, fromSymbol, toSymbol }) => (\n    <Meta label={\"Price\"} text={price + \" \" + toSymbol + \" = 1 \" + fromSymbol} />\n);\n\n// tslint:disable-next-line:max-func-body-length\nconst Controls = ({ state }: { state: AddLiquidityState }) => {\n    const [error, setError] = useState<MetamaskError>({});\n    useAsyncEffect(() => setError({}), [state.fromSymbol, state.toSymbol, state.fromAmount]);\n    if (!state.fromToken || !state.toToken) {\n        return <Column noTopMargin={true} />;\n    }\n    const insufficientFromToken = parseBalance(state.fromAmount, state.fromToken.decimals).gt(state.fromToken.balance);\n    const insufficientToToken = parseBalance(state.toAmount, state.toToken.decimals).gt(state.toToken.balance);\n    const fromApproveRequired = state.fromSymbol !== \"ETH\" && !state.fromTokenAllowed;\n    const toApproveRequired = state.toSymbol !== \"ETH\" && !state.toTokenAllowed;\n    const disabled =\n        fromApproveRequired || toApproveRequired || isEmptyValue(state.fromAmount) || isEmptyValue(state.toAmount);\n    return (\n        <Column>\n            {insufficientFromToken ? (\n                <InsufficientBalanceButton symbol={state.fromSymbol} />\n            ) : insufficientToToken ? (\n                <InsufficientBalanceButton symbol={state.toSymbol} />\n            ) : state.loading || !state.pair ? (\n                <FetchingButton />\n            ) : (state.fromSymbol === \"ETH\" && state.toSymbol === \"WETH\") ||\n              (state.fromSymbol === \"WETH\" && state.toSymbol === \"ETH\") ? (\n                <UnsupportedButton state={state} />\n            ) : (\n                <>\n                    <ApproveButton\n                        token={state.fromToken}\n                        spender={ROUTER}\n                        onSuccess={() => state.setFromTokenAllowed(true)}\n                        onError={setError}\n                        hidden={!fromApproveRequired}\n                    />\n                    <ApproveButton\n                        token={state.toToken}\n                        spender={ROUTER}\n                        onSuccess={() => state.setToTokenAllowed(true)}\n                        onError={setError}\n                        hidden={!toApproveRequired}\n                    />\n                    <SupplyButton state={state} onError={setError} disabled={disabled} />\n                </>\n            )}\n            {error.message && error.code !== 4001 && <ErrorMessage error={error} />}\n        </Column>\n    );\n};\n\nconst SupplyButton = ({\n    state,\n    onError,\n    disabled\n}: {\n    state: AddLiquidityState;\n    onError: (e) => void;\n    disabled: boolean;\n}) => {\n    const onPress = useCallback(() => {\n        onError({});\n        state.onAdd().catch(onError);\n    }, [state.onAdd, onError]);\n    return (\n        <Button\n            size={\"large\"}\n            title={\"Supply \" + state.fromSymbol + \"-\" + state.toSymbol}\n            disabled={disabled}\n            loading={state.adding}\n            onPress={onPress}\n        />\n    );\n};\n\nexport default AddLiquidity;\n","import React, { FC, useCallback, useState } from \"react\";\nimport { Image, TouchableHighlight, View } from \"react-native\";\nimport { Icon } from \"react-native-elements\";\nimport { Hoverable } from \"react-native-web-hover\";\n\nimport useAsyncEffect from \"use-async-effect\";\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport { RemoveLiquidityState } from \"../hooks/useRemoveLiquidityState\";\nimport { ROUTER } from \"../hooks/useSDK\";\nimport MetamaskError from \"../types/MetamaskError\";\nimport { formatBalance, isEmptyValue, parseBalance } from \"../utils\";\nimport ApproveButton from \"./ApproveButton\";\nimport Button from \"./Button\";\nimport CloseIcon from \"./CloseIcon\";\nimport Column from \"./Column\";\nimport ErrorMessage from \"./ErrorMessage\";\nimport FetchingButton from \"./FetchingButton\";\nimport FlexView from \"./FlexView\";\nimport InsufficientBalanceButton from \"./InsufficientBalanceButton\";\nimport LPTokenSelect, { LPTokenItemProps } from \"./LPTokenSelect\";\nimport SelectIcon from \"./SelectIcon\";\nimport Text from \"./Text\";\nimport TokenInput from \"./TokenInput\";\n\nconst RemoveLiquidity = ({ state }: { state: RemoveLiquidityState }) => (\n    <>\n        <Column>\n            <Text h4={true} style={{ textAlign: \"center\" }}>\n                🎉 Remove Liquidity\n            </Text>\n        </Column>\n        <LPTokenSelect\n            state={state}\n            title={\"1. Select the pool to REMOVE liquidity from:\"}\n            emptyText={\"You don't have any liquidity.\"}\n            Item={TokenItem}\n        />\n        <TokenInput\n            title={\"2. How many tokens do you want to REMOVE?\"}\n            token={state.selectedLPToken}\n            hidden={!state.selectedLPToken}\n            amount={state.amount}\n            onAmountChanged={state.setAmount}\n        />\n        <AmountInfo state={state} />\n        <Controls state={state} />\n    </>\n);\n\nconst TokenItem: FC<LPTokenItemProps> = props => {\n    const { background, backgroundHovered, textMedium } = useColors();\n    const balance = formatBalance(props.token.balance, props.token.decimals, 18);\n    const onPress = useCallback(() => {\n        props.onSelectToken(props.token);\n    }, [props.onSelectToken, props.token]);\n    return (\n        <Hoverable>\n            {({ hovered }) => (\n                <TouchableHighlight onPress={onPress}>\n                    <View style={{ backgroundColor: hovered ? backgroundHovered : background }}>\n                        <FlexView style={{ alignItems: \"center\", margin: Spacing.small }}>\n                            <View>\n                                <LogoSymbol token={props.token.tokenA} />\n                                <LogoSymbol token={props.token.tokenB} />\n                            </View>\n                            <View style={{ flex: 1 }}>\n                                <Text note={true} style={{ textAlign: \"right\" }}>\n                                    My Balance\n                                </Text>\n                                <Text light={true} style={{ textAlign: \"right\", fontSize: 22, color: textMedium }}>\n                                    {balance}\n                                </Text>\n                            </View>\n                            {props.selected ? <CloseIcon /> : <SelectIcon />}\n                        </FlexView>\n                    </View>\n                </TouchableHighlight>\n            )}\n        </Hoverable>\n    );\n};\n\nconst LogoSymbol = ({ token }) => {\n    const { textMedium } = useColors();\n    return (\n        <FlexView style={{ alignItems: \"center\", marginBottom: Spacing.tiny }}>\n            <Image\n                source={{ uri: token.logoURI }}\n                style={{ width: 24, height: 24, backgroundColor: \"white\", borderRadius: 12 }}\n            />\n            <Text light={true} style={{ fontSize: 22, color: textMedium, marginLeft: Spacing.small }}>\n                {token.symbol}\n            </Text>\n        </FlexView>\n    );\n};\n\nconst AmountInfo = ({ state }: { state: RemoveLiquidityState }) => {\n    if (!state.selectedLPToken || isEmptyValue(state.fromAmount) || isEmptyValue(state.toAmount)) {\n        return <Column noTopMargin={true} />;\n    }\n    return (\n        <Column noTopMargin={true}>\n            <ArrowDown />\n            <Amount amount={state.fromAmount} token={state.fromToken} />\n            <Amount amount={state.toAmount} token={state.toToken} />\n        </Column>\n    );\n};\n\nconst ArrowDown = () => {\n    const { textLight } = useColors();\n    return <Icon type={\"material-community\"} name={\"arrow-down\"} color={textLight} style={{ margin: Spacing.small }} />;\n};\n\nconst Amount = ({ amount, token }) => {\n    const symbol = token.symbol === \"WETH\" ? \"ETH\" : token.symbol;\n    return (\n        <Text style={{ fontSize: 22, textAlign: \"center\" }}>\n            {amount} {symbol}\n        </Text>\n    );\n};\n\n// tslint:disable-next-line:max-func-body-length\nconst Controls = ({ state }: { state: RemoveLiquidityState }) => {\n    const [error, setError] = useState<MetamaskError>({});\n    useAsyncEffect(() => setError({}), [state.fromSymbol, state.toSymbol, state.fromAmount]);\n    if (!state.selectedLPToken) {\n        return <Column noTopMargin={true} />;\n    }\n    const approveRequired = !state.selectedLPTokenAllowed;\n    const disabled = approveRequired || isEmptyValue(state.amount);\n    return (\n        <Column>\n            {parseBalance(state.amount, state.selectedLPToken.decimals).gt(state.selectedLPToken.balance) ? (\n                <InsufficientBalanceButton symbol={state.selectedLPToken.symbol} />\n            ) : state.loading || !state.pair ? (\n                <FetchingButton />\n            ) : (\n                <>\n                    <ApproveButton\n                        token={state.selectedLPToken}\n                        spender={ROUTER}\n                        onSuccess={() => state.setSelectedLPTokenAllowed(true)}\n                        onError={setError}\n                        hidden={!approveRequired}\n                    />\n                    <RemoveButton state={state} onError={setError} disabled={disabled} />\n                </>\n            )}\n            {error.message && error.code !== 4001 && <ErrorMessage error={error} />}\n        </Column>\n    );\n};\n\nconst RemoveButton = ({\n    state,\n    onError,\n    disabled\n}: {\n    state: RemoveLiquidityState;\n    onError: (e) => void;\n    disabled: boolean;\n}) => {\n    const onPress = useCallback(() => {\n        onError({});\n        state.onRemove().catch(onError);\n    }, [state.onRemove, onError]);\n    return <Button size={\"large\"} title={\"Remove\"} disabled={disabled} loading={state.removing} onPress={onPress} />;\n};\n\nexport default RemoveLiquidity;\n","import { useCallback, useContext, useState } from \"react\";\n\nimport { EthersContext } from \"../context/EthersContext\";\nimport { GlobalContext } from \"../context/GlobalContext\";\nimport { parseBalance } from \"../utils\";\nimport useLiquidityState, { LiquidityState } from \"./useLiquidityState\";\nimport useSDK from \"./useSDK\";\n\nexport interface AddLiquidityState extends LiquidityState {\n    onAdd: () => Promise<void>;\n    adding: boolean;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst useAddLiquidityState: () => AddLiquidityState = () => {\n    const state = useLiquidityState();\n    const { signer } = useContext(EthersContext);\n    const { updateTokens } = useContext(GlobalContext);\n    const [adding, setAdding] = useState(false);\n    const { addLiquidity, addLiquidityETH } = useSDK();\n\n    const onAdd = useCallback(async () => {\n        if (state.fromToken && state.toToken && state.fromAmount && state.toAmount && signer) {\n            setAdding(true);\n            try {\n                const fromAmount = parseBalance(state.fromAmount, state.fromToken.decimals);\n                const toAmount = parseBalance(state.toAmount, state.toToken.decimals);\n                if (state.fromSymbol === \"ETH\" || state.toSymbol === \"ETH\") {\n                    const [token, amount, amountETH] =\n                        state.fromSymbol === \"ETH\"\n                            ? [state.toToken, toAmount, fromAmount]\n                            : [state.fromToken, fromAmount, toAmount];\n                    const tx = await addLiquidityETH(token, amount, amountETH);\n                    await tx.wait();\n                } else {\n                    const tx = await addLiquidity(state.fromToken, state.toToken, fromAmount, toAmount);\n                    await tx.wait();\n                }\n                await updateTokens();\n                state.setFromSymbol(\"\");\n            } finally {\n                setAdding(false);\n            }\n        }\n    }, [state.fromToken, state.toToken, state.fromAmount, state.toAmount, signer, updateTokens]);\n\n    return {\n        ...state,\n        onAdd,\n        adding\n    };\n};\n\nexport default useAddLiquidityState;\n","import { useCallback, useContext, useState } from \"react\";\n\nimport { ethers } from \"ethers\";\nimport useAsyncEffect from \"use-async-effect\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport { GlobalContext } from \"../context/GlobalContext\";\nimport { convertToken, formatBalance, parseBalance, parseCurrencyAmount } from \"../utils\";\nimport useLPTokensState, { LPTokensState } from \"./useLPTokensState\";\nimport useSDK, { ROUTER } from \"./useSDK\";\n\nexport interface RemoveLiquidityState extends LPTokensState {\n    onRemove: () => Promise<void>;\n    removing: boolean;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst useRemoveLiquidityState: () => RemoveLiquidityState = () => {\n    const state = useLPTokensState(false);\n    const { provider, signer, getTokenAllowance } = useContext(EthersContext);\n    const { updateTokens } = useContext(GlobalContext);\n    const { removeLiquidity, removeLiquidityETH } = useSDK();\n    const [loading, setLoading] = useState(false);\n    const [removing, setRemoving] = useState(false);\n\n    useAsyncEffect(async () => {\n        if (provider && signer && state.selectedLPToken) {\n            state.setFromSymbol(state.selectedLPToken.tokenA.symbol);\n            state.setToSymbol(state.selectedLPToken.tokenB.symbol);\n\n            setLoading(true);\n            state.setSelectedLPTokenAllowed(false);\n            try {\n                const minAllowance = ethers.BigNumber.from(2)\n                    .pow(96)\n                    .sub(1);\n                const allowance = await getTokenAllowance(state.selectedLPToken.address, ROUTER);\n                state.setSelectedLPTokenAllowed(ethers.BigNumber.from(allowance).gte(minAllowance));\n            } finally {\n                setLoading(false);\n            }\n        }\n    }, [provider, signer, state.selectedLPToken]);\n\n    // tslint:disable-next-line:max-func-body-length\n    useAsyncEffect(async () => {\n        if (\n            state.selectedLPToken &&\n            state.selectedLPToken.totalSupply &&\n            state.pair &&\n            state.fromToken &&\n            state.toToken\n        ) {\n            if (state.pair.liquidityToken.address === state.selectedLPToken.address) {\n                const fromReserve = parseCurrencyAmount(\n                    state.pair.reserveOf(convertToken(state.fromToken)),\n                    state.fromToken.decimals\n                );\n                const toReserve = parseCurrencyAmount(\n                    state.pair.reserveOf(convertToken(state.toToken)),\n                    state.toToken.decimals\n                );\n                state.setFromAmount(\n                    formatBalance(\n                        parseBalance(state.amount, state.selectedLPToken.decimals)\n                            .mul(fromReserve)\n                            .div(state.selectedLPToken.totalSupply)\n                            .toString(),\n                        state.selectedLPToken.tokenA.decimals\n                    )\n                );\n                state.setToAmount(\n                    formatBalance(\n                        parseBalance(state.amount, state.selectedLPToken.decimals)\n                            .mul(toReserve)\n                            .div(state.selectedLPToken.totalSupply)\n                            .toString(),\n                        state.selectedLPToken.tokenB.decimals\n                    )\n                );\n            }\n        }\n    }, [state.selectedLPToken, state.amount, state.pair, state.fromToken, state.toToken, signer]);\n\n    const onRemove = useCallback(async () => {\n        if (state.fromAmount && state.toAmount && state.selectedLPToken && state.amount && signer) {\n            setRemoving(true);\n            try {\n                const fromAmount = parseBalance(state.fromAmount, state.fromToken!.decimals);\n                const toAmount = parseBalance(state.toAmount, state.toToken!.decimals);\n                const liquidity = parseBalance(state.amount, state.selectedLPToken.decimals);\n                if (state.fromSymbol === \"WETH\" || state.toSymbol === \"WETH\") {\n                    const [token, amountToRemove, amountToRemoveETH] =\n                        state.fromSymbol === \"WETH\"\n                            ? [state.toToken!, toAmount, fromAmount]\n                            : [state.fromToken!, fromAmount, toAmount];\n                    const tx = await removeLiquidityETH(token, liquidity, amountToRemove, amountToRemoveETH);\n                    await tx.wait();\n                } else {\n                    const tx = await removeLiquidity(state.fromToken!, state.toToken!, liquidity, fromAmount, toAmount);\n                    await tx.wait();\n                }\n                await updateTokens();\n                state.setSelectedLPToken(undefined);\n            } finally {\n                setRemoving(false);\n            }\n        }\n    }, [state.fromAmount, state.toAmount, state.selectedLPToken, state.amount, signer, updateTokens]);\n\n    return {\n        ...state,\n        loading: state.loading || loading,\n        onRemove,\n        removing\n    };\n};\n\nexport default useRemoveLiquidityState;\n","import React from \"react\";\nimport { View } from \"react-native\";\n\nimport AddLiquidity from \"../components/AddLiquidity\";\nimport Column from \"../components/Column\";\nimport Container from \"../components/Container\";\nimport Content from \"../components/Content\";\nimport FlexView from \"../components/FlexView\";\nimport RemoveLiquidity from \"../components/RemoveLiquidity\";\nimport Text from \"../components/Text\";\nimport { Spacing } from \"../constants/dimension\";\nimport useAddLiquidityState from \"../hooks/useAddLiquidityState\";\nimport useColors from \"../hooks/useColors\";\nimport useRemoveLiquidityState from \"../hooks/useRemoveLiquidityState\";\nimport Screen from \"./Screen\";\n\nconst LiquidityScreen = () => {\n    const addLiquidityState = useAddLiquidityState();\n    const removeLiquidityState = useRemoveLiquidityState();\n    return (\n        <Screen>\n            <Container>\n                <Content>\n                    <View style={{ alignItems: \"center\", marginBottom: Spacing.huge * 2 }}>\n                        {!removeLiquidityState.selectedLPToken && <AddLiquidity state={addLiquidityState} />}\n                        {!removeLiquidityState.selectedLPToken && <OR />}\n                        <RemoveLiquidity state={removeLiquidityState} />\n                    </View>\n                </Content>\n            </Container>\n        </Screen>\n    );\n};\n\nconst OR = () => {\n    const { background } = useColors();\n    return (\n        <Column>\n            <FlexView\n                style={{\n                    width: \"100%\",\n                    paddingHorizontal: Spacing.small,\n                    paddingVertical: Spacing.huge,\n                    alignItems: \"center\"\n                }}>\n                <Line />\n                <Text h4={true} light={true} style={{ paddingHorizontal: Spacing.small, backgroundColor: background }}>\n                    or\n                </Text>\n                <Line />\n            </FlexView>\n        </Column>\n    );\n};\n\nconst Line = () => {\n    const { border } = useColors();\n    return <View style={{ height: 1, flex: 1, backgroundColor: border }} />;\n};\n\nexport default LiquidityScreen;\n","import { useCallback, useContext, useEffect, useState } from \"react\";\n\nimport { Trade } from \"@levx/sushiswap-sdk\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport { GlobalContext } from \"../context/GlobalContext\";\nimport { parseBalance } from \"../utils\";\nimport useSDK from \"./useSDK\";\nimport useTokenPairState, { TokenPairState } from \"./useTokenPairState\";\n\nexport interface SwapState extends TokenPairState {\n    trade?: Trade;\n    unsupported: boolean;\n    onSwap: () => Promise<void>;\n    swapping: boolean;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst useSwapState: () => SwapState = () => {\n    const state = useTokenPairState();\n    const { addToTradeHistory, updateTokens } = useContext(GlobalContext);\n    const { provider, signer, addOnBlockListener, removeOnBlockListener } = useContext(EthersContext);\n    const { getTrade, swap } = useSDK();\n    const [loading, setLoading] = useState(true);\n    const [trade, setTrade] = useState<Trade>();\n    const [unsupported, setUnsupported] = useState(false);\n    const [swapping, setSwapping] = useState(false);\n\n    useEffect(() => {\n        if (state.fromSymbol && state.toSymbol && state.fromAmount) {\n            const updateTrade = async () => {\n                if (state.fromToken && state.toToken && state.fromAmount && provider) {\n                    const amount = parseBalance(state.fromAmount, state.fromToken.decimals);\n                    if (!amount.isZero()) {\n                        setLoading(true);\n                        setTrade(undefined);\n                        setUnsupported(false);\n                        try {\n                            setTrade(await getTrade(state.fromToken, state.toToken, amount));\n                        } catch (e) {\n                            setUnsupported(true);\n                        } finally {\n                            setLoading(false);\n                        }\n                    }\n                }\n            };\n\n            updateTrade();\n            const name = \"updateTrade(\" + state.fromSymbol + \",\" + state.toSymbol + \",\" + state.fromAmount + \")\";\n\n            addOnBlockListener(name, updateTrade);\n            return () => {\n                removeOnBlockListener(name);\n            };\n        }\n    }, [state.fromSymbol, state.toSymbol, state.fromAmount]);\n\n    const onSwap = useCallback(async () => {\n        if (state.fromToken && state.toToken && state.fromAmount && signer && trade) {\n            setSwapping(true);\n            try {\n                const result = await swap(trade);\n                if (result) {\n                    await result.tx.wait();\n                    await addToTradeHistory(result.trade);\n                    await updateTokens();\n                    state.setFromSymbol(\"\");\n                }\n            } finally {\n                setSwapping(false);\n            }\n        }\n    }, [state.fromToken, state.toToken, state.fromAmount, signer, trade]);\n\n    return {\n        ...state,\n        loading: loading || state.loading,\n        trade,\n        unsupported,\n        onSwap,\n        swapping\n    };\n};\n\nexport default useSwapState;\n","import React, { useCallback, useState } from \"react\";\nimport { View } from \"react-native\";\nimport { Icon } from \"react-native-elements\";\n\nimport useAsyncEffect from \"use-async-effect\";\nimport ApproveButton from \"../components/ApproveButton\";\nimport Button from \"../components/Button\";\nimport Column from \"../components/Column\";\nimport Container from \"../components/Container\";\nimport Content from \"../components/Content\";\nimport ErrorMessage from \"../components/ErrorMessage\";\nimport FetchingButton from \"../components/FetchingButton\";\nimport InsufficientBalanceButton from \"../components/InsufficientBalanceButton\";\nimport Meta from \"../components/Meta\";\nimport Text from \"../components/Text\";\nimport TokenInput from \"../components/TokenInput\";\nimport TokenSelect from \"../components/TokenSelect\";\nimport UnsupportedButton from \"../components/UnsupportedButton\";\nimport { Spacing } from \"../constants/dimension\";\nimport { ETH } from \"../constants/tokens\";\nimport useColors from \"../hooks/useColors\";\nimport useSDK, { ROUTER } from \"../hooks/useSDK\";\nimport useSwapState, { SwapState } from \"../hooks/useSwapState\";\nimport MetamaskError from \"../types/MetamaskError\";\nimport { formatBalance, isEmptyValue, parseBalance } from \"../utils\";\nimport Screen from \"./Screen\";\n\nconst SwapScreen = () => {\n    return (\n        <Screen>\n            <Container>\n                <Content>\n                    <View style={{ alignItems: \"center\", marginBottom: Spacing.large }}>\n                        <Column>\n                            <Text h4={true} style={{ textAlign: \"center\" }}>\n                                🍣 Swap Tokens\n                            </Text>\n                        </Column>\n                        <Swap />\n                    </View>\n                </Content>\n            </Container>\n        </Screen>\n    );\n};\n\nconst Swap = () => {\n    const state = useSwapState();\n    return (\n        <>\n            <TokenSelect\n                title={\"1. Select the token you want to SELL:\"}\n                hidden={false}\n                symbol={state.fromSymbol}\n                onChangeSymbol={state.setFromSymbol}\n                filterTokens={token => token.balance && !token.balance.isZero()}\n            />\n            <TokenSelect\n                title={\"2. Select the token you want to BUY:\"}\n                hidden={state.fromSymbol === \"\"}\n                symbol={state.toSymbol}\n                onChangeSymbol={state.setToSymbol}\n                filterTokens={token => token.symbol !== state.fromSymbol}\n            />\n            <TokenInput\n                title={\"3. How many \" + (state.fromSymbol || \"tokens\") + \" do you want to SELL?\"}\n                token={state.fromToken}\n                hidden={!state.fromToken}\n                amount={state.fromAmount}\n                onAmountChanged={state.setFromAmount}\n            />\n            <TradeInfo state={state} />\n            <Controls state={state} />\n        </>\n    );\n};\n\nconst TradeInfo = ({ state }: { state: SwapState }) => {\n    if (\n        !isEmptyValue(state.fromAmount) &&\n        ((state.fromSymbol === \"ETH\" && state.toSymbol === \"WETH\") ||\n            (state.fromSymbol === \"WETH\" && state.toSymbol === \"ETH\"))\n    ) {\n        return <WrapInfo state={state} />;\n    }\n    if (state.fromSymbol === \"\" || state.toSymbol === \"\" || isEmptyValue(state.fromAmount)) {\n        return <Column noTopMargin={true} />;\n    }\n    return <SwapInfo state={state} />;\n};\n\nconst WrapInfo = ({ state }: { state: SwapState }) => {\n    return (\n        <Column noTopMargin={true}>\n            <ArrowDown />\n            <Text style={{ fontSize: 30, textAlign: \"center\" }}>\n                {state.fromAmount} {state.toSymbol}\n            </Text>\n        </Column>\n    );\n};\n\nconst SwapInfo = ({ state }: { state: SwapState }) => {\n    const { calculateFee } = useSDK();\n    const amount = state.trade?.outputAmount?.toSignificant(8);\n    const price = state.trade?.executionPrice?.toSignificant(8);\n    const impact = state.trade?.priceImpact?.toSignificant(2);\n    const fee = state.fromToken\n        ? formatBalance(\n              calculateFee(parseBalance(state.fromAmount, state.fromToken.decimals)),\n              state.fromToken.decimals,\n              8\n          )\n        : \"\";\n    return (\n        <Column noTopMargin={true}>\n            <ArrowDown />\n            <Text style={{ fontSize: 30, textAlign: \"center\", marginBottom: Spacing.normal }}>\n                {amount || \"…\"} {state.toSymbol}\n            </Text>\n            <Meta label={\"Price\"} text={price ? price + \" \" + state.toSymbol + \"  = 1 \" + state.fromSymbol : \"…\"} />\n            <Meta label={\"Price Impact\"} text={impact ? impact + \"%\" : \"…\"} />\n            <Meta label={\"Fee (0.30%)\"} text={fee ? fee + \" \" + state.fromSymbol : \"…\"} />\n        </Column>\n    );\n};\n\nconst ArrowDown = () => {\n    const { textLight } = useColors();\n    return <Icon type={\"material-community\"} name={\"arrow-down\"} color={textLight} style={{ margin: Spacing.tiny }} />;\n};\n\n// tslint:disable-next-line:max-func-body-length\nconst Controls = ({ state }: { state: SwapState }) => {\n    const [error, setError] = useState<MetamaskError>({});\n    useAsyncEffect(() => setError({}), [state.fromSymbol, state.toSymbol, state.fromAmount]);\n    if (state.toSymbol === \"\" || isEmptyValue(state.fromAmount) || !state.fromToken) {\n        return <Column noTopMargin={true} />;\n    }\n    const approveRequired = state.fromSymbol !== \"ETH\" && !state.fromTokenAllowed;\n    return (\n        <Column>\n            {parseBalance(state.fromAmount, state.fromToken.decimals).gt(state.fromToken.balance) ? (\n                <InsufficientBalanceButton symbol={state.fromSymbol} />\n            ) : state.fromSymbol === \"WETH\" && state.toSymbol === \"ETH\" ? (\n                <UnwrapButton state={state} onError={setError} />\n            ) : state.fromSymbol === \"ETH\" && state.toSymbol === \"WETH\" ? (\n                <WrapButton state={state} onError={setError} />\n            ) : state.unsupported ? (\n                <UnsupportedButton state={state} />\n            ) : state.loading || !state.trade ? (\n                <FetchingButton />\n            ) : (\n                <>\n                    <ApproveButton\n                        token={state.fromToken}\n                        spender={ROUTER}\n                        onSuccess={() => state.setFromTokenAllowed(true)}\n                        onError={setError}\n                        hidden={!approveRequired}\n                    />\n                    <SwapButton state={state} onError={setError} disabled={approveRequired} />\n                </>\n            )}\n            {error.message && error.code !== 4001 && <ErrorMessage error={error} />}\n        </Column>\n    );\n};\n\nconst SwapButton = ({ state, onError, disabled }: { state: SwapState; onError: (e) => void; disabled: boolean }) => {\n    const onPress = useCallback(() => {\n        onError({});\n        state.onSwap().catch(onError);\n    }, [state.onSwap, onError]);\n    return (\n        <Button\n            size={\"large\"}\n            title={\"Swap \" + state.fromSymbol + \"-\" + state.toSymbol}\n            disabled={disabled}\n            loading={state.swapping}\n            onPress={onPress}\n        />\n    );\n};\n\nconst WrapButton = ({ state, onError }: { state: SwapState; onError: (e) => void }) => {\n    const onPress = useCallback(async () => {\n        onError({});\n        state.onWrap().catch(onError);\n    }, []);\n    return <Button size={\"large\"} title={\"Wrap\"} loading={state.wrapping} onPress={onPress} />;\n};\n\nconst UnwrapButton = ({ state, onError }: { state: SwapState; onError: (e) => void }) => {\n    const onPress = useCallback(async () => {\n        onError({});\n        state.onUnwrap().catch(onError);\n    }, []);\n    return <Button size={\"large\"} title={\"Unwrap\"} loading={state.unwrapping} onPress={onPress} />;\n};\n\nexport default SwapScreen;\n","import React, { useContext, useState } from \"react\";\n\nimport { OpenSans_300Light, OpenSans_400Regular, OpenSans_700Bold } from \"@expo-google-fonts/open-sans\";\nimport { UnicaOne_400Regular } from \"@expo-google-fonts/unica-one\";\nimport { AppLoading } from \"expo\";\nimport { DeviceType, getDeviceTypeAsync } from \"expo-device\";\nimport { useFonts } from \"expo-font\";\n\nimport { DefaultTheme, NavigationContainer, Theme } from \"@react-navigation/native\";\nimport { createStackNavigator } from \"@react-navigation/stack\";\nimport \"dotenv/config\";\nimport useAsyncEffect from \"use-async-effect\";\nimport Header from \"./src/components/Header\";\nimport MobileNotSupported from \"./src/components/MobileNotSupported\";\nimport linking from \"./src/constants/linking\";\nimport { ContextProvider } from \"./src/context\";\nimport { GlobalContext } from \"./src/context/GlobalContext\";\nimport useColors from \"./src/hooks/useColors\";\nimport FarmingScreen from \"./src/screens/FarmingScreen\";\nimport LiquidityScreen from \"./src/screens/LiquidityScreen\";\nimport SwapScreen from \"./src/screens/SwapScreen\";\n\nconst Stack = createStackNavigator();\n\nconst App = () => {\n    const [deviceType, setDeviceType] = useState(null as DeviceType | null);\n    const [fontsLoaded] = useFonts({\n        title: UnicaOne_400Regular,\n        light: OpenSans_300Light,\n        regular: OpenSans_400Regular,\n        bold: OpenSans_700Bold\n    });\n    useAsyncEffect(async () => {\n        setDeviceType(await getDeviceTypeAsync());\n    }, []);\n    if (!deviceType || !fontsLoaded) {\n        return <AppLoading />;\n    }\n    return <ContextProvider>{deviceType === DeviceType.PHONE ? <MobileNotSupported /> : <Main />}</ContextProvider>;\n};\n\nconst Main = () => {\n    const { load } = useContext(GlobalContext);\n    useAsyncEffect(load, []);\n    return <Navigation />;\n};\n\nconst Navigation = () => {\n    const { primary, background, border, textDark } = useColors();\n    const theme: Theme = {\n        ...DefaultTheme,\n        colors: {\n            primary,\n            background,\n            border,\n            card: background,\n            notification: background,\n            text: textDark\n        }\n    };\n    return (\n        <NavigationContainer theme={theme} linking={linking}>\n            <Stack.Navigator\n                screenOptions={{\n                    header: Header,\n                    title: \"SushiSwap | LevX\"\n                }}>\n                <Stack.Screen name=\"Home\" component={SwapScreen} />\n                <Stack.Screen name=\"Liquidity\" component={LiquidityScreen} />\n                <Stack.Screen name=\"Farming\" component={FarmingScreen} />\n            </Stack.Navigator>\n        </NavigationContainer>\n    );\n};\n\nexport default App;\n","/* eslint-env browser */\n\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', function () {\n    navigator.serviceWorker\n      .register('/expo-service-worker.js', { scope: '/' })\n      .then(function (info) {\n        // console.info('Registered service-worker', info);\n      })\n      .catch(function (error) {\n        console.info('Failed to register service-worker', error);\n      });\n  });\n}\n","var map = {\n\t\"./Address.json\": 657,\n\t\"./Context.json\": 658,\n\t\"./ERC20.json\": 659,\n\t\"./EnumerableSet.json\": 660,\n\t\"./GovernorAlpha.json\": 661,\n\t\"./IERC20.json\": 662,\n\t\"./IERC20Uniswap.json\": 663,\n\t\"./IMigrator.json\": 664,\n\t\"./IMigratorChef.json\": 665,\n\t\"./IUniswapV2Callee.json\": 666,\n\t\"./IUniswapV2ERC20.json\": 667,\n\t\"./IUniswapV2Factory.json\": 668,\n\t\"./IUniswapV2Pair.json\": 669,\n\t\"./IUniswapV2Router01.json\": 670,\n\t\"./IUniswapV2Router02.json\": 671,\n\t\"./IWETH.json\": 672,\n\t\"./MasterChef.json\": 673,\n\t\"./Math.json\": 674,\n\t\"./Migrations.json\": 675,\n\t\"./Migrator.json\": 676,\n\t\"./MockERC20.json\": 677,\n\t\"./Ownable.json\": 678,\n\t\"./SafeERC20.json\": 679,\n\t\"./SafeMath.json\": 680,\n\t\"./SafeMathUniswap.json\": 681,\n\t\"./SushiBar.json\": 682,\n\t\"./SushiMaker.json\": 683,\n\t\"./SushiRestaurant.json\": 684,\n\t\"./SushiToken.json\": 685,\n\t\"./Timelock.json\": 686,\n\t\"./TimelockInterface.json\": 687,\n\t\"./TransferHelper.json\": 688,\n\t\"./UQ112x112.json\": 689,\n\t\"./UniswapV2ERC20.json\": 690,\n\t\"./UniswapV2Factory.json\": 691,\n\t\"./UniswapV2Library.json\": 692,\n\t\"./UniswapV2Pair.json\": 693,\n\t\"./UniswapV2Router02.json\": 694\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 656;","module.exports = __webpack_public_path__ + \"static/media/levx-typography-dark.859ceaa3.png\";","module.exports = __webpack_public_path__ + \"static/media/levx-typography.5d37ed2a.png\";","module.exports = __webpack_public_path__ + \"static/media/sushiswap.ef005f32.jpg\";","module.exports = __webpack_public_path__ + \"static/media/metamask-dark.2137a831.png\";","module.exports = __webpack_public_path__ + \"static/media/metamask.15e22fef.png\";"],"sourceRoot":""}