{"version":3,"sources":["src/components/Meta.tsx","src/components/Notice.tsx","src/hooks/useLPTokensState.tsx","src/components/LPTokenSelect.tsx","src/components/ButtonGroup.tsx","src/components/CloseIcon.tsx","src/components/SelectIcon.tsx","src/hooks/useFarmingState.tsx","src/screens/FarmingScreen.tsx"],"names":["Meta","props","useColors","textMedium","textLight","placeholder","onPress","useLinker","url","text","disabled","suffix","style","justifyContent","marginTop","fontWeight","fontSize","color","label","undefined","textDecorationLine","Notice","borderStyle","border","useStyles","borderColor","clear","paddingHorizontal","Spacing","tiny","note","buttonText","onPressButton","title","type","size","titleStyle","buttonStyle","paddingVertical","alignSelf","useLPTokensState","mode","state","useLiquidityState","useContext","EthersContext","provider","signer","address","tokens","useState","lastTimeRefreshed","setLastTimeRefreshed","loading","setLoading","lpTokens","setLPTokens","selectedLPToken","setSelectedLPToken","selectedLPTokenAllowed","setSelectedLPTokenAllowed","amount","setAmount","updateLPTokens","a","async","fetchPools","fetchMyLPTokens","fetchMyUniswapLPTokens","data","useEffect","useDelayedOnBlockEffect","block","length","updateLastTimeRefreshed","Date","now","LPTokenList","emptyText","filter","Item","renderItem","useCallback","item","key","token","selected","onSelectToken","sort","t1","t2","totalDeposited","ethers","constants","Zero","sub","div","pow10","toNumber","amountDeposited","gt","balance","Loading","FlatList","keyExtractor","JSON","stringify","EmptyList","View","margin","normal","Text","textAlign","width","LPTokenItem","formatBalance","decimals","Selectable","marginBottom","ITEM_SEPARATOR_HEIGHT","FlexView","alignItems","TokenLogo","tokenA","small","replaceWETH","tokenB","marginLeft","TokenSymbol","flex","caption","light","LPTokenSelect","Expandable","expanded","onExpand","ButtonGroup","borderDark","shadow","index","setIndex","i","selectedIndex","textStyle","fontFamily","borderTopLeftRadius","borderBottomLeftRadius","borderTopRightRadius","buttons","borderBottomRightRadius","selectedButtonStyle","backgroundColor","containerStyle","marginHorizontal","marginVertical","height","CloseIcon","name","SelectIcon","accent","useFarmingState","getTokenAllowance","useSDK","getExpectedSushiRewardPerBlock","deposit","withdraw","filteredBy","setFilteredBy","action","setAction","expectedSushiRewardPerBlock","setExpectedSushiRewardPerBlock","depositing","setDepositing","withdrawing","setWithdrawing","useAsyncEffect","minAllowance","BigNumber","from","pow","MASTER_CHEF","allowance","gte","onDeposit","id","parseBalance","tx","wait","onWithdraw","Actions","Farming","Column","h4","showFilter","onFilterChanged","TokenItem","background","backgroundLight","field","hovered","TouchableHighlight","LogoSymbol","isEmpty","setIsEmpty","source","logoURI","require","uri","Image","onError","borderRadius","symbol","replace","ActionSelect","noTopMargin","indexOf","Heading","element","DepositText","WithdrawText","Deposit","TokenInput","hidden","isZero","onAmountChanged","AddLiquidityNotice","green","DepositInfo","sushiReward","mul","isEmptyValue","DepositControls","error","setError","approveRequired","InsufficientBalanceButton","FetchingButton","ApproveButton","spender","onSuccess","message","code","ErrorMessage","AddLiquidityButton","Button","DepositButton","catch","Withdraw","NoLPTokenNotice","WithdrawInfo","pendingSushi","WithdrawControls","WithdrawButton","FarmingScreen","Screen","Container","Content","Platform","OS","WebFooter"],"mappings":"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","file":"static/js/11.24e34085.chunk.js","sourcesContent":["import React, { FC } from \"react\";\n\nimport useColors from \"../hooks/useColors\";\nimport useLinker from \"../hooks/useLinker\";\nimport FlexView from \"./FlexView\";\nimport Text from \"./Text\";\n\nexport interface MetaProps {\n    label: string;\n    text?: string;\n    suffix?: string;\n    url?: string;\n    disabled?: boolean;\n}\n\nconst Meta: FC<MetaProps> = props => {\n    const { textMedium, textLight, placeholder } = useColors();\n    const onPress = useLinker(props.url || \"\", \"\", \"_blank\");\n    const text = props.disabled\n        ? \"N/A\"\n        : props.text\n        ? props.text + (props.suffix ? \" \" + props.suffix : \"\")\n        : \"Fetching…\";\n    return (\n        <FlexView style={{ justifyContent: \"space-between\", marginTop: 4 }}>\n            <Text fontWeight={\"bold\"} style={{ fontSize: 13, color: props.disabled ? placeholder : textMedium }}>\n                {props.label}\n            </Text>\n            <Text\n                onPress={props.url ? onPress : undefined}\n                style={{\n                    fontSize: 13,\n                    color: props.disabled ? placeholder : props.text ? textMedium : textLight,\n                    textDecorationLine: props.url ? \"underline\" : \"none\"\n                }}>\n                {text}\n            </Text>\n        </FlexView>\n    );\n};\n\nexport default Meta;\n","import React from \"react\";\nimport { View, ViewStyle } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useStyles from \"../hooks/useStyles\";\nimport Button from \"./Button\";\nimport Text from \"./Text\";\n\nexport interface NoticeProps {\n    text: string;\n    clear?: boolean;\n    color?: string;\n    buttonText?: string;\n    onPressButton?: () => void;\n    style?: ViewStyle;\n}\n\nconst Notice = (props: NoticeProps) => {\n    const { border } = useStyles();\n    const borderStyle = border({ color: props.color });\n    const color = props.color || borderStyle.borderColor;\n    return (\n        <View style={[props.clear ? { paddingHorizontal: Spacing.tiny } : borderStyle, props.style]}>\n            <Text\n                note={true}\n                style={{\n                    color\n                }}>\n                {props.text}\n            </Text>\n            {props.buttonText && props.onPressButton && (\n                <Button\n                    title={props.buttonText}\n                    type={\"clear\"}\n                    size={\"small\"}\n                    fontWeight={\"bold\"}\n                    onPress={props.onPressButton}\n                    titleStyle={{ color }}\n                    buttonStyle={{ paddingHorizontal: 0, paddingVertical: 0 }}\n                    style={{ alignSelf: \"flex-end\", marginTop: Spacing.tiny }}\n                />\n            )}\n        </View>\n    );\n};\n\nexport default Notice;\n","import { useContext, useEffect, useState } from \"react\";\n\nimport { EthersContext } from \"../context/EthersContext\";\nimport LPToken from \"../types/LPToken\";\nimport { fetchMyLPTokens, fetchMyUniswapLPTokens, fetchPools } from \"../utils/fetch-utils\";\nimport useDelayedOnBlockEffect from \"./useDelayedOnBlockEffect\";\nimport useLiquidityState, { LiquidityState } from \"./useLiquidityState\";\n\nexport interface LPTokensState extends LiquidityState {\n    updateLPTokens: () => Promise<void>;\n    lastTimeRefreshed: number;\n    updateLastTimeRefreshed: () => void;\n    lpTokens: LPToken[];\n    selectedLPToken?: LPToken;\n    setSelectedLPToken: (token?: LPToken) => void;\n    selectedLPTokenAllowed: boolean;\n    setSelectedLPTokenAllowed: (allowed: boolean) => void;\n    amount: string;\n    setAmount: (amount: string) => void;\n}\n\ntype Mode = \"pools\" | \"my-lp-tokens\" | \"my-uniswap-lp-tokens\";\n\n// tslint:disable-next-line:max-func-body-length\nconst useLPTokensState: (mode: Mode) => LPTokensState = mode => {\n    const state = useLiquidityState();\n    const { provider, signer, address, tokens } = useContext(EthersContext);\n    const [lastTimeRefreshed, setLastTimeRefreshed] = useState(0);\n    const [loading, setLoading] = useState(true);\n    const [lpTokens, setLPTokens] = useState<LPToken[]>([]);\n    const [selectedLPToken, setSelectedLPToken] = useState<LPToken>();\n    const [selectedLPTokenAllowed, setSelectedLPTokenAllowed] = useState(false);\n    const [amount, setAmount] = useState(\"\");\n\n    const updateLPTokens = async () => {\n        try {\n            const data = await (mode === \"pools\"\n                ? fetchPools(provider, signer)\n                : mode === \"my-lp-tokens\"\n                ? fetchMyLPTokens(tokens, provider, signer)\n                : fetchMyUniswapLPTokens(tokens, provider, signer));\n            if (data) {\n                setLPTokens(data);\n            }\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    useEffect(() => {\n        if (!selectedLPToken) {\n            setAmount(\"\");\n        }\n    }, [selectedLPToken]);\n\n    useDelayedOnBlockEffect(\n        async block => {\n            if (address && (mode === \"pools\" || tokens.length > 0)) {\n                if (!block) {\n                    setLoading(true);\n                }\n                await updateLPTokens();\n            }\n        },\n        () => \"updateLPTokens()\",\n        [tokens.length, address, lastTimeRefreshed],\n        0\n    );\n\n    return {\n        ...state,\n        updateLPTokens,\n        loading: state.loading || loading,\n        lastTimeRefreshed,\n        updateLastTimeRefreshed: () => {\n            setLastTimeRefreshed(Date.now());\n        },\n        lpTokens,\n        selectedLPToken,\n        setSelectedLPToken,\n        selectedLPTokenAllowed,\n        setSelectedLPTokenAllowed,\n        amount,\n        setAmount\n    };\n};\n\nexport default useLPTokensState;\n","import React, { FC, useCallback } from \"react\";\nimport { FlatList, View, ViewStyle } from \"react-native\";\n\nimport { ethers } from \"ethers\";\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport { LPTokensState } from \"../hooks/useLPTokensState\";\nimport LPToken from \"../types/LPToken\";\nimport { formatBalance, pow10 } from \"../utils\";\nimport CheckBox from \"./CheckBox\";\nimport Expandable from \"./Expandable\";\nimport FlexView from \"./FlexView\";\nimport { ITEM_SEPARATOR_HEIGHT } from \"./ItemSeparator\";\nimport Loading from \"./Loading\";\nimport Selectable from \"./Selectable\";\nimport Text from \"./Text\";\nimport TokenLogo from \"./TokenLogo\";\nimport TokenSymbol from \"./TokenSymbol\";\n\nexport type LPTokenSelectFilter = \"balance\" | \"amountDeposited\" | \"\";\n\nexport interface LPTokenSelectProps {\n    state: LPTokensState;\n    title: string;\n    emptyText: string;\n    showFilter?: boolean;\n    filter?: LPTokenSelectFilter;\n    onFilterChanged?: (filter: LPTokenSelectFilter) => void;\n    Item: FC<LPTokenItemProps>;\n    style?: ViewStyle;\n}\n\nexport interface LPTokenItemProps {\n    token: LPToken;\n    selected: boolean;\n    filter?: LPTokenSelectFilter;\n    onSelectToken: (token: LPToken) => void;\n}\n\nconst LPTokenSelect: FC<LPTokenSelectProps> = props => {\n    const onUnselectToken = () => props.state.setSelectedLPToken();\n    return (\n        <View style={props.style}>\n            <Expandable\n                title={props.title}\n                expanded={!props.state.selectedLPToken}\n                onExpand={() => props.state.setSelectedLPToken()}>\n                <LPTokenList state={props.state} filter={props.filter} emptyText={props.emptyText} Item={props.Item} />\n            </Expandable>\n            {props.state.selectedLPToken && (\n                <LPTokenItem token={props.state.selectedLPToken} selected={true} onSelectToken={onUnselectToken} />\n            )}\n        </View>\n    );\n};\n\nconst Filter = ({ filter, onFilterChanged }) => {\n    const handler = (f: string) => () => onFilterChanged(f);\n    return (\n        <FlexView style={{ width: \"100%\", justifyContent: \"flex-end\" }}>\n            <CheckBox checked={filter === \"balance\"} onPress={handler(\"balance\")} title={\"with balance\"} />\n            <CheckBox\n                checked={filter === \"amountDeposited\"}\n                onPress={handler(\"amountDeposited\")}\n                title={\"with deposit\"}\n            />\n            <CheckBox checked={!filter} onPress={handler(\"\")} title={\"all\"} />\n        </FlexView>\n    );\n};\n\n// tslint:disable-next-line:max-func-body-length\nconst LPTokenList = ({\n    state,\n    emptyText,\n    filter,\n    Item\n}: {\n    state: LPTokensState;\n    emptyText: string;\n    filter?: LPTokenSelectFilter;\n    Item: FC<LPTokenItemProps>;\n}) => {\n    const renderItem = useCallback(\n        ({ item }) => {\n            return (\n                <Item\n                    key={item.address}\n                    token={item}\n                    selected={false}\n                    filter={filter}\n                    onSelectToken={state.setSelectedLPToken}\n                />\n            );\n        },\n        [filter, state.setSelectedLPToken]\n    );\n    let data = state.lpTokens.sort((t1, t2) => {\n        return (t2.totalDeposited || ethers.constants.Zero)\n            .sub(t1.totalDeposited || ethers.constants.Zero)\n            .div(pow10(14))\n            .toNumber();\n    });\n    if (filter === \"amountDeposited\") {\n        data = data.filter(token => token.amountDeposited?.gt(0));\n    } else if (filter === \"balance\") {\n        data = data.filter(token => token.balance.gt(0));\n    }\n    return state.loading ? (\n        <Loading />\n    ) : data.length === 0 ? (\n        <EmptyList text={emptyText} />\n    ) : (\n        <FlatList keyExtractor={item => JSON.stringify(item)} data={data} renderItem={renderItem} />\n    );\n};\n\nconst EmptyList = ({ text }: { text: string }) => {\n    return (\n        <View style={{ margin: Spacing.normal }}>\n            <Text disabled={true} style={{ textAlign: \"center\", width: \"100%\" }}>\n                {text}\n            </Text>\n        </View>\n    );\n};\n\nexport const LPTokenItem: FC<LPTokenItemProps> = props => {\n    const { textMedium, textLight } = useColors();\n    const balance = formatBalance(props.token.balance, props.token.decimals, 8);\n    const onPress = useCallback(() => {\n        props.onSelectToken(props.token);\n    }, [props.onSelectToken, props.token]);\n    return (\n        <Selectable selected={props.selected} onPress={onPress} style={{ marginBottom: ITEM_SEPARATOR_HEIGHT }}>\n            <FlexView style={{ alignItems: \"center\" }}>\n                <TokenLogo token={props.token.tokenA} small={true} replaceWETH={true} />\n                <TokenLogo token={props.token.tokenB} small={true} replaceWETH={true} style={{ marginLeft: 4 }} />\n                <TokenSymbol token={props.token} />\n                <View style={{ flex: 1, marginLeft: Spacing.tiny }}>\n                    {/*<Text note={true} style={{ textAlign: \"right\", color: textLight }}>*/}\n                    {/*    My Balance*/}\n                    {/*</Text>*/}\n                    <Text caption={true} light={true} style={{ textAlign: \"right\", color: textMedium }}>\n                        {balance}\n                    </Text>\n                </View>\n            </FlexView>\n        </Selectable>\n    );\n};\n\nexport default LPTokenSelect;\n","import React, { FC, useCallback, useState } from \"react\";\nimport { ButtonGroup as NativeButtonGroup, ButtonGroupProps } from \"react-native-elements\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport useStyles from \"../hooks/useStyles\";\n\n// tslint:disable-next-line:max-func-body-length\nconst ButtonGroup: FC<ButtonGroupProps> = props => {\n    const { borderDark } = useColors();\n    const { shadow } = useStyles();\n    const [index, setIndex] = useState<number>();\n    const onPress = useCallback(i => {\n        setIndex(i);\n        props.onPress(i);\n    }, []);\n    return (\n        <NativeButtonGroup\n            {...props}\n            selectedIndex={props.selectedIndex || index}\n            onPress={onPress}\n            textStyle={[\n                {\n                    fontFamily: \"regular\"\n                },\n                props.textStyle\n            ]}\n            buttonStyle={[\n                {\n                    borderTopLeftRadius: index === 0 ? Spacing.tiny : 0,\n                    borderBottomLeftRadius: index === 0 ? Spacing.tiny : 0,\n                    borderTopRightRadius:\n                        props.buttons.length > 0 && index === props.buttons.length - 1 ? Spacing.tiny : 0,\n                    borderBottomRightRadius:\n                        props.buttons.length > 0 && index === props.buttons.length - 1 ? Spacing.tiny : 0\n                },\n                props.buttonStyle\n            ]}\n            selectedButtonStyle={[\n                {\n                    backgroundColor: borderDark\n                },\n                props.selectedButtonStyle\n            ]}\n            containerStyle={[\n                {\n                    marginHorizontal: 0,\n                    marginVertical: 0,\n                    height: 56,\n                    ...shadow()\n                },\n                props.containerStyle\n            ]}\n        />\n    );\n};\n\nexport default ButtonGroup;\n","import React from \"react\";\nimport { Icon } from \"react-native-elements\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\n\nconst CloseIcon = () => {\n    const { textLight } = useColors();\n    return <Icon type={\"material-community\"} name={\"close\"} color={textLight} style={{ marginLeft: Spacing.tiny }} />;\n};\n\nexport default CloseIcon;\n","import React from \"react\";\nimport { Icon } from \"react-native-elements\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\n\nconst SelectIcon = () => {\n    const { accent } = useColors();\n    return (\n        <Icon type={\"material-community\"} name={\"chevron-right\"} color={accent} style={{ marginLeft: Spacing.tiny }} />\n    );\n};\n\nexport default SelectIcon;\n","import { useCallback, useContext, useEffect, useState } from \"react\";\n\nimport { ethers } from \"ethers\";\nimport useAsyncEffect from \"use-async-effect\";\nimport { LPTokenSelectFilter } from \"../components/LPTokenSelect\";\nimport { MASTER_CHEF } from \"../constants/contracts\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport { parseBalance } from \"../utils\";\nimport useLPTokensState, { LPTokensState } from \"./useLPTokensState\";\nimport useSDK from \"./useSDK\";\n\nexport interface FarmingState extends LPTokensState {\n    action?: Action;\n    setAction: (action?: Action) => void;\n    expectedSushiRewardPerBlock?: ethers.BigNumber;\n    filteredBy: LPTokenSelectFilter;\n    setFilteredBy: (filter: LPTokenSelectFilter) => void;\n    onDeposit: () => Promise<void>;\n    depositing: boolean;\n    onWithdraw: () => Promise<void>;\n    withdrawing: boolean;\n}\n\nexport type Action = \"deposit\" | \"withdraw\";\n\n// tslint:disable-next-line:max-func-body-length\nconst useFarmingState: () => FarmingState = () => {\n    const state = useLPTokensState(\"pools\");\n    const { provider, signer, getTokenAllowance } = useContext(EthersContext);\n    const { getExpectedSushiRewardPerBlock, deposit, withdraw } = useSDK();\n    const [filteredBy, setFilteredBy] = useState(\"\" as LPTokenSelectFilter);\n    const [action, setAction] = useState<Action>();\n    const [loading, setLoading] = useState(false);\n    const [expectedSushiRewardPerBlock, setExpectedSushiRewardPerBlock] = useState<ethers.BigNumber>();\n    const [depositing, setDepositing] = useState(false);\n    const [withdrawing, setWithdrawing] = useState(false);\n\n    useEffect(() => {\n        setFilteredBy(\"\");\n        setAction(undefined);\n        setLoading(false);\n        setDepositing(false);\n        setWithdrawing(false);\n        setExpectedSushiRewardPerBlock(undefined);\n    }, [state.selectedLPToken]);\n\n    useAsyncEffect(async () => {\n        if (signer && state.selectedLPToken) {\n            setLoading(true);\n            try {\n                setExpectedSushiRewardPerBlock(await getExpectedSushiRewardPerBlock(state.selectedLPToken, signer));\n            } finally {\n                setLoading(false);\n            }\n        }\n    }, [signer, state.selectedLPToken]);\n\n    useAsyncEffect(async () => {\n        if (provider && signer && state.selectedLPToken) {\n            setLoading(true);\n            state.setSelectedLPTokenAllowed(false);\n            try {\n                const minAllowance = ethers.BigNumber.from(2)\n                    .pow(96)\n                    .sub(1);\n                const allowance = await getTokenAllowance(state.selectedLPToken.address, MASTER_CHEF);\n                state.setSelectedLPTokenAllowed(ethers.BigNumber.from(allowance).gte(minAllowance));\n            } finally {\n                setLoading(false);\n            }\n        }\n    }, [provider, signer, state.selectedLPToken]);\n\n    useEffect(() => {\n        state.setAmount(\"\");\n    }, [action]);\n\n    const onDeposit = useCallback(async () => {\n        if (state.selectedLPToken?.id && state.amount && signer) {\n            setDepositing(true);\n            try {\n                const amount = parseBalance(state.amount, state.selectedLPToken.decimals);\n                const tx = await deposit(state.selectedLPToken.id, amount, signer);\n                await tx.wait();\n                state.setSelectedLPToken(undefined);\n                await state.updateLastTimeRefreshed();\n            } finally {\n                setDepositing(false);\n            }\n        }\n    }, [state.selectedLPToken, state.amount, signer]);\n\n    const onWithdraw = useCallback(async () => {\n        if (state.selectedLPToken?.id && state.amount && signer) {\n            setWithdrawing(true);\n            try {\n                const amount = parseBalance(state.amount, state.selectedLPToken.decimals);\n                const tx = await withdraw(state.selectedLPToken.id, amount, signer);\n                await tx.wait();\n                state.setSelectedLPToken(undefined);\n                await state.updateLastTimeRefreshed();\n            } finally {\n                setWithdrawing(false);\n            }\n        }\n    }, [state.selectedLPToken, state.amount, signer]);\n\n    return {\n        ...state,\n        loading: state.loading || loading,\n        filteredBy,\n        setFilteredBy,\n        action,\n        setAction,\n        expectedSushiRewardPerBlock,\n        onDeposit,\n        depositing,\n        onWithdraw,\n        withdrawing\n    };\n};\n\nexport default useFarmingState;\n","import React, { FC, useCallback, useState } from \"react\";\nimport { Image, Platform, TouchableHighlight, View } from \"react-native\";\nimport { Icon } from \"react-native-elements\";\nimport { Hoverable } from \"react-native-web-hover\";\n\nimport { ethers } from \"ethers\";\nimport useAsyncEffect from \"use-async-effect\";\nimport ApproveButton from \"../components/ApproveButton\";\nimport Button from \"../components/Button\";\nimport ButtonGroup from \"../components/ButtonGroup\";\nimport CloseIcon from \"../components/CloseIcon\";\nimport Column from \"../components/Column\";\nimport Container from \"../components/Container\";\nimport Content from \"../components/Content\";\nimport ErrorMessage from \"../components/ErrorMessage\";\nimport FetchingButton from \"../components/FetchingButton\";\nimport FlexView from \"../components/FlexView\";\nimport Heading from \"../components/Heading\";\nimport InsufficientBalanceButton from \"../components/InsufficientBalanceButton\";\nimport LPTokenSelect, { LPTokenItemProps } from \"../components/LPTokenSelect\";\nimport Meta from \"../components/Meta\";\nimport Notice from \"../components/Notice\";\nimport SelectIcon from \"../components/SelectIcon\";\nimport Text from \"../components/Text\";\nimport TokenInput from \"../components/TokenInput\";\nimport WebFooter from \"../components/web/WebFooter\";\nimport { MASTER_CHEF } from \"../constants/contracts\";\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport useFarmingState, { Action, FarmingState } from \"../hooks/useFarmingState\";\nimport useLinker from \"../hooks/useLinker\";\nimport LPToken from \"../types/LPToken\";\nimport MetamaskError from \"../types/MetamaskError\";\nimport { formatBalance, isEmptyValue, parseBalance, pow10 } from \"../utils\";\nimport Screen from \"./Screen\";\n\nconst Actions = [\"deposit\", \"withdraw\"];\n\nconst FarmingScreen = () => {\n    return (\n        <Screen>\n            <Container>\n                <Content>\n                    <Farming />\n                    {Platform.OS === \"web\" && <WebFooter />}\n                </Content>\n            </Container>\n        </Screen>\n    );\n};\n\nconst Farming = () => {\n    const state = useFarmingState();\n    const emptyText =\n        state.filteredBy === \"amountDeposited\"\n            ? \"You don't have any pool with deposit.\"\n            : state.filteredBy === \"balance\"\n            ? \"You don't have any pool with balance.\"\n            : \"Temporarily unable to load pools.\";\n    return (\n        <>\n            <Column>\n                <Text h4={true} style={{ textAlign: \"center\", marginBottom: Spacing.normal }}>\n                    🌾 Farming\n                </Text>\n            </Column>\n            <LPTokenSelect\n                state={state}\n                title={\"1. Select a pool for yield farming:\"}\n                emptyText={emptyText}\n                showFilter={!state.selectedLPToken}\n                filter={state.filteredBy}\n                onFilterChanged={state.setFilteredBy}\n                Item={TokenItem}\n            />\n            <ActionSelect state={state} />\n            <Deposit state={state} />\n            <Withdraw state={state} />\n        </>\n    );\n};\n\n// tslint:disable-next-line:max-func-body-length\nconst TokenItem: FC<LPTokenItemProps> = props => {\n    const { background, backgroundLight, textMedium } = useColors();\n    const amount =\n        (props.filter === \"balance\"\n            ? props.token.balance\n            : props.filter === \"amountDeposited\"\n            ? props.token.amountDeposited\n            : props.token.totalDeposited) || \"0\";\n    const onPress = useCallback(() => {\n        props.onSelectToken(props.token);\n    }, [props.onSelectToken, props.token]);\n    const field =\n        props.filter === \"amountDeposited\" ? \"My Deposit\" : props.filter === \"balance\" ? \"My Balance\" : \"Total Deposit\";\n    return (\n        <Hoverable>\n            {({ hovered }) => (\n                <TouchableHighlight onPress={onPress}>\n                    <View style={{ backgroundColor: hovered ? backgroundLight : background }}>\n                        <FlexView style={{ alignItems: \"center\", margin: Spacing.small }}>\n                            <View>\n                                <LogoSymbol token={props.token.tokenA} />\n                                <LogoSymbol token={props.token.tokenB} />\n                            </View>\n                            <View style={{ flex: 1 }}>\n                                <Text style={{ textAlign: \"right\", fontSize: 15 }}>{field}</Text>\n                                <Text light={true} style={{ textAlign: \"right\", fontSize: 22, color: textMedium }}>\n                                    {formatBalance(amount, props.token.decimals, 8)}\n                                </Text>\n                            </View>\n                            {props.selected ? <CloseIcon /> : <SelectIcon />}\n                        </FlexView>\n                    </View>\n                </TouchableHighlight>\n            )}\n        </Hoverable>\n    );\n};\n\nconst LogoSymbol = ({ token }) => {\n    const { textMedium } = useColors();\n    const [isEmpty, setIsEmpty] = useState(false);\n    const source = !token.logoURI || isEmpty ? require(\"../../assets/empty-token.png\") : { uri: token.logoURI };\n    return (\n        <FlexView style={{ alignItems: \"center\", marginBottom: Spacing.tiny }}>\n            <Image\n                source={source}\n                onError={() => setIsEmpty(true)}\n                style={{ width: 24, height: 24, backgroundColor: \"white\", borderRadius: 12 }}\n            />\n            <Text light={true} style={{ fontSize: 22, color: textMedium, marginLeft: Spacing.small }}>\n                {token.symbol.replace(/\\+/g, \"+\\n\")}\n            </Text>\n        </FlexView>\n    );\n};\n\nconst ActionSelect = ({ state }: { state: FarmingState }) => {\n    if (!state.selectedLPToken) {\n        return <Column noTopMargin={true} />;\n    }\n    const index = state.action ? Actions.indexOf(state.action) : null;\n    const onPress = useCallback((i: number) => {\n        state.setAction(Actions[i] as Action);\n    }, []);\n    const balance = formatBalance(state.selectedLPToken!.balance, state.selectedLPToken!.decimals);\n    const deposit = formatBalance(state.selectedLPToken.amountDeposited || \"0\", state.selectedLPToken!.decimals);\n    return (\n        <Column>\n            <Heading text={\"2. Do you want to DEPOSIT or WITHDRAW?\"} />\n            <View style={{ marginHorizontal: Spacing.small, marginBottom: Spacing.normal }}>\n                <Meta label={\"My Balance\"} text={balance} />\n                <Meta label={\"My Deposit\"} text={deposit} />\n            </View>\n            <ButtonGroup\n                selectedIndex={index}\n                onPress={onPress}\n                buttons={[{ element: DepositText }, { element: WithdrawText }]}\n                containerStyle={{ marginHorizontal: Spacing.small }}\n            />\n        </Column>\n    );\n};\n\nconst DepositText = () => {\n    return (\n        <FlexView style={{ alignItems: \"center\" }}>\n            <Text style={{ color: \"black\" }}>Deposit</Text>\n            <Icon\n                type={\"material-community\"}\n                name={\"chevron-right\"}\n                color={\"black\"}\n                style={{ marginLeft: Spacing.tiny, marginTop: 2 }}\n            />\n        </FlexView>\n    );\n};\n\nconst WithdrawText = () => {\n    return (\n        <FlexView style={{ alignItems: \"center\" }}>\n            <Text style={{ color: \"black\" }}>Withdraw</Text>\n            <Icon\n                type={\"material-community\"}\n                name={\"chevron-right\"}\n                color={\"black\"}\n                style={{ marginLeft: Spacing.tiny, marginTop: 2 }}\n            />\n        </FlexView>\n    );\n};\n\nconst Deposit = ({ state }: { state: FarmingState }) => {\n    if (!state.selectedLPToken || state.action !== \"deposit\") {\n        return <Column noTopMargin={true} />;\n    }\n    return (\n        <Column>\n            <AddLiquidityNotice state={state} />\n            <TokenInput\n                title={\"3. Amount of tokens to DEPOSIT:\"}\n                token={state.selectedLPToken}\n                hidden={state.selectedLPToken.balance.isZero()}\n                amount={state.amount}\n                onAmountChanged={state.setAmount}\n            />\n            <DepositInfo state={state} />\n            <DepositControls state={state} />\n        </Column>\n    );\n};\n\nconst AddLiquidityNotice = ({ state }: { state: FarmingState }) => {\n    const { green } = useColors();\n    if (!state.selectedLPToken!.balance.isZero()) {\n        return <Column noTopMargin={true} />;\n    }\n    return (\n        <>\n            <View style={{ marginHorizontal: Spacing.small }}>\n                <Notice\n                    color={green}\n                    text={\n                        \"You need some \" +\n                        state.selectedLPToken!.symbol +\n                        \" token to start farming. Add liquidity to get the LP token.\"\n                    }\n                />\n            </View>\n            <AddLiquidityButton />\n        </>\n    );\n};\n\nconst DepositInfo = ({ state }: { state: FarmingState }) => {\n    if (state.selectedLPToken!.balance.isZero()) {\n        return <Column noTopMargin={true} />;\n    }\n    const balance = formatBalance(state.selectedLPToken!.balance, state.selectedLPToken!.decimals);\n    const sushiReward =\n        state.expectedSushiRewardPerBlock && state.amount\n            ? formatBalance(state.expectedSushiRewardPerBlock.mul(parseBalance(state.amount, 18)).div(pow10(18)), 18)\n            : undefined;\n    return (\n        <Column noTopMargin={true}>\n            <Meta label={\"My Balance\"} text={balance} />\n            {!isEmptyValue(state.amount) && <Meta label={\"SUSHI Reward per Block\"} text={sushiReward} />}\n        </Column>\n    );\n};\n\nconst DepositControls = ({ state }: { state: FarmingState }) => {\n    const [error, setError] = useState<MetamaskError>({});\n    useAsyncEffect(() => setError({}), [state.selectedLPToken]);\n    if (state.selectedLPToken!.balance.isZero()) {\n        return <Column noTopMargin={true} />;\n    }\n    const approveRequired = !state.selectedLPTokenAllowed;\n    const disabled = approveRequired || isEmptyValue(state.amount);\n    return (\n        <Column>\n            {parseBalance(state.amount, state.selectedLPToken!.decimals).gt(state.selectedLPToken!.balance) ? (\n                <InsufficientBalanceButton symbol={state.selectedLPToken!.symbol} />\n            ) : state.loading ? (\n                <FetchingButton />\n            ) : (\n                <>\n                    <ApproveButton\n                        token={state.selectedLPToken!}\n                        spender={MASTER_CHEF}\n                        onSuccess={() => state.setSelectedLPTokenAllowed(true)}\n                        onError={setError}\n                        hidden={isEmptyValue(state.amount) || !approveRequired}\n                    />\n                    <DepositButton state={state} onError={setError} disabled={disabled} />\n                </>\n            )}\n            {error.message && error.code !== 4001 && <ErrorMessage error={error} />}\n        </Column>\n    );\n};\n\nconst AddLiquidityButton = () => {\n    const { green } = useColors();\n    const onPress = useLinker(\"/liquidity\", \"Liquidity\");\n    return (\n        <Button\n            color={green}\n            title={\"Add Liquidity\"}\n            containerStyle={{ marginTop: Spacing.normal }}\n            onPress={onPress}\n        />\n    );\n};\n\nconst DepositButton = ({\n    state,\n    onError,\n    disabled\n}: {\n    state: FarmingState;\n    onError: (e) => void;\n    disabled: boolean;\n}) => {\n    const onPress = useCallback(() => {\n        onError({});\n        state.onDeposit().catch(onError);\n    }, [state.onDeposit, onError]);\n    return <Button title={\"Deposit\"} disabled={disabled} loading={state.depositing} onPress={onPress} />;\n};\n\nconst Withdraw = ({ state }: { state: FarmingState }) => {\n    if (!state.selectedLPToken || state.action !== \"withdraw\") {\n        return <Column noTopMargin={true} />;\n    }\n    const token: LPToken = {\n        ...state.selectedLPToken,\n        balance: state.selectedLPToken.amountDeposited || ethers.constants.Zero\n    };\n    return (\n        <Column>\n            <NoLPTokenNotice state={state} />\n            <TokenInput\n                title={\"3. Amount of tokens to WITHDRAW:\"}\n                token={token}\n                hidden={state.loading || state.selectedLPToken.amountDeposited?.isZero() || false}\n                amount={state.amount}\n                onAmountChanged={state.setAmount}\n            />\n            <WithdrawInfo state={state} />\n            <WithdrawControls state={state} />\n        </Column>\n    );\n};\n\nconst NoLPTokenNotice = ({ state }: { state: FarmingState }) => {\n    if (state.loading || !state.selectedLPToken || !state.selectedLPToken.amountDeposited?.isZero()) {\n        return <Column noTopMargin={true} />;\n    }\n    return (\n        <Column noTopMargin={true}>\n            <View style={{ marginHorizontal: Spacing.small }}>\n                <Notice\n                    text={\"You don't have any \" + state.selectedLPToken!.symbol + \" token deposited. Deposit it first.\"}\n                />\n            </View>\n        </Column>\n    );\n};\n\nconst WithdrawInfo = ({ state }: { state: FarmingState }) => {\n    if (\n        state.loading ||\n        !state.selectedLPToken ||\n        !state.selectedLPToken.amountDeposited ||\n        state.selectedLPToken.amountDeposited?.isZero() ||\n        !state.selectedLPToken.pendingSushi\n    ) {\n        return <Column noTopMargin={true} />;\n    }\n    const deposit = formatBalance(state.selectedLPToken.amountDeposited, state.selectedLPToken!.decimals);\n    const pendingSushi = formatBalance(\n        state.selectedLPToken.pendingSushi || ethers.constants.Zero,\n        state.selectedLPToken!.decimals\n    );\n    return (\n        <Column noTopMargin={true}>\n            <Meta label={\"My Deposit\"} text={deposit} />\n            <Meta label={\"Pending Sushi Reward\"} text={pendingSushi} />\n            <View style={{ marginTop: Spacing.normal, marginHorizontal: Spacing.small }}>\n                <Notice text={\"All pending sushi reward will be transferred to you if you withdraw.\"} />\n            </View>\n        </Column>\n    );\n};\n\nconst WithdrawControls = ({ state }: { state: FarmingState }) => {\n    const [error, setError] = useState<MetamaskError>({});\n    useAsyncEffect(() => setError({}), [state.selectedLPToken]);\n    if (state.loading) {\n        return (\n            <Column>\n                <FetchingButton />\n            </Column>\n        );\n    }\n    if (\n        !state.selectedLPToken ||\n        !state.selectedLPToken.amountDeposited ||\n        state.selectedLPToken.amountDeposited.isZero()\n    ) {\n        return <Column noTopMargin={true} />;\n    }\n    return (\n        <Column>\n            {parseBalance(state.amount, state.selectedLPToken!.decimals).gt(state.selectedLPToken.amountDeposited) ? (\n                <InsufficientBalanceButton symbol={state.selectedLPToken!.symbol} />\n            ) : (\n                <WithdrawButton state={state} onError={setError} disabled={isEmptyValue(state.amount)} />\n            )}\n            {error.message && error.code !== 4001 && <ErrorMessage error={error} />}\n        </Column>\n    );\n};\n\nconst WithdrawButton = ({\n    state,\n    onError,\n    disabled\n}: {\n    state: FarmingState;\n    onError: (e) => void;\n    disabled: boolean;\n}) => {\n    const onPress = useCallback(() => {\n        onError({});\n        state.onWithdraw().catch(onError);\n    }, [state.onWithdraw, onError]);\n    return (\n        <Button size={\"large\"} title={\"Withdraw\"} disabled={disabled} loading={state.withdrawing} onPress={onPress} />\n    );\n};\n\nexport default FarmingScreen;\n"],"sourceRoot":""}