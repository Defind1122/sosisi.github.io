{"version":3,"sources":["src/hooks/useStyles.tsx","src/components/Heading.tsx","src/components/Meta.tsx","src/components/ErrorMessage.tsx","src/components/Notice.tsx","src/components/web/WebFooter.tsx","src/components/Column.tsx","src/components/ApproveButton.tsx","src/components/FetchingButton.tsx","src/components/InsufficientBalanceButton.tsx","src/components/TokenInput.tsx","src/components/Input.tsx","src/components/ButtonGroup.tsx","src/hooks/useStakingState.tsx","src/screens/StakingScreen.tsx"],"names":["useStyles","useColors","shadowColor","shadow","borderDark","border","useCallback","attrs","borderColor","color","borderWidth","borderRadius","radius","padding","Spacing","small","tiny","elevation","shadowOffset","width","height","shadowOpacity","shadowRadius","overflow","Heading","props","accent","style","alignItems","marginBottom","disabled","medium","fontWeight","flex","fontSize","paddingBottom","text","buttonText","type","size","title","onPress","onPressButton","Meta","textMedium","textLight","placeholder","useLinker","url","suffix","justifyContent","marginTop","label","undefined","textDecorationLine","ErrorMessage","error","code","note","message","Notice","borderStyle","clear","paddingHorizontal","titleStyle","buttonStyle","paddingVertical","alignSelf","Link","to","window","open","WebFooter","noTopMargin","normal","huge","textAlign","Column","Platform","OS","large","ApproveButton","approveToken","useContext","EthersContext","useState","loading","setLoading","a","async","token","onError","address","spender","tx","wait","onSuccess","hidden","symbol","containerStyle","FetchingButton","InsufficientBalanceButton","MaxButton","onPressMax","balance","fee","pow10","gt","sub","ethers","constants","Zero","updateAmount","formatBalance","decimals","position","right","bottom","maxButtonText","TokenInput","onChangeText","onAmountChanged","parseBalance","e","endsWith","indexOf","length","value","amount","autoFocus","inputStyle","marginHorizontal","inputContainerStyle","borderBottomWidth","labelStyle","fontFamily","paddingTop","hideMaxButton","Input","textDark","errors","forbidden","forEach","validation","match","regexp","push","allowed","join","minHeight","outline","placeholderTextColor","errorStyle","ButtonGroup","index","setIndex","i","selectedIndex","textStyle","borderTopLeftRadius","borderBottomLeftRadius","borderTopRightRadius","buttons","borderBottomRightRadius","selectedButtonStyle","backgroundColor","marginVertical","useStakingState","provider","signer","getTokenAllowance","tokens","updateTokens","useSDK","enterSushiBar","leaveSushiBar","action","setAction","sushiStaked","setSushiStaked","sushiSupply","setSushiSupply","xSushiSupply","setXSushiSupply","setAmount","sushiAllowed","setSushiAllowed","xSushiAllowed","setXSushiAllowed","entering","setEntering","leaving","setLeaving","sushi","find","xSushi","useEffect","useAsyncEffect","minAllowance","BigNumber","from","pow","SUSHI_BAR","sushiAllowance","gte","xSushiAllowance","sushiContract","getContract","balanceOf","totalSupply","xSushiContract","onEnter","onLeave","Actions","Staking","state","View","Text","h4","isZero","ActionSelect","ActivityIndicator","element","StakeText","UnstakeText","Line","FlexView","name","marginLeft","NoSushiNotice","NoXSushiNotice","StakeInfo","isEmptyValue","xSushiAmount","mul","div","share","Fraction","toString","Controls","setError","StakeButton","Button","UnstakeButton","StakingScreen","Screen","Container","Content"],"mappings":"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","file":"static/js/7.b204c409.chunk.js","sourcesContent":["import { useCallback } from \"react\";\nimport { ViewStyle } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"./useColors\";\n\nconst useStyles = () => {\n    const { shadow: shadowColor, borderDark } = useColors();\n    const border = useCallback(\n        (attrs?: { color?: string; radius?: number }) => ({\n            borderColor: attrs?.color || borderDark,\n            borderWidth: 1,\n            borderRadius: attrs?.radius || 8,\n            padding: Spacing.small\n        }),\n        []\n    );\n    const shadow = () =>\n        ({\n            borderRadius: Spacing.tiny,\n            elevation: Spacing.small,\n            shadowColor,\n            shadowOffset: { width: 0, height: 2 },\n            shadowOpacity: 0.5,\n            shadowRadius: 4,\n            overflow: \"visible\"\n        } as ViewStyle);\n    return { border, shadow };\n};\n\nexport default useStyles;\n","import React, { FC } from \"react\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport Button from \"./Button\";\nimport FlexView from \"./FlexView\";\nimport Text from \"./Text\";\n\ninterface HeadingProps {\n    text: string;\n    disabled?: boolean;\n    buttonText?: string;\n    onPressButton?: () => void | Promise<void>;\n}\n\nconst Heading: FC<HeadingProps> = props => {\n    const { accent } = useColors();\n    return (\n        <FlexView style={{ alignItems: \"flex-end\", height: 32, marginBottom: props.disabled ? 0 : Spacing.small }}>\n            <Text\n                medium={true}\n                fontWeight={\"bold\"}\n                disabled={props.disabled}\n                style={{ flex: 1, fontSize: 18, paddingBottom: Spacing.tiny }}>\n                {props.text}\n            </Text>\n            {props.buttonText && (\n                <Button\n                    type={\"clear\"}\n                    size={\"small\"}\n                    title={props.buttonText}\n                    onPress={props.onPressButton}\n                    color={accent}\n                />\n            )}\n        </FlexView>\n    );\n};\n\nexport default Heading;\n","import React, { FC } from \"react\";\n\nimport useColors from \"../hooks/useColors\";\nimport useLinker from \"../hooks/useLinker\";\nimport FlexView from \"./FlexView\";\nimport Text from \"./Text\";\n\nexport interface MetaProps {\n    label: string;\n    text?: string;\n    suffix?: string;\n    url?: string;\n    disabled?: boolean;\n}\n\nconst Meta: FC<MetaProps> = props => {\n    const { textMedium, textLight, placeholder } = useColors();\n    const onPress = useLinker(props.url || \"\", \"\", \"_blank\");\n    const text = props.disabled\n        ? \"N/A\"\n        : props.text\n        ? props.text + (props.suffix ? \" \" + props.suffix : \"\")\n        : \"Fetching…\";\n    return (\n        <FlexView style={{ justifyContent: \"space-between\", marginTop: 4 }}>\n            <Text fontWeight={\"bold\"} style={{ fontSize: 13, color: props.disabled ? placeholder : textMedium }}>\n                {props.label}\n            </Text>\n            <Text\n                onPress={props.url ? onPress : undefined}\n                style={{\n                    fontSize: 13,\n                    color: props.disabled ? placeholder : props.text ? textMedium : textLight,\n                    textDecorationLine: props.url ? \"underline\" : \"none\"\n                }}>\n                {text}\n            </Text>\n        </FlexView>\n    );\n};\n\nexport default Meta;\n","import React from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport MetamaskError from \"../types/MetamaskError\";\nimport Text from \"./Text\";\n\nconst ErrorMessage = ({ error }: { error: MetamaskError }) => (\n    <View\n        style={{\n            borderColor: \"red\",\n            borderWidth: 1,\n            width: \"100%\",\n            padding: Spacing.tiny,\n            marginTop: Spacing.small\n        }}>\n        {error.code && (\n            <Text fontWeight={\"bold\"} style={{ color: \"red\", fontSize: 14 }}>\n                Error Code {error.code}\n            </Text>\n        )}\n        <Text note={true} style={{ color: \"red\", fontSize: 14 }}>\n            {error.message}\n        </Text>\n    </View>\n);\n\nexport default ErrorMessage;\n","import React from \"react\";\nimport { View, ViewStyle } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useStyles from \"../hooks/useStyles\";\nimport Button from \"./Button\";\nimport Text from \"./Text\";\n\nexport interface NoticeProps {\n    text: string;\n    clear?: boolean;\n    color?: string;\n    buttonText?: string;\n    onPressButton?: () => void;\n    style?: ViewStyle;\n}\n\nconst Notice = (props: NoticeProps) => {\n    const { border } = useStyles();\n    const borderStyle = border({ color: props.color });\n    const color = props.color || borderStyle.borderColor;\n    return (\n        <View style={[props.clear ? { paddingHorizontal: Spacing.tiny } : borderStyle, props.style]}>\n            <Text\n                note={true}\n                style={{\n                    color\n                }}>\n                {props.text}\n            </Text>\n            {props.buttonText && props.onPressButton && (\n                <Button\n                    title={props.buttonText}\n                    type={\"clear\"}\n                    size={\"small\"}\n                    fontWeight={\"bold\"}\n                    onPress={props.onPressButton}\n                    titleStyle={{ color }}\n                    buttonStyle={{ paddingHorizontal: 0, paddingVertical: 0 }}\n                    style={{ alignSelf: \"flex-end\", marginTop: Spacing.tiny }}\n                />\n            )}\n        </View>\n    );\n};\n\nexport default Notice;\n","import React, { useCallback } from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../../constants/dimension\";\nimport Column from \"../Column\";\nimport SocialIcons from \"../SocialIcons\";\nimport Text from \"../Text\";\n\nconst WebFooter = () => (\n    <Column noTopMargin={true}>\n        <View\n            style={{\n                width: \"100%\",\n                padding: Spacing.normal,\n                marginTop: Spacing.huge\n            }}>\n            <SocialIcons />\n            <Text note={true} style={{ marginTop: Spacing.tiny, textAlign: \"center\", width: \"100%\" }}>\n                2020 Built by <Link to={\"https://levx.io\"} text={\"LevX Team\"} />\n            </Text>\n        </View>\n    </Column>\n);\n\nconst Link = ({ to, text }) => {\n    const onPress = useCallback(() => {\n        window.open(to, \"_blank\");\n    }, []);\n    return (\n        <Text note={true} style={{ textDecorationLine: \"underline\" }} onPress={onPress}>\n            {text}\n        </Text>\n    );\n};\n\nexport default WebFooter;\n","import React, { FC } from \"react\";\nimport { Platform, View, ViewProps, ViewStyle } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\n\ninterface ColumnProps extends ViewProps {\n    noTopMargin?: boolean;\n    style?: ViewStyle;\n}\n\nconst Column: FC<ColumnProps> = props => (\n    <View\n        {...props}\n        style={[\n            {\n                width: \"100%\",\n                marginTop: props.noTopMargin ? 0 : Platform.OS === \"web\" ? Spacing.large : Spacing.normal\n            },\n            props.style\n        ]}\n    />\n);\n\nexport default Column;\n","import React, { FC, useCallback, useContext, useState } from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport Token from \"../types/Token\";\nimport Button from \"./Button\";\n\nexport interface ApproveButtonProps {\n    token: Token;\n    spender: string;\n    onSuccess: () => void;\n    onError: (e) => void;\n    hidden?: boolean;\n}\n\nconst ApproveButton: FC<ApproveButtonProps> = props => {\n    const { approveToken } = useContext(EthersContext);\n    const [loading, setLoading] = useState(false);\n    const onPress = useCallback(async () => {\n        if (props.token) {\n            props.onError({});\n            setLoading(true);\n            try {\n                const tx = await approveToken(props.token.address, props.spender);\n                if (tx) {\n                    await tx.wait();\n                    props.onSuccess();\n                }\n            } catch (e) {\n                props.onError(e);\n            } finally {\n                setLoading(false);\n            }\n        }\n    }, [props.token]);\n    if (props.hidden) return <View />;\n    return (\n        <Button\n            title={\"Approve \" + (props.token?.symbol || \"\")}\n            onPress={onPress}\n            loading={loading}\n            containerStyle={{ marginBottom: Spacing.tiny }}\n        />\n    );\n};\n\nexport default ApproveButton;\n","import React from \"react\";\n\nimport Button from \"./Button\";\n\nconst FetchingButton = () => {\n    return <Button title={\"Fetching…\"} disabled={true} />;\n};\nexport default FetchingButton;\n","import React from \"react\";\n\nimport Button from \"./Button\";\n\nconst InsufficientBalanceButton = ({ symbol }: { symbol: string }) => {\n    return <Button title={\"Insufficient \" + (symbol ? symbol : \"Balance\")} disabled={true} />;\n};\nexport default InsufficientBalanceButton;\n","import React, { FC, useCallback } from \"react\";\nimport { Platform, View } from \"react-native\";\n\nimport { ethers } from \"ethers\";\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport useStyles from \"../hooks/useStyles\";\nimport Token from \"../types/Token\";\nimport { formatBalance, parseBalance, pow10 } from \"../utils\";\nimport Button from \"./Button\";\nimport Heading from \"./Heading\";\nimport Input from \"./Input\";\n\nexport interface TokenInputProps {\n    title?: string;\n    token?: Token;\n    amount: string;\n    onAmountChanged: (amount: string) => void;\n    label?: string;\n    hideMaxButton?: boolean;\n    maxButtonText?: string;\n    autoFocus?: boolean;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst TokenInput: FC<TokenInputProps> = props => {\n    const { border } = useStyles();\n    const onChangeText = useCallback(\n        (text: string) => {\n            if (props.token && props.onAmountChanged) {\n                try {\n                    parseBalance(text, props.token.decimals);\n                    props.onAmountChanged(text);\n                } catch (e) {\n                    if (text.endsWith(\".\") && text.indexOf(\".\") === text.length - 1) {\n                        props.onAmountChanged(text);\n                    }\n                }\n            }\n        },\n        [props.token, props.onAmountChanged]\n    );\n    return (\n        <View>\n            {props.title && <Heading text={props.title} />}\n            <View>\n                <Input\n                    label={props.label}\n                    value={props.amount}\n                    onChangeText={onChangeText}\n                    placeholder={\"0.0\"}\n                    autoFocus={props.autoFocus || false}\n                    inputStyle={{ marginHorizontal: 4 }}\n                    inputContainerStyle={{ borderBottomWidth: 0 }}\n                    labelStyle={{ fontFamily: \"light\", height: props.label ? \"auto\" : 0 }}\n                    containerStyle={{\n                        ...border(),\n                        paddingHorizontal: Spacing.tiny,\n                        paddingTop: 12,\n                        paddingBottom: 0\n                    }}\n                />\n                {props.token?.balance?.gt(0) && !props.hideMaxButton && (\n                    <MaxButton\n                        token={props.token}\n                        maxButtonText={props.maxButtonText}\n                        updateAmount={props.onAmountChanged}\n                    />\n                )}\n            </View>\n        </View>\n    );\n};\n\nconst MaxButton = (props: { token: Token; updateAmount; maxButtonText?: string }) => {\n    const { accent } = useColors();\n    const onPressMax = useCallback(() => {\n        if (props.token) {\n            let balance = props.token.balance;\n            if (props.token.symbol === \"ETH\") {\n                // Subtract 0.01 ETH for gas fee\n                const fee = pow10(16);\n                balance = balance.gt(fee) ? balance.sub(fee) : ethers.constants.Zero;\n            }\n            props.updateAmount(formatBalance(balance, props.token.decimals));\n        }\n    }, [props.token, props.updateAmount]);\n    return (\n        <View style={{ position: \"absolute\", right: 12, bottom: Platform.OS === \"web\" ? 10 : 20 }}>\n            <Button\n                type={\"clear\"}\n                size={\"small\"}\n                color={accent}\n                title={props.maxButtonText || \"MAX\"}\n                fontWeight={\"bold\"}\n                onPress={onPressMax}\n                buttonStyle={{ paddingHorizontal: 4 }}\n            />\n        </View>\n    );\n};\n\nexport default TokenInput;\n","import React, { FC, useCallback } from \"react\";\nimport { Platform } from \"react-native\";\nimport { Input as NativeInput, InputProps as NativeInputProps } from \"react-native-elements\";\n\nimport useColors from \"../hooks/useColors\";\n\nexport interface Validation {\n    regexp: RegExp;\n    error: string;\n}\n\nexport interface InputProps extends NativeInputProps {\n    color?: string;\n    size?: \"small\" | \"normal\" | \"large\";\n    allowed?: Validation[];\n    forbidden?: Validation[];\n    onError?: (error: string) => void;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst Input: FC<InputProps> = props => {\n    const { textDark, textMedium, textLight } = useColors();\n    const size = props.size || \"normal\";\n    const color = props.color || textDark;\n    const fontSize = size === \"small\" ? 16 : size === \"large\" ? 24 : 20;\n    const onChangeText = useCallback(\n        (text: string) => {\n            props.onChangeText?.(text);\n            props.onError?.(\"\");\n            const errors = [] as string[];\n            if (text !== \"\" && props.forbidden) {\n                props.forbidden.forEach(validation => {\n                    if (text.match(validation.regexp)) {\n                        errors.push(validation.error);\n                    }\n                });\n            }\n            if (text !== \"\" && props.allowed) {\n                props.allowed.forEach(validation => {\n                    if (!text.match(validation.regexp)) {\n                        errors.push(validation.error);\n                    }\n                });\n            }\n            if (errors.length > 0) {\n                props.onError?.(errors.join(\"\\n\"));\n            }\n        },\n        [props.onChangeText, props.onError, props.forbidden, props.allowed]\n    );\n    return (\n        <NativeInput\n            {...props}\n            inputStyle={[\n                { fontSize, fontFamily: \"regular\", paddingBottom: 4, color, marginTop: 0, minHeight: 32 },\n                // @ts-ignore\n                Platform.OS === \"web\" ? { outline: \"none\" } : {},\n                props.inputStyle\n            ]}\n            labelStyle={[{ color: textMedium }, props.labelStyle]}\n            placeholderTextColor={props.placeholderTextColor || textLight}\n            errorStyle={props.onError ? { height: 0 } : props.errorStyle}\n            containerStyle={[{ paddingHorizontal: 0 }, props.containerStyle]}\n            onChangeText={onChangeText}\n        />\n    );\n};\n\nexport default Input;\n","import React, { FC, useCallback, useState } from \"react\";\nimport { ButtonGroup as NativeButtonGroup, ButtonGroupProps } from \"react-native-elements\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport useStyles from \"../hooks/useStyles\";\n\n// tslint:disable-next-line:max-func-body-length\nconst ButtonGroup: FC<ButtonGroupProps> = props => {\n    const { borderDark } = useColors();\n    const { shadow } = useStyles();\n    const [index, setIndex] = useState<number>();\n    const onPress = useCallback(i => {\n        setIndex(i);\n        props.onPress(i);\n    }, []);\n    return (\n        <NativeButtonGroup\n            {...props}\n            selectedIndex={props.selectedIndex || index}\n            onPress={onPress}\n            textStyle={[\n                {\n                    fontFamily: \"regular\"\n                },\n                props.textStyle\n            ]}\n            buttonStyle={[\n                {\n                    borderTopLeftRadius: index === 0 ? Spacing.tiny : 0,\n                    borderBottomLeftRadius: index === 0 ? Spacing.tiny : 0,\n                    borderTopRightRadius:\n                        props.buttons.length > 0 && index === props.buttons.length - 1 ? Spacing.tiny : 0,\n                    borderBottomRightRadius:\n                        props.buttons.length > 0 && index === props.buttons.length - 1 ? Spacing.tiny : 0\n                },\n                props.buttonStyle\n            ]}\n            selectedButtonStyle={[\n                {\n                    backgroundColor: borderDark\n                },\n                props.selectedButtonStyle\n            ]}\n            containerStyle={[\n                {\n                    marginHorizontal: 0,\n                    marginVertical: 0,\n                    height: 56,\n                    ...shadow()\n                },\n                props.containerStyle\n            ]}\n        />\n    );\n};\n\nexport default ButtonGroup;\n","import { useCallback, useContext, useEffect, useState } from \"react\";\n\nimport { ethers } from \"ethers\";\nimport useAsyncEffect from \"use-async-effect\";\nimport { SUSHI_BAR } from \"../constants/contracts\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport Token from \"../types/Token\";\nimport { getContract, parseBalance } from \"../utils\";\nimport useSDK from \"./useSDK\";\n\nexport type Action = \"enter\" | \"leave\";\n\nexport interface StakingState {\n    action?: Action;\n    setAction: (action?: Action) => void;\n    sushi?: Token;\n    xSushi?: Token;\n    sushiStaked?: ethers.BigNumber;\n    sushiSupply?: ethers.BigNumber;\n    xSushiSupply?: ethers.BigNumber;\n    amount: string;\n    setAmount: (amount: string) => void;\n    sushiAllowed: boolean;\n    setSushiAllowed: (allowed: boolean) => void;\n    xSushiAllowed: boolean;\n    setXSushiAllowed: (allowed: boolean) => void;\n    loading: boolean;\n    onEnter: () => Promise<void>;\n    entering: boolean;\n    onLeave: () => Promise<void>;\n    leaving: boolean;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst useStakingState: () => StakingState = () => {\n    const { provider, signer, address, getTokenAllowance, tokens, updateTokens } = useContext(EthersContext);\n    const { enterSushiBar, leaveSushiBar } = useSDK();\n    const [action, setAction] = useState<Action>();\n    const [sushiStaked, setSushiStaked] = useState<ethers.BigNumber>();\n    const [sushiSupply, setSushiSupply] = useState<ethers.BigNumber>();\n    const [xSushiSupply, setXSushiSupply] = useState<ethers.BigNumber>();\n    const [amount, setAmount] = useState(\"\");\n    const [sushiAllowed, setSushiAllowed] = useState(false);\n    const [xSushiAllowed, setXSushiAllowed] = useState(false);\n    const [loading, setLoading] = useState(false);\n    const [entering, setEntering] = useState(false);\n    const [leaving, setLeaving] = useState(false);\n\n    const sushi = tokens.find(token => token.symbol === \"SUSHI\");\n    const xSushi = tokens.find(token => token.symbol === \"xSUSHI\");\n\n    useEffect(() => {\n        setAmount(\"\");\n    }, [address, action]);\n\n    useAsyncEffect(async () => {\n        if (sushi && xSushi && provider && signer) {\n            setSushiAllowed(false);\n            setXSushiAllowed(false);\n            setLoading(true);\n            try {\n                const minAllowance = ethers.BigNumber.from(2)\n                    .pow(96)\n                    .sub(1);\n                const sushiAllowance = await getTokenAllowance(sushi.address, SUSHI_BAR);\n                setSushiAllowed(ethers.BigNumber.from(sushiAllowance).gte(minAllowance));\n                const xSushiAllowance = await getTokenAllowance(xSushi.address, SUSHI_BAR);\n                setXSushiAllowed(ethers.BigNumber.from(xSushiAllowance).gte(minAllowance));\n\n                const sushiContract = getContract(\"ERC20\", sushi.address, signer);\n                setSushiStaked(await sushiContract.balanceOf(SUSHI_BAR));\n                setSushiSupply(await sushiContract.totalSupply());\n                const xSushiContract = getContract(\"ERC20\", xSushi.address, signer);\n                setXSushiSupply(await xSushiContract.totalSupply());\n            } finally {\n                setLoading(false);\n            }\n        }\n    }, [sushi, xSushi, provider, signer]);\n\n    const onEnter = useCallback(async () => {\n        if (amount && signer) {\n            setEntering(true);\n            try {\n                const tx = await enterSushiBar(parseBalance(amount), signer);\n                if (tx) {\n                    await tx.wait();\n                    await updateTokens();\n                    setAmount(\"\");\n                }\n            } finally {\n                setEntering(false);\n            }\n        }\n    }, [amount, signer]);\n\n    const onLeave = useCallback(async () => {\n        if (amount && signer) {\n            setLeaving(true);\n            try {\n                const tx = await leaveSushiBar(parseBalance(amount), signer);\n                if (tx) {\n                    await tx.wait();\n                    await updateTokens();\n                    setAmount(\"\");\n                }\n            } finally {\n                setLeaving(false);\n            }\n        }\n    }, [amount, signer]);\n\n    return {\n        action,\n        setAction,\n        sushi,\n        xSushi,\n        sushiStaked,\n        sushiSupply,\n        xSushiSupply,\n        amount,\n        setAmount,\n        sushiAllowed,\n        setSushiAllowed,\n        xSushiAllowed,\n        setXSushiAllowed,\n        loading,\n        onEnter,\n        entering,\n        onLeave,\n        leaving\n    };\n};\n\nexport default useStakingState;\n","import React, { useCallback, useState } from \"react\";\nimport { ActivityIndicator, Platform, View } from \"react-native\";\nimport { Icon } from \"react-native-elements\";\n\nimport useAsyncEffect from \"use-async-effect\";\nimport ApproveButton from \"../components/ApproveButton\";\nimport Button from \"../components/Button\";\nimport ButtonGroup from \"../components/ButtonGroup\";\nimport Column from \"../components/Column\";\nimport Container from \"../components/Container\";\nimport Content from \"../components/Content\";\nimport ErrorMessage from \"../components/ErrorMessage\";\nimport FetchingButton from \"../components/FetchingButton\";\nimport FlexView from \"../components/FlexView\";\nimport Heading from \"../components/Heading\";\nimport InsufficientBalanceButton from \"../components/InsufficientBalanceButton\";\nimport Meta from \"../components/Meta\";\nimport Notice from \"../components/Notice\";\nimport Text from \"../components/Text\";\nimport TokenInput from \"../components/TokenInput\";\nimport WebFooter from \"../components/web/WebFooter\";\nimport { SUSHI_BAR } from \"../constants/contracts\";\nimport { Spacing } from \"../constants/dimension\";\nimport Fraction from \"../constants/Fraction\";\nimport useColors from \"../hooks/useColors\";\nimport useStakingState, { Action, StakingState } from \"../hooks/useStakingState\";\nimport MetamaskError from \"../types/MetamaskError\";\nimport { formatBalance, isEmptyValue, parseBalance } from \"../utils\";\nimport Screen from \"./Screen\";\n\nconst Actions = [\"enter\", \"leave\"];\n\nconst StakingScreen = () => {\n    return (\n        <Screen>\n            <Container>\n                <Content>\n                    <Staking />\n                    {Platform.OS === \"web\" && <WebFooter />}\n                </Content>\n            </Container>\n        </Screen>\n    );\n};\n\nconst Staking = () => {\n    const state = useStakingState();\n    return (\n        <View style={{ alignItems: \"center\", marginBottom: Spacing.huge * 2 }}>\n            <Column>\n                <Text h4={true} style={{ textAlign: \"center\" }}>\n                    💰 Stake/Unstake\n                </Text>\n            </Column>\n            <ActionSelect state={state} />\n            {state.action === \"enter\" && state.sushi && state.sushi.balance.isZero() && <NoSushiNotice />}\n            {state.action === \"leave\" && state.xSushi && state.xSushi.balance.isZero() && <NoXSushiNotice />}\n            <TokenInput\n                title={\"2. How many SUSHI do you want to STAKE?\"}\n                token={state.sushi}\n                hidden={state.action !== \"enter\" || !state.sushi || state.sushi.balance.isZero()}\n                amount={state.amount}\n                onAmountChanged={state.setAmount}\n            />\n            <TokenInput\n                title={\"2. How many xSUSHI do you want to UNSTAKE?\"}\n                token={state.xSushi}\n                hidden={state.action !== \"leave\" || !state.xSushi || state.xSushi.balance.isZero()}\n                amount={state.amount}\n                onAmountChanged={state.setAmount}\n            />\n            <StakeInfo state={state} />\n            <Controls state={state} />\n        </View>\n    );\n};\n\nconst ActionSelect = ({ state }: { state: StakingState }) => {\n    if (!state.sushi || !state.xSushi || !state.sushiStaked || !state.xSushiSupply) {\n        return (\n            <Column noTopMargin={true}>\n                <ActivityIndicator size={\"large\"} style={{ marginTop: Spacing.large }} />\n            </Column>\n        );\n    }\n    const index = state.action ? Actions.indexOf(state.action) : null;\n    const onPress = useCallback((i: number) => {\n        state.setAction(Actions[i] as Action);\n    }, []);\n    return (\n        <Column>\n            <Heading text={\"1. Do you want to STAKE or UNSTAKE?\"} />\n            <View style={{ marginHorizontal: Spacing.small, marginBottom: Spacing.normal }}>\n                <Meta label={\"Total SUSHI Staked\"} text={formatBalance(state.sushiStaked, state.sushi.decimals)} />\n                <Meta label={\"My SUSHI Balance\"} text={formatBalance(state.sushi.balance, state.sushi.decimals)} />\n                <Line />\n                <Meta label={\"Total xSUSHI Supply\"} text={formatBalance(state.xSushiSupply, state.xSushi.decimals)} />\n                <Meta label={\"My xSUSHI Balance\"} text={formatBalance(state.xSushi.balance, state.xSushi.decimals)} />\n            </View>\n            <ButtonGroup\n                selectedIndex={index}\n                onPress={onPress}\n                buttons={[{ element: StakeText }, { element: UnstakeText }]}\n                containerStyle={{ marginHorizontal: Spacing.small }}\n            />\n        </Column>\n    );\n};\n\nconst Line = () => {\n    const { border } = useColors();\n    return (\n        <View style={{ width: \"100%\", paddingHorizontal: Spacing.small }}>\n            <View\n                style={{\n                    height: 1,\n                    width: \"100%\",\n                    marginTop: Spacing.small,\n                    marginBottom: Spacing.tiny,\n                    backgroundColor: border\n                }}\n            />\n        </View>\n    );\n};\n\nconst StakeText = () => {\n    return (\n        <FlexView style={{ alignItems: \"center\" }}>\n            <Text style={{ color: \"black\" }}>Stake SUSHI</Text>\n            <Icon\n                type={\"material-community\"}\n                name={\"chevron-right\"}\n                color={\"black\"}\n                style={{ marginLeft: Spacing.tiny }}\n            />\n        </FlexView>\n    );\n};\n\nconst UnstakeText = () => {\n    return (\n        <FlexView style={{ alignItems: \"center\" }}>\n            <Text style={{ color: \"black\" }}>Unstake xSUSHI</Text>\n            <Icon\n                type={\"material-community\"}\n                name={\"chevron-right\"}\n                color={\"black\"}\n                style={{ marginLeft: Spacing.tiny }}\n            />\n        </FlexView>\n    );\n};\n\nconst NoSushiNotice = () => {\n    return (\n        <Column noTopMargin={true} style={{ padding: Spacing.small, marginTop: Spacing.small }}>\n            <Notice text={\"You don't have any SUSHI balance.\"} />\n        </Column>\n    );\n};\n\nconst NoXSushiNotice = () => {\n    return (\n        <Column noTopMargin={true} style={{ padding: Spacing.small, marginTop: Spacing.small }}>\n            <Notice text={\"You don't have any xSUSHI staked.\"} />\n        </Column>\n    );\n};\n\nconst StakeInfo = ({ state }: { state: StakingState }) => {\n    if (!state.sushi || !state.xSushi || !state.sushiSupply || !state.xSushiSupply || isEmptyValue(state.amount)) {\n        return <Column noTopMargin={true} />;\n    }\n    const amount = parseBalance(state.amount, state.sushi.decimals);\n    const xSushiAmount = amount.mul(state.xSushiSupply).div(state.sushiSupply);\n    const share = Fraction.from(xSushiAmount, state.xSushiSupply);\n    return (\n        <Column noTopMargin={true}>\n            <Meta label={\"xSUSHI Amount\"} text={formatBalance(xSushiAmount, state.xSushi.decimals)} />\n            <Meta label={\"xSUSHI Share\"} text={share.toString() + \"%\"} />\n        </Column>\n    );\n};\n\nconst Controls = ({ state }: { state: StakingState }) => {\n    const [error, setError] = useState<MetamaskError>({});\n    useAsyncEffect(() => setError({}), [state.action, state.amount]);\n    const token = state.action === \"leave\" ? state.xSushi : state.sushi;\n    if (!state.action || !token || isEmptyValue(state.amount)) return <Column noTopMargin={true} />;\n    return (\n        <Column>\n            {parseBalance(state.amount, token.decimals).gt(token.balance) ? (\n                <InsufficientBalanceButton symbol={token.symbol} />\n            ) : state.loading ? (\n                <FetchingButton />\n            ) : (\n                <>\n                    <ApproveButton\n                        token={token}\n                        spender={SUSHI_BAR}\n                        onSuccess={() => state.setSushiAllowed(true)}\n                        onError={setError}\n                        hidden={state.action === \"leave\" || state.sushiAllowed}\n                    />\n                    {state.action === \"leave\" ? (\n                        <UnstakeButton state={state} onError={setError} />\n                    ) : (\n                        <StakeButton state={state} onError={setError} disabled={!state.sushiAllowed} />\n                    )}\n                </>\n            )}\n            {error.message && error.code !== 4001 && <ErrorMessage error={error} />}\n        </Column>\n    );\n};\n\nconst StakeButton = ({\n    state,\n    onError,\n    disabled\n}: {\n    state: StakingState;\n    onError: (e) => void;\n    disabled: boolean;\n}) => {\n    const onPress = useCallback(async () => {\n        onError({});\n        try {\n            await state.onEnter();\n            state.setAction();\n        } catch (e) {\n            onError(e);\n        }\n    }, []);\n    return <Button title={\"Stake\"} loading={state.entering} onPress={onPress} disabled={disabled} />;\n};\n\nconst UnstakeButton = ({ state, onError }: { state: StakingState; onError: (e) => void }) => {\n    const onPress = useCallback(async () => {\n        onError({});\n        try {\n            await state.onLeave();\n            state.setAction();\n        } catch (e) {\n            onError(e);\n        }\n    }, []);\n    return <Button title={\"Unstake\"} loading={state.leaving} onPress={onPress} />;\n};\n\nexport default StakingScreen;\n"],"sourceRoot":""}