{"version":3,"sources":["src/components/Heading.tsx","src/hooks/useLinker.tsx","src/components/InfoBox.tsx","src/components/Notice.tsx","src/components/ErrorMessage.tsx","src/components/SocialIcons.tsx","src/components/web/WebFooter.tsx","src/components/FetchingButton.tsx","src/components/InsufficientBalanceButton.tsx","src/components/Meta.tsx","src/components/TokenInput.tsx","src/components/Column.tsx","src/components/ApproveButton.tsx","src/components/Input.tsx","src/hooks/useStakingState.tsx","src/screens/StakeScreen.tsx"],"names":["Heading","props","accent","useColors","style","alignItems","height","marginBottom","disabled","Spacing","small","medium","fontWeight","flex","fontSize","paddingBottom","tiny","text","buttonText","type","size","title","onPress","onPressButton","color","Platform","OS","path","route","target","history","useHistory","useCallback","window","open","push","_target","navigate","useNavigation","InfoBox","darkMode","useContext","GlobalContext","backgroundLight","borderDark","border","useStyles","backgroundColor","marginTop","normal","padding","Notice","borderStyle","borderColor","clear","paddingHorizontal","note","titleStyle","buttonStyle","paddingVertical","alignSelf","ErrorMessage","error","borderWidth","width","code","message","SocialIcon","background","textLight","light","iconColor","undefined","SocialIcons","onPressTwitter","useLinker","onPressGithub","onPressDiscord","FlexView","justifyContent","name","raised","reverse","reverseColor","containerStyle","WebFooter","Column","noTopMargin","View","Text","textAlign","FetchingButton","InsufficientBalanceButton","symbol","Meta","textMedium","placeholder","url","suffix","label","textDecorationLine","MaxButton","onPressMax","token","balance","fee","pow10","gt","sub","ethers","constants","Zero","updateAmount","formatBalance","decimals","position","right","bottom","maxButtonText","IS_DESKTOP","TokenInput","onChangeText","onAmountChanged","parseBalance","e","endsWith","indexOf","length","value","amount","keyboardType","autoFocus","inputStyle","marginHorizontal","inputContainerStyle","borderBottomWidth","labelStyle","fontFamily","paddingTop","hideMaxButton","large","ApproveButton","approveToken","EthersContext","useState","loading","setLoading","a","async","onError","address","spender","tx","wait","onSuccess","hidden","Input","textDark","errors","forbidden","forEach","validation","match","regexp","allowed","join","minHeight","outline","placeholderTextColor","errorStyle","useStakingState","signer","getTokenAllowance","tokens","updateTokens","useSDK","enterSushiBar","leaveSushiBar","sushiStaked","setSushiStaked","sushiSupply","setSushiSupply","xSushiSupply","setXSushiSupply","setAmount","sushiAllowed","setSushiAllowed","xSushiAllowed","setXSushiAllowed","entering","setEntering","leaving","setLeaving","sushi","useMemo","find","xSushi","useEffect","useAsyncEffect","minAllowance","BigNumber","from","pow","SUSHI_BAR","sushiAllowance","gte","xSushiAllowance","sushiContract","getContract","balanceOf","totalSupply","xSushiContract","onEnter","parsed","onLeave","Staking","state","SushiBalance","AmountInput","isZero","StakeInfo","isEmptyValue","xSushiAmount","mul","div","xSushiTotal","xSushiBalance","add","share","Fraction","toString","Controls","setError","StakeButton","StakeScreen"],"mappings":"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","file":"static/js/6.99639698.chunk.js","sourcesContent":["import React, { FC } from \"react\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport Button from \"./Button\";\nimport FlexView from \"./FlexView\";\nimport Text from \"./Text\";\n\ninterface HeadingProps {\n    text: string;\n    disabled?: boolean;\n    buttonText?: string;\n    onPressButton?: () => void | Promise<void>;\n}\n\nconst Heading: FC<HeadingProps> = props => {\n    const { accent } = useColors();\n    return (\n        <FlexView style={{ alignItems: \"flex-end\", height: 32, marginBottom: props.disabled ? 0 : Spacing.small }}>\n            <Text\n                medium={true}\n                fontWeight={\"bold\"}\n                disabled={props.disabled}\n                style={{ flex: 1, fontSize: 18, paddingBottom: Spacing.tiny }}>\n                {props.text}\n            </Text>\n            {props.buttonText && (\n                <Button\n                    type={\"clear\"}\n                    size={\"small\"}\n                    title={props.buttonText}\n                    onPress={props.onPressButton}\n                    color={accent}\n                />\n            )}\n        </FlexView>\n    );\n};\n\nexport default Heading;\n","import { useCallback } from \"react\";\nimport { Platform } from \"react-native\";\nimport { useHistory } from \"react-router-dom\";\n\nimport { useNavigation } from \"@react-navigation/native\";\n\nconst useWebLinker = (path: string, route: string, target?: string) => {\n    const history = useHistory();\n    return useCallback(() => {\n        if (target) {\n            window.open(path, target);\n        } else {\n            history.push(path);\n        }\n    }, [path, target]);\n};\n\nconst useAppLinker = (path: string, route: string, _target?: string) => {\n    const { navigate } = useNavigation();\n    return useCallback(() => {\n        navigate(route);\n    }, [route]);\n};\n\nexport default Platform.OS === \"web\" ? useWebLinker : useAppLinker;\n","import React, { PropsWithChildren, useContext } from \"react\";\nimport { View, ViewProps } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport { GlobalContext } from \"../context/GlobalContext\";\nimport useColors from \"../hooks/useColors\";\nimport useStyles from \"../hooks/useStyles\";\n\nconst InfoBox = (props: PropsWithChildren<ViewProps>) => {\n    const { darkMode } = useContext(GlobalContext);\n    const { backgroundLight, borderDark } = useColors();\n    const { border } = useStyles();\n    return (\n        <View\n            {...props}\n            style={[\n                {\n                    ...border({ color: darkMode ? borderDark : backgroundLight }),\n                    backgroundColor: backgroundLight,\n                    marginTop: Spacing.normal + Spacing.small,\n                    padding: Spacing.small + Spacing.tiny\n                },\n                props.style\n            ]}\n        />\n    );\n};\n\nexport default InfoBox;\n","import React from \"react\";\nimport { View, ViewStyle } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useStyles from \"../hooks/useStyles\";\nimport Button from \"./Button\";\nimport Text from \"./Text\";\n\nexport interface NoticeProps {\n    text: string;\n    clear?: boolean;\n    color?: string;\n    buttonText?: string;\n    onPressButton?: () => void;\n    style?: ViewStyle;\n}\n\nconst Notice = (props: NoticeProps) => {\n    const { border } = useStyles();\n    const borderStyle = border({ color: props.color });\n    const color = props.color || borderStyle.borderColor;\n    return (\n        <View style={[props.clear ? { paddingHorizontal: Spacing.tiny } : borderStyle, props.style]}>\n            <Text\n                note={true}\n                style={{\n                    color\n                }}>\n                {props.text}\n            </Text>\n            {props.buttonText && props.onPressButton && (\n                <Button\n                    title={props.buttonText}\n                    type={\"clear\"}\n                    size={\"small\"}\n                    fontWeight={\"bold\"}\n                    onPress={props.onPressButton}\n                    titleStyle={{ color }}\n                    buttonStyle={{ paddingHorizontal: 0, paddingVertical: 0 }}\n                    style={{ alignSelf: \"flex-end\", marginTop: Spacing.tiny }}\n                />\n            )}\n        </View>\n    );\n};\n\nexport default Notice;\n","import React from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport MetamaskError from \"../types/MetamaskError\";\nimport Text from \"./Text\";\n\nconst ErrorMessage = ({ error }: { error: MetamaskError }) => (\n    <View\n        style={{\n            borderColor: \"red\",\n            borderWidth: 1,\n            width: \"100%\",\n            padding: Spacing.tiny,\n            marginTop: Spacing.small\n        }}>\n        {error.code && (\n            <Text fontWeight={\"bold\"} style={{ color: \"red\", fontSize: 14 }}>\n                Error Code {error.code}\n            </Text>\n        )}\n        <Text note={true} style={{ color: \"red\", fontSize: 14 }}>\n            {error.message}\n        </Text>\n    </View>\n);\n\nexport default ErrorMessage;\n","import React, { useContext } from \"react\";\nimport { Icon, SocialIcon as NativeSocialIcon, SocialIconProps } from \"react-native-elements\";\n\nimport { GlobalContext } from \"../context/GlobalContext\";\nimport useColors from \"../hooks/useColors\";\nimport useLinker from \"../hooks/useLinker\";\nimport FlexView from \"./FlexView\";\n\nconst SocialIcons = () => {\n    const { darkMode } = useContext(GlobalContext);\n    const { background, textLight } = useColors();\n    const onPressTwitter = useLinker(\"https://twitter.com/sushiswap\", \"\", \"_blank\");\n    const onPressGithub = useLinker(\"https://github.com/sushiswap\", \"\", \"_blank\");\n    const onPressDiscord = useLinker(\"https://discord.gg/YS8xH7E\", \"\", \"_blank\");\n    return (\n        <FlexView style={{ width: \"100%\", justifyContent: \"center\" }}>\n            <SocialIcon type=\"github-alt\" onPress={onPressGithub} />\n            <SocialIcon type=\"twitter\" onPress={onPressTwitter} />\n            <Icon\n                type={\"material-community\"}\n                name={\"discord\"}\n                raised={true}\n                reverse={true}\n                color={background}\n                reverseColor={darkMode ? \"white\" : \"#7289da\"}\n                style={{ backgroundColor: background }}\n                containerStyle={{\n                    borderWidth: 1,\n                    borderColor: darkMode ? \"white\" : textLight\n                }}\n                onPress={onPressDiscord}\n            />\n        </FlexView>\n    );\n};\n\nconst SocialIcon = (props: SocialIconProps) => {\n    const { darkMode } = useContext(GlobalContext);\n    const { background, textLight } = useColors();\n    return (\n        <NativeSocialIcon\n            {...props}\n            light={!darkMode}\n            iconColor={darkMode ? \"white\" : undefined}\n            style={{\n                backgroundColor: background,\n                borderWidth: 1,\n                borderColor: darkMode ? \"white\" : textLight\n            }}\n        />\n    );\n};\n\nexport default SocialIcons;\n","import React from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../../constants/dimension\";\nimport Column from \"../Column\";\nimport SocialIcons from \"../SocialIcons\";\nimport Text from \"../Text\";\n\nconst WebFooter = () => (\n    <Column noTopMargin={true}>\n        <View\n            style={{\n                width: \"100%\",\n                padding: Spacing.normal\n            }}>\n            <SocialIcons />\n            <Text note={true} style={{ marginTop: Spacing.tiny, textAlign: \"center\", width: \"100%\" }}>\n                Built with ❤️ by SushiSwap\n            </Text>\n        </View>\n    </Column>\n);\n\nexport default WebFooter;\n","import React from \"react\";\n\nimport Button from \"./Button\";\n\nconst FetchingButton = () => {\n    return <Button title={\"Fetching…\"} disabled={true} />;\n};\nexport default FetchingButton;\n","import React from \"react\";\n\nimport Button from \"./Button\";\n\nconst InsufficientBalanceButton = ({ symbol }: { symbol: string }) => {\n    return <Button title={\"Insufficient \" + (symbol ? symbol : \"Balance\")} disabled={true} />;\n};\nexport default InsufficientBalanceButton;\n","import React, { FC } from \"react\";\n\nimport useColors from \"../hooks/useColors\";\nimport useLinker from \"../hooks/useLinker\";\nimport FlexView from \"./FlexView\";\nimport Text from \"./Text\";\n\nexport interface MetaProps {\n    label: string;\n    text?: string;\n    suffix?: string;\n    url?: string;\n    disabled?: boolean;\n}\n\nconst Meta: FC<MetaProps> = props => {\n    const { textMedium, textLight, placeholder } = useColors();\n    const onPress = useLinker(props.url || \"\", \"\", \"_blank\");\n    const text = props.disabled\n        ? \"N/A\"\n        : props.text\n        ? props.text + (props.suffix ? \" \" + props.suffix : \"\")\n        : \"Fetching…\";\n    return (\n        <FlexView style={{ justifyContent: \"space-between\", marginTop: 4 }}>\n            <Text fontWeight={\"bold\"} style={{ fontSize: 13, color: props.disabled ? placeholder : textMedium }}>\n                {props.label}\n            </Text>\n            <Text\n                onPress={props.url ? onPress : undefined}\n                style={{\n                    fontSize: 13,\n                    color: props.disabled ? placeholder : props.text ? textMedium : textLight,\n                    textDecorationLine: props.url ? \"underline\" : \"none\"\n                }}>\n                {text}\n            </Text>\n        </FlexView>\n    );\n};\n\nexport default Meta;\n","import React, { FC, useCallback } from \"react\";\nimport { Platform, View } from \"react-native\";\n\nimport { ethers } from \"ethers\";\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport useStyles from \"../hooks/useStyles\";\nimport Token from \"../types/Token\";\nimport { formatBalance, parseBalance, pow10 } from \"../utils\";\nimport Button from \"./Button\";\nimport Heading from \"./Heading\";\nimport Input from \"./Input\";\n\nexport interface TokenInputProps {\n    title?: string;\n    token?: Token;\n    amount: string;\n    onAmountChanged: (amount: string) => void;\n    label?: string;\n    hideMaxButton?: boolean;\n    maxButtonText?: string;\n    autoFocus?: boolean;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst TokenInput: FC<TokenInputProps> = props => {\n    const { border } = useStyles();\n    const onChangeText = useCallback(\n        (text: string) => {\n            if (props.token && props.onAmountChanged) {\n                try {\n                    parseBalance(text, props.token.decimals);\n                    props.onAmountChanged(text);\n                } catch (e) {\n                    if (text.endsWith(\".\") && text.indexOf(\".\") === text.length - 1) {\n                        props.onAmountChanged(text);\n                    }\n                }\n            }\n        },\n        [props.token, props.onAmountChanged]\n    );\n    return (\n        <View>\n            {props.title && <Heading text={props.title} />}\n            <View>\n                <Input\n                    label={props.label}\n                    value={props.amount}\n                    onChangeText={onChangeText}\n                    placeholder={\"0.0\"}\n                    keyboardType={\"numeric\"}\n                    autoFocus={props.autoFocus || false}\n                    inputStyle={{ marginHorizontal: 4 }}\n                    inputContainerStyle={{ borderBottomWidth: 0 }}\n                    labelStyle={{ fontFamily: \"light\", height: props.label ? \"auto\" : 0 }}\n                    containerStyle={{\n                        ...border(),\n                        paddingHorizontal: Spacing.tiny,\n                        paddingTop: 15,\n                        paddingBottom: 2\n                    }}\n                />\n                {props.token?.balance?.gt(0) && !props.hideMaxButton && (\n                    <MaxButton\n                        token={props.token}\n                        maxButtonText={props.maxButtonText}\n                        updateAmount={props.onAmountChanged}\n                    />\n                )}\n            </View>\n        </View>\n    );\n};\n\nconst MaxButton = (props: { token: Token; updateAmount; maxButtonText?: string }) => {\n    const { accent } = useColors();\n    const onPressMax = useCallback(() => {\n        if (props.token) {\n            let balance = props.token.balance;\n            if (props.token.symbol === \"ETH\") {\n                // Subtract 0.01 ETH for gas fee\n                const fee = pow10(16);\n                balance = balance.gt(fee) ? balance.sub(fee) : ethers.constants.Zero;\n            }\n            props.updateAmount(formatBalance(balance, props.token.decimals));\n        }\n    }, [props.token, props.updateAmount]);\n    return (\n        <View style={{ position: \"absolute\", right: 12, bottom: Platform.OS === \"web\" ? 12 : 24 }}>\n            <Button\n                type={\"clear\"}\n                size={\"small\"}\n                color={accent}\n                title={props.maxButtonText || (IS_DESKTOP ? \"MAX \" + props.token.symbol : \"MAX\")}\n                fontWeight={\"bold\"}\n                onPress={onPressMax}\n                buttonStyle={{ paddingHorizontal: 4 }}\n            />\n        </View>\n    );\n};\n\nexport default TokenInput;\n","import React, { FC } from \"react\";\nimport { Platform, View, ViewProps, ViewStyle } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\n\ninterface ColumnProps extends ViewProps {\n    noTopMargin?: boolean;\n    style?: ViewStyle;\n}\n\nconst Column: FC<ColumnProps> = props => (\n    <View\n        {...props}\n        style={[\n            {\n                width: \"100%\",\n                marginTop: props.noTopMargin ? 0 : Platform.OS === \"web\" ? Spacing.large : Spacing.normal\n            },\n            props.style\n        ]}\n    />\n);\n\nexport default Column;\n","import React, { FC, useCallback, useContext, useState } from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport Token from \"../types/Token\";\nimport Button from \"./Button\";\n\nexport interface ApproveButtonProps {\n    token: Token;\n    spender: string;\n    onSuccess: () => void;\n    onError: (e) => void;\n    hidden?: boolean;\n}\n\nconst ApproveButton: FC<ApproveButtonProps> = props => {\n    const { approveToken } = useContext(EthersContext);\n    const [loading, setLoading] = useState(false);\n    const onPress = useCallback(async () => {\n        if (props.token) {\n            props.onError({});\n            setLoading(true);\n            try {\n                const tx = await approveToken(props.token.address, props.spender);\n                if (tx) {\n                    await tx.wait();\n                    props.onSuccess();\n                }\n            } catch (e) {\n                props.onError(e);\n            } finally {\n                setLoading(false);\n            }\n        }\n    }, [props.token]);\n    if (props.hidden) return <View />;\n    return (\n        <Button\n            title={\"Approve \" + (props.token?.symbol || \"\")}\n            onPress={onPress}\n            loading={loading}\n            containerStyle={{ marginBottom: Spacing.tiny }}\n        />\n    );\n};\n\nexport default ApproveButton;\n","import React, { FC, useCallback } from \"react\";\nimport { Platform } from \"react-native\";\nimport { Input as NativeInput, InputProps as NativeInputProps } from \"react-native-elements\";\n\nimport useColors from \"../hooks/useColors\";\n\nexport interface Validation {\n    regexp: RegExp;\n    error: string;\n}\n\nexport interface InputProps extends NativeInputProps {\n    color?: string;\n    size?: \"small\" | \"normal\" | \"large\";\n    allowed?: Validation[];\n    forbidden?: Validation[];\n    onError?: (error: string) => void;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst Input: FC<InputProps> = props => {\n    const { textDark, textMedium, textLight } = useColors();\n    const size = props.size || \"normal\";\n    const color = props.color || textDark;\n    const fontSize = size === \"small\" ? 16 : size === \"large\" ? 24 : 20;\n    const onChangeText = useCallback(\n        (text: string) => {\n            props.onChangeText?.(text);\n            props.onError?.(\"\");\n            const errors = [] as string[];\n            if (text !== \"\" && props.forbidden) {\n                props.forbidden.forEach(validation => {\n                    if (text.match(validation.regexp)) {\n                        errors.push(validation.error);\n                    }\n                });\n            }\n            if (text !== \"\" && props.allowed) {\n                props.allowed.forEach(validation => {\n                    if (!text.match(validation.regexp)) {\n                        errors.push(validation.error);\n                    }\n                });\n            }\n            if (errors.length > 0) {\n                props.onError?.(errors.join(\"\\n\"));\n            }\n        },\n        [props.onChangeText, props.onError, props.forbidden, props.allowed]\n    );\n    return (\n        <NativeInput\n            {...props}\n            inputStyle={[\n                { fontSize, fontFamily: \"regular\", paddingBottom: 4, color, marginTop: 0, minHeight: 32 },\n                // @ts-ignore\n                Platform.OS === \"web\" ? { outline: \"none\" } : {},\n                props.inputStyle\n            ]}\n            labelStyle={[{ color: textMedium }, props.labelStyle]}\n            placeholderTextColor={props.placeholderTextColor || textLight}\n            errorStyle={props.onError ? { height: 0 } : props.errorStyle}\n            containerStyle={[{ paddingHorizontal: 0 }, props.containerStyle]}\n            onChangeText={onChangeText}\n        />\n    );\n};\n\nexport default Input;\n","import { useCallback, useContext, useEffect, useMemo, useState } from \"react\";\n\nimport { ethers } from \"ethers\";\nimport useAsyncEffect from \"use-async-effect\";\nimport { SUSHI_BAR } from \"../constants/contracts\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport Token from \"../types/Token\";\nimport { getContract, parseBalance } from \"../utils\";\nimport useSDK from \"./useSDK\";\n\nexport type StakeAction = \"sushi-balance\" | \"stake\";\nexport type UnstakeAction = \"xsushi-balance\" | \"unstake\";\n\nexport interface StakingState {\n    sushi?: Token;\n    xSushi?: Token;\n    sushiStaked?: ethers.BigNumber;\n    sushiSupply?: ethers.BigNumber;\n    xSushiSupply?: ethers.BigNumber;\n    amount: string;\n    setAmount: (amount: string) => void;\n    sushiAllowed: boolean;\n    setSushiAllowed: (allowed: boolean) => void;\n    xSushiAllowed: boolean;\n    setXSushiAllowed: (allowed: boolean) => void;\n    loading: boolean;\n    onEnter: () => Promise<void>;\n    entering: boolean;\n    onLeave: () => Promise<void>;\n    leaving: boolean;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst useStakingState: () => StakingState = () => {\n    const { signer, address, getTokenAllowance, tokens, updateTokens } = useContext(EthersContext);\n    const { enterSushiBar, leaveSushiBar } = useSDK();\n    const [sushiStaked, setSushiStaked] = useState<ethers.BigNumber>();\n    const [sushiSupply, setSushiSupply] = useState<ethers.BigNumber>();\n    const [xSushiSupply, setXSushiSupply] = useState<ethers.BigNumber>();\n    const [amount, setAmount] = useState(\"\");\n    const [sushiAllowed, setSushiAllowed] = useState(false);\n    const [xSushiAllowed, setXSushiAllowed] = useState(false);\n    const [loading, setLoading] = useState(false);\n    const [entering, setEntering] = useState(false);\n    const [leaving, setLeaving] = useState(false);\n\n    const sushi = useMemo(() => tokens.find(token => token.symbol === \"SUSHI\"), [tokens]);\n    const xSushi = useMemo(() => tokens.find(token => token.symbol === \"xSUSHI\"), [tokens]);\n\n    useEffect(() => {\n        setAmount(\"\");\n    }, [address]);\n\n    useAsyncEffect(async () => {\n        if (sushi && xSushi && signer) {\n            setSushiAllowed(false);\n            setXSushiAllowed(false);\n            setLoading(true);\n            try {\n                const minAllowance = ethers.BigNumber.from(2)\n                    .pow(96)\n                    .sub(1);\n                const sushiAllowance = await getTokenAllowance(sushi.address, SUSHI_BAR);\n                setSushiAllowed(ethers.BigNumber.from(sushiAllowance).gte(minAllowance));\n                const xSushiAllowance = await getTokenAllowance(xSushi.address, SUSHI_BAR);\n                setXSushiAllowed(ethers.BigNumber.from(xSushiAllowance).gte(minAllowance));\n\n                const sushiContract = getContract(\"ERC20\", sushi.address, signer);\n                setSushiStaked(await sushiContract.balanceOf(SUSHI_BAR));\n                setSushiSupply(await sushiContract.totalSupply());\n                const xSushiContract = getContract(\"ERC20\", xSushi.address, signer);\n                setXSushiSupply(await xSushiContract.totalSupply());\n            } finally {\n                setLoading(false);\n            }\n        }\n    }, [sushi, xSushi, signer]);\n\n    const onEnter = useCallback(async () => {\n        if (amount && sushi && signer) {\n            setEntering(true);\n            try {\n                const parsed = parseBalance(amount, sushi.decimals);\n                const tx = await enterSushiBar(parsed, signer);\n                if (tx) {\n                    await tx.wait();\n                    await updateTokens();\n                    setAmount(\"\");\n                }\n            } finally {\n                setEntering(false);\n            }\n        }\n    }, [amount, sushi, signer]);\n\n    const onLeave = useCallback(async () => {\n        if (amount && xSushi && signer) {\n            setLeaving(true);\n            try {\n                const parsed = parseBalance(amount, xSushi.decimals);\n                const tx = await leaveSushiBar(parsed, signer);\n                if (tx) {\n                    await tx.wait();\n                    await updateTokens();\n                    setAmount(\"\");\n                }\n            } finally {\n                setLeaving(false);\n            }\n        }\n    }, [amount, xSushi, signer]);\n\n    return {\n        sushi,\n        xSushi,\n        sushiStaked,\n        sushiSupply,\n        xSushiSupply,\n        amount,\n        setAmount,\n        sushiAllowed,\n        setSushiAllowed,\n        xSushiAllowed,\n        setXSushiAllowed,\n        loading,\n        onEnter,\n        entering,\n        onLeave,\n        leaving\n    };\n};\n\nexport default useStakingState;\n","import React, { useState } from \"react\";\nimport { Platform, View } from \"react-native\";\n\nimport ApproveButton from \"../components/ApproveButton\";\nimport BackgroundImage from \"../components/BackgroundImage\";\nimport Button from \"../components/Button\";\nimport Container from \"../components/Container\";\nimport Content from \"../components/Content\";\nimport ErrorMessage from \"../components/ErrorMessage\";\nimport FetchingButton from \"../components/FetchingButton\";\nimport Heading from \"../components/Heading\";\nimport InfoBox from \"../components/InfoBox\";\nimport InsufficientBalanceButton from \"../components/InsufficientBalanceButton\";\nimport Meta from \"../components/Meta\";\nimport Notice from \"../components/Notice\";\nimport Text from \"../components/Text\";\nimport Title from \"../components/Title\";\nimport TokenInput from \"../components/TokenInput\";\nimport WebFooter from \"../components/web/WebFooter\";\nimport { StakingSubMenu } from \"../components/web/WebSubMenu\";\nimport { SUSHI_BAR } from \"../constants/contracts\";\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport Fraction from \"../constants/Fraction\";\nimport useStakingState, { StakingState } from \"../hooks/useStakingState\";\nimport MetamaskError from \"../types/MetamaskError\";\nimport { formatBalance, isEmptyValue, parseBalance } from \"../utils\";\nimport Screen from \"./Screen\";\n\nconst StakeScreen = () => {\n    return (\n        <Screen>\n            <Container>\n                <BackgroundImage />\n                <Content>\n                    <Title text={\"Stake\"} />\n                    <Text light={true}>Earn recurring income by staking your SUSHI.</Text>\n                    <Staking />\n                </Content>\n                {Platform.OS === \"web\" && <WebFooter />}\n            </Container>\n            <StakingSubMenu />\n        </Screen>\n    );\n};\n\nconst Staking = () => {\n    const state = useStakingState();\n    return (\n        <View style={{ marginTop: Spacing.large }}>\n            <SushiBalance state={state} />\n            <AmountInput state={state} />\n            {state.sushi && state.sushi.balance.isZero() && (\n                <Notice text={\"You don't have any SUSHI.\"} color={\"orange\"} style={{ marginTop: Spacing.small }} />\n            )}\n            <StakeInfo state={state} />\n        </View>\n    );\n};\n\nconst SushiBalance = ({ state }: { state: StakingState }) => {\n    return (\n        <View>\n            <Heading text={\"Your SUSHI\"} />\n            <Text disabled={!state.sushi} style={{ fontSize: 28, marginBottom: Spacing.normal }}>\n                {!state.sushi\n                    ? \"Fetching...\"\n                    : formatBalance(state.sushi.balance, state.sushi.decimals, IS_DESKTOP ? 18 : 8)}\n            </Text>\n        </View>\n    );\n};\n\nconst AmountInput = ({ state }: { state: StakingState }) => {\n    if (!state.sushi || state.sushi.balance.isZero()) {\n        return <Heading text={\"Amount To Stake\"} disabled={true} />;\n    }\n    return (\n        <View>\n            <Heading text={\"Amount To Stake\"} />\n            <TokenInput\n                token={state.sushi}\n                amount={state.amount}\n                onAmountChanged={state.setAmount}\n                autoFocus={IS_DESKTOP}\n            />\n        </View>\n    );\n};\n\n// tslint:disable-next-line:max-func-body-length\nconst StakeInfo = ({ state }: { state: StakingState }) => {\n    const disabled =\n        !state.sushi ||\n        state.sushi.balance.isZero() ||\n        !state.xSushi ||\n        !state.sushiStaked ||\n        !state.xSushiSupply ||\n        isEmptyValue(state.amount);\n    const xSushiAmount = disabled\n        ? undefined\n        : parseBalance(state.amount, state.sushi!.decimals)\n              .mul(state.xSushiSupply!)\n              .div(state.sushiStaked!);\n    const xSushiTotal = disabled ? undefined : formatBalance(state.xSushiSupply!, state.xSushi!.decimals);\n    const xSushiBalance = disabled ? undefined : state.xSushi!.balance.add(xSushiAmount!);\n    const share = disabled\n        ? undefined\n        : Fraction.from(xSushiAmount!.add(xSushiBalance!), state.xSushiSupply!).toString();\n    return (\n        <InfoBox>\n            <Text disabled={disabled} style={{ fontSize: 28, marginBottom: Spacing.normal }}>\n                {!xSushiAmount ? \"N/A\" : formatBalance(xSushiAmount, state.xSushi!.decimals, 8) + \" xSUSHI\"}\n            </Text>\n            <Meta label={\"xSUSHI Share\"} text={share} suffix={\"%\"} disabled={disabled} />\n            <Meta label={\"Total xSUSHI\"} text={xSushiTotal} disabled={disabled} />\n            <Controls state={state} />\n        </InfoBox>\n    );\n};\n\nconst Controls = ({ state }: { state: StakingState }) => {\n    const [error, setError] = useState<MetamaskError>({});\n    return (\n        <View style={{ marginTop: Spacing.normal }}>\n            {!state.sushi || state.sushi.balance.isZero() || isEmptyValue(state.amount) ? (\n                <StakeButton state={state} onError={setError} disabled={true} />\n            ) : parseBalance(state.amount, state.sushi.decimals).gt(state.sushi.balance) ? (\n                <InsufficientBalanceButton symbol={state.sushi.symbol} />\n            ) : state.loading ? (\n                <FetchingButton />\n            ) : (\n                <>\n                    <ApproveButton\n                        token={state.sushi}\n                        spender={SUSHI_BAR}\n                        onSuccess={() => state.setSushiAllowed(true)}\n                        onError={setError}\n                        hidden={state.sushiAllowed}\n                    />\n                    <StakeButton state={state} onError={setError} disabled={!state.sushiAllowed} />\n                </>\n            )}\n            {error.message && error.code !== 4001 && <ErrorMessage error={error} />}\n        </View>\n    );\n};\n\nconst StakeButton = ({\n    state,\n    onError,\n    disabled\n}: {\n    state: StakingState;\n    onError: (e) => void;\n    disabled: boolean;\n}) => {\n    const onPress = async () => {\n        onError({});\n        try {\n            await state.onEnter();\n            state.setAmount(\"\");\n        } catch (e) {\n            onError(e);\n        }\n    };\n    return <Button title={\"Stake\"} loading={state.entering} onPress={onPress} disabled={disabled} />;\n};\n\nexport default StakeScreen;\n"],"sourceRoot":""}