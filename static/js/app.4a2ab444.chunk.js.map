{"version":3,"sources":["src/components/FlexView.tsx","src/constants/tokens.ts","src/hooks/useEthereum.tsx","src/constants/dimension.ts","src/utils/index.ts","src/components/Button.tsx","src/hooks/useAllCommonPairs.tsx","src/hooks/useSDK.tsx","src/components/Container.tsx","src/components/Content.tsx","src/components/app/AppHeader.tsx","src/components/web/ConnectToWallet.tsx","src/screens/Screen.tsx","src/components/Title.tsx","src/components/web/WebSubMenu.tsx","src/utils/fetch-utils.ts","src/constants/Fraction.ts","src/constants/colors.ts","src/hooks/useColors.tsx","src/constants/contracts.ts","src/context/index.tsx","src/components/DarkModeSwitch.tsx","src/components/web/MobileWebMenu.tsx","src/components/web/WebHeader.tsx","src/screens/EmptyScreen.tsx","src/screens/index.tsx","App.tsx","web-build/register-service-worker.js","globals.js","src/utils/analytics-utils.ts","src/context/GlobalContext.tsx","src/components/Text.tsx","assets/metamask-dark.png","assets/metamask.png","assets/sushiswap.jpg","src/context/EthersContext.tsx"],"names":["FlexView","props","flexDirection","direction","style","ETH","name","address","ethers","constants","AddressZero","decimals","symbol","logoURI","balance","BigNumber","from","ethereum","window","addEventListener","useEthereum","SCREEN_WIDTH","Math","round","Dimensions","get","width","SCREEN_HEIGHT","height","HEADER_HEIGHT","HEADER_WIDTH","DESKTOP_CONTENT_WIDTH","SUB_MENU_HEIGHT","IS_DESKTOP","Spacing","tiny","small","normal","large","huge","CONTRACTS","ERC20","IUniswapV2Factory","IUniswapV2Pair","IUniswapV2Router02","IWETH","MasterChef","Migrator2","SushiBar","OrderBook","Settlement","LPTokenScanner","abi","formatBalance","value","maxFraction","formatted","utils","formatUnits","split","length","substr","parseBalance","parseUnits","isEmptyValue","text","isBigNumber","isZero","replace","convertToken","token","WETH","SDKToken","ChainId","MAINNET","convertAmount","amount","TokenAmount","toString","parseCurrencyAmount","toExact","getContract","signer","contract","ContractFactory","pow10","exp","pow","Button","useColors","primary","textMedium","placeholder","backgroundLight","type","size","fontSize","fontFamily","fontWeight","disabled","loading","onPress","undefined","loadingProps","color","buttonStyle","paddingHorizontal","backgroundColor","titleStyle","disabledTitleStyle","disabledStyle","DAI","Token","USDC","USDT","SUSHI","YAM","AMPL","BASES_TO_CHECK_TRADES_AGAINST","CUSTOM_BASES","wrappedCurrency","currency","ETHER","useAllCommonPairs","loadAllCommonPairs","useCallback","currencyA","currencyB","provider","a","async","bases","tokenA","tokenB","basePairs","flatMap","base","map","otherBase","filter","t0","t1","allPairCombinations","tokens","Boolean","b","customBases","customBasesA","customBasesB","find","equals","Promise","all","pair","Fetcher","fetchPairData","pairs","minAmount","percent","sub","mul","numerator","div","denominator","Order","maker","fromToken","toToken","amountIn","amountOutMin","recipient","deadline","floor","Date","now","v","r","s","filledAmountIn","canceled","this","eq","toNumber","SETTLEMENT","settlement","getAddress","hashOfOrder","hash","signMessage","arrayify","signature","splitSignature","sign","useSDK","getTotalSupply","useContext","EthersContext","allowedSlippage","Percent","getTrade","fromAmount","isETH","to","CurrencyAmount","ether","Trade","bestTradeExactIn","maxHops","maxNumResults","swap","trade","Router","feeOnTransfer","ttl","params","swapCallParameters","router","ROUTER","estimateGas","methodName","args","gasLimit","functions","tx","logTransaction","arg","createOrder","kovanSigner","order","toArgs","orderBook","ORDER_BOOK","cancelOrder","slice","queryOrderFilledEvents","filters","OrderFilled","queryFilter","wrapETH","weth","deposit","unwrapETH","withdraw","getPair","addLiquidity","toAmount","getTime","removeLiquidityETH","liquidity","amountETH","removeLiquidity","addLiquidityETH","getExpectedSushiRewardPerBlock","masterChef","MASTER_CHEF","totalAllocPoint","sushiPerBlock","poolInfo","id","allocPoint","lpTokenId","enterSushiBar","sushiBar","SUSHI_BAR","enter","leaveSushiBar","leave","migrate","lpToken","migrator2","MIGRATOR2","Zero","calculateSwapFee","calculateLimitOrderFee","calculateLimitOrderReturn","price","limitOrderFeeDeducted","swapFeeDeducted","Fraction","parse","apply","calculateAmountOfLPTokenMinted","liquidityToken","totalSupply","getLiquidityMinted","Container","Platform","select","web","contentContainerStyle","flex","default","Content","marginLeft","marginRight","paddingVertical","AppHeader","background","View","StatusBar","translucent","ConnectWallet","darkMode","GlobalContext","request","method","Linking","metaMask","isMetaMask","source","require","alignItems","justifyContent","Image","title","containerStyle","marginTop","marginHorizontal","WebScreen","chainId","Text","light","textAlign","position","top","right","bottom","left","ConnectToWallet","AppScreen","Screen","Title","marginBottom","SwapSubMenu","WebSubMenu","items","path","LiquiditySubMenu","StakingSubMenu","borderDark","submenu","borderBottomWidth","borderColor","alignSelf","item","MenuItem","key","accent","textLight","match","useRouteMatch","active","isExact","paddingTop","paddingBottom","textDecoration","fetchTokens","customTokens","fetch","response","json","fetchTokenBalances","balances","getBalance","i","sort","t2","fetchPools","pools","pool","poolToken","balanceOf","totalDeposited","userInfo","amountDeposited","pendingSushi","fetchMyLPTokens","fetchLPTokens","SUSHISWAP_FACTORY","fetchMyUniswapLPTokens","UNISWAP_FACTORY","factory","factoryContract","allPairsLength","scanner","LP_TOKEN_SCANNER","account","pages","push","page","findPairs","min","flat","index","erc20","Number","findOrFetchToken","token0","token1","t","toLowerCase","send","meta","logo","addresses","fetchMyLimitOrders","canceledHashes","numberOfHashesOfMaker","hashesOfMaker","hashes","HashZero","orderOfHash","filledAmountInOfHash","includes","myOrders","compareOrders","o0","o1","status","compared","fetchMyCanceledLimitOrderHashes","numberOfCanceledHashesOfMaker","allCanceledHashes","sdk","numeratorToken","denominatorToken","NAN","ZERO","BASE","isNaN","fraction","gt","lt","maxFractions","str","endsWith","substring","One","Colors","common","white","transparent","secondary","green","red","twitter","facebook","header","border","textDark","shadow","overlay","dark","ContextProvider","children","DarkModeSwitch","setDarkMode","onChange","transform","scale","CloseButton","MobileWebMenuItem","startsWith","Status","ensName","connected","borderRadius","MobileWebMenu","expanded","onCollapse","animationType","visible","TouchableWithoutFeedback","paddingRight","Menu","padding","MenuIcon","onExpand","borderWidth","WebHeader","zIndex","onExpandMenu","EmptyScreen","FarmingScreen","lazy","LiquidityScreen","MigrateScreen","MyLimitOrdersScreen","RemoveLiquidityScreen","StakeScreen","UnstakeScreen","SwapScreen","Screens","load","useAsyncEffect","OS","WebScreens","useState","menuExpanded","setMenuExpanded","fallback","Tab","createBottomTabNavigator","AppScreens","theme","DefaultTheme","colors","card","notification","NavigationContainer","Navigator","tabBarOptions","activeTintColor","inactiveTintColor","labelStyle","component","options","tabOptions","iconName","tabBarIcon","App","useFonts","OpenSans_300Light","regular","OpenSans_400Regular","bold","OpenSans_600SemiBold","AppLoading","navigator","serviceWorker","register","scope","then","info","catch","error","console","global","Buffer","Analytics","gasPrice","React","createContext","clear","_darkMode","mnemonic","setMnemonic","_mnemonic","GlobalContextProvider","colorScheme","useColorScheme","Provider","AsyncStorage","getItem","mode","mne","removeItem","setItem","String","GlobalContextConsumer","Consumer","medium","note","h1Style","h2Style","h3Style","h4Style","caption","module","exports","kovanProvider","addOnBlockListener","_name","_listener","removeOnBlockListener","updateTokens","loadingTokens","addCustomToken","_token","removeCustomToken","approveToken","_spender","_amount","getTokenAllowance","getTokenBalance","_who","EthersContextProvider","setProvider","setKovanProvider","setSigner","setKovanSigner","setChainId","setAddress","setENSName","onBlockListeners","setOnBlockListeners","setTokens","setCustomTokens","setLoadingTokens","useEffect","kovan","providers","AlchemyProvider","wallet","Wallet","web3","Web3Provider","alchemy","network","getSigner","onAccountsChanged","accounts","onChainChanged","on","off","lookupAddress","ens","data","findIndex","custom","JSON","stringify","spender","MaxUint256","approve","owner","who","listener","old","onBlock","block","Object","entries","EthersContextConsumer"],"mappings":"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","file":"static/js/app.4a2ab444.chunk.js","sourcesContent":["import React, { FunctionComponent } from \"react\";\nimport { View, ViewProps } from \"react-native\";\n\ninterface FlexViewProps extends ViewProps {\n    direction?: \"row\" | \"column\";\n}\n\nconst FlexView: FunctionComponent<FlexViewProps> = props => {\n    const flexDirection = props.direction || \"row\";\n    return <View {...props} style={[{ flexDirection }, props.style]} />;\n};\nexport default FlexView;\n","import { ethers } from \"ethers\";\nimport Token from \"../types/Token\";\n\nexport const ETH: Token = {\n    name: \"Ethereum\",\n    address: ethers.constants.AddressZero,\n    decimals: 18,\n    symbol: \"ETH\",\n    logoURI: \"https://lite.sushiswap.fi/images/tokens/ETH.png\",\n    balance: ethers.BigNumber.from(0)\n};\n","let ethereum = window.ethereum;\nif (window) {\n    window.addEventListener(\"load\", () => {\n        ethereum = window.ethereum;\n    });\n}\n\nconst useEthereum = () => {\n    return ethereum;\n};\n\nexport default useEthereum;\n","import { Dimensions } from \"react-native\";\n\nexport const SCREEN_WIDTH = Math.round(Dimensions.get(\"window\").width);\nexport const SCREEN_HEIGHT = Math.round(Dimensions.get(\"window\").height);\nexport const IS_HIGH_RESOLUTION = SCREEN_HEIGHT > 667;\nexport const HEADER_HEIGHT = 64;\nexport const HEADER_WIDTH = 980;\nexport const DESKTOP_CONTENT_WIDTH = 540;\nexport const SUB_MENU_HEIGHT = 40;\nexport const IS_DESKTOP = SCREEN_WIDTH > DESKTOP_CONTENT_WIDTH;\n\nexport const Spacing = IS_HIGH_RESOLUTION\n    ? {\n          tiny: 8,\n          small: 16,\n          normal: 32,\n          large: 48,\n          huge: 64\n      }\n    : {\n          tiny: 6,\n          small: 12,\n          normal: 24,\n          large: 32,\n          huge: 48\n      };\n","import ERC20 from \"@sushiswap/core/build/contracts/ERC20.json\";\nimport IUniswapV2Factory from \"@sushiswap/core/build/contracts/IUniswapV2Factory.json\";\nimport IUniswapV2Pair from \"@sushiswap/core/build/contracts/IUniswapV2Pair.json\";\nimport IUniswapV2Router02 from \"@sushiswap/core/build/contracts/IUniswapV2Router02.json\";\nimport IWETH from \"@sushiswap/core/build/contracts/IWETH.json\";\nimport MasterChef from \"@sushiswap/core/build/contracts/MasterChef.json\";\nimport Migrator2 from \"@sushiswap/core/build/contracts/Migrator2.json\";\nimport SushiBar from \"@sushiswap/core/build/contracts/SushiBar.json\";\nimport { ChainId, CurrencyAmount, Token as SDKToken, TokenAmount, WETH } from \"@sushiswap/sdk\";\nimport OrderBook from \"@sushiswap/settlement/deployments/kovan/OrderBook.json\";\nimport Settlement from \"@sushiswap/settlement/deployments/mainnet/Settlement.json\";\nimport { ethers } from \"ethers\";\nimport LPTokenScanner from \"../constants/abi/LPTokenScanner.json\";\nimport Token from \"../types/Token\";\n\nconst CONTRACTS = {\n    ERC20,\n    IUniswapV2Factory,\n    IUniswapV2Pair,\n    IUniswapV2Router02,\n    IWETH,\n    MasterChef,\n    Migrator2,\n    SushiBar,\n    OrderBook,\n    Settlement,\n    LPTokenScanner: { abi: LPTokenScanner }\n};\n\nexport const formatBalance = (value: ethers.BigNumberish, decimals = 18, maxFraction = 0) => {\n    const formatted = ethers.utils.formatUnits(value, decimals);\n    if (maxFraction > 0) {\n        const split = formatted.split(\".\");\n        if (split.length > 1) {\n            return split[0] + \".\" + split[1].substr(0, maxFraction);\n        }\n    }\n    return formatted;\n};\n\nexport const parseBalance = (value: string, decimals = 18) => {\n    return ethers.utils.parseUnits(value || \"0\", decimals);\n};\n\nexport const isEmptyValue = (text: string) =>\n    ethers.BigNumber.isBigNumber(text)\n        ? ethers.BigNumber.from(text).isZero()\n        : text === \"\" || text.replace(/0/g, \"\").replace(/\\./, \"\") === \"\";\n\nexport const convertToken = (token: Token) => {\n    return token.symbol === \"ETH\" ? WETH[\"1\"] : new SDKToken(ChainId.MAINNET, token.address, token.decimals);\n};\n\nexport const convertAmount = (token: Token, amount: string) => {\n    return new TokenAmount(convertToken(token), parseBalance(amount, token.decimals).toString());\n};\n\nexport const parseCurrencyAmount = (value: CurrencyAmount, decimals = 18) => {\n    return ethers.BigNumber.from(parseBalance(value.toExact(), decimals));\n};\n\nexport const getContract = (name: string, address: string, signer: ethers.Signer) => {\n    const contract = CONTRACTS[name];\n    return ethers.ContractFactory.getContract(address, contract.abi, signer);\n};\n\nexport const pow10 = (exp: ethers.BigNumberish) => {\n    return ethers.BigNumber.from(10).pow(exp);\n};\n\nexport const formatDate = (date: Date) => {\n    return date.toLocaleDateString(\"en-US\") + \" \" + date.toLocaleTimeString(\"en-US\");\n};\n","import React, { FC } from \"react\";\nimport { Button as NativeButton, ButtonProps as NativeButtonProps } from \"react-native-elements\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\n\nexport interface ButtonProps extends NativeButtonProps {\n    color?: string;\n    size?: \"small\" | \"normal\" | \"large\";\n    fontWeight?: \"light\" | \"regular\" | \"bold\";\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst Button: FC<ButtonProps> = props => {\n    const { primary, textMedium, placeholder, backgroundLight } = useColors();\n    const type = props.type || \"solid\";\n    const size = props.size || \"normal\";\n    const height = props.size === \"small\" ? 36 : size === \"normal\" ? 45 : 54;\n    const fontSize = props.size === \"small\" ? 13 : size === \"normal\" ? 15 : 18;\n    const fontFamily = props.fontWeight || \"regular\";\n    return (\n        <NativeButton\n            {...props}\n            disabled={props.loading || props.disabled}\n            onPress={props.loading ? undefined : props.onPress}\n            type={type}\n            loadingProps={{ color: textMedium }}\n            buttonStyle={[\n                {\n                    height,\n                    paddingHorizontal: Spacing.small,\n                    backgroundColor: \"transparent\"\n                },\n                props.buttonStyle\n            ]}\n            titleStyle={[\n                { fontSize, fontFamily, color: type === \"solid\" ? \"white\" : props.color || textMedium },\n                props.titleStyle\n            ]}\n            disabledTitleStyle={[{ fontSize, fontFamily, color: placeholder }, props.titleStyle]}\n            style={[{ backgroundColor: type === \"solid\" ? props.color || primary : \"transparent\" }, props.style]}\n            disabledStyle={[\n                { backgroundColor: type === \"solid\" ? backgroundLight : \"transparent\" },\n                props.disabledStyle\n            ]}\n        />\n    );\n};\nexport default Button;\n","import { useCallback } from \"react\";\n\nimport { ChainId, Currency, ETHER, Fetcher, Pair, Token, WETH } from \"@sushiswap/sdk\";\nimport { ethers } from \"ethers\";\n\nconst DAI = new Token(ChainId.MAINNET, \"0x6B175474E89094C44Da98b954EedeAC495271d0F\", 18, \"DAI\", \"Dai Stablecoin\");\nconst USDC = new Token(ChainId.MAINNET, \"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\", 6, \"USDC\", \"USD//C\");\nconst USDT = new Token(ChainId.MAINNET, \"0xdAC17F958D2ee523a2206206994597C13D831ec7\", 6, \"USDT\", \"Tether USD\");\nconst SUSHI = new Token(ChainId.MAINNET, \"0x6B3595068778DD592e39A122f4f5a5cF09C90fE2\", 18, \"SUSHI\", \"SushiToken\");\nconst YAM = new Token(ChainId.MAINNET, \"0x0e2298E3B3390e3b945a5456fBf59eCc3f55DA16\", 18, \"YAM\", \"YAM\");\nconst AMPL = new Token(ChainId.MAINNET, \"0xD46bA6D942050d489DBd938a2C909A5d5039A161\", 9, \"AMPL\", \"Ampleforth\");\n\nconst BASES_TO_CHECK_TRADES_AGAINST = [WETH[ChainId.MAINNET], DAI, USDC, USDT, SUSHI, YAM];\nconst CUSTOM_BASES = {\n    [AMPL.address]: [DAI, WETH[ChainId.MAINNET]]\n};\n\nfunction wrappedCurrency(currency: Currency | undefined): Token | undefined {\n    return currency === ETHER ? WETH[ChainId.MAINNET] : currency instanceof Token ? currency : undefined;\n}\n\n// Source: https://github.com/Uniswap/uniswap-interface/blob/master/src/hooks/Trades.ts\nconst useAllCommonPairs = () => {\n    const loadAllCommonPairs = useCallback(\n        // tslint:disable-next-line:max-func-body-length\n        async (currencyA?: Currency, currencyB?: Currency, provider?: ethers.providers.BaseProvider) => {\n            const bases: Token[] = BASES_TO_CHECK_TRADES_AGAINST;\n            const [tokenA, tokenB] = [wrappedCurrency(currencyA), wrappedCurrency(currencyB)];\n            const basePairs: [Token, Token][] = bases\n                .flatMap((base): [Token, Token][] => bases.map(otherBase => [base, otherBase]))\n                .filter(([t0, t1]) => t0.address !== t1.address);\n\n            const allPairCombinations =\n                tokenA && tokenB\n                    ? [\n                          // the direct pair\n                          [tokenA, tokenB],\n                          // token A against all bases\n                          ...bases.map((base): [Token, Token] => [tokenA, base]),\n                          // token B against all bases\n                          ...bases.map((base): [Token, Token] => [tokenB, base]),\n                          // each base against all bases\n                          ...basePairs\n                      ]\n                          .filter((tokens): tokens is [Token, Token] => Boolean(tokens[0] && tokens[1]))\n                          .filter(([t0, t1]) => t0.address !== t1.address)\n                          .filter(([a, b]) => {\n                              const customBases = CUSTOM_BASES;\n                              if (!customBases) return true;\n\n                              const customBasesA: Token[] | undefined = customBases[a.address];\n                              const customBasesB: Token[] | undefined = customBases[b.address];\n\n                              if (!customBasesA && !customBasesB) return true;\n\n                              if (customBasesA && !customBasesA.find(base => tokenB.equals(base))) return false;\n                              return !(customBasesB && !customBasesB.find(base => tokenA.equals(base)));\n                          })\n                    : [];\n\n            const pairs = await Promise.all(\n                allPairCombinations.map(async pair => {\n                    try {\n                        return await Fetcher.fetchPairData(pair[0], pair[1], provider);\n                    } catch (e) {\n                        return null;\n                    }\n                })\n            );\n            return pairs.filter(pair => pair !== null) as Pair[];\n        },\n        []\n    );\n\n    return { loadAllCommonPairs };\n};\n\nexport default useAllCommonPairs;\n","import { useCallback, useContext } from \"react\";\n\nimport { CurrencyAmount, Fetcher, Pair, Percent, Router, TokenAmount, Trade, WETH } from \"@sushiswap/sdk\";\nimport { ethers } from \"ethers\";\nimport { MASTER_CHEF, MIGRATOR2, ORDER_BOOK, ROUTER, SETTLEMENT, SUSHI_BAR } from \"../constants/contracts\";\nimport Fraction from \"../constants/Fraction\";\nimport { ETH } from \"../constants/tokens\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport LPToken from \"../types/LPToken\";\nimport Token from \"../types/Token\";\nimport { convertToken, getContract, pow10 } from \"../utils\";\nimport { logTransaction } from \"../utils/analytics-utils\";\nimport useAllCommonPairs from \"./useAllCommonPairs\";\n\n// tslint:disable-next-line:max-func-body-length\nconst useSDK = () => {\n    const { getTotalSupply } = useContext(EthersContext);\n    const { loadAllCommonPairs } = useAllCommonPairs();\n    const allowedSlippage = new Percent(\"50\", \"10000\"); // 0.05%\n    const ttl = 60 * 20;\n\n    const getTrade = useCallback(\n        async (\n            fromToken: Token,\n            toToken: Token,\n            fromAmount: ethers.BigNumber,\n            provider: ethers.providers.BaseProvider\n        ) => {\n            if (provider) {\n                const isETH = fromToken.symbol === \"ETH\";\n                const from = convertToken(fromToken);\n                const to = convertToken(toToken);\n                const pairs = await loadAllCommonPairs(from, to, provider);\n                const amount = isETH\n                    ? CurrencyAmount.ether(fromAmount.toString())\n                    : new TokenAmount(from, fromAmount.toString());\n                return Trade.bestTradeExactIn(pairs, amount, to, { maxHops: 3, maxNumResults: 1 })[0];\n            }\n        },\n        []\n    );\n\n    const swap = useCallback(async (trade: Trade, signer: ethers.Signer) => {\n        if (trade) {\n            const params = Router.swapCallParameters(trade, {\n                feeOnTransfer: false,\n                allowedSlippage,\n                recipient: await signer.getAddress(),\n                ttl\n            });\n            const router = getContract(\"IUniswapV2Router02\", ROUTER, signer);\n            const gasLimit = await router.estimateGas[params.methodName](...params.args, {\n                value: params.value\n            });\n            const tx = await router.functions[params.methodName](...params.args, {\n                value: params.value,\n                gasLimit: gasLimit.mul(120).div(100)\n            });\n            await logTransaction(\n                tx,\n                \"UniswapV2Router02.\" + params.methodName + \"()\",\n                ...params.args.map(arg => arg.toString())\n            );\n            return {\n                trade,\n                tx\n            };\n        }\n    }, []);\n\n    const createOrder = useCallback(\n        async (\n            fromToken: Token,\n            toToken: Token,\n            amountIn: ethers.BigNumber,\n            amountOutMin: ethers.BigNumber,\n            signer: ethers.Signer,\n            kovanSigner: ethers.Signer\n        ) => {\n            const order = new Order(signer, fromToken, toToken, amountIn, amountOutMin, await signer.getAddress());\n            const args = await order.toArgs();\n\n            const orderBook = getContract(\"OrderBook\", ORDER_BOOK, kovanSigner);\n            const gasLimit = await orderBook.estimateGas.createOrder(args);\n            const tx = await orderBook.createOrder(args, {\n                gasLimit: gasLimit.mul(120).div(100)\n            });\n            return await logTransaction(tx, \"OrderBook.createOrder()\", ...args.map(arg => arg.toString()));\n        },\n        []\n    );\n\n    const cancelOrder = useCallback(async (order: Order, signer: ethers.Signer) => {\n        const settlement = getContract(\"Settlement\", SETTLEMENT, signer);\n        const args = (await order.toArgs()).slice(0, 7);\n        const gasLimit = await settlement.estimateGas.cancelOrder(...args);\n        const tx = await settlement.cancelOrder(...args, {\n            gasLimit: gasLimit.mul(120).div(100)\n        });\n        return await logTransaction(tx, \"Settlement.cancelOrder()\", ...args.map(arg => arg.toString()));\n    }, []);\n\n    const queryOrderFilledEvents = useCallback(async (hash: string, signer: ethers.Signer) => {\n        const settlement = getContract(\"Settlement\", SETTLEMENT, signer);\n        const filter = settlement.filters.OrderFilled(hash);\n        return await settlement.queryFilter(filter);\n    }, []);\n\n    const wrapETH = useCallback(async (amount: ethers.BigNumber, signer: ethers.Signer) => {\n        const weth = getContract(\"IWETH\", WETH[1].address, signer);\n        const gasLimit = await weth.estimateGas.deposit({\n            value: amount\n        });\n        const tx = await weth.deposit({\n            value: amount,\n            gasLimit\n        });\n        return await logTransaction(tx, \"WETH.deposit()\");\n    }, []);\n\n    const unwrapETH = useCallback(async (amount: ethers.BigNumber, signer: ethers.Signer) => {\n        const weth = getContract(\"IWETH\", WETH[1].address, signer);\n        const gasLimit = await weth.estimateGas.withdraw(amount);\n        const tx = await weth.withdraw(amount, {\n            gasLimit\n        });\n        return await logTransaction(tx, \"WETH.withdraw()\");\n    }, []);\n\n    const getPair = useCallback(async (fromToken: Token, toToken: Token, provider: ethers.providers.BaseProvider) => {\n        const from = convertToken(fromToken);\n        const to = convertToken(toToken);\n        return await Fetcher.fetchPairData(from, to, provider);\n    }, []);\n\n    const addLiquidity = useCallback(\n        async (\n            fromToken: Token,\n            toToken: Token,\n            fromAmount: ethers.BigNumber,\n            toAmount: ethers.BigNumber,\n            signer: ethers.Signer\n        ) => {\n            const router = getContract(\"IUniswapV2Router02\", ROUTER, signer);\n            const deadline = `0x${(Math.floor(new Date().getTime() / 1000) + ttl).toString(16)}`;\n            const args = [\n                fromToken.address,\n                toToken.address,\n                fromAmount,\n                toAmount,\n                minAmount(fromAmount, allowedSlippage),\n                minAmount(toAmount, allowedSlippage),\n                await signer.getAddress(),\n                deadline\n            ];\n            const gasLimit = await router.estimateGas.addLiquidity(...args);\n            const tx = await router.functions.addLiquidity(...args, {\n                gasLimit: gasLimit.mul(120).div(100)\n            });\n            return logTransaction(tx, \"UniswapV2Router02.addLiquidity()\", ...args.map(arg => arg.toString()));\n        },\n        []\n    );\n\n    const removeLiquidityETH = useCallback(\n        async (\n            token: Token,\n            liquidity: ethers.BigNumber,\n            amount: ethers.BigNumber,\n            amountETH: ethers.BigNumber,\n            signer: ethers.Signer\n        ) => {\n            const router = getContract(\"IUniswapV2Router02\", ROUTER, signer);\n            const deadline = `0x${(Math.floor(new Date().getTime() / 1000) + ttl).toString(16)}`;\n            const args = [\n                token.address,\n                liquidity,\n                minAmount(amount, allowedSlippage),\n                minAmount(amountETH, allowedSlippage),\n                await signer.getAddress(),\n                deadline\n            ];\n            const gasLimit = await router.estimateGas.removeLiquidityETH(...args);\n            const tx = await router.functions.removeLiquidityETH(...args, {\n                gasLimit: gasLimit.mul(120).div(100)\n            });\n            return logTransaction(tx, \"UniswapV2Router02.removeLiquidityETH()\", ...args.map(arg => arg.toString()));\n        },\n        []\n    );\n\n    const removeLiquidity = useCallback(\n        async (\n            fromToken: Token,\n            toToken: Token,\n            liquidity: ethers.BigNumber,\n            fromAmount: ethers.BigNumber,\n            toAmount: ethers.BigNumber,\n            signer: ethers.Signer\n        ) => {\n            const router = getContract(\"IUniswapV2Router02\", ROUTER, signer);\n            const deadline = `0x${(Math.floor(new Date().getTime() / 1000) + ttl).toString(16)}`;\n            const args = [\n                fromToken.address,\n                toToken.address,\n                liquidity,\n                minAmount(fromAmount, allowedSlippage),\n                minAmount(toAmount, allowedSlippage),\n                await signer.getAddress(),\n                deadline\n            ];\n            const gasLimit = await router.estimateGas.removeLiquidity(...args);\n            const tx = await router.functions.removeLiquidity(...args, {\n                gasLimit: gasLimit.mul(120).div(100)\n            });\n            return logTransaction(tx, \"UniswapV2Router02.removeLiquidity()\", ...args.map(arg => arg.toString()));\n        },\n        []\n    );\n\n    const addLiquidityETH = useCallback(\n        async (token: Token, amount: ethers.BigNumber, amountETH: ethers.BigNumber, signer: ethers.Signer) => {\n            const router = getContract(\"IUniswapV2Router02\", ROUTER, signer);\n            const deadline = `0x${(Math.floor(new Date().getTime() / 1000) + ttl).toString(16)}`;\n            const args = [\n                token.address,\n                amount,\n                minAmount(amount, allowedSlippage),\n                minAmount(amountETH, allowedSlippage),\n                await signer.getAddress(),\n                deadline\n            ];\n            const gasLimit = await router.estimateGas.addLiquidityETH(...args, {\n                value: amountETH\n            });\n            const tx = await router.functions.addLiquidityETH(...args, {\n                gasLimit: gasLimit.mul(120).div(100),\n                value: amountETH\n            });\n            return logTransaction(tx, \"UniswapV2Router02.addLiquidityETH()\", ...args.map(arg => arg.toString()));\n        },\n        []\n    );\n\n    const getExpectedSushiRewardPerBlock = useCallback(async (token: LPToken, signer: ethers.Signer) => {\n        const masterChef = getContract(\"MasterChef\", MASTER_CHEF, signer);\n        const totalAllocPoint = await masterChef.totalAllocPoint();\n        const sushiPerBlock = await masterChef.sushiPerBlock();\n        const { allocPoint } = await masterChef.poolInfo(token.id);\n        return ethers.BigNumber.from(sushiPerBlock)\n            .mul(allocPoint)\n            .div(totalAllocPoint);\n    }, []);\n\n    const deposit = useCallback(async (lpTokenId: number, amount: ethers.BigNumber, signer: ethers.Signer) => {\n        const masterChef = getContract(\"MasterChef\", MASTER_CHEF, signer);\n        const gasLimit = await masterChef.estimateGas.deposit(lpTokenId, amount);\n        const tx = await masterChef.deposit(lpTokenId, amount, {\n            gasLimit: gasLimit.mul(120).div(100)\n        });\n        return logTransaction(tx, \"MasterChef.deposit()\", lpTokenId, amount.toString());\n    }, []);\n\n    const withdraw = useCallback(async (lpTokenId: number, amount: ethers.BigNumber, signer: ethers.Signer) => {\n        const masterChef = getContract(\"MasterChef\", MASTER_CHEF, signer);\n        const gasLimit = await masterChef.estimateGas.withdraw(lpTokenId, amount);\n        const tx = await masterChef.withdraw(lpTokenId, amount, {\n            gasLimit: gasLimit.mul(120).div(100)\n        });\n        return logTransaction(tx, \"MasterChef.withdraw()\", lpTokenId, amount.toString());\n    }, []);\n\n    const enterSushiBar = useCallback(async (amount: ethers.BigNumber, signer: ethers.Signer) => {\n        const sushiBar = getContract(\"SushiBar\", SUSHI_BAR, signer);\n        const gasLimit = await sushiBar.estimateGas.enter(amount);\n        const tx = await sushiBar.enter(amount, {\n            gasLimit: gasLimit.mul(120).div(100)\n        });\n        return logTransaction(tx, \"SushiBar.enter()\", amount.toString());\n    }, []);\n\n    const leaveSushiBar = useCallback(async (amount: ethers.BigNumber, signer: ethers.Signer) => {\n        const sushiBar = getContract(\"SushiBar\", SUSHI_BAR, signer);\n        const gasLimit = await sushiBar.estimateGas.leave(amount);\n        const tx = await sushiBar.leave(amount, {\n            gasLimit: gasLimit.mul(120).div(100)\n        });\n        return logTransaction(tx, \"SushiBar.leave()\", amount.toString());\n    }, []);\n\n    const migrate = useCallback(async (lpToken: LPToken, amount: ethers.BigNumber, signer: ethers.Signer) => {\n        const migrator2 = getContract(\"Migrator2\", MIGRATOR2, signer);\n        const deadline = `0x${(Math.floor(new Date().getTime() / 1000) + ttl).toString(16)}`;\n        const args = [\n            lpToken.tokenA.address,\n            lpToken.tokenB.address,\n            amount,\n            ethers.constants.Zero,\n            ethers.constants.Zero,\n            deadline\n        ];\n        const gasLimit = await migrator2.estimateGas.migrate(...args);\n        const tx = await migrator2.migrate(...args, {\n            gasLimit: gasLimit.mul(120).div(100)\n        });\n        return logTransaction(tx, \"Migrator2.migrate()\", ...args.map(arg => arg.toString()));\n    }, []);\n\n    const calculateSwapFee = (fromAmount: ethers.BigNumber) => {\n        return fromAmount.mul(3).div(1000);\n    };\n\n    const calculateLimitOrderFee = (fromAmount: ethers.BigNumber) => {\n        return fromAmount.mul(2).div(1000);\n    };\n\n    const calculateLimitOrderReturn = (\n        fromToken: Token,\n        toToken: Token,\n        fromAmount: ethers.BigNumber,\n        price: string\n    ) => {\n        const limitOrderFeeDeducted = fromAmount.sub(calculateLimitOrderFee(fromAmount));\n        const swapFeeDeducted = limitOrderFeeDeducted.sub(calculateSwapFee(limitOrderFeeDeducted));\n        return Fraction.parse(price).apply(swapFeeDeducted.mul(pow10(toToken.decimals)).div(pow10(fromToken.decimals)));\n    };\n\n    const calculateAmountOfLPTokenMinted = async (pair: Pair, fromAmount: TokenAmount, toAmount: TokenAmount) => {\n        const totalSupply = await getTotalSupply(pair.liquidityToken.address);\n        if (totalSupply) {\n            return pair.getLiquidityMinted(\n                new TokenAmount(pair.liquidityToken, totalSupply.toString()),\n                fromAmount,\n                toAmount\n            );\n        }\n    };\n\n    return {\n        allowedSlippage,\n        getTrade,\n        swap,\n        createOrder,\n        cancelOrder,\n        queryOrderFilledEvents,\n        wrapETH,\n        unwrapETH,\n        getPair,\n        addLiquidity,\n        addLiquidityETH,\n        removeLiquidity,\n        removeLiquidityETH,\n        getExpectedSushiRewardPerBlock,\n        deposit,\n        withdraw,\n        enterSushiBar,\n        leaveSushiBar,\n        migrate,\n        calculateSwapFee,\n        calculateLimitOrderFee,\n        calculateLimitOrderReturn,\n        calculateAmountOfLPTokenMinted\n    };\n};\n\nconst minAmount = (amount: ethers.BigNumber, percent: Percent) => {\n    return amount.sub(amount.mul(percent.numerator.toString()).div(percent.denominator.toString()));\n};\n\nexport type OrderStatus = \"Open\" | \"Expired\" | \"Filled\" | \"Canceled\";\n\nexport class Order {\n    maker: ethers.Signer;\n    fromToken: Token;\n    toToken: Token;\n    amountIn: ethers.BigNumber;\n    amountOutMin: ethers.BigNumber;\n    recipient: string;\n    deadline: ethers.BigNumber;\n    v?: number;\n    r?: string;\n    s?: string;\n    filledAmountIn?: ethers.BigNumber;\n    canceled?: boolean;\n\n    constructor(\n        maker: ethers.Signer,\n        fromToken: Token,\n        toToken: Token,\n        amountIn: ethers.BigNumber,\n        amountOutMin: ethers.BigNumber,\n        recipient: string,\n        deadline = ethers.BigNumber.from(Math.floor(Date.now() / 1000 + 24 * 3600)),\n        v?: number,\n        r?: string,\n        s?: string,\n        filledAmountIn?: ethers.BigNumber,\n        canceled?: boolean\n    ) {\n        this.maker = maker;\n        this.fromToken = fromToken;\n        this.toToken = toToken;\n        this.amountIn = amountIn;\n        this.amountOutMin = amountOutMin;\n        this.recipient = recipient;\n        this.deadline = deadline;\n        this.v = v;\n        this.r = r;\n        this.s = s;\n        this.filledAmountIn = filledAmountIn;\n        this.canceled = canceled;\n    }\n\n    status(): OrderStatus {\n        return this.canceled\n            ? \"Canceled\"\n            : this.filledAmountIn?.eq(this.amountIn)\n            ? \"Filled\"\n            : this.deadline.toNumber() * 1000 < Date.now()\n            ? \"Expired\"\n            : \"Open\";\n    }\n\n    async hash() {\n        const settlement = await getContract(\"Settlement\", SETTLEMENT, this.maker);\n        return await settlement.hashOfOrder(\n            await this.maker.getAddress(),\n            this.fromToken.address,\n            this.toToken.address,\n            this.amountIn,\n            this.amountOutMin,\n            this.recipient,\n            this.deadline\n        );\n    }\n\n    async sign() {\n        const hash = await this.hash();\n        const signature = await this.maker.signMessage(ethers.utils.arrayify(hash));\n        return ethers.utils.splitSignature(signature);\n    }\n\n    async toArgs() {\n        const { v, r, s } = this.v && this.r && this.s ? { v: this.v, r: this.r, s: this.s } : await this.sign();\n        return [\n            await this.maker.getAddress(),\n            this.fromToken.address,\n            this.toToken.address,\n            this.amountIn,\n            this.amountOutMin,\n            this.recipient,\n            this.deadline,\n            v,\n            r,\n            s\n        ];\n    }\n}\n\nexport default useSDK;\n","import React, { FC } from \"react\";\nimport { Platform, SafeAreaView, ScrollView, ViewProps } from \"react-native\";\n\nexport type ContainerProps = ViewProps;\n\nconst Container: FC<ContainerProps> = props => {\n    return Platform.select({\n        web: (\n            <ScrollView\n                contentContainerStyle={{ flex: 1 }}\n                style={[\n                    {\n                        flex: 1\n                    },\n                    props.style\n                ]}\n                {...props}\n            />\n        ),\n        default: (\n            <SafeAreaView style={{ flex: 1 }}>\n                <ScrollView {...props} />\n            </SafeAreaView>\n        )\n    });\n};\n\nexport default Container;\n","import React from \"react\";\nimport { View, ViewProps } from \"react-native\";\n\nimport { DESKTOP_CONTENT_WIDTH, IS_DESKTOP, Spacing } from \"../constants/dimension\";\n\nconst Content: React.FunctionComponent<ViewProps> = props => {\n    return (\n        <View\n            {...props}\n            style={[\n                {\n                    width: IS_DESKTOP ? DESKTOP_CONTENT_WIDTH : \"100%\",\n                    marginLeft: \"auto\",\n                    marginRight: \"auto\",\n                    paddingHorizontal: Spacing.normal,\n                    paddingVertical: Spacing.huge\n                },\n                props.style\n            ]}\n        />\n    );\n};\nexport default Content;\n","import React from \"react\";\nimport { View } from \"react-native\";\n\nimport { StatusBar } from \"expo-status-bar\";\n\nimport { HEADER_HEIGHT } from \"../../constants/dimension\";\nimport useColors from \"../../hooks/useColors\";\n\nconst AppHeader = () => {\n    const { background } = useColors();\n    return (\n        <View\n            style={{\n                width: \"100%\",\n                height: HEADER_HEIGHT,\n                backgroundColor: background\n            }}>\n            <StatusBar translucent={false} backgroundColor={background} />\n        </View>\n    );\n};\n\nexport default AppHeader;\n","import React, { useCallback, useContext } from \"react\";\nimport { Image, View } from \"react-native\";\n\nimport * as Linking from \"expo-linking\";\n\nimport { IS_DESKTOP, Spacing } from \"../../constants/dimension\";\nimport { GlobalContext } from \"../../context/GlobalContext\";\nimport useColors from \"../../hooks/useColors\";\nimport useEthereum from \"../../hooks/useEthereum\";\nimport Button from \"../Button\";\n\nconst ConnectWallet = () => {\n    const { primary } = useColors();\n    const { darkMode } = useContext(GlobalContext);\n    const ethereum = useEthereum();\n    const onPress = useCallback(async () => {\n        if (ethereum) {\n            await ethereum.request({ method: \"eth_requestAccounts\" });\n        } else {\n            await Linking.openURL(\"https://metamask.io/\");\n        }\n    }, [ethereum]);\n    const metaMask = ethereum?.isMetaMask || false;\n    const source = metaMask\n        ? darkMode\n            ? require(\"../../../assets/metamask-dark.png\")\n            : require(\"../../../assets/metamask.png\")\n        : require(\"../../../assets/sushiswap.jpg\");\n    return (\n        <View style={{ flex: 1, alignItems: \"center\", justifyContent: \"center\" }}>\n            <Image source={source} style={{ width: metaMask ? 223 : 200, height: metaMask ? 183 : 200 }} />\n            <Button\n                size={\"large\"}\n                color={metaMask ? \"#e2761b\" : primary}\n                onPress={onPress}\n                title={ethereum ? \"Connect\" : \"Install MetaMask\"}\n                containerStyle={{ width: IS_DESKTOP ? 440 : \"100%\" }}\n                style={{ marginTop: Spacing.large, marginHorizontal: Spacing.normal }}\n            />\n        </View>\n    );\n};\nexport default ConnectWallet;\n","import React, { useContext } from \"react\";\nimport { Platform, View } from \"react-native\";\n\nimport AppHeader from \"../components/app/AppHeader\";\nimport Text from \"../components/Text\";\nimport ConnectToWallet from \"../components/web/ConnectToWallet\";\nimport { HEADER_HEIGHT } from \"../constants/dimension\";\nimport { EthersContext } from \"../context/EthersContext\";\n\nconst Screen = props => {\n    return Platform.select({\n        web: <WebScreen {...props} />,\n        default: <AppScreen {...props} />\n    });\n};\n\nconst WebScreen = props => {\n    const { address, chainId } = useContext(EthersContext);\n    if (!address) return <ConnectToWallet />;\n    if (chainId !== 1)\n        return (\n            <View style={{ flex: 1, alignItems: \"center\", justifyContent: \"center\" }}>\n                <Text light={true} style={{ textAlign: \"center\" }}>\n                    {\"Please switch network to\\n'Ethereum Mainnet'\"}\n                </Text>\n            </View>\n        );\n    return (\n        <View\n            {...props}\n            style={[{ position: \"absolute\", top: HEADER_HEIGHT, right: 0, bottom: 0, left: 0 }, props.style]}\n        />\n    );\n};\n\nconst AppScreen = props => (\n    <View style={{ width: \"100%\", height: \"100%\" }}>\n        <AppHeader />\n        <View {...props} style={[{ flex: 1 }, props.style]} />\n    </View>\n);\n\nexport default Screen;\n","import React, { FC } from \"react\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport Text from \"./Text\";\n\ninterface TitleProps {\n    text: string;\n}\n\nconst Title: FC<TitleProps> = props => {\n    return (\n        <Text fontWeight={\"bold\"} style={{ marginBottom: Spacing.tiny, fontSize: 40 }}>\n            {props.text}\n        </Text>\n    );\n};\n\nexport default Title;\n","import React, { FC } from \"react\";\nimport { View } from \"react-native\";\nimport { Link, useRouteMatch } from \"react-router-dom\";\n\nimport { HEADER_WIDTH, IS_DESKTOP, Spacing, SUB_MENU_HEIGHT } from \"../../constants/dimension\";\nimport useColors from \"../../hooks/useColors\";\nimport FlexView from \"../FlexView\";\nimport Text from \"../Text\";\n\nexport interface WebSubMenuItem {\n    title: string;\n    path: string;\n}\n\nexport interface WebSubMenuProps {\n    items: WebSubMenuItem[];\n}\n\nexport const SwapSubMenu = () => (\n    <WebSubMenu\n        items={[\n            {\n                title: \"New Order\",\n                path: \"/swap\"\n            },\n            {\n                title: \"My Orders\",\n                path: \"/swap/my-orders\"\n            }\n        ]}\n    />\n);\n\nexport const LiquiditySubMenu = () => (\n    <WebSubMenu\n        items={[\n            {\n                title: \"Add Liquidity\",\n                path: \"/liquidity\"\n            },\n            {\n                title: \"Remove Liquidity\",\n                path: \"/liquidity/remove\"\n            },\n            {\n                title: \"Migrate Liquidity\",\n                path: \"/liquidity/migrate\"\n            }\n        ]}\n    />\n);\n\nexport const StakingSubMenu = () => (\n    <WebSubMenu\n        items={[\n            {\n                title: \"Stake\",\n                path: \"/staking\"\n            },\n            {\n                title: \"Unstake\",\n                path: \"/staking/unstake\"\n            }\n        ]}\n    />\n);\n\nconst WebSubMenu: FC<WebSubMenuProps> = props => {\n    const { borderDark, submenu } = useColors();\n    return (\n        <View\n            style={{\n                height: SUB_MENU_HEIGHT,\n                width: \"100%\",\n                borderBottomWidth: 1,\n                borderColor: borderDark + \"40\",\n                backgroundColor: submenu\n            }}>\n            <FlexView\n                style={{\n                    width: IS_DESKTOP ? HEADER_WIDTH : \"100%\",\n                    marginTop: 2,\n                    paddingHorizontal: Spacing.normal,\n                    alignSelf: \"center\",\n                    justifyContent: \"flex-end\",\n                    alignItems: \"center\"\n                }}>\n                {props.items.map(item => (\n                    <MenuItem key={item.path} {...item} />\n                ))}\n            </FlexView>\n        </View>\n    );\n};\n\nconst MenuItem = ({ title, path }) => {\n    const { accent, textLight } = useColors();\n    const match = useRouteMatch(path);\n    const active = match?.isExact;\n    return (\n        <Link\n            to={path}\n            style={{\n                marginLeft: Spacing.small,\n                paddingTop: Spacing.tiny,\n                paddingBottom: Spacing.tiny,\n                textDecoration: \"none\"\n            }}>\n            <Text\n                fontWeight={active ? \"regular\" : \"light\"}\n                style={{\n                    fontSize: 13,\n                    color: active ? accent : textLight\n                }}>\n                {title}\n            </Text>\n        </Link>\n    );\n};\n\nexport default WebSubMenu;\n","import { FACTORY_ADDRESS as SUSHISWAP_FACTORY } from \"@sushiswap/sdk\";\nimport { FACTORY_ADDRESS as UNISWAP_FACTORY } from \"@uniswap/sdk\";\nimport { ethers } from \"ethers\";\nimport { LP_TOKEN_SCANNER, MASTER_CHEF, ORDER_BOOK, SETTLEMENT } from \"../constants/contracts\";\nimport { ETH } from \"../constants/tokens\";\nimport { Order, OrderStatus } from \"../hooks/useSDK\";\nimport LPToken from \"../types/LPToken\";\nimport Token from \"../types/Token\";\nimport { getContract } from \"./index\";\n\nexport const fetchTokens = async (\n    address: string,\n    provider: ethers.providers.BaseProvider,\n    signer: ethers.Signer,\n    customTokens?: Token[]\n) => {\n    const response = await fetch(\"https://lite.sushiswap.fi/tokens.json\");\n    const json = await response.json();\n    const tokens = [...json.tokens, ...(customTokens || [])];\n\n    const balances = await fetchTokenBalances(\n        tokens.map(token => token.address),\n        signer\n    );\n    return [\n        {\n            ...ETH,\n            balance: await provider.getBalance(address)\n        },\n        ...tokens.map((token, i) => ({\n            ...token,\n            balance: ethers.BigNumber.from(balances[i] || 0)\n        }))\n    ].sort((t1, t2) => {\n        return t2.balance\n            .sub(t1.balance)\n            .div(ethers.BigNumber.from(10).pow(10))\n            .toNumber();\n    });\n};\n\nexport const fetchPools = async (provider: ethers.providers.JsonRpcProvider, signer: ethers.Signer) => {\n    const response = await fetch(\"https://lite.sushiswap.fi/pools.json\");\n    const pools = await response.json();\n    const address = await signer.getAddress();\n    const balances = await fetchTokenBalances(\n        pools.map(pool => pool.address),\n        signer\n    );\n    return (await Promise.all(\n        pools.map(async (pool, i) => {\n            const poolToken = getContract(\"ERC20\", pool.address, signer);\n            const totalDeposited = await poolToken.balanceOf(MASTER_CHEF);\n            const masterChef = getContract(\"MasterChef\", MASTER_CHEF, signer);\n            const { amount: amountDeposited } = await masterChef.userInfo(i, address);\n            const pendingSushi = await masterChef.pendingSushi(i, address);\n            return {\n                ...pool,\n                id: i,\n                symbol: pool.tokenA.symbol + \"-\" + pool.tokenB.symbol + \" LP\",\n                balance: ethers.BigNumber.from(balances[i] || 0),\n                totalDeposited,\n                amountDeposited,\n                pendingSushi\n            };\n        })\n    )) as LPToken[];\n};\n\nexport const fetchMyLPTokens = async (\n    tokens: Token[],\n    provider: ethers.providers.JsonRpcProvider,\n    signer: ethers.Signer\n) => {\n    return await fetchLPTokens(SUSHISWAP_FACTORY, tokens, provider, signer);\n};\n\nexport const fetchMyUniswapLPTokens = async (\n    tokens: Token[],\n    provider: ethers.providers.JsonRpcProvider,\n    signer: ethers.Signer\n) => {\n    return await fetchLPTokens(UNISWAP_FACTORY, tokens, provider, signer);\n};\n\nconst LP_TOKENS_LIMIT = 2000;\n\n// tslint:disable-next-line:max-func-body-length\nconst fetchLPTokens = async (\n    factory: string,\n    tokens: Token[],\n    provider: ethers.providers.JsonRpcProvider,\n    signer: ethers.Signer\n) => {\n    const factoryContract = getContract(\"IUniswapV2Factory\", factory, signer);\n    const length = await factoryContract.allPairsLength();\n    const scanner = getContract(\"LPTokenScanner\", LP_TOKEN_SCANNER, signer);\n    const account = await signer.getAddress();\n    const pages: number[] = [];\n    for (let i = 0; i < length; i += LP_TOKENS_LIMIT) pages.push(i);\n    const pairs = (\n        await Promise.all(\n            pages.map(page =>\n                scanner.findPairs(account, factory, page, Math.min(page + LP_TOKENS_LIMIT, length.toNumber()))\n            )\n        )\n    ).flat();\n    const balances = await fetchTokenBalances(\n        pairs.map(pair => pair.token),\n        signer\n    );\n    return await Promise.all(\n        pairs.map(async (pair, index) => {\n            const address = pair.token;\n            const balance = ethers.BigNumber.from(balances[index]);\n            const contract = getContract(\"IUniswapV2Pair\", address, signer);\n            const erc20 = getContract(\"ERC20\", address, signer);\n            const decimals = Number(await erc20.decimals());\n            const totalSupply = await erc20.totalSupply();\n            const tokenA = await findOrFetchToken(provider, await contract.token0(), tokens);\n            const tokenB = await findOrFetchToken(provider, await contract.token1(), tokens);\n            const name = tokenA.symbol + \"-\" + tokenB.symbol + \" LP Token\";\n            const symbol = tokenA.symbol + \"-\" + tokenB.symbol;\n            return { address, decimals, name, symbol, balance, totalSupply, tokenA, tokenB } as LPToken;\n        })\n    );\n};\n\nexport const findOrFetchToken = async (\n    provider: ethers.providers.JsonRpcProvider,\n    address: string,\n    tokens?: Token[]\n) => {\n    if (tokens) {\n        const token = tokens.find(t => t.address.toLowerCase() === address.toLowerCase());\n        if (token) {\n            return token;\n        }\n    }\n    const meta = await provider.send(\"alchemy_getTokenMetadata\", [address]);\n    return {\n        address,\n        name: meta.name,\n        symbol: meta.symbol,\n        decimals: meta.decimals,\n        logoURI: meta.logo,\n        balance: ethers.constants.Zero\n    } as Token;\n};\n\nconst fetchTokenBalances = async (addresses: string[], signer: ethers.Signer) => {\n    const account = await signer.getAddress();\n    return await Promise.all(\n        addresses.map(async address => {\n            const erc20 = getContract(\"ERC20\", address, signer);\n            return erc20.balanceOf(account);\n        })\n    );\n};\n\nconst LIMIT_ORDERS_LIMIT = 20;\n\nexport const fetchMyLimitOrders = async (\n    signer: ethers.Signer,\n    kovanSigner: ethers.Signer,\n    provider: ethers.providers.JsonRpcProvider,\n    tokens?: Token[],\n    canceledHashes?: string[]\n) => {\n    const orderBook = getContract(\"OrderBook\", ORDER_BOOK, kovanSigner);\n    const settlement = await getContract(\"Settlement\", SETTLEMENT, signer);\n    const maker = await signer.getAddress();\n    const length = await orderBook.numberOfHashesOfMaker(maker);\n    const pages: number[] = [];\n    for (let i = 0; i * LIMIT_ORDERS_LIMIT < length; i++) pages.push(i);\n    const hashes = (await Promise.all(pages.map(page => orderBook.hashesOfMaker(maker, page, LIMIT_ORDERS_LIMIT))))\n        .flat()\n        .filter(hash => hash !== ethers.constants.HashZero);\n    const myOrders = await Promise.all(\n        hashes.map(async hash => {\n            const args = await orderBook.orderOfHash(hash);\n            return new Order(\n                signer,\n                await findOrFetchToken(provider, args.fromToken, tokens),\n                await findOrFetchToken(provider, args.toToken, tokens),\n                args.amountIn,\n                args.amountOutMin,\n                args.recipient,\n                args.deadline,\n                args.v,\n                args.r,\n                args.s,\n                await settlement.filledAmountInOfHash(hash),\n                canceledHashes && canceledHashes.includes(hash)\n            );\n        })\n    );\n    return myOrders.sort(compareOrders) as Order[];\n};\n\nconst compareOrders = (o0, o1) => {\n    const status = (s: OrderStatus) => (s === \"Open\" ? 0 : s === \"Filled\" ? 1 : 2);\n    const compared = status(o0.status()) - status(o1.status());\n    return compared === 0 ? o1.deadline.toNumber() - o0.deadline.toNumber() : compared;\n};\n\nexport const fetchMyCanceledLimitOrderHashes = async (signer: ethers.Signer) => {\n    const settlement = await getContract(\"Settlement\", SETTLEMENT, signer);\n    const length = await settlement.numberOfCanceledHashesOfMaker(await signer.getAddress());\n    const pages: number[] = [];\n    for (let i = 0; i * LIMIT_ORDERS_LIMIT < length; i++) pages.push(i);\n    return (await Promise.all(pages.map(page => settlement.allCanceledHashes(page, LIMIT_ORDERS_LIMIT))))\n        .flat()\n        .filter(hash => hash !== ethers.constants.HashZero);\n};\n","import { Fraction as SDKFraction } from \"@sushiswap/sdk\";\nimport { ethers } from \"ethers\";\nimport Token from \"../types/Token\";\nimport { formatBalance, isEmptyValue, parseBalance } from \"../utils\";\n\nclass Fraction {\n    static BASE = ethers.BigNumber.from(10).pow(18);\n    static NAN = new Fraction(ethers.constants.Zero, ethers.constants.Zero);\n    static ZERO = new Fraction(ethers.constants.Zero, ethers.constants.One);\n    static convert(sdk: SDKFraction) {\n        return new Fraction(\n            ethers.BigNumber.from(sdk.numerator.toString()),\n            ethers.BigNumber.from(sdk.denominator.toString())\n        );\n    }\n    static from(numerator: ethers.BigNumberish, denominator: ethers.BigNumberish) {\n        return new Fraction(ethers.BigNumber.from(numerator), ethers.BigNumber.from(denominator));\n    }\n    static fromTokens(\n        numerator: ethers.BigNumberish,\n        denominator: ethers.BigNumberish,\n        numeratorToken: Token,\n        denominatorToken: Token\n    ) {\n        return new Fraction(\n            ethers.BigNumber.from(numerator).mul(ethers.BigNumber.from(10).pow(denominatorToken.decimals)),\n            ethers.BigNumber.from(denominator).mul(ethers.BigNumber.from(10).pow(numeratorToken.decimals))\n        );\n    }\n    static parse(value: string) {\n        return value === \"\"\n            ? Fraction.NAN\n            : isEmptyValue(value)\n            ? Fraction.ZERO\n            : new Fraction(parseBalance(value, 18), Fraction.BASE);\n    }\n\n    numerator: ethers.BigNumber;\n    denominator: ethers.BigNumber;\n\n    private constructor(numerator: ethers.BigNumber, denominator: ethers.BigNumber) {\n        this.numerator = numerator;\n        this.denominator = denominator;\n    }\n\n    isZero() {\n        return !this.isNaN() && this.numerator.isZero();\n    }\n\n    isNaN() {\n        return this.denominator.isZero();\n    }\n\n    eq(fraction: Fraction) {\n        return this.numerator\n            .mul(fraction.denominator)\n            .div(fraction.numerator)\n            .eq(this.denominator);\n    }\n\n    gt(fraction: Fraction) {\n        return this.numerator\n            .mul(fraction.denominator)\n            .div(fraction.numerator)\n            .gt(this.denominator);\n    }\n\n    lt(fraction: Fraction) {\n        return this.numerator\n            .mul(fraction.denominator)\n            .div(fraction.numerator)\n            .lt(this.denominator);\n    }\n\n    toString(maxFractions = 8) {\n        if (this.isNaN()) return \"\";\n        if (this.isZero()) return \"0\";\n        let str = formatBalance(this.numerator.mul(Fraction.BASE).div(this.denominator), 18, maxFractions);\n        if (str.endsWith(\".0\")) str = str.substring(0, str.length - 2);\n        return str;\n    }\n\n    apply(value: ethers.BigNumberish) {\n        return this.denominator.isZero() ? ethers.constants.Zero : this.numerator.mul(value).div(this.denominator);\n    }\n}\n\nexport default Fraction;\n","export const Colors = {\n    common: {\n        white: \"#ffffff\",\n        transparent: \"#ffffff00\",\n        primary: \"#291C64\",\n        secondary: \"#9BECEE\",\n        green: \"#32CD32\",\n        red: \"#FF0000\",\n        twitter: \"#1da1f2\",\n        facebook: \"#3B5998\"\n    },\n    light: {\n        accent: \"#291C64\",\n        header: \"#ffffffb8\",\n        submenu: \"#ffffffb8\",\n        background: \"#f8f8f8\",\n        backgroundLight: \"#f0f0f0\",\n        border: \"#e5e5e5\",\n        borderDark: \"#cccccc\",\n        textDark: \"#1d1d1f\",\n        textMedium: \"#222222\",\n        textLight: \"#888888\",\n        disabled: \"#b4b4b4\",\n        shadow: \"#444444\",\n        placeholder: \"#b4b4b4\",\n        overlay: \"#ffffffc0\"\n    },\n    dark: {\n        accent: \"#9BECEE\",\n        header: \"#000000\",\n        submenu: \"#121212\",\n        background: \"#121212\",\n        backgroundLight: \"#1a1a1a\",\n        border: \"#ffffff33\",\n        borderDark: \"#666666\",\n        textDark: \"#d5d1cc\",\n        textMedium: \"#cccccc\",\n        textLight: \"#aaaaaa\",\n        disabled: \"#aaaaaa80\",\n        shadow: \"#03080c\",\n        placeholder: \"#666666\",\n        overlay: \"#000000c0\"\n    }\n};\n","import { useContext } from \"react\";\n\nimport { Colors } from \"../constants/colors\";\nimport { GlobalContext } from \"../context/GlobalContext\";\n\nconst useColors = () => {\n    const { darkMode } = useContext(GlobalContext);\n    return {\n        ...Colors[darkMode ? \"dark\" : \"light\"],\n        ...Colors.common\n    };\n};\n\nexport default useColors;\n","import OrderBook from \"@sushiswap/settlement/deployments/kovan/OrderBook.json\";\nimport Settlement from \"@sushiswap/settlement/deployments/mainnet/Settlement.json\";\n\n// export const UNISWAP_ROUTER = \"0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\";\nexport const SUSHISWAP_ROUTER = \"0xd9e1ce17f2641f24ae83637ab66a2cca9c378b9f\";\nexport const ROUTER = SUSHISWAP_ROUTER;\nexport const MASTER_CHEF = \"0xc2edad668740f1aa35e4d8f227fb8e17dca888cd\";\nexport const SUSHI_BAR = \"0x8798249c2e607446efb7ad49ec89dd1865ff4272\";\nexport const SUSHI_ROLL = \"0x94CfE11E6b57f6f84bBa2c6DfB0fAeA47C4741D6\";\nexport const LP_TOKEN_SCANNER = \"0xD132Ce8eA8865348Ac25E416d95ab1Ba84D216AF\";\nexport const MIGRATOR2 = \"0x60A02cD1e3443E8ab7825DccF8d7080Eb78BCA6F\";\nexport const ORDER_BOOK = OrderBook.address;\nexport const SETTLEMENT = Settlement.address;\n","import React from \"react\";\n\nimport { EthersContextConsumer, EthersContextProvider } from \"./EthersContext\";\nimport { GlobalContextConsumer, GlobalContextProvider } from \"./GlobalContext\";\n\nexport const ContextProvider = ({ children }) => {\n    return (\n        <GlobalContextProvider>\n            <EthersContextProvider>{children}</EthersContextProvider>\n        </GlobalContextProvider>\n    );\n};\n\nexport const ContextConsumer = ({ children }) => {\n    return (\n        <GlobalContextConsumer>\n            {globalContext => (\n                <EthersContextConsumer>\n                    {ethersContext =>\n                        children({\n                            ...globalContext,\n                            ...ethersContext\n                        })\n                    }\n                </EthersContextConsumer>\n            )}\n        </GlobalContextConsumer>\n    );\n};\n","import React, { useCallback, useContext } from \"react\";\nimport { View } from \"react-native\";\n\nimport Switch from \"expo-dark-mode-switch\";\n\nimport { GlobalContext } from \"../context/GlobalContext\";\n\nconst DarkModeSwitch = props => {\n    const { darkMode, setDarkMode } = useContext(GlobalContext);\n    const onChange = useCallback(\n        async dark => {\n            await setDarkMode(dark);\n        },\n        [setDarkMode]\n    );\n    return (\n        <View style={props.style}>\n            <Switch\n                value={darkMode}\n                onChange={onChange}\n                style={{\n                    transform: [\n                        {\n                            scale: 0.75\n                        }\n                    ]\n                }}\n            />\n        </View>\n    );\n};\n\nexport default DarkModeSwitch;\n","import React, { useContext } from \"react\";\nimport { TouchableWithoutFeedback, View } from \"react-native\";\nimport { Icon } from \"react-native-elements\";\nimport { Link, useRouteMatch } from \"react-router-dom\";\n\nimport Modal from \"modal-react-native-web\";\nimport { Spacing } from \"../../constants/dimension\";\nimport { EthersContext } from \"../../context/EthersContext\";\nimport useColors from \"../../hooks/useColors\";\nimport DarkModeSwitch from \"../DarkModeSwitch\";\nimport FlexView from \"../FlexView\";\nimport Text from \"../Text\";\n\nconst MobileWebMenu = ({ expanded, onCollapse }) => {\n    const { overlay } = useColors();\n    return (\n        <Modal animationType=\"slide\" transparent={true} visible={expanded}>\n            <TouchableWithoutFeedback style={{ height: \"100%\" }} onPress={onCollapse}>\n                <View\n                    style={{\n                        height: \"100%\",\n                        justifyContent: \"space-between\",\n                        alignItems: \"flex-end\",\n                        paddingRight: Spacing.normal,\n                        paddingBottom: Spacing.normal,\n                        backgroundColor: overlay\n                    }}>\n                    <FlexView style={{ marginTop: Spacing.small }}>\n                        <DarkModeSwitch style={{ marginTop: -2 }} />\n                        <CloseButton onPress={onCollapse} />\n                    </FlexView>\n                    <View style={{ alignItems: \"flex-end\" }}>\n                        <Status />\n                        <View style={{ height: Spacing.large }} />\n                        <MobileWebMenuItem title={\"Swap\"} path={\"/swap\"} />\n                        <MobileWebMenuItem title={\"Liquidity\"} path={\"/liquidity\"} />\n                        {/*<MobileWebMenuItem title={\"Farming\"} path={\"/farming\"} />*/}\n                        <MobileWebMenuItem title={\"Staking\"} path={\"/staking\"} />\n                    </View>\n                </View>\n            </TouchableWithoutFeedback>\n        </Modal>\n    );\n};\n\nconst CloseButton = ({ onPress }) => {\n    const { textDark } = useColors();\n    return <Icon type={\"material-community\"} name={\"close\"} color={textDark} size={32} onPress={onPress} />;\n};\n\nconst MobileWebMenuItem = ({ title, path }) => {\n    const { textDark, textLight } = useColors();\n    const match = useRouteMatch(path);\n    const active = match?.path?.startsWith(path);\n    return (\n        <Link to={path} style={{ textDecoration: \"none\", marginBottom: Spacing.tiny }}>\n            <Text\n                style={{\n                    fontFamily: \"regular\",\n                    fontSize: 24,\n                    color: active ? textDark : textLight\n                }}>\n                {title}\n            </Text>\n        </Link>\n    );\n};\n\nconst Status = () => {\n    const { textLight, green } = useColors();\n    const { chainId, address, ensName } = useContext(EthersContext);\n    const connected = chainId === 1 && address;\n    const title = connected\n        ? ensName || address!.substring(0, 6) + \"...\" + address!.substring(address!.length - 4, address!.length)\n        : \"Not connected\";\n    const color = connected ? green : textLight;\n    return (\n        <FlexView style={{ marginBottom: Spacing.tiny }}>\n            <View style={{ backgroundColor: color, width: 6, height: 6, borderRadius: 3, marginTop: 8 }} />\n            <Text style={{ fontSize: 18, color: textLight, marginLeft: 8 }}>{title}</Text>\n        </FlexView>\n    );\n};\n\nexport default MobileWebMenu;\n","import React, { FC, useContext } from \"react\";\nimport { View } from \"react-native\";\nimport { Icon } from \"react-native-elements\";\nimport { Link, useRouteMatch } from \"react-router-dom\";\n\nimport { HEADER_HEIGHT, HEADER_WIDTH, IS_DESKTOP, Spacing } from \"../../constants/dimension\";\nimport { EthersContext } from \"../../context/EthersContext\";\nimport { GlobalContext } from \"../../context/GlobalContext\";\nimport useColors from \"../../hooks/useColors\";\nimport DarkModeSwitch from \"../DarkModeSwitch\";\nimport FlexView from \"../FlexView\";\nimport Text from \"../Text\";\n\nexport interface WebHeaderProps {\n    onExpandMenu?: () => void;\n}\n\nconst WebHeader: FC<WebHeaderProps> = props => {\n    const { header } = useColors();\n    return (\n        <View\n            // @ts-ignore\n            style={{\n                position: \"fixed\",\n                top: 0,\n                zIndex: 100,\n                width: \"100%\",\n                height: HEADER_HEIGHT,\n                paddingBottom: Spacing.small,\n                backgroundColor: header\n            }}>\n            <FlexView\n                style={{\n                    flex: 1,\n                    width: IS_DESKTOP ? HEADER_WIDTH : \"100%\",\n                    alignSelf: \"center\",\n                    justifyContent: \"space-between\",\n                    alignItems: \"flex-end\",\n                    paddingTop: Spacing.small,\n                    paddingHorizontal: Spacing.normal\n                }}>\n                <Title />\n                {IS_DESKTOP ? <Menu /> : <MenuIcon onExpand={props.onExpandMenu} />}\n            </FlexView>\n        </View>\n    );\n};\n\nexport const Title = () => {\n    const { darkMode } = useContext(GlobalContext);\n    const { textDark, white } = useColors();\n    const color = darkMode ? white : textDark;\n    return (\n        <View style={{ alignSelf: \"center\", alignItems: \"center\" }}>\n            <Link to={\"/\"} style={{ textDecoration: \"none\" }}>\n                <Text style={{ fontSize: 28, color }}>SushiSwap</Text>\n            </Link>\n        </View>\n    );\n};\n\nconst Menu = () => {\n    return (\n        <FlexView\n            style={{\n                height: \"100%\",\n                alignItems: \"flex-end\"\n            }}>\n            <MenuItem title={\"Swap\"} path={\"/swap\"} />\n            <MenuItem title={\"Liquidity\"} path={\"/liquidity\"} />\n            {/*<MenuItem title={\"Farming\"} path={\"/farming\"} />*/}\n            <MenuItem title={\"Staking\"} path={\"/staking\"} />\n            <Status />\n            <DarkModeSwitch style={{ marginLeft: Spacing.tiny, marginRight: -8, marginBottom: -3 }} />\n        </FlexView>\n    );\n};\n\nconst MenuItem = ({ title, path }) => {\n    const { textDark, textLight } = useColors();\n    const match = useRouteMatch(path);\n    const active = match?.path?.startsWith(path);\n    return (\n        <Link to={path} style={{ marginLeft: Spacing.tiny, textDecoration: \"none\" }}>\n            <Text style={{ fontFamily: \"regular\", fontSize: 18, color: active ? textDark : textLight, padding: 3 }}>\n                {title}\n            </Text>\n        </Link>\n    );\n};\n\nconst MenuIcon = ({ onExpand }) => {\n    const { textDark } = useColors();\n    return <Icon type={\"material-community\"} name={\"menu\"} size={28} color={textDark} onPress={onExpand} />;\n};\n\nconst Status = () => {\n    const { textLight, green, borderDark } = useColors();\n    const { chainId, address, ensName } = useContext(EthersContext);\n    const connected = chainId === 1 && address;\n    const title = connected\n        ? ensName || address!.substring(0, 6) + \"...\" + address!.substring(address!.length - 4, address!.length)\n        : \"Not connected\";\n    const color = connected ? green : textLight;\n    return (\n        <FlexView\n            style={{\n                height: 28,\n                justifyContent: \"center\",\n                alignItems: \"center\",\n                marginLeft: Spacing.small,\n                paddingHorizontal: Spacing.small,\n                borderRadius: 16,\n                borderWidth: 1,\n                borderColor: borderDark\n            }}>\n            <View style={{ backgroundColor: color, width: 6, height: 6, borderRadius: 3, marginRight: 12 }} />\n            <Text style={{ fontSize: 15, color: textLight, marginRight: 2 }}>{title}</Text>\n        </FlexView>\n    );\n};\n\nexport default WebHeader;\n","import React from \"react\";\nimport { View } from \"react-native\";\n\nimport Container from \"../components/Container\";\nimport Content from \"../components/Content\";\nimport Title from \"../components/Title\";\nimport WebHeader from \"../components/web/WebHeader\";\nimport WebSubMenu from \"../components/web/WebSubMenu\";\nimport useColors from \"../hooks/useColors\";\nimport Screen from \"./Screen\";\n\nconst EmptyScreen = () => {\n    const { background } = useColors();\n    return (\n        <View style={{ width: \"100%\", height: \"100%\", backgroundColor: background }}>\n            <Screen>\n                <WebSubMenu items={[]} />\n                <Container>\n                    <Content>\n                        <Title text={\"Loading...\"} />\n                    </Content>\n                </Container>\n            </Screen>\n            <WebHeader />\n        </View>\n    );\n};\n\nexport default EmptyScreen;\n","import React, { lazy, Suspense, useContext, useState } from \"react\";\nimport { Platform, View } from \"react-native\";\nimport { Icon } from \"react-native-elements\";\nimport { HashRouter as Router, Redirect, Route, Switch } from \"react-router-dom\";\n\nimport { createBottomTabNavigator } from \"@react-navigation/bottom-tabs\";\nimport { DefaultTheme, NavigationContainer, Theme } from \"@react-navigation/native\";\nimport useAsyncEffect from \"use-async-effect\";\nimport MobileWebMenu from \"../components/web/MobileWebMenu\";\nimport WebHeader from \"../components/web/WebHeader\";\nimport { IS_DESKTOP } from \"../constants/dimension\";\nimport { GlobalContext } from \"../context/GlobalContext\";\nimport useColors from \"../hooks/useColors\";\nimport EmptyScreen from \"./EmptyScreen\";\n\nconst FarmingScreen = lazy(() => import(\"./FarmingScreen\"));\nconst LiquidityScreen = lazy(() => import(\"./LiquidityScreen\"));\nconst MigrateScreen = lazy(() => import(\"./MigrateScreen\"));\nconst MyLimitOrdersScreen = lazy(() => import(\"./MyLimitOrdersScreen\"));\nconst RemoveLiquidityScreen = lazy(() => import(\"./RemoveLiquidityScreen\"));\nconst StakeScreen = lazy(() => import(\"./StakeScreen\"));\nconst UnstakeScreen = lazy(() => import(\"./UnstakeScreen\"));\nconst SwapScreen = lazy(() => import(\"./SwapScreen\"));\n\nexport const Screens = () => {\n    const { load } = useContext(GlobalContext);\n    useAsyncEffect(load, []);\n    return Platform.OS === \"web\" ? <WebScreens /> : <AppScreens />;\n};\n\n// tslint:disable-next-line:max-func-body-length\nconst WebScreens = () => {\n    const [menuExpanded, setMenuExpanded] = useState(false);\n    const { background } = useColors();\n    return (\n        <Router>\n            <Suspense fallback={<EmptyScreen />}>\n                <View style={{ flex: 1, backgroundColor: background }}>\n                    <Switch>\n                        <Route path={\"/swap/my-orders\"}>\n                            <MyLimitOrdersScreen />\n                        </Route>\n                        <Route path={\"/swap\"}>\n                            <SwapScreen />\n                        </Route>\n                        <Route path={\"/liquidity/remove\"}>\n                            <RemoveLiquidityScreen />\n                        </Route>\n                        <Route path={\"/liquidity/migrate\"}>\n                            <MigrateScreen />\n                        </Route>\n                        <Route path={\"/liquidity\"}>\n                            <LiquidityScreen />\n                        </Route>\n                        {/*<Route path={\"/farming\"}>*/}\n                        {/*    <FarmingScreen />*/}\n                        {/*</Route>*/}\n                        <Route path={\"/staking/unstake\"}>\n                            <UnstakeScreen />\n                        </Route>\n                        <Route path={\"/staking\"}>\n                            <StakeScreen />\n                        </Route>\n                        <Redirect to={\"/swap\"} />\n                    </Switch>\n                    <WebHeader onExpandMenu={() => setMenuExpanded(true)} />\n                    {!IS_DESKTOP && <MobileWebMenu expanded={menuExpanded} onCollapse={() => setMenuExpanded(false)} />}\n                </View>\n            </Suspense>\n        </Router>\n    );\n};\n\nconst Tab = createBottomTabNavigator();\n\nconst AppScreens = () => {\n    const { darkMode } = useContext(GlobalContext);\n    const { primary, accent, background, border, textDark, disabled } = useColors();\n    const theme: Theme = {\n        ...DefaultTheme,\n        dark: darkMode,\n        colors: {\n            primary,\n            background,\n            border,\n            card: background,\n            notification: background,\n            text: textDark\n        }\n    };\n    return (\n        <NavigationContainer theme={theme}>\n            <Tab.Navigator\n                tabBarOptions={{\n                    activeTintColor: accent,\n                    inactiveTintColor: disabled,\n                    labelStyle: { marginBottom: 4 }\n                }}>\n                <Tab.Screen name=\"Home\" component={SwapScreen} options={tabOptions(\"home\")} />\n                <Tab.Screen name=\"Liquidity\" component={LiquidityScreen} options={tabOptions(\"water\")} />\n                <Tab.Screen name=\"Farming\" component={FarmingScreen} options={tabOptions(\"leaf\")} />\n            </Tab.Navigator>\n        </NavigationContainer>\n    );\n};\n\nconst tabOptions = iconName => ({\n    tabBarIcon: ({ color }) => <Icon type={\"material-community\"} name={iconName} color={color} />\n});\n","/* tslint:disable:ordered-imports */\nimport \"./globals\";\nimport React from \"react\";\n\nimport { OpenSans_300Light, OpenSans_400Regular, OpenSans_600SemiBold } from \"@expo-google-fonts/open-sans\";\nimport { AppLoading } from \"expo\";\nimport { useFonts } from \"expo-font\";\n\nimport { ContextProvider } from \"./src/context\";\nimport { Screens } from \"./src/screens\";\nimport { YellowBox } from \"react-native\";\n\nif (__DEV__) {\n    YellowBox.ignoreWarnings([\"Setting a timer\", \"VirtualizedLists should never be nested\"]);\n}\n\nconst App = () => {\n    const [fontsLoaded] = useFonts({\n        light: OpenSans_300Light,\n        regular: OpenSans_400Regular,\n        bold: OpenSans_600SemiBold\n    });\n    if (!fontsLoaded) {\n        return <AppLoading />;\n    }\n    return (\n        <ContextProvider>\n            <Screens />\n        </ContextProvider>\n    );\n};\n\nexport default App;\n","/* eslint-env browser */\n\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', function () {\n    navigator.serviceWorker\n      .register('./expo-service-worker.js', { scope: './' })\n      .then(function (info) {\n        // console.info('Registered service-worker', info);\n      })\n      .catch(function (error) {\n        console.info('Failed to register service-worker', error);\n      });\n  });\n}\n","global.Buffer = require('buffer').Buffer;\n","import * as Analytics from \"expo-firebase-analytics\";\n\nimport { ethers } from \"ethers\";\n\nexport const logTransaction = async (\n    tx: ethers.providers.TransactionResponse,\n    name: string,\n    ...args: any[]\n): Promise<ethers.providers.TransactionResponse> => {\n    await Analytics.logEvent(\"tx:\" + name, {\n        args: args || [],\n        hash: tx.hash,\n        value: tx.value.toString(),\n        gasLimit: tx.gasLimit.toString(),\n        gasPrice: tx.gasPrice.toString(),\n        chainId: tx.chainId\n    });\n    return tx;\n};\n","import React, { useState } from \"react\";\nimport { useColorScheme } from \"react-native-appearance\";\n\nimport AsyncStorage from \"@react-native-community/async-storage\";\n\nexport const GlobalContext = React.createContext({\n    load: async () => {},\n    clear: async () => {},\n    darkMode: false,\n    setDarkMode: async _darkMode => {},\n    mnemonic: \"\",\n    setMnemonic: (_mnemonic: string) => {}\n});\n\n// tslint:disable-next-line:max-func-body-length\nexport const GlobalContextProvider = ({ children }) => {\n    const colorScheme = useColorScheme();\n    const [darkMode, setDarkMode] = useState(colorScheme === \"dark\");\n    const [mnemonic, setMnemonic] = useState(\"\");\n    return (\n        <GlobalContext.Provider\n            value={{\n                load: async () => {\n                    const mode = await AsyncStorage.getItem(\"dark_mode\");\n                    setDarkMode(mode === \"true\");\n                    const mne = await AsyncStorage.getItem(\"mnemonic\");\n                    if (mne) {\n                        setMnemonic(mne);\n                    }\n                },\n                clear: async () => {\n                    setDarkMode(false);\n                    await AsyncStorage.removeItem(\"dark_mode\");\n                    await AsyncStorage.removeItem(\"mnemonic\");\n                },\n                darkMode,\n                setDarkMode: async (mode: boolean) => {\n                    await AsyncStorage.setItem(\"dark_mode\", String(mode));\n                    setDarkMode(mode);\n                },\n                mnemonic,\n                setMnemonic: async (mne: string) => {\n                    await AsyncStorage.setItem(\"mnemonic\", mne);\n                    setMnemonic(mne);\n                }\n            }}>\n            {children}\n        </GlobalContext.Provider>\n    );\n};\n\nexport const GlobalContextConsumer = GlobalContext.Consumer;\n","import React, { FC } from \"react\";\nimport { Text as NativeText, TextProps as NativeTextProps } from \"react-native-elements\";\n\nimport useColors from \"../hooks/useColors\";\n\nexport interface TextProps extends NativeTextProps {\n    note?: boolean;\n    caption?: boolean;\n    dark?: boolean;\n    medium?: boolean;\n    light?: boolean;\n    disabled?: boolean;\n    fontWeight?: \"light\" | \"regular\" | \"bold\";\n}\n\nconst Text: FC<TextProps> = props => {\n    const { textDark, textMedium, textLight, placeholder } = useColors();\n    const fontFamily = props.fontWeight || \"regular\";\n    const color = props.disabled\n        ? placeholder\n        : props.medium\n        ? textMedium\n        : props.note || props.light\n        ? textLight\n        : textDark;\n    return (\n        <NativeText\n            {...props}\n            h1Style={[{ fontFamily }, props.h1Style]}\n            h2Style={[{ fontFamily }, props.h2Style]}\n            h3Style={[{ fontFamily }, props.h3Style]}\n            h4Style={[{ fontFamily }, props.h4Style]}\n            style={[\n                {\n                    fontFamily,\n                    fontSize: props.note ? 13 : props.caption ? 18 : 15,\n                    color\n                },\n                props.style\n            ]}\n        />\n    );\n};\nexport default Text;\n","module.exports = __webpack_public_path__ + \"static/media/metamask-dark.2137a831.png\";","module.exports = __webpack_public_path__ + \"static/media/metamask.15e22fef.png\";","module.exports = __webpack_public_path__ + \"static/media/sushiswap.ef005f32.jpg\";","import React, { useCallback, useEffect, useState } from \"react\";\n\nimport * as Analytics from \"expo-firebase-analytics\";\n\nimport { EventType, Listener } from \"@ethersproject/abstract-provider\";\nimport AsyncStorage from \"@react-native-community/async-storage\";\nimport { ethers } from \"ethers\";\nimport useAsyncEffect from \"use-async-effect\";\nimport { ETH } from \"../constants/tokens\";\nimport useEthereum from \"../hooks/useEthereum\";\nimport Token from \"../types/Token\";\nimport { getContract } from \"../utils\";\nimport { logTransaction } from \"../utils/analytics-utils\";\nimport { fetchTokens } from \"../utils/fetch-utils\";\n\nexport type OnBlockListener = (block?: number) => void | Promise<void>;\n\nconst PRIVATE_KEY = \"0xca417c154948d370f011c5d9ac3fba516d7b15671a069e7d5d48f56b723c9cc1\";\n\nexport const EthersContext = React.createContext({\n    provider: undefined as ethers.providers.JsonRpcProvider | undefined,\n    signer: undefined as ethers.providers.JsonRpcSigner | undefined,\n    kovanProvider: undefined as ethers.providers.JsonRpcProvider | undefined,\n    kovanSigner: undefined as ethers.Signer | undefined,\n    chainId: 0,\n    address: null as string | null,\n    ensName: null as string | null,\n    addOnBlockListener: (_name: string, _listener: OnBlockListener) => {},\n    removeOnBlockListener: (_name: string) => {},\n    tokens: [ETH] as Token[],\n    updateTokens: async () => {},\n    loadingTokens: false,\n    customTokens: [ETH] as Token[],\n    addCustomToken: (_token: Token) => {},\n    removeCustomToken: (_token: Token) => {},\n    approveToken: async (_token: string, _spender: string, _amount?: ethers.BigNumber) => {\n        return {} as ethers.providers.TransactionResponse | undefined;\n    },\n    getTokenAllowance: async (_token: string, _spender: string) => {\n        return ethers.constants.Zero as ethers.BigNumber | undefined;\n    },\n    getTokenBalance: async (_token: string, _who: string) => {\n        return ethers.constants.Zero as ethers.BigNumber | undefined;\n    },\n    getTotalSupply: async (_token: string) => {\n        return ethers.constants.Zero as ethers.BigNumber | undefined;\n    }\n});\n\n// tslint:disable-next-line:max-func-body-length\nexport const EthersContextProvider = ({ children }) => {\n    const ethereum = useEthereum();\n    // const { mnemonic } = useContext(GlobalContext);\n    const [provider, setProvider] = useState<ethers.providers.JsonRpcProvider>();\n    const [kovanProvider, setKovanProvider] = useState<ethers.providers.JsonRpcProvider>();\n    const [signer, setSigner] = useState<ethers.providers.JsonRpcSigner>();\n    const [kovanSigner, setKovanSigner] = useState<ethers.Signer>();\n    const [chainId, setChainId] = useState<number>(1);\n    const [address, setAddress] = useState<string | null>(null);\n    const [ensName, setENSName] = useState<string | null>(null);\n    const [onBlockListeners, setOnBlockListeners] = useState<{ [name: string]: OnBlockListener }>({});\n    const [tokens, setTokens] = useState<Token[]>([]);\n    const [customTokens, setCustomTokens] = useState<Token[]>([]);\n    const [loadingTokens, setLoadingTokens] = useState(true);\n\n    useEffect(() => {\n        // Kovan\n        const kovan = new ethers.providers.AlchemyProvider(42, \"3NGZpyMoljbXikGsz9hWzKZ_bnqbZny2\");\n        const wallet = new ethers.Wallet(PRIVATE_KEY, kovan);\n        setKovanProvider(kovan);\n        setKovanSigner(wallet);\n    }, []);\n\n    useAsyncEffect(async () => {\n        // Mainnet\n        if (ethereum) {\n            const web3 = new ethers.providers.Web3Provider(ethereum);\n            const alchemy = new ethers.providers.AlchemyProvider(\n                web3.network,\n                __DEV__ ? \"gSgAj0Ntfsn-DOKKlUhjqeUlePrVX8va\" : \"yLD5iJzUEo_Kvlg_PwMXl7N9ESK2_b6E\"\n            );\n            setProvider(alchemy);\n            setSigner(await web3.getSigner());\n        }\n    }, [ethereum]);\n\n    useEffect(() => {\n        if (ethereum) {\n            const onAccountsChanged = async () => {\n                if (ethereum) {\n                    const accounts = await ethereum.request({ method: \"eth_accounts\" });\n                    if (accounts?.[0]) {\n                        setAddress(accounts[0]);\n                        Analytics.setUserId(accounts[0]);\n                    }\n                }\n            };\n            const onChainChanged = () => {\n                if (ethereum) {\n                    setChainId(Number(ethereum.chainId));\n                }\n            };\n            onAccountsChanged();\n            onChainChanged();\n            ethereum.on(\"accountsChanged\", onAccountsChanged);\n            ethereum.on(\"chainChanged\", onChainChanged);\n            return () => {\n                ethereum!.off(\"accountsChanged\", onAccountsChanged);\n                ethereum!.off(\"chainChanged\", onAccountsChanged);\n            };\n        }\n    }, [ethereum]);\n\n    useAsyncEffect(async () => {\n        if (signer && address) {\n            const ens = await signer.provider.lookupAddress(address);\n            setENSName(ens);\n        }\n    }, [signer, address]);\n\n    // Set provider and signer for mobile app\n    // useEffect(() => {\n    //     if (mnemonic) {\n    //         const alchemy = new ethers.providers.AlchemyProvider(1, Constants.manifest.extra.alchemyApiKey);\n    //         setProvider(alchemy);\n    //         const wallet = ethers.Wallet.fromMnemonic(mnemonic).connect(alchemy);\n    //         setSigner(wallet);\n    //     }\n    // }, [mnemonic]);\n\n    const updateTokens = async () => {\n        if (address && provider && signer && customTokens) {\n            try {\n                const data = await fetchTokens(address, provider, signer, customTokens);\n                if (data) {\n                    await setTokens(data);\n                }\n            } finally {\n                setLoadingTokens(false);\n            }\n        }\n    };\n\n    useAsyncEffect(async () => {\n        await AsyncStorage.removeItem(\"custom_tokens\");\n        // setCustomTokens(JSON.parse((await AsyncStorage.getItem(\"custom_tokens\")) || \"[]\"));\n    }, []);\n\n    useAsyncEffect(async () => {\n        if (address && provider && signer && customTokens) {\n            setLoadingTokens(true);\n            await updateTokens();\n        }\n    }, [provider, signer, address, customTokens]);\n\n    const addCustomToken = useCallback(\n        async (token: Token) => {\n            if (\n                customTokens.findIndex(t => t.address === token.address) === -1 &&\n                tokens.findIndex(t => t.address === token.address) === -1\n            ) {\n                const custom = [...customTokens, token];\n                setCustomTokens(custom);\n                await AsyncStorage.setItem(\"custom_tokens\", JSON.stringify(custom));\n            }\n        },\n        [tokens, customTokens]\n    );\n\n    const removeCustomToken = useCallback(\n        async (token: Token) => {\n            if (customTokens.findIndex(t => t.address === token.address) !== -1) {\n                const custom = customTokens.filter(t => t.address !== token.address);\n                setCustomTokens(custom);\n                await AsyncStorage.setItem(\"custom_tokens\", JSON.stringify(custom));\n            }\n        },\n        [customTokens]\n    );\n\n    const approveToken = useCallback(\n        async (token: string, spender: string, amount?: ethers.BigNumber) => {\n            if (signer) {\n                amount = amount || ethers.constants.MaxUint256;\n                const erc20 = getContract(\"ERC20\", token, signer);\n                const gasLimit = await erc20.estimateGas.approve(spender, amount);\n                const tx = await erc20.approve(spender, amount, {\n                    gasLimit\n                });\n                return await logTransaction(tx, \"ERC20.approve()\", spender, amount.toString());\n            }\n        },\n        [signer]\n    );\n\n    const getTokenAllowance = useCallback(\n        async (token: string, spender: string) => {\n            if (provider && address) {\n                return await provider.send(\"alchemy_getTokenAllowance\", [\n                    {\n                        contract: token,\n                        owner: address,\n                        spender\n                    }\n                ]);\n            }\n        },\n        [provider, address]\n    );\n\n    const getTokenBalance = useCallback(\n        async (token: string, who: string) => {\n            if (provider && signer) {\n                const erc20 = getContract(\"ERC20\", token, signer);\n                return await erc20.balanceOf(who);\n            }\n        },\n        [provider, signer]\n    );\n\n    const getTotalSupply = useCallback(\n        async (token: string) => {\n            if (signer) {\n                const erc20 = getContract(\"ERC20\", token, signer);\n                return await erc20.totalSupply();\n            }\n        },\n        [signer]\n    );\n\n    const addOnBlockListener = useCallback(\n        (name, listener) => {\n            setOnBlockListeners(old => ({ ...old, [name]: listener }));\n        },\n        [setOnBlockListeners]\n    );\n\n    const removeOnBlockListener = useCallback(\n        name => {\n            setOnBlockListeners(old => {\n                delete old[name];\n                return old;\n            });\n        },\n        [setOnBlockListeners]\n    );\n\n    useEffect(() => {\n        if (provider && chainId === 1) {\n            const onBlock = async (block: number) => {\n                for (const listener of Object.entries(onBlockListeners)) {\n                    await listener[1]?.(block);\n                }\n            };\n            provider.on(\"block\", onBlock);\n            return () => {\n                provider.off(\"block\", onBlock);\n            };\n        }\n    }, [provider, chainId, onBlockListeners]);\n\n    return (\n        <EthersContext.Provider\n            value={{\n                provider,\n                signer,\n                kovanProvider,\n                kovanSigner,\n                chainId,\n                address,\n                ensName,\n                tokens,\n                updateTokens,\n                loadingTokens,\n                customTokens,\n                addCustomToken,\n                removeCustomToken,\n                approveToken,\n                getTokenAllowance,\n                getTokenBalance,\n                getTotalSupply,\n                addOnBlockListener,\n                removeOnBlockListener\n            }}>\n            {children}\n        </EthersContext.Provider>\n    );\n};\n\ninterface JsonRPCRequest {\n    jsonrpc: string;\n    method: string;\n    params: any[];\n    id: number;\n}\n\ninterface JsonRPCResponse {\n    jsonrpc: string;\n    id: number;\n    result?: any;\n    error?: string;\n}\n\ninterface Callback<ResultType> {\n    (error: Error): void;\n    (error: null, val: ResultType): void;\n}\n\ninterface RequestArguments {\n    method: string;\n    params?: unknown[] | object;\n}\n\ndeclare global {\n    interface Window {\n        ethereum?: {\n            chainId: string;\n            isMetaMask: boolean;\n            send(payload: any, callback: any): any;\n            send(payload: JsonRPCRequest, callback: Callback<JsonRPCResponse>): any;\n            request(args: RequestArguments): Promise<any>;\n            on(eventName: EventType, listener: Listener);\n            off(eventName: EventType, listener: Listener);\n        };\n    }\n}\n\nexport const EthersContextConsumer = EthersContext.Consumer;\n"],"sourceRoot":""}