{"version":3,"sources":["src/components/Heading.tsx","src/hooks/useLinker.tsx","src/components/InsufficientBalanceButton.tsx","src/components/ErrorMessage.tsx","src/components/InfoBox.tsx","src/components/Column.tsx","src/components/SocialIcons.tsx","src/components/web/WebFooter.tsx","src/components/AmountMeta.tsx","src/components/Border.tsx","src/components/FetchingButton.tsx","src/components/Notice.tsx","src/components/TokenInput.tsx","src/components/Input.tsx","src/hooks/useStakingState.tsx","src/screens/UnstakeScreen.tsx"],"names":["Heading","props","accent","useColors","style","alignItems","height","marginBottom","disabled","Spacing","small","medium","fontWeight","flex","fontSize","paddingBottom","tiny","text","buttonText","type","size","title","onPress","onPressButton","color","Platform","OS","path","route","target","history","useHistory","useCallback","window","open","push","_target","navigate","useNavigation","InsufficientBalanceButton","symbol","ErrorMessage","error","borderColor","borderWidth","width","padding","marginTop","code","note","message","InfoBox","darkMode","useContext","GlobalContext","backgroundLight","borderDark","border","useStyles","backgroundColor","normal","Column","View","noTopMargin","large","SocialIcon","background","textLight","light","iconColor","undefined","SocialIcons","onPressTwitter","useLinker","onPressGithub","onPressDiscord","FlexView","justifyContent","name","raised","reverse","reverseColor","containerStyle","WebFooter","Text","textAlign","AmountMeta","textDark","placeholder","IS_DESKTOP","amount","suffix","Border","FetchingButton","Notice","borderStyle","clear","titleStyle","buttonStyle","paddingHorizontal","paddingVertical","alignSelf","MaxButton","onPressMax","token","balance","fee","pow10","gt","sub","ethers","constants","Zero","updateAmount","formatBalance","decimals","position","right","bottom","maxButtonText","TokenInput","onChangeText","onAmountChanged","parseBalance","e","endsWith","indexOf","length","label","value","keyboardType","autoFocus","inputStyle","marginHorizontal","inputContainerStyle","borderBottomWidth","labelStyle","fontFamily","paddingTop","hideMaxButton","Input","textMedium","onError","errors","forbidden","forEach","validation","match","regexp","allowed","join","minHeight","outline","placeholderTextColor","errorStyle","useStakingState","EthersContext","signer","address","getTokenAllowance","tokens","updateTokens","useSDK","enterSushiBar","leaveSushiBar","useState","sushiStaked","setSushiStaked","sushiSupply","setSushiSupply","xSushiSupply","setXSushiSupply","setAmount","sushiAllowed","setSushiAllowed","xSushiAllowed","setXSushiAllowed","loading","setLoading","entering","setEntering","leaving","setLeaving","sushi","useMemo","find","xSushi","useEffect","useAsyncEffect","a","async","minAllowance","BigNumber","from","pow","SUSHI_BAR","sushiAllowance","gte","xSushiAllowance","sushiContract","getContract","balanceOf","totalSupply","xSushiContract","onEnter","parsed","tx","wait","onLeave","Staking","state","XSushiBalance","AmountInput","isZero","UnstakeInfo","isEmptyValue","sushiAmount","mul","div","Controls","setError","UnstakeButton","UnstakeScreen"],"mappings":"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","file":"static/js/7.c7bc3ec2.chunk.js","sourcesContent":["import React, { FC } from \"react\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport Button from \"./Button\";\nimport FlexView from \"./FlexView\";\nimport Text from \"./Text\";\n\ninterface HeadingProps {\n    text: string;\n    disabled?: boolean;\n    buttonText?: string;\n    onPressButton?: () => void | Promise<void>;\n}\n\nconst Heading: FC<HeadingProps> = props => {\n    const { accent } = useColors();\n    return (\n        <FlexView style={{ alignItems: \"flex-end\", height: 32, marginBottom: props.disabled ? 0 : Spacing.small }}>\n            <Text\n                medium={true}\n                fontWeight={\"bold\"}\n                disabled={props.disabled}\n                style={{ flex: 1, fontSize: 18, paddingBottom: Spacing.tiny }}>\n                {props.text}\n            </Text>\n            {props.buttonText && (\n                <Button\n                    type={\"clear\"}\n                    size={\"small\"}\n                    title={props.buttonText}\n                    onPress={props.onPressButton}\n                    color={accent}\n                />\n            )}\n        </FlexView>\n    );\n};\n\nexport default Heading;\n","import { useCallback } from \"react\";\nimport { Platform } from \"react-native\";\nimport { useHistory } from \"react-router-dom\";\n\nimport { useNavigation } from \"@react-navigation/native\";\n\nconst useWebLinker = (path: string, route: string, target?: string) => {\n    const history = useHistory();\n    return useCallback(() => {\n        if (target) {\n            window.open(path, target);\n        } else {\n            history.push(path);\n        }\n    }, [path, target]);\n};\n\nconst useAppLinker = (path: string, route: string, _target?: string) => {\n    const { navigate } = useNavigation();\n    return useCallback(() => {\n        navigate(route);\n    }, [route]);\n};\n\nexport default Platform.OS === \"web\" ? useWebLinker : useAppLinker;\n","import React from \"react\";\n\nimport Button from \"./Button\";\n\nconst InsufficientBalanceButton = ({ symbol }: { symbol: string }) => {\n    return <Button title={\"Insufficient \" + (symbol ? symbol : \"Balance\")} disabled={true} />;\n};\nexport default InsufficientBalanceButton;\n","import React from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport MetamaskError from \"../types/MetamaskError\";\nimport Text from \"./Text\";\n\nconst ErrorMessage = ({ error }: { error: MetamaskError }) => (\n    <View\n        style={{\n            borderColor: \"red\",\n            borderWidth: 1,\n            width: \"100%\",\n            padding: Spacing.tiny,\n            marginTop: Spacing.small\n        }}>\n        {error.code && (\n            <Text fontWeight={\"bold\"} style={{ color: \"red\", fontSize: 14 }}>\n                Error Code {error.code}\n            </Text>\n        )}\n        <Text note={true} style={{ color: \"red\", fontSize: 14 }}>\n            {error.message}\n        </Text>\n    </View>\n);\n\nexport default ErrorMessage;\n","import React, { PropsWithChildren, useContext } from \"react\";\nimport { View, ViewProps } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport { GlobalContext } from \"../context/GlobalContext\";\nimport useColors from \"../hooks/useColors\";\nimport useStyles from \"../hooks/useStyles\";\n\nconst InfoBox = (props: PropsWithChildren<ViewProps>) => {\n    const { darkMode } = useContext(GlobalContext);\n    const { backgroundLight, borderDark } = useColors();\n    const { border } = useStyles();\n    return (\n        <View\n            {...props}\n            style={[\n                {\n                    ...border({ color: darkMode ? borderDark : backgroundLight }),\n                    backgroundColor: backgroundLight,\n                    marginTop: Spacing.normal + Spacing.small,\n                    padding: Spacing.small + Spacing.tiny\n                },\n                props.style\n            ]}\n        />\n    );\n};\n\nexport default InfoBox;\n","import React, { FC } from \"react\";\nimport { Platform, View, ViewProps, ViewStyle } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\n\ninterface ColumnProps extends ViewProps {\n    noTopMargin?: boolean;\n    style?: ViewStyle;\n}\n\nconst Column: FC<ColumnProps> = props => (\n    <View\n        {...props}\n        style={[\n            {\n                width: \"100%\",\n                marginTop: props.noTopMargin ? 0 : Platform.OS === \"web\" ? Spacing.large : Spacing.normal\n            },\n            props.style\n        ]}\n    />\n);\n\nexport default Column;\n","import React, { useContext } from \"react\";\nimport { Icon, SocialIcon as NativeSocialIcon, SocialIconProps } from \"react-native-elements\";\n\nimport { GlobalContext } from \"../context/GlobalContext\";\nimport useColors from \"../hooks/useColors\";\nimport useLinker from \"../hooks/useLinker\";\nimport FlexView from \"./FlexView\";\n\nconst SocialIcons = () => {\n    const { darkMode } = useContext(GlobalContext);\n    const { background, textLight } = useColors();\n    const onPressTwitter = useLinker(\"https://twitter.com/sushiswap\", \"\", \"_blank\");\n    const onPressGithub = useLinker(\"https://github.com/sushiswap\", \"\", \"_blank\");\n    const onPressDiscord = useLinker(\"https://discord.gg/YS8xH7E\", \"\", \"_blank\");\n    return (\n        <FlexView style={{ width: \"100%\", justifyContent: \"center\" }}>\n            <SocialIcon type=\"github-alt\" onPress={onPressGithub} />\n            <SocialIcon type=\"twitter\" onPress={onPressTwitter} />\n            <Icon\n                type={\"material-community\"}\n                name={\"discord\"}\n                raised={true}\n                reverse={true}\n                color={background}\n                reverseColor={darkMode ? \"white\" : \"#7289da\"}\n                style={{ backgroundColor: background }}\n                containerStyle={{\n                    borderWidth: 1,\n                    borderColor: darkMode ? \"white\" : textLight\n                }}\n                onPress={onPressDiscord}\n            />\n        </FlexView>\n    );\n};\n\nconst SocialIcon = (props: SocialIconProps) => {\n    const { darkMode } = useContext(GlobalContext);\n    const { background, textLight } = useColors();\n    return (\n        <NativeSocialIcon\n            {...props}\n            light={!darkMode}\n            iconColor={darkMode ? \"white\" : undefined}\n            style={{\n                backgroundColor: background,\n                borderWidth: 1,\n                borderColor: darkMode ? \"white\" : textLight\n            }}\n        />\n    );\n};\n\nexport default SocialIcons;\n","import React from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../../constants/dimension\";\nimport Column from \"../Column\";\nimport SocialIcons from \"../SocialIcons\";\nimport Text from \"../Text\";\n\nconst WebFooter = () => (\n    <Column noTopMargin={true}>\n        <View\n            style={{\n                width: \"100%\",\n                padding: Spacing.normal\n            }}>\n            <SocialIcons />\n            <Text note={true} style={{ marginTop: Spacing.tiny, textAlign: \"center\", width: \"100%\" }}>\n                Built with ❤️ by SushiSwap\n            </Text>\n        </View>\n    </Column>\n);\n\nexport default WebFooter;\n","import React, { FC } from \"react\";\n\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport Text from \"./Text\";\n\nexport interface AmountMetaProps {\n    amount?: string;\n    suffix?: string;\n    disabled?: boolean;\n}\n\nconst AmountMeta: FC<AmountMetaProps> = props => {\n    const { textDark, textLight, placeholder } = useColors();\n    return (\n        <Text\n            style={{\n                fontSize: IS_DESKTOP ? 28 : 20,\n                marginBottom: Spacing.normal,\n                color: props.disabled ? placeholder : props.amount ? textDark : textLight\n            }}>\n            {props.disabled ? \"N/A\" : props.amount ? props.amount + \" \" + (props.suffix || \"\") : \"Fetching…\"}\n        </Text>\n    );\n};\n\nexport default AmountMeta;\n","import React from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\n\nconst Border = () => {\n    const { border } = useColors();\n    return (\n        <View\n            style={{\n                height: 1,\n                width: \"100%\",\n                backgroundColor: border,\n                marginTop: Spacing.small,\n                marginBottom: Spacing.small + Spacing.tiny\n            }}\n        />\n    );\n};\n\nexport default Border;\n","import React from \"react\";\n\nimport Button from \"./Button\";\n\nconst FetchingButton = () => {\n    return <Button title={\"Fetching…\"} disabled={true} />;\n};\nexport default FetchingButton;\n","import React from \"react\";\nimport { View, ViewStyle } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport useStyles from \"../hooks/useStyles\";\nimport Button from \"./Button\";\nimport Text from \"./Text\";\n\nexport interface NoticeProps {\n    text: string;\n    clear?: boolean;\n    color?: string;\n    buttonText?: string;\n    onPressButton?: () => void;\n    style?: ViewStyle;\n}\n\nconst Notice = (props: NoticeProps) => {\n    const { textLight } = useColors();\n    const { border } = useStyles();\n    const borderStyle = border({ color: props.color });\n    const color = props.color || textLight;\n    return (\n        <View style={[props.clear ? {} : borderStyle, props.style]}>\n            <Text note={true} style={{ color }}>\n                {props.text}\n            </Text>\n            {props.buttonText && props.onPressButton && (\n                <Button\n                    title={props.buttonText}\n                    type={\"clear\"}\n                    size={\"small\"}\n                    fontWeight={\"bold\"}\n                    onPress={props.onPressButton}\n                    titleStyle={{ color }}\n                    buttonStyle={{ paddingHorizontal: 0, paddingVertical: 0 }}\n                    style={{ alignSelf: \"flex-end\", marginTop: Spacing.tiny }}\n                />\n            )}\n        </View>\n    );\n};\n\nexport default Notice;\n","import React, { FC, useCallback } from \"react\";\nimport { Platform, View } from \"react-native\";\n\nimport { ethers } from \"ethers\";\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport useStyles from \"../hooks/useStyles\";\nimport Token from \"../types/Token\";\nimport { formatBalance, parseBalance, pow10 } from \"../utils\";\nimport Button from \"./Button\";\nimport Heading from \"./Heading\";\nimport Input from \"./Input\";\n\nexport interface TokenInputProps {\n    title?: string;\n    token?: Token;\n    amount: string;\n    onAmountChanged: (amount: string) => void;\n    label?: string;\n    hideMaxButton?: boolean;\n    maxButtonText?: string;\n    autoFocus?: boolean;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst TokenInput: FC<TokenInputProps> = props => {\n    const { border } = useStyles();\n    const onChangeText = useCallback(\n        (text: string) => {\n            if (props.token && props.onAmountChanged) {\n                try {\n                    parseBalance(text, props.token.decimals);\n                    props.onAmountChanged(text);\n                } catch (e) {\n                    if (text.endsWith(\".\") && text.indexOf(\".\") === text.length - 1) {\n                        props.onAmountChanged(text);\n                    }\n                }\n            }\n        },\n        [props.token, props.onAmountChanged]\n    );\n    return (\n        <View>\n            {props.title && <Heading text={props.title} />}\n            <View>\n                <Input\n                    label={props.label}\n                    value={props.amount}\n                    onChangeText={onChangeText}\n                    placeholder={\"0.0\"}\n                    keyboardType={\"numeric\"}\n                    autoFocus={props.autoFocus || false}\n                    inputStyle={{ marginHorizontal: Spacing.tiny }}\n                    inputContainerStyle={{ borderBottomWidth: 0 }}\n                    labelStyle={{ fontFamily: \"light\", height: props.label ? \"auto\" : 0 }}\n                    containerStyle={{\n                        ...border(),\n                        paddingHorizontal: Spacing.tiny,\n                        paddingTop: 15,\n                        paddingBottom: 2\n                    }}\n                />\n                {props.token?.balance?.gt(0) && !props.hideMaxButton && (\n                    <MaxButton\n                        token={props.token}\n                        maxButtonText={props.maxButtonText}\n                        updateAmount={props.onAmountChanged}\n                    />\n                )}\n            </View>\n        </View>\n    );\n};\n\nconst MaxButton = (props: { token: Token; updateAmount; maxButtonText?: string }) => {\n    const { accent } = useColors();\n    const onPressMax = useCallback(() => {\n        if (props.token) {\n            let balance = props.token.balance;\n            if (props.token.symbol === \"ETH\") {\n                // Subtract 0.01 ETH for gas fee\n                const fee = pow10(16);\n                balance = balance.gt(fee) ? balance.sub(fee) : ethers.constants.Zero;\n            }\n            props.updateAmount(formatBalance(balance, props.token.decimals));\n        }\n    }, [props.token, props.updateAmount]);\n    return (\n        <View style={{ position: \"absolute\", right: 12, bottom: Platform.OS === \"web\" ? 12 : 24 }}>\n            <Button\n                type={\"clear\"}\n                size={\"small\"}\n                color={accent}\n                title={props.maxButtonText || (IS_DESKTOP ? \"MAX \" + props.token.symbol : \"MAX\")}\n                fontWeight={\"bold\"}\n                onPress={onPressMax}\n                buttonStyle={{ paddingHorizontal: Spacing.tiny }}\n            />\n        </View>\n    );\n};\n\nexport default TokenInput;\n","import React, { FC, useCallback } from \"react\";\nimport { Platform } from \"react-native\";\nimport { Input as NativeInput, InputProps as NativeInputProps } from \"react-native-elements\";\n\nimport useColors from \"../hooks/useColors\";\n\nexport interface Validation {\n    regexp: RegExp;\n    error: string;\n}\n\nexport interface InputProps extends NativeInputProps {\n    color?: string;\n    size?: \"small\" | \"normal\" | \"large\";\n    allowed?: Validation[];\n    forbidden?: Validation[];\n    onError?: (error: string) => void;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst Input: FC<InputProps> = props => {\n    const { textDark, textMedium, textLight } = useColors();\n    const size = props.size || \"normal\";\n    const color = props.color || textDark;\n    const fontSize = size === \"small\" ? 16 : size === \"large\" ? 24 : 20;\n    const onChangeText = useCallback(\n        (text: string) => {\n            props.onChangeText?.(text);\n            props.onError?.(\"\");\n            const errors = [] as string[];\n            if (text !== \"\" && props.forbidden) {\n                props.forbidden.forEach(validation => {\n                    if (text.match(validation.regexp)) {\n                        errors.push(validation.error);\n                    }\n                });\n            }\n            if (text !== \"\" && props.allowed) {\n                props.allowed.forEach(validation => {\n                    if (!text.match(validation.regexp)) {\n                        errors.push(validation.error);\n                    }\n                });\n            }\n            if (errors.length > 0) {\n                props.onError?.(errors.join(\"\\n\"));\n            }\n        },\n        [props.onChangeText, props.onError, props.forbidden, props.allowed]\n    );\n    return (\n        <NativeInput\n            {...props}\n            inputStyle={[\n                { fontSize, fontFamily: \"regular\", paddingBottom: 4, color, marginTop: 0, minHeight: 32 },\n                // @ts-ignore\n                Platform.OS === \"web\" ? { outline: \"none\" } : {},\n                props.inputStyle\n            ]}\n            labelStyle={[{ color: textMedium }, props.labelStyle]}\n            placeholderTextColor={props.placeholderTextColor || textLight}\n            errorStyle={props.onError ? { height: 0 } : props.errorStyle}\n            containerStyle={[{ paddingHorizontal: 0 }, props.containerStyle]}\n            onChangeText={onChangeText}\n        />\n    );\n};\n\nexport default Input;\n","import { useCallback, useContext, useEffect, useMemo, useState } from \"react\";\n\nimport { ethers } from \"ethers\";\nimport useAsyncEffect from \"use-async-effect\";\nimport { SUSHI_BAR } from \"../constants/contracts\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport Token from \"../types/Token\";\nimport { getContract, parseBalance } from \"../utils\";\nimport useSDK from \"./useSDK\";\n\nexport type StakeAction = \"sushi-balance\" | \"stake\";\nexport type UnstakeAction = \"xsushi-balance\" | \"unstake\";\n\nexport interface StakingState {\n    sushi?: Token;\n    xSushi?: Token;\n    sushiStaked?: ethers.BigNumber;\n    sushiSupply?: ethers.BigNumber;\n    xSushiSupply?: ethers.BigNumber;\n    amount: string;\n    setAmount: (amount: string) => void;\n    sushiAllowed: boolean;\n    setSushiAllowed: (allowed: boolean) => void;\n    xSushiAllowed: boolean;\n    setXSushiAllowed: (allowed: boolean) => void;\n    loading: boolean;\n    onEnter: () => Promise<void>;\n    entering: boolean;\n    onLeave: () => Promise<void>;\n    leaving: boolean;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst useStakingState: () => StakingState = () => {\n    const { signer, address, getTokenAllowance, tokens, updateTokens } = useContext(EthersContext);\n    const { enterSushiBar, leaveSushiBar } = useSDK();\n    const [sushiStaked, setSushiStaked] = useState<ethers.BigNumber>();\n    const [sushiSupply, setSushiSupply] = useState<ethers.BigNumber>();\n    const [xSushiSupply, setXSushiSupply] = useState<ethers.BigNumber>();\n    const [amount, setAmount] = useState(\"\");\n    const [sushiAllowed, setSushiAllowed] = useState(false);\n    const [xSushiAllowed, setXSushiAllowed] = useState(false);\n    const [loading, setLoading] = useState(false);\n    const [entering, setEntering] = useState(false);\n    const [leaving, setLeaving] = useState(false);\n\n    const sushi = useMemo(() => tokens.find(token => token.symbol === \"SUSHI\"), [tokens]);\n    const xSushi = useMemo(() => tokens.find(token => token.symbol === \"xSUSHI\"), [tokens]);\n\n    useEffect(() => {\n        setAmount(\"\");\n    }, [address]);\n\n    useAsyncEffect(async () => {\n        if (sushi && xSushi && signer) {\n            setSushiAllowed(false);\n            setXSushiAllowed(false);\n            setLoading(true);\n            try {\n                const minAllowance = ethers.BigNumber.from(2)\n                    .pow(96)\n                    .sub(1);\n                const sushiAllowance = await getTokenAllowance(sushi.address, SUSHI_BAR);\n                setSushiAllowed(ethers.BigNumber.from(sushiAllowance).gte(minAllowance));\n                const xSushiAllowance = await getTokenAllowance(xSushi.address, SUSHI_BAR);\n                setXSushiAllowed(ethers.BigNumber.from(xSushiAllowance).gte(minAllowance));\n\n                const sushiContract = getContract(\"ERC20\", sushi.address, signer);\n                setSushiStaked(await sushiContract.balanceOf(SUSHI_BAR));\n                setSushiSupply(await sushiContract.totalSupply());\n                const xSushiContract = getContract(\"ERC20\", xSushi.address, signer);\n                setXSushiSupply(await xSushiContract.totalSupply());\n            } finally {\n                setLoading(false);\n            }\n        }\n    }, [sushi, xSushi, signer]);\n\n    const onEnter = useCallback(async () => {\n        if (amount && sushi && signer) {\n            setEntering(true);\n            try {\n                const parsed = parseBalance(amount, sushi.decimals);\n                const tx = await enterSushiBar(parsed, signer);\n                if (tx) {\n                    await tx.wait();\n                    await updateTokens();\n                    setAmount(\"\");\n                }\n            } finally {\n                setEntering(false);\n            }\n        }\n    }, [amount, sushi, signer]);\n\n    const onLeave = useCallback(async () => {\n        if (amount && xSushi && signer) {\n            setLeaving(true);\n            try {\n                const parsed = parseBalance(amount, xSushi.decimals);\n                const tx = await leaveSushiBar(parsed, signer);\n                if (tx) {\n                    await tx.wait();\n                    await updateTokens();\n                    setAmount(\"\");\n                }\n            } finally {\n                setLeaving(false);\n            }\n        }\n    }, [amount, xSushi, signer]);\n\n    return {\n        sushi,\n        xSushi,\n        sushiStaked,\n        sushiSupply,\n        xSushiSupply,\n        amount,\n        setAmount,\n        sushiAllowed,\n        setSushiAllowed,\n        xSushiAllowed,\n        setXSushiAllowed,\n        loading,\n        onEnter,\n        entering,\n        onLeave,\n        leaving\n    };\n};\n\nexport default useStakingState;\n","import React, { useState } from \"react\";\nimport { Platform, View } from \"react-native\";\n\nimport AmountMeta from \"../components/AmountMeta\";\nimport BackgroundImage from \"../components/BackgroundImage\";\nimport Border from \"../components/Border\";\nimport Button from \"../components/Button\";\nimport Container from \"../components/Container\";\nimport Content from \"../components/Content\";\nimport ErrorMessage from \"../components/ErrorMessage\";\nimport FetchingButton from \"../components/FetchingButton\";\nimport Heading from \"../components/Heading\";\nimport InfoBox from \"../components/InfoBox\";\nimport InsufficientBalanceButton from \"../components/InsufficientBalanceButton\";\nimport Notice from \"../components/Notice\";\nimport Text from \"../components/Text\";\nimport Title from \"../components/Title\";\nimport TokenInput from \"../components/TokenInput\";\nimport WebFooter from \"../components/web/WebFooter\";\nimport { StakingSubMenu } from \"../components/web/WebSubMenu\";\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport useStakingState, { StakingState } from \"../hooks/useStakingState\";\nimport MetamaskError from \"../types/MetamaskError\";\nimport { formatBalance, isEmptyValue, parseBalance } from \"../utils\";\nimport Screen from \"./Screen\";\n\nconst UnstakeScreen = () => {\n    return (\n        <Screen>\n            <Container>\n                <BackgroundImage />\n                <Content>\n                    <Title text={\"Unstake\"} />\n                    <Text light={true}>Convert your xSUSHI to SUSHI.</Text>\n                    <Staking />\n                </Content>\n                {Platform.OS === \"web\" && <WebFooter />}\n            </Container>\n            <StakingSubMenu />\n        </Screen>\n    );\n};\n\nconst Staking = () => {\n    const state = useStakingState();\n    return (\n        <View style={{ marginTop: Spacing.large }}>\n            <XSushiBalance state={state} />\n            <Border />\n            <AmountInput state={state} />\n            {state.xSushi && state.xSushi.balance.isZero() && (\n                <Notice text={\"You don't have any xSUSHI.\"} color={\"orange\"} style={{ marginTop: Spacing.small }} />\n            )}\n            <UnstakeInfo state={state} />\n        </View>\n    );\n};\n\nconst XSushiBalance = ({ state }: { state: StakingState }) => {\n    return (\n        <View>\n            <Heading text={\"Your xSUSHI\"} />\n            <AmountMeta\n                amount={state.xSushi ? formatBalance(state.xSushi.balance, state.xSushi.decimals) : \"\"}\n                suffix={\"xSUSHI\"}\n                disabled={!state.xSushi}\n            />\n        </View>\n    );\n};\n\nconst AmountInput = ({ state }: { state: StakingState }) => {\n    if (!state.xSushi || state.xSushi.balance.isZero()) {\n        return <Heading text={\"Amount To Unstake\"} disabled={true} />;\n    }\n    return (\n        <View>\n            <Heading text={\"Amount To Unstake\"} />\n            <TokenInput\n                token={state.xSushi}\n                amount={state.amount}\n                onAmountChanged={state.setAmount}\n                autoFocus={IS_DESKTOP}\n            />\n        </View>\n    );\n};\n\nconst UnstakeInfo = ({ state }: { state: StakingState }) => {\n    const disabled =\n        !state.sushi || !state.xSushi || !state.sushiStaked || !state.xSushiSupply || isEmptyValue(state.amount);\n    const sushiAmount = disabled\n        ? undefined\n        : parseBalance(state.amount, state.xSushi!.decimals)\n              .mul(state.sushiStaked!)\n              .div(state.xSushiSupply!);\n    return (\n        <InfoBox>\n            <Text disabled={disabled} style={{ fontSize: IS_DESKTOP ? 28 : 20 }}>\n                {!sushiAmount ? \"N/A\" : formatBalance(sushiAmount, state.sushi!.decimals, 8) + \" SUSHI\"}\n            </Text>\n            <Controls state={state} />\n        </InfoBox>\n    );\n};\n\nconst Controls = ({ state }: { state: StakingState }) => {\n    const [error, setError] = useState<MetamaskError>({});\n    return (\n        <View style={{ marginTop: Spacing.normal }}>\n            {!state.xSushi || state.xSushi.balance.isZero() || isEmptyValue(state.amount) ? (\n                <UnstakeButton state={state} onError={setError} disabled={true} />\n            ) : parseBalance(state.amount, state.xSushi.decimals).gt(state.xSushi.balance) ? (\n                <InsufficientBalanceButton symbol={state.xSushi.symbol} />\n            ) : state.loading ? (\n                <FetchingButton />\n            ) : (\n                <UnstakeButton state={state} onError={setError} disabled={false} />\n            )}\n            {error.message && error.code !== 4001 && <ErrorMessage error={error} />}\n        </View>\n    );\n};\n\nconst UnstakeButton = ({\n    state,\n    onError,\n    disabled\n}: {\n    state: StakingState;\n    onError: (e) => void;\n    disabled: boolean;\n}) => {\n    const onPress = async () => {\n        onError({});\n        try {\n            await state.onLeave();\n            state.setAmount(\"\");\n        } catch (e) {\n            onError(e);\n        }\n    };\n    return <Button title={\"Unstake\"} loading={state.leaving} onPress={onPress} disabled={disabled} />;\n};\n\nexport default UnstakeScreen;\n"],"sourceRoot":""}