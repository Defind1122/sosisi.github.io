{"version":3,"sources":["src/components/InfoBox.tsx","src/components/Notice.tsx","src/components/Border.tsx","src/hooks/useDelayedEffect.tsx","src/components/TokenAmount.tsx","src/components/TokenSymbol.tsx","src/components/UnsupportedButton.tsx","src/components/TokenName.tsx","src/components/TokenSearch.tsx","src/components/TokenSelect.tsx","src/hooks/useAddLiquidityState.tsx","src/screens/LiquidityScreen.tsx"],"names":["InfoBox","props","darkMode","useContext","GlobalContext","useColors","backgroundLight","borderDark","border","useStyles","style","color","backgroundColor","marginTop","Spacing","normal","small","padding","tiny","Notice","borderStyle","borderColor","clear","paddingHorizontal","note","text","buttonText","onPressButton","title","type","size","fontWeight","onPress","titleStyle","buttonStyle","paddingVertical","alignSelf","Border","height","width","marginBottom","handles","useDelayedEffect","effect","timeout","inputs","key","toString","useAsyncEffect","handle","setTimeout","clearTimeout","TokenAmount","caption","disabled","formatBalance","amount","token","balance","decimals","TokenSymbol","medium","marginLeft","IS_DESKTOP","symbol","UnsupportedButton","state","fromSymbol","toSymbol","TokenName","Text","numberOfLines","ellipsizeMode","name","Loading","ActivityIndicator","position","right","bottom","TokenItem","accent","useCallback","onSelectToken","Selectable","selected","containerStyle","ITEM_SEPARATOR_HEIGHT","FlexView","alignItems","TokenLogo","View","flex","Button","duplicate","TokenSearch","EthersContext","provider","tokens","useState","tokenToAdd","setTokenToAdd","loading","setLoading","findIndex","t","address","useEffect","undefined","a","async","trim","ethers","utils","isAddress","findOrFetchToken","Input","value","onChangeText","placeholder","autoFocus","inputStyle","marginHorizontal","fontSize","inputContainerStyle","borderBottomWidth","marginRight","labelStyle","paddingTop","paddingBottom","onAddToken","TokenList","loadingTokens","renderItem","item","data","useMemo","filter","hidden","sort","t1","t2","isZero","localeCompare","length","FlatList","keyExtractor","EmptyList","margin","textAlign","selectable","TokenSelect","addCustomToken","search","setSearch","query","setQuery","find","toLowerCase","Expandable","expanded","onExpand","onChangeSymbol","hide","includes","useAddLiquidityState","useTokenPairState","signer","updateTokens","pair","setPair","adding","setAdding","useSDK","getPair","addLiquidity","addLiquidityETH","useDelayedOnBlockEffect","block","fromToken","toToken","onAdd","fromAmount","toAmount","parseBalance","amountETH","tx","wait","setFromSymbol","AddLiquidity","large","ItemSeparator","FromTokenSelect","customTokens","ToTokenSelect","setToSymbol","Heading","FromTokenInput","TokenInput","onAmountChanged","newAmount","setFromAmount","priceOf","convertToken","quote","convertAmount","toExact","setToAmount","isEmptyValue","hideMaxButton","ToTokenInput","PriceInfo","FirstProviderInfo","green","noAmount","initialPrice","Fraction","from","price","PairPriceInfo","setAmount","textDark","textLight","calculateAmountOfLPTokenMinted","minted","toFixed","PriceMeta","Meta","label","suffix","Controls","error","setError","fromApproveRequired","fromTokenAllowed","toApproveRequired","toTokenAllowed","onError","FetchingButton","gt","InsufficientBalanceButton","ApproveButton","spender","ROUTER","onSuccess","setFromTokenAllowed","setToTokenAllowed","message","code","ErrorMessage","SupplyButton","goToRemoveLiquidity","useLinker","LiquidityScreen","Screen","Container","BackgroundImage","Content","Title","light","Platform","OS","WebFooter"],"mappings":"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","file":"static/js/8.6c364b24.chunk.js","sourcesContent":["import React, { PropsWithChildren, useContext } from \"react\";\nimport { View, ViewProps } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport { GlobalContext } from \"../context/GlobalContext\";\nimport useColors from \"../hooks/useColors\";\nimport useStyles from \"../hooks/useStyles\";\n\nconst InfoBox = (props: PropsWithChildren<ViewProps>) => {\n    const { darkMode } = useContext(GlobalContext);\n    const { backgroundLight, borderDark } = useColors();\n    const { border } = useStyles();\n    return (\n        <View\n            {...props}\n            style={[\n                {\n                    ...border({ color: darkMode ? borderDark : backgroundLight }),\n                    backgroundColor: backgroundLight,\n                    marginTop: Spacing.normal + Spacing.small,\n                    padding: Spacing.small + Spacing.tiny\n                },\n                props.style\n            ]}\n        />\n    );\n};\n\nexport default InfoBox;\n","import React from \"react\";\nimport { View, ViewStyle } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useStyles from \"../hooks/useStyles\";\nimport Button from \"./Button\";\nimport Text from \"./Text\";\n\nexport interface NoticeProps {\n    text: string;\n    clear?: boolean;\n    color?: string;\n    buttonText?: string;\n    onPressButton?: () => void;\n    style?: ViewStyle;\n}\n\nconst Notice = (props: NoticeProps) => {\n    const { border } = useStyles();\n    const borderStyle = border({ color: props.color });\n    const color = props.color || borderStyle.borderColor;\n    return (\n        <View style={[props.clear ? { paddingHorizontal: Spacing.tiny } : borderStyle, props.style]}>\n            <Text\n                note={true}\n                style={{\n                    color\n                }}>\n                {props.text}\n            </Text>\n            {props.buttonText && props.onPressButton && (\n                <Button\n                    title={props.buttonText}\n                    type={\"clear\"}\n                    size={\"small\"}\n                    fontWeight={\"bold\"}\n                    onPress={props.onPressButton}\n                    titleStyle={{ color }}\n                    buttonStyle={{ paddingHorizontal: 0, paddingVertical: 0 }}\n                    style={{ alignSelf: \"flex-end\", marginTop: Spacing.tiny }}\n                />\n            )}\n        </View>\n    );\n};\n\nexport default Notice;\n","import React from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\n\nconst Border = () => {\n    const { border } = useColors();\n    return (\n        <View\n            style={{\n                height: 1,\n                width: \"100%\",\n                backgroundColor: border,\n                marginTop: Spacing.small,\n                marginBottom: Spacing.small + Spacing.tiny\n            }}\n        />\n    );\n};\n\nexport default Border;\n","import useAsyncEffect from \"use-async-effect\";\n\nconst handles = {};\n\nconst useDelayedEffect = (\n    effect: (isMounted: () => boolean) => unknown | Promise<unknown>,\n    timeout: number,\n    inputs?: any[]\n) => {\n    const key = effect.toString();\n    useAsyncEffect<number>(\n        () => {\n            const handle = setTimeout(effect, timeout);\n            handles[key] = handle;\n            return handle;\n        },\n        handle => {\n            clearTimeout(handle);\n        },\n        inputs\n    );\n};\nexport default useDelayedEffect;\n","import React from \"react\";\nimport { TextStyle } from \"react-native\";\n\nimport { ethers } from \"ethers\";\nimport Token from \"../types/Token\";\nimport { formatBalance } from \"../utils\";\nimport Text from \"./Text\";\n\nconst TokenAmount = (props: { token: Token; amount?: ethers.BigNumber; disabled?: boolean; style?: TextStyle }) => (\n    <Text caption={true} disabled={props.disabled} style={props.style}>\n        {formatBalance(props.amount || props.token.balance, props.token.decimals, 8)}\n    </Text>\n);\n\nexport default TokenAmount;\n","import React from \"react\";\n\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport Token from \"../types/Token\";\nimport Text from \"./Text\";\n\nconst TokenSymbol = (props: { token: Token; disabled?: boolean }) => (\n    <Text medium={true} caption={true} disabled={props.disabled} style={{ marginLeft: Spacing.tiny }}>\n        {IS_DESKTOP ? props.token.symbol : \"\"}\n    </Text>\n);\n\nexport default TokenSymbol;\n","import React from \"react\";\n\nimport { TokenPairState } from \"../hooks/useTokenPairState\";\nimport Button from \"./Button\";\n\nconst UnsupportedButton = ({ state }: { state: TokenPairState }) => {\n    return <Button title={state.fromSymbol + \"-\" + state.toSymbol + \" Not Supported\"} disabled={true} />;\n};\n\nexport default UnsupportedButton;\n","import React from \"react\";\n\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport Token from \"../types/Token\";\nimport Text from \"./Text\";\n\nconst TokenName = (props: { token: Token; disabled?: boolean }) => (\n    <Text\n        caption={true}\n        numberOfLines={1}\n        ellipsizeMode={\"tail\"}\n        style={{ marginLeft: Spacing.small, width: 180 }}\n        disabled={props.disabled}>\n        {IS_DESKTOP ? props.token.name : props.token.symbol}\n    </Text>\n);\n\nexport default TokenName;\n","import React, { FC, useCallback, useContext, useEffect, useState } from \"react\";\nimport { ActivityIndicator, View } from \"react-native\";\n\nimport { ethers } from \"ethers\";\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport useColors from \"../hooks/useColors\";\nimport useDelayedEffect from \"../hooks/useDelayedEffect\";\nimport useStyles from \"../hooks/useStyles\";\nimport Token from \"../types/Token\";\nimport { findOrFetchToken } from \"../utils/fetch-utils\";\nimport Button from \"./Button\";\nimport FlexView from \"./FlexView\";\nimport Input from \"./Input\";\nimport { ITEM_SEPARATOR_HEIGHT } from \"./ItemSeparator\";\nimport Selectable from \"./Selectable\";\nimport TokenLogo from \"./TokenLogo\";\nimport TokenName from \"./TokenName\";\n\nexport interface TokenSearchProps {\n    tokens?: Token[];\n    text: string;\n    onChangeText: (text: string) => void;\n    onAddToken?: (token: Token) => void;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst TokenSearch: FC<TokenSearchProps> = props => {\n    const { border } = useStyles();\n    const { provider, tokens } = useContext(EthersContext);\n    const [tokenToAdd, setTokenToAdd] = useState<Token>();\n    const [loading, setLoading] = useState(false);\n    const duplicate = !!tokenToAdd && tokens.findIndex(t => t.address === tokenToAdd.address) !== -1;\n    if (!props.tokens) return <View />;\n    useEffect(() => {\n        if (props.text === \"\") {\n            setLoading(false);\n            setTokenToAdd(undefined);\n        }\n    }, [props.text]);\n    useDelayedEffect(\n        async () => {\n            const address = props.text.trim();\n            if (provider && ethers.utils.isAddress(address)) {\n                setLoading(true);\n                try {\n                    const token = await findOrFetchToken(address, provider);\n                    if (token.name && token.symbol && token.decimals) {\n                        setTokenToAdd(token as Token);\n                    }\n                } finally {\n                    setLoading(false);\n                }\n            }\n        },\n        300,\n        [provider, props.text]\n    );\n    return (\n        <View>\n            <FlexView style={{ marginBottom: Spacing.small }}>\n                <Input\n                    value={props.text}\n                    onChangeText={props.onChangeText}\n                    placeholder={\"Token name, symbol or address\"}\n                    autoFocus={IS_DESKTOP}\n                    inputStyle={{ marginHorizontal: Spacing.tiny, fontSize: props.text ? 20 : 16 }}\n                    inputContainerStyle={{ borderBottomWidth: 0, marginRight: loading ? 32 : 0 }}\n                    labelStyle={{ height: 0 }}\n                    containerStyle={{\n                        ...border(),\n                        paddingHorizontal: Spacing.tiny,\n                        paddingTop: 12,\n                        paddingBottom: 0\n                    }}\n                />\n                {props.onAddToken && loading && <Loading />}\n            </FlexView>\n            {props.onAddToken && tokenToAdd && (\n                <TokenItem token={tokenToAdd} selected={true} onSelectToken={props.onAddToken} duplicate={duplicate} />\n            )}\n        </View>\n    );\n};\n\nconst Loading = () => <ActivityIndicator size={\"small\"} style={{ position: \"absolute\", right: 16, bottom: 16 }} />;\n\nconst TokenItem = (props: {\n    token: Token;\n    selected: boolean;\n    onSelectToken: (token: Token) => void;\n    duplicate: boolean;\n}) => {\n    const { accent } = useColors();\n    const onPress = useCallback(() => {\n        props.onSelectToken(props.token);\n    }, [props.onSelectToken, props.token]);\n    return (\n        <Selectable\n            selected={false}\n            disabled={true}\n            onPress={onPress}\n            containerStyle={{\n                marginBottom: ITEM_SEPARATOR_HEIGHT\n            }}>\n            <FlexView style={{ alignItems: \"center\" }}>\n                <TokenLogo token={props.token} />\n                <TokenName token={props.token} />\n                <View style={{ flex: 1 }} />\n                <Button\n                    type={\"clear\"}\n                    size={\"small\"}\n                    color={accent}\n                    title={props.duplicate ? \"Already Added\" : \"ADD \" + props.token.symbol}\n                    fontWeight={\"bold\"}\n                    onPress={onPress}\n                    disabled={props.duplicate}\n                    buttonStyle={{ paddingHorizontal: 4, height: 27 }}\n                />\n            </FlexView>\n        </Selectable>\n    );\n};\n\nexport default TokenSearch;\n","import React, { FC, useCallback, useContext, useEffect, useMemo, useState } from \"react\";\nimport { FlatList, View, ViewStyle } from \"react-native\";\n\nimport { ethers } from \"ethers\";\nimport { Spacing } from \"../constants/dimension\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport useDelayedEffect from \"../hooks/useDelayedEffect\";\nimport Token from \"../types/Token\";\nimport Expandable from \"./Expandable\";\nimport FlexView from \"./FlexView\";\nimport { ITEM_SEPARATOR_HEIGHT } from \"./ItemSeparator\";\nimport Loading from \"./Loading\";\nimport Selectable from \"./Selectable\";\nimport Text from \"./Text\";\nimport TokenAmount from \"./TokenAmount\";\nimport TokenLogo from \"./TokenLogo\";\nimport TokenName from \"./TokenName\";\nimport TokenSearch from \"./TokenSearch\";\nimport TokenSymbol from \"./TokenSymbol\";\n\nexport interface TokenSelectProps {\n    title: string;\n    symbol: string;\n    onChangeSymbol: (symbol: string) => void;\n    disabled?: (token: Token) => boolean;\n    hidden?: (token: Token) => boolean;\n    style?: ViewStyle;\n}\n\nconst TokenSelect: FC<TokenSelectProps> = props => {\n    const { tokens, addCustomToken } = useContext(EthersContext);\n    const [search, setSearch] = useState(\"\");\n    const [query, setQuery] = useState(\"\");\n    const token = useMemo(() => tokens.find(t => t.symbol === props.symbol), [tokens, props.symbol]);\n    const onSelectToken = t => props.onChangeSymbol(t.symbol);\n    const onUnselectToken = () => props.onChangeSymbol(\"\");\n    const onAddToken = async (t: Token) => {\n        await addCustomToken(t);\n        setSearch(\"\");\n        setQuery(\"\");\n        props.onChangeSymbol(t.symbol);\n    };\n    const hidden = (t: Token) => {\n        let hide = props.hidden?.(t) || false;\n        if (!hide && query.length > 0 && !ethers.utils.isAddress(query)) {\n            hide = !t.symbol.toLowerCase().includes(query) && !t.name.toLowerCase().includes(query);\n        }\n        return hide;\n    };\n    useEffect(() => setSearch(\"\"), [props.symbol]);\n    useDelayedEffect(() => setQuery(search.trim().toLowerCase()), 300, [search]);\n    return (\n        <View style={props.style}>\n            <Expandable title={props.title} expanded={!props.symbol} onExpand={() => props.onChangeSymbol(\"\")}>\n                <TokenSearch text={search} onChangeText={setSearch} tokens={tokens} onAddToken={onAddToken} />\n                <TokenList disabled={props.disabled} hidden={hidden} onSelectToken={onSelectToken} />\n            </Expandable>\n            {token && <TokenItem token={token} selected={true} onSelectToken={onUnselectToken} selectable={true} />}\n        </View>\n    );\n};\n\n// tslint:disable-next-line:max-func-body-length\nconst TokenList = (props: {\n    onSelectToken: (token: Token) => void;\n    disabled?: (token: Token) => boolean;\n    hidden?: (token: Token) => boolean;\n}) => {\n    const { loadingTokens, tokens } = useContext(EthersContext);\n    const renderItem = useCallback(\n        ({ item }) => {\n            return (\n                <TokenItem\n                    key={item.address}\n                    token={item}\n                    selected={false}\n                    onSelectToken={props.onSelectToken}\n                    disabled={props.disabled?.(item)}\n                />\n            );\n        },\n        [props.onSelectToken, props.disabled]\n    );\n    const data = useMemo(\n        () =>\n            tokens\n                .filter(token => (props.hidden ? !props.hidden(token) : true))\n                .sort(\n                    (t1, t2) =>\n                        (t2.balance.isZero() ? 0 : 10000000000) -\n                        (t1.balance.isZero() ? 0 : 10000000000) +\n                        t1.symbol.localeCompare(t2.symbol)\n                ),\n        [tokens, props.hidden]\n    );\n    return loadingTokens ? (\n        <Loading />\n    ) : data.length === 0 ? (\n        <EmptyList />\n    ) : (\n        <FlatList keyExtractor={item => item.address} data={data} renderItem={renderItem} />\n    );\n};\n\nconst EmptyList = () => {\n    return (\n        <View style={{ margin: Spacing.normal }}>\n            <Text disabled={true} style={{ textAlign: \"center\", width: \"100%\" }}>\n                {\"You don't have any matching tokens.\"}\n            </Text>\n        </View>\n    );\n};\n\nconst TokenItem = (props: {\n    token: Token;\n    selected: boolean;\n    onSelectToken: (token: Token) => void;\n    disabled?: boolean;\n    selectable?: boolean;\n}) => {\n    const onPress = useCallback(() => {\n        props.onSelectToken(props.token);\n    }, [props.onSelectToken, props.token]);\n    return (\n        <Selectable\n            selected={props.selected}\n            onPress={onPress}\n            disabled={props.disabled || props.selectable}\n            containerStyle={{\n                marginBottom: ITEM_SEPARATOR_HEIGHT\n            }}>\n            <FlexView style={{ alignItems: \"center\" }}>\n                <TokenLogo token={props.token} disabled={props.disabled} />\n                <TokenName token={props.token} disabled={props.disabled} />\n                <TokenAmount token={props.token} disabled={props.disabled} style={{ flex: 1, textAlign: \"right\" }} />\n                <TokenSymbol token={props.token} disabled={props.disabled} />\n            </FlexView>\n        </Selectable>\n    );\n};\n\nexport default TokenSelect;\n","import { useCallback, useContext, useState } from \"react\";\n\nimport { Pair } from \"@sushiswap/sdk\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport { parseBalance } from \"../utils\";\nimport useDelayedOnBlockEffect from \"./useDelayedOnBlockEffect\";\nimport useSDK from \"./useSDK\";\nimport useTokenPairState, { TokenPairState } from \"./useTokenPairState\";\n\nexport interface AddLiquidityState extends TokenPairState {\n    pair?: Pair;\n    onAdd: () => Promise<void>;\n    adding: boolean;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst useAddLiquidityState: () => AddLiquidityState = () => {\n    const state = useTokenPairState();\n    const { provider, signer, updateTokens } = useContext(EthersContext);\n    const [loading, setLoading] = useState(false);\n    const [pair, setPair] = useState<Pair>();\n    const [adding, setAdding] = useState(false);\n    const { getPair, addLiquidity, addLiquidityETH } = useSDK();\n\n    useDelayedOnBlockEffect(\n        async block => {\n            if (!block) {\n                setLoading(true);\n                setPair(undefined);\n            }\n            if (state.fromToken && state.toToken && provider) {\n                try {\n                    setPair(await getPair(state.fromToken, state.toToken, provider));\n                } catch (e) {\n                } finally {\n                    setLoading(false);\n                }\n            } else {\n                setLoading(false);\n            }\n        },\n        () => \"getPair(\" + state.fromSymbol + \",\" + state.toSymbol + \")\",\n        [state.fromSymbol, state.toSymbol, provider],\n        0\n    );\n\n    const onAdd = useCallback(async () => {\n        if (state.fromToken && state.toToken && state.fromAmount && state.toAmount && signer) {\n            setAdding(true);\n            try {\n                const fromAmount = parseBalance(state.fromAmount, state.fromToken.decimals);\n                const toAmount = parseBalance(state.toAmount, state.toToken.decimals);\n                if (state.fromSymbol === \"ETH\" || state.toSymbol === \"ETH\") {\n                    const [token, amount, amountETH] =\n                        state.fromSymbol === \"ETH\"\n                            ? [state.toToken, toAmount, fromAmount]\n                            : [state.fromToken, fromAmount, toAmount];\n                    const tx = await addLiquidityETH(token, amount, amountETH, signer);\n                    await tx.wait();\n                } else {\n                    const tx = await addLiquidity(state.fromToken, state.toToken, fromAmount, toAmount, signer);\n                    await tx.wait();\n                }\n                await updateTokens();\n                state.setFromSymbol(\"\");\n            } finally {\n                setAdding(false);\n            }\n        }\n    }, [state.fromToken, state.toToken, state.fromAmount, state.toAmount, signer]);\n\n    return {\n        ...state,\n        loading: loading || state.loading,\n        pair,\n        onAdd,\n        adding\n    };\n};\n\nexport default useAddLiquidityState;\n","import React, { useCallback, useContext, useState } from \"react\";\nimport { Platform, View } from \"react-native\";\n\nimport useAsyncEffect from \"use-async-effect\";\nimport ApproveButton from \"../components/ApproveButton\";\nimport BackgroundImage from \"../components/BackgroundImage\";\nimport Border from \"../components/Border\";\nimport Button from \"../components/Button\";\nimport Container from \"../components/Container\";\nimport Content from \"../components/Content\";\nimport ErrorMessage from \"../components/ErrorMessage\";\nimport FetchingButton from \"../components/FetchingButton\";\nimport Heading from \"../components/Heading\";\nimport InfoBox from \"../components/InfoBox\";\nimport InsufficientBalanceButton from \"../components/InsufficientBalanceButton\";\nimport ItemSeparator from \"../components/ItemSeparator\";\nimport Meta from \"../components/Meta\";\nimport Notice from \"../components/Notice\";\nimport Text from \"../components/Text\";\nimport Title from \"../components/Title\";\nimport TokenInput from \"../components/TokenInput\";\nimport TokenSelect from \"../components/TokenSelect\";\nimport UnsupportedButton from \"../components/UnsupportedButton\";\nimport WebFooter from \"../components/web/WebFooter\";\nimport { LiquiditySubMenu } from \"../components/web/WebSubMenu\";\nimport { ROUTER } from \"../constants/contracts\";\nimport { Spacing } from \"../constants/dimension\";\nimport Fraction from \"../constants/Fraction\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport useAddLiquidityState, { AddLiquidityState } from \"../hooks/useAddLiquidityState\";\nimport useColors from \"../hooks/useColors\";\nimport useLinker from \"../hooks/useLinker\";\nimport useSDK from \"../hooks/useSDK\";\nimport MetamaskError from \"../types/MetamaskError\";\nimport { convertAmount, convertToken, isEmptyValue, parseBalance } from \"../utils\";\nimport Screen from \"./Screen\";\n\nconst LiquidityScreen = () => {\n    return (\n        <Screen>\n            <Container>\n                <BackgroundImage />\n                <Content>\n                    <Title text={\"Add Liquidity\"} />\n                    <Text light={true}>Add liquidity to a pool and get LP tokens of the pair.</Text>\n                    <AddLiquidity />\n                </Content>\n                {Platform.OS === \"web\" && <WebFooter />}\n            </Container>\n            <LiquiditySubMenu />\n        </Screen>\n    );\n};\n\nconst AddLiquidity = () => {\n    const state = useAddLiquidityState();\n    return (\n        <View style={{ marginTop: Spacing.large }}>\n            <FromTokenSelect state={state} />\n            <Border />\n            <ToTokenSelect state={state} />\n            <Border />\n            <FromTokenInput state={state} />\n            <ItemSeparator />\n            <ToTokenInput state={state} />\n            <ItemSeparator />\n            <PriceInfo state={state} />\n        </View>\n    );\n};\n\nconst FromTokenSelect = ({ state }: { state: AddLiquidityState }) => {\n    const { customTokens } = useContext(EthersContext);\n    return (\n        <TokenSelect\n            title={\"1st Token\"}\n            symbol={state.fromSymbol}\n            onChangeSymbol={state.setFromSymbol}\n            hidden={token => !customTokens.find(t => t.address === token.address) && token.balance.isZero()}\n        />\n    );\n};\n\nconst ToTokenSelect = ({ state }: { state: AddLiquidityState }) => {\n    const { customTokens } = useContext(EthersContext);\n    if (!state.fromSymbol) {\n        return <Heading text={\"2nd Token\"} disabled={true} />;\n    }\n    return (\n        <View>\n            <TokenSelect\n                title={\"2nd Token\"}\n                symbol={state.toSymbol}\n                onChangeSymbol={state.setToSymbol}\n                hidden={token =>\n                    token.symbol === state.fromSymbol ||\n                    (!customTokens.find(t => t.address === token.address) && token.balance.isZero())\n                }\n            />\n        </View>\n    );\n};\n\nconst FromTokenInput = ({ state }: { state: AddLiquidityState }) => {\n    if (!state.fromSymbol || !state.toSymbol) {\n        return <Heading text={\"Amount of Tokens\"} disabled={true} />;\n    }\n    const onAmountChanged = (newAmount: string) => {\n        state.setFromAmount(newAmount);\n        if (state.pair && state.fromToken) {\n            const fromPrice = state.pair.priceOf(convertToken(state.fromToken));\n            const toAmount = fromPrice.quote(convertAmount(state.fromToken, newAmount)).toExact();\n            state.setToAmount(isEmptyValue(toAmount) ? \"\" : toAmount);\n        }\n    };\n    return (\n        <TokenInput\n            title={\"Amount of Tokens\"}\n            token={state.fromToken}\n            amount={state.fromAmount}\n            onAmountChanged={onAmountChanged}\n            hideMaxButton={state.loading && !state.pair}\n        />\n    );\n};\n\nconst ToTokenInput = ({ state }: { state: AddLiquidityState }) => {\n    if (!state.fromSymbol || !state.toSymbol) {\n        return <View />;\n    }\n    const onAmountChanged = (newAmount: string) => {\n        state.setToAmount(newAmount);\n        if (state.pair && state.toToken) {\n            const toPrice = state.pair.priceOf(convertToken(state.toToken));\n            const fromAmount = toPrice.quote(convertAmount(state.toToken, newAmount)).toExact();\n            state.setFromAmount(isEmptyValue(fromAmount) ? \"\" : fromAmount);\n        }\n    };\n    return (\n        <TokenInput\n            token={state.toToken}\n            amount={state.toAmount}\n            onAmountChanged={onAmountChanged}\n            hideMaxButton={state.loading && !state.pair}\n        />\n    );\n};\n\nconst PriceInfo = ({ state }: { state: AddLiquidityState }) => {\n    if (state.fromToken && state.toToken && !state.loading && !state.pair) {\n        return <FirstProviderInfo state={state} />;\n    } else {\n        return <PairPriceInfo state={state} />;\n    }\n};\n\nconst FirstProviderInfo = ({ state }: { state: AddLiquidityState }) => {\n    const { green } = useColors();\n    const noAmount = isEmptyValue(state.fromAmount) || isEmptyValue(state.toAmount);\n    const initialPrice = Fraction.from(\n        parseBalance(state.toAmount, state.toToken!.decimals),\n        parseBalance(state.fromAmount, state.fromToken!.decimals)\n    ).toString(8);\n    return (\n        <View>\n            <InfoBox style={{ marginTop: Spacing.normal }}>\n                <PriceMeta state={state} price={initialPrice} disabled={noAmount} />\n            </InfoBox>\n            <Notice\n                text={\n                    \"You are the first liquidity provider.\\n\" +\n                    \"The ratio of tokens you add will set the price of this pool.\"\n                }\n                color={green}\n                style={{ marginTop: Spacing.small }}\n            />\n        </View>\n    );\n};\n\nconst PairPriceInfo = ({ state }: { state: AddLiquidityState }) => {\n    const [amount, setAmount] = useState<string>();\n    const { textDark, textLight, placeholder } = useColors();\n    const { calculateAmountOfLPTokenMinted } = useSDK();\n    useAsyncEffect(async () => {\n        if (state.pair && !isEmptyValue(state.fromAmount) && !isEmptyValue(state.toAmount)) {\n            const minted = await calculateAmountOfLPTokenMinted(\n                state.pair,\n                convertAmount(state.fromToken!, state.fromAmount),\n                convertAmount(state.toToken!, state.toAmount)\n            );\n            setAmount(minted?.toFixed(8));\n        }\n    }, [state.pair, state.fromAmount, state.toAmount]);\n    const disabled = isEmptyValue(state.fromAmount) || isEmptyValue(state.toAmount);\n    const price =\n        state.pair && state.fromToken ? state.pair.priceOf(convertToken(state.fromToken)).toFixed(8) : undefined;\n    const color = disabled ? placeholder : amount ? textDark : textLight;\n    const symbol = state.fromSymbol + \"-\" + state.toSymbol;\n    return (\n        <InfoBox>\n            <Text style={{ fontSize: 28, marginBottom: Spacing.normal, color }}>\n                {disabled ? \"N/A\" : amount ? amount + \" \" + symbol : \"Fetching…\"}\n            </Text>\n            <PriceMeta state={state} price={price} disabled={!state.fromSymbol || !state.toSymbol} />\n            <Controls state={state} />\n        </InfoBox>\n    );\n};\n\nconst PriceMeta = ({ state, price, disabled }) => (\n    <Meta label={\"Price\"} text={price} suffix={state.toSymbol + \" = 1 \" + state.fromSymbol} disabled={disabled} />\n);\n\n// tslint:disable-next-line:max-func-body-length\nconst Controls = ({ state }: { state: AddLiquidityState }) => {\n    const [error, setError] = useState<MetamaskError>({});\n    useAsyncEffect(() => setError({}), [state.fromSymbol, state.toSymbol, state.fromAmount]);\n    const fromApproveRequired = state.fromSymbol !== \"ETH\" && !state.fromTokenAllowed;\n    const toApproveRequired = state.toSymbol !== \"ETH\" && !state.toTokenAllowed;\n    const disabled =\n        fromApproveRequired || toApproveRequired || isEmptyValue(state.fromAmount) || isEmptyValue(state.toAmount);\n    return (\n        <View style={{ marginTop: Spacing.normal }}>\n            {!state.fromToken ||\n            !state.toToken ||\n            state.loading ||\n            isEmptyValue(state.fromAmount) ||\n            isEmptyValue(state.toAmount) ? (\n                <SupplyButton state={state} onError={setError} disabled={true} />\n            ) : state.loading || !state.pair ? (\n                <FetchingButton />\n            ) : parseBalance(state.fromAmount, state.fromToken.decimals).gt(state.fromToken.balance) ? (\n                <InsufficientBalanceButton symbol={state.fromSymbol} />\n            ) : parseBalance(state.toAmount, state.toToken.decimals).gt(state.toToken.balance) ? (\n                <InsufficientBalanceButton symbol={state.toSymbol} />\n            ) : (state.fromSymbol === \"ETH\" && state.toSymbol === \"WETH\") ||\n              (state.fromSymbol === \"WETH\" && state.toSymbol === \"ETH\") ? (\n                <UnsupportedButton state={state} />\n            ) : (\n                <>\n                    <ApproveButton\n                        token={state.fromToken}\n                        spender={ROUTER}\n                        onSuccess={() => state.setFromTokenAllowed(true)}\n                        onError={setError}\n                        hidden={!fromApproveRequired}\n                    />\n                    <ApproveButton\n                        token={state.toToken}\n                        spender={ROUTER}\n                        onSuccess={() => state.setToTokenAllowed(true)}\n                        onError={setError}\n                        hidden={!toApproveRequired}\n                    />\n                    <SupplyButton state={state} onError={setError} disabled={disabled} />\n                </>\n            )}\n            {error.message && error.code !== 4001 && <ErrorMessage error={error} />}\n        </View>\n    );\n};\n\nconst SupplyButton = ({\n    state,\n    onError,\n    disabled\n}: {\n    state: AddLiquidityState;\n    onError: (e) => void;\n    disabled: boolean;\n}) => {\n    const goToRemoveLiquidity = useLinker(\"/liquidity/remove\", \"RemoveLiquidity\");\n    const onPress = useCallback(async () => {\n        onError({});\n        try {\n            await state.onAdd();\n            goToRemoveLiquidity();\n        } catch (e) {\n            onError(e);\n        }\n    }, [state.onAdd, onError]);\n    return (\n        <Button\n            title={state.fromSymbol && state.toSymbol ? \"Supply \" + state.fromSymbol + \"-\" + state.toSymbol : \"Supply\"}\n            disabled={disabled}\n            loading={state.adding}\n            onPress={onPress}\n        />\n    );\n};\n\nexport default LiquidityScreen;\n"],"sourceRoot":""}