{"version":3,"sources":["src/components/InfoBox.tsx","src/components/Notice.tsx","src/components/Border.tsx","src/hooks/useLPTokensState.tsx","src/components/LPTokenSelect.tsx","src/components/ExperimentalNotice.tsx","src/hooks/useMigrateState.tsx","src/screens/MigrateScreen.tsx"],"names":["InfoBox","props","backgroundLight","useColors","border","useStyles","style","color","backgroundColor","marginTop","Spacing","normal","small","padding","tiny","Notice","borderStyle","borderColor","clear","paddingHorizontal","note","text","buttonText","onPressButton","title","type","size","fontWeight","onPress","titleStyle","buttonStyle","paddingVertical","alignSelf","Border","height","width","marginBottom","useLPTokensState","mode","state","useTokenPairState","useContext","EthersContext","provider","signer","address","tokens","useState","lastTimeRefreshed","setLastTimeRefreshed","loading","setLoading","lpTokens","setLPTokens","selectedLPToken","setSelectedLPToken","selectedLPTokenAllowed","setSelectedLPTokenAllowed","pair","setPair","amount","setAmount","getPair","useSDK","updateLPTokens","a","async","fetchPools","fetchMyLPTokens","fetchMyUniswapLPTokens","data","useEffect","useAsyncEffect","undefined","tokenA","tokenB","useDelayedOnBlockEffect","block","length","fromToken","toToken","updateLastTimeRefreshed","Date","now","LPTokenList","emptyText","filter","Item","renderItem","useCallback","item","key","token","selected","onSelectToken","sort","t1","t2","totalDeposited","ethers","constants","Zero","sub","div","pow10","toNumber","amountDeposited","gt","balance","Loading","FlatList","keyExtractor","JSON","stringify","EmptyList","View","margin","Text","disabled","textAlign","LPTokenItem","textMedium","formatBalance","decimals","Selectable","containerStyle","ITEM_SEPARATOR_HEIGHT","FlexView","alignItems","TokenLogo","replaceWETH","marginLeft","medium","caption","symbol","flex","light","LPTokenSelect","Expandable","expanded","onExpand","ExperimentalNotice","onPressContract","useLinker","contractURL","marginVertical","useMigrateState","getTokenAllowance","updateTokens","migrate","migrating","setMigrating","minAllowance","BigNumber","from","pow","MIGRATOR2","allowance","gte","onMigrate","parseBalance","tx","wait","Migrate","large","AmountInput","TokenInput","onAmountChanged","Heading","AmountInfo","isEmptyValue","Meta","label","Controls","error","setError","onError","InsufficientBalanceButton","FetchingButton","ApproveButton","spender","onSuccess","hidden","message","code","ErrorMessage","MigrateButton","Button","MigrateScreen","Screen","Container","Content","Title","Platform","OS","WebFooter"],"mappings":"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","file":"static/js/10.1ef5601e.chunk.js","sourcesContent":["import React, { PropsWithChildren } from \"react\";\nimport { View, ViewProps } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport useStyles from \"../hooks/useStyles\";\n\nconst InfoBox = (props: PropsWithChildren<ViewProps>) => {\n    const { backgroundLight } = useColors();\n    const { border } = useStyles();\n    return (\n        <View\n            {...props}\n            style={[\n                {\n                    ...border({ color: backgroundLight }),\n                    backgroundColor: backgroundLight,\n                    marginTop: Spacing.normal + Spacing.small,\n                    padding: Spacing.small + Spacing.tiny\n                },\n                props.style\n            ]}\n        />\n    );\n};\n\nexport default InfoBox;\n","import React from \"react\";\nimport { View, ViewStyle } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useStyles from \"../hooks/useStyles\";\nimport Button from \"./Button\";\nimport Text from \"./Text\";\n\nexport interface NoticeProps {\n    text: string;\n    clear?: boolean;\n    color?: string;\n    buttonText?: string;\n    onPressButton?: () => void;\n    style?: ViewStyle;\n}\n\nconst Notice = (props: NoticeProps) => {\n    const { border } = useStyles();\n    const borderStyle = border({ color: props.color });\n    const color = props.color || borderStyle.borderColor;\n    return (\n        <View style={[props.clear ? { paddingHorizontal: Spacing.tiny } : borderStyle, props.style]}>\n            <Text\n                note={true}\n                style={{\n                    color\n                }}>\n                {props.text}\n            </Text>\n            {props.buttonText && props.onPressButton && (\n                <Button\n                    title={props.buttonText}\n                    type={\"clear\"}\n                    size={\"small\"}\n                    fontWeight={\"bold\"}\n                    onPress={props.onPressButton}\n                    titleStyle={{ color }}\n                    buttonStyle={{ paddingHorizontal: 0, paddingVertical: 0 }}\n                    style={{ alignSelf: \"flex-end\", marginTop: Spacing.tiny }}\n                />\n            )}\n        </View>\n    );\n};\n\nexport default Notice;\n","import React from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\n\nconst Border = () => {\n    const { border } = useColors();\n    return (\n        <View\n            style={{\n                height: 1,\n                width: \"100%\",\n                backgroundColor: border,\n                marginTop: Spacing.small,\n                marginBottom: Spacing.small + Spacing.tiny\n            }}\n        />\n    );\n};\n\nexport default Border;\n","import { useContext, useEffect, useState } from \"react\";\n\nimport { Pair } from \"@sushiswap/sdk\";\nimport useAsyncEffect from \"use-async-effect\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport LPToken from \"../types/LPToken\";\nimport { fetchMyLPTokens, fetchMyUniswapLPTokens, fetchPools } from \"../utils/fetch-utils\";\nimport useDelayedOnBlockEffect from \"./useDelayedOnBlockEffect\";\nimport useSDK from \"./useSDK\";\nimport useTokenPairState, { TokenPairState } from \"./useTokenPairState\";\n\nexport interface LPTokensState extends TokenPairState {\n    updateLPTokens: () => Promise<void>;\n    lastTimeRefreshed: number;\n    updateLastTimeRefreshed: () => void;\n    lpTokens: LPToken[];\n    selectedLPToken?: LPToken;\n    setSelectedLPToken: (token?: LPToken) => void;\n    selectedLPTokenAllowed: boolean;\n    setSelectedLPTokenAllowed: (allowed: boolean) => void;\n    pair?: Pair;\n    amount: string;\n    setAmount: (amount: string) => void;\n}\n\ntype Mode = \"pools\" | \"my-lp-tokens\" | \"my-uniswap-lp-tokens\";\n\n// tslint:disable-next-line:max-func-body-length\nconst useLPTokensState: (mode: Mode) => LPTokensState = mode => {\n    const state = useTokenPairState();\n    const { provider, signer, address, tokens } = useContext(EthersContext);\n    const [lastTimeRefreshed, setLastTimeRefreshed] = useState(0);\n    const [loading, setLoading] = useState(true);\n    const [lpTokens, setLPTokens] = useState<LPToken[]>([]);\n    const [selectedLPToken, setSelectedLPToken] = useState<LPToken>();\n    const [selectedLPTokenAllowed, setSelectedLPTokenAllowed] = useState(false);\n    const [pair, setPair] = useState<Pair>();\n    const [amount, setAmount] = useState(\"\");\n    const { getPair } = useSDK();\n\n    const updateLPTokens = async () => {\n        if (provider && signer) {\n            try {\n                const data = await (mode === \"pools\"\n                    ? fetchPools(provider, signer)\n                    : mode === \"my-lp-tokens\"\n                    ? fetchMyLPTokens(tokens, provider, signer)\n                    : fetchMyUniswapLPTokens(tokens, provider, signer));\n                if (data) {\n                    setLPTokens(data);\n                }\n            } finally {\n                setLoading(false);\n            }\n        }\n    };\n\n    useEffect(() => {\n        if (!selectedLPToken) {\n            setAmount(\"\");\n        }\n    }, [selectedLPToken]);\n\n    useAsyncEffect(async () => {\n        setLoading(true);\n        setPair(undefined);\n        if (selectedLPToken && provider) {\n            try {\n                setPair(await getPair(selectedLPToken.tokenA, selectedLPToken.tokenB, provider));\n            } catch (e) {\n            } finally {\n                setLoading(false);\n            }\n        } else {\n            setLoading(false);\n        }\n    }, [selectedLPToken, provider]);\n\n    useDelayedOnBlockEffect(\n        async block => {\n            if (address && (mode === \"pools\" || tokens.length > 0)) {\n                if (!block) {\n                    setLoading(true);\n                }\n                await updateLPTokens();\n            }\n        },\n        () => \"updateLPTokens()\",\n        [tokens.length, address, lastTimeRefreshed],\n        0\n    );\n\n    return {\n        ...state,\n        fromToken: state.fromToken || selectedLPToken?.tokenA,\n        toToken: state.toToken || selectedLPToken?.tokenB,\n        updateLPTokens,\n        loading: state.loading || loading,\n        lastTimeRefreshed,\n        updateLastTimeRefreshed: () => {\n            setLastTimeRefreshed(Date.now());\n        },\n        lpTokens,\n        selectedLPToken,\n        setSelectedLPToken,\n        selectedLPTokenAllowed,\n        setSelectedLPTokenAllowed,\n        pair,\n        amount,\n        setAmount\n    };\n};\n\nexport default useLPTokensState;\n","import React, { FC, useCallback } from \"react\";\nimport { FlatList, View, ViewStyle } from \"react-native\";\n\nimport { ethers } from \"ethers\";\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport { LPTokensState } from \"../hooks/useLPTokensState\";\nimport LPToken from \"../types/LPToken\";\nimport { formatBalance, pow10 } from \"../utils\";\nimport CheckBox from \"./CheckBox\";\nimport Expandable from \"./Expandable\";\nimport FlexView from \"./FlexView\";\nimport { ITEM_SEPARATOR_HEIGHT } from \"./ItemSeparator\";\nimport Loading from \"./Loading\";\nimport Selectable from \"./Selectable\";\nimport Text from \"./Text\";\nimport TokenLogo from \"./TokenLogo\";\n\nexport type LPTokenSelectFilter = \"balance\" | \"amountDeposited\" | \"\";\n\nexport interface LPTokenSelectProps {\n    state: LPTokensState;\n    title: string;\n    emptyText: string;\n    showFilter?: boolean;\n    filter?: LPTokenSelectFilter;\n    onFilterChanged?: (filter: LPTokenSelectFilter) => void;\n    Item: FC<LPTokenItemProps>;\n    style?: ViewStyle;\n}\n\nexport interface LPTokenItemProps {\n    token: LPToken;\n    selected: boolean;\n    filter?: LPTokenSelectFilter;\n    onSelectToken: (token: LPToken) => void;\n}\n\nconst LPTokenSelect: FC<LPTokenSelectProps> = props => {\n    const onUnselectToken = () => props.state.setSelectedLPToken();\n    return (\n        <View style={props.style}>\n            <Expandable\n                title={props.title}\n                expanded={!props.state.selectedLPToken}\n                onExpand={() => props.state.setSelectedLPToken()}>\n                <LPTokenList state={props.state} filter={props.filter} emptyText={props.emptyText} Item={props.Item} />\n            </Expandable>\n            {props.state.selectedLPToken && (\n                <LPTokenItem token={props.state.selectedLPToken} selected={true} onSelectToken={onUnselectToken} />\n            )}\n        </View>\n    );\n};\n\nconst Filter = ({ filter, onFilterChanged }) => {\n    const handler = (f: string) => () => onFilterChanged(f);\n    return (\n        <FlexView style={{ width: \"100%\", justifyContent: \"flex-end\" }}>\n            <CheckBox checked={filter === \"balance\"} onPress={handler(\"balance\")} title={\"with balance\"} />\n            <CheckBox\n                checked={filter === \"amountDeposited\"}\n                onPress={handler(\"amountDeposited\")}\n                title={\"with deposit\"}\n            />\n            <CheckBox checked={!filter} onPress={handler(\"\")} title={\"all\"} />\n        </FlexView>\n    );\n};\n\n// tslint:disable-next-line:max-func-body-length\nconst LPTokenList = ({\n    state,\n    emptyText,\n    filter,\n    Item\n}: {\n    state: LPTokensState;\n    emptyText: string;\n    filter?: LPTokenSelectFilter;\n    Item: FC<LPTokenItemProps>;\n}) => {\n    const renderItem = useCallback(\n        ({ item }) => {\n            return (\n                <Item\n                    key={item.address}\n                    token={item}\n                    selected={false}\n                    filter={filter}\n                    onSelectToken={state.setSelectedLPToken}\n                />\n            );\n        },\n        [filter, state.setSelectedLPToken]\n    );\n    let data = state.lpTokens.sort((t1, t2) => {\n        return (t2.totalDeposited || ethers.constants.Zero)\n            .sub(t1.totalDeposited || ethers.constants.Zero)\n            .div(pow10(14))\n            .toNumber();\n    });\n    if (filter === \"amountDeposited\") {\n        data = data.filter(token => token.amountDeposited?.gt(0));\n    } else if (filter === \"balance\") {\n        data = data.filter(token => token.balance.gt(0));\n    }\n    return state.loading ? (\n        <Loading />\n    ) : data.length === 0 ? (\n        <EmptyList text={emptyText} />\n    ) : (\n        <FlatList keyExtractor={item => JSON.stringify(item)} data={data} renderItem={renderItem} />\n    );\n};\n\nconst EmptyList = ({ text }: { text: string }) => {\n    return (\n        <View style={{ margin: Spacing.normal }}>\n            <Text disabled={true} style={{ textAlign: \"center\", width: \"100%\" }}>\n                {text}\n            </Text>\n        </View>\n    );\n};\n\nexport const LPTokenItem: FC<LPTokenItemProps> = props => {\n    const { textMedium } = useColors();\n    const balance = formatBalance(props.token.balance, props.token.decimals, 8);\n    const onPress = useCallback(() => {\n        props.onSelectToken(props.token);\n    }, [props.onSelectToken, props.token]);\n    return (\n        <Selectable\n            selected={props.selected}\n            onPress={onPress}\n            containerStyle={{ marginBottom: ITEM_SEPARATOR_HEIGHT }}>\n            <FlexView style={{ alignItems: \"center\" }}>\n                <TokenLogo token={props.token.tokenA} small={true} replaceWETH={true} />\n                <TokenLogo token={props.token.tokenB} small={true} replaceWETH={true} style={{ marginLeft: 4 }} />\n                <Text medium={true} caption={true} style={{ marginLeft: Spacing.tiny }}>\n                    {props.token.tokenA.symbol}-{props.token.tokenB.symbol}\n                </Text>\n                <View style={{ flex: 1, marginLeft: Spacing.tiny }}>\n                    {/*<Text note={true} style={{ textAlign: \"right\", color: textLight }}>*/}\n                    {/*    My Balance*/}\n                    {/*</Text>*/}\n                    <Text caption={true} light={true} style={{ textAlign: \"right\", color: textMedium }}>\n                        {balance}\n                    </Text>\n                </View>\n            </FlexView>\n        </Selectable>\n    );\n};\n\nexport default LPTokenSelect;\n","import React from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useLinker from \"../hooks/useLinker\";\nimport Notice from \"./Notice\";\n\nconst ExperimentalNotice = (props: { contractURL: string }) => {\n    const onPressContract = useLinker(props.contractURL, \"\", \"_blank\");\n    return (\n        <View style={{ marginVertical: Spacing.tiny }}>\n            <Notice\n                text={\n                    \"This feature is in beta and contracts are unaudited. Read the contract yourself and use it at your own risk.\"\n                }\n                color={\"orange\"}\n                buttonText={\"View Contract\"}\n                onPressButton={onPressContract}\n            />\n        </View>\n    );\n};\n\nexport default ExperimentalNotice;\n","import { useCallback, useContext, useState } from \"react\";\n\nimport { ethers } from \"ethers\";\nimport useAsyncEffect from \"use-async-effect\";\nimport { MIGRATOR2 } from \"../constants/contracts\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport { parseBalance } from \"../utils\";\nimport useLPTokensState, { LPTokensState } from \"./useLPTokensState\";\nimport useSDK from \"./useSDK\";\n\nexport interface MigrateState extends LPTokensState {\n    onMigrate: () => Promise<void>;\n    migrating: boolean;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst useMigrateState: () => MigrateState = () => {\n    const state = useLPTokensState(\"my-uniswap-lp-tokens\");\n    const { provider, signer, getTokenAllowance, updateTokens } = useContext(EthersContext);\n    const { migrate } = useSDK();\n    const [loading, setLoading] = useState(false);\n    const [migrating, setMigrating] = useState(false);\n\n    useAsyncEffect(async () => {\n        if (provider && signer && state.selectedLPToken) {\n            setLoading(true);\n            state.setSelectedLPTokenAllowed(false);\n            try {\n                const minAllowance = ethers.BigNumber.from(2)\n                    .pow(96)\n                    .sub(1);\n                const allowance = await getTokenAllowance(state.selectedLPToken.address, MIGRATOR2);\n                state.setSelectedLPTokenAllowed(ethers.BigNumber.from(allowance).gte(minAllowance));\n            } finally {\n                setLoading(false);\n            }\n        }\n    }, [provider, signer, state.selectedLPToken]);\n\n    const onMigrate = useCallback(async () => {\n        if (state.selectedLPToken && state.amount && signer) {\n            setMigrating(true);\n            try {\n                const amount = parseBalance(state.amount, state.selectedLPToken.decimals);\n                const tx = await migrate(state.selectedLPToken, amount, signer);\n                await tx.wait();\n                await updateTokens();\n                await state.updateLPTokens();\n                state.setSelectedLPToken(undefined);\n            } finally {\n                setMigrating(false);\n            }\n        }\n    }, [state.selectedLPToken, state.amount, signer, updateTokens]);\n\n    return {\n        ...state,\n        loading: state.loading || loading,\n        onMigrate,\n        migrating\n    };\n};\n\nexport default useMigrateState;\n","import React, { useCallback, useState } from \"react\";\nimport { Platform, View } from \"react-native\";\n\nimport useAsyncEffect from \"use-async-effect\";\nimport ApproveButton from \"../components/ApproveButton\";\nimport Border from \"../components/Border\";\nimport Button from \"../components/Button\";\nimport Container from \"../components/Container\";\nimport Content from \"../components/Content\";\nimport ErrorMessage from \"../components/ErrorMessage\";\nimport ExperimentalNotice from \"../components/ExperimentalNotice\";\nimport FetchingButton from \"../components/FetchingButton\";\nimport Heading from \"../components/Heading\";\nimport InfoBox from \"../components/InfoBox\";\nimport InsufficientBalanceButton from \"../components/InsufficientBalanceButton\";\nimport LPTokenSelect, { LPTokenItem } from \"../components/LPTokenSelect\";\nimport Meta from \"../components/Meta\";\nimport Text from \"../components/Text\";\nimport Title from \"../components/Title\";\nimport TokenInput from \"../components/TokenInput\";\nimport WebFooter from \"../components/web/WebFooter\";\nimport { LiquiditySubMenu } from \"../components/web/WebSubMenu\";\nimport { MIGRATOR2 } from \"../constants/contracts\";\nimport { Spacing } from \"../constants/dimension\";\nimport useMigrateState, { MigrateState } from \"../hooks/useMigrateState\";\nimport MetamaskError from \"../types/MetamaskError\";\nimport { isEmptyValue, parseBalance } from \"../utils\";\nimport Screen from \"./Screen\";\n\nconst MigrateScreen = () => {\n    return (\n        <Screen>\n            <LiquiditySubMenu />\n            <Container>\n                <Content>\n                    <Title text={\"Migrate Liquidity\"} />\n                    <Text light={true}>Migrate your Uniswap LP tokens to SushiSwap LP tokens.</Text>\n                    <Migrate />\n                    {Platform.OS === \"web\" && <WebFooter />}\n                </Content>\n            </Container>\n        </Screen>\n    );\n};\n\nconst Migrate = () => {\n    const state = useMigrateState();\n    return (\n        <View style={{ marginTop: Spacing.large }}>\n            <LPTokenSelect\n                state={state}\n                title={\"Your Uniswap Liquidity\"}\n                emptyText={\"You don't have any liquidity on Uniswap.\"}\n                Item={LPTokenItem}\n            />\n            <ExperimentalNotice\n                contractURL={\"https://github.com/sushiswap/sushiswap/blob/master/contracts/Migrator2.sol\"}\n            />\n            <Border />\n            <AmountInput state={state} />\n            <AmountInfo state={state} />\n        </View>\n    );\n};\n\nconst AmountInput = ({ state }: { state: MigrateState }) => {\n    if (!state.selectedLPToken) {\n        return <Heading text={\"Amount of Tokens\"} disabled={true} />;\n    }\n    return (\n        <TokenInput\n            title={\"Amount of Tokens\"}\n            token={state.selectedLPToken}\n            amount={state.amount}\n            onAmountChanged={state.setAmount}\n        />\n    );\n};\n\nconst AmountInfo = ({ state }: { state: MigrateState }) => {\n    const disabled = !state.selectedLPToken || isEmptyValue(state.amount);\n    return (\n        <InfoBox>\n            <Meta label={state.selectedLPToken?.symbol || \"SushiSwap LP\"} text={state.amount} disabled={disabled} />\n            <Controls state={state} />\n        </InfoBox>\n    );\n};\n\nconst Controls = ({ state }: { state: MigrateState }) => {\n    const [error, setError] = useState<MetamaskError>({});\n    useAsyncEffect(() => setError({}), [state.amount]);\n    return (\n        <View style={{ marginTop: Spacing.normal }}>\n            {!state.selectedLPToken || isEmptyValue(state.amount) ? (\n                <MigrateButton state={state} onError={setError} disabled={true} />\n            ) : parseBalance(state.amount, state.selectedLPToken.decimals).gt(state.selectedLPToken.balance) ? (\n                <InsufficientBalanceButton symbol={state.selectedLPToken.symbol} />\n            ) : state.loading ? (\n                <FetchingButton />\n            ) : (\n                <>\n                    <ApproveButton\n                        token={state.selectedLPToken}\n                        spender={MIGRATOR2}\n                        onSuccess={() => state.setSelectedLPTokenAllowed(true)}\n                        onError={setError}\n                        hidden={state.selectedLPTokenAllowed}\n                    />\n                    <MigrateButton state={state} onError={setError} disabled={!state.selectedLPTokenAllowed} />\n                </>\n            )}\n            {error.message && error.code !== 4001 && <ErrorMessage error={error} />}\n        </View>\n    );\n};\n\nconst MigrateButton = ({\n    state,\n    onError,\n    disabled\n}: {\n    state: MigrateState;\n    onError: (e) => void;\n    disabled: boolean;\n}) => {\n    const onPress = useCallback(async () => {\n        onError({});\n        try {\n            await state.onMigrate();\n        } catch (e) {\n            onError(e);\n        }\n    }, []);\n    return <Button title={\"Migrate Liquidity\"} loading={state.migrating} onPress={onPress} disabled={disabled} />;\n};\n\nexport default MigrateScreen;\n"],"sourceRoot":""}