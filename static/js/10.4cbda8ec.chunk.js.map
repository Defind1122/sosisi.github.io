{"version":3,"sources":["src/components/Notice.tsx","src/components/ApproveButton.tsx","src/components/TokenAmount.tsx","src/components/TokenSymbol.tsx","src/components/UnsupportedButton.tsx","src/components/TokenName.tsx","src/components/TokenSearch.tsx","src/components/TokenSelect.tsx","src/components/ExperimentalNotice.tsx","src/hooks/useSwapState.tsx","src/screens/SwapScreen.tsx"],"names":["Notice","props","borderStyle","border","useStyles","color","borderColor","style","clear","paddingHorizontal","Spacing","tiny","note","text","buttonText","onPressButton","title","type","size","fontWeight","onPress","titleStyle","buttonStyle","paddingVertical","alignSelf","marginTop","ApproveButton","approveToken","useContext","EthersContext","useState","loading","setLoading","useCallback","a","async","token","onError","address","spender","tx","wait","onSuccess","hidden","symbol","containerStyle","marginBottom","TokenAmount","caption","disabled","formatBalance","amount","balance","decimals","TokenSymbol","medium","marginLeft","IS_DESKTOP","UnsupportedButton","state","fromSymbol","toSymbol","TokenName","Text","numberOfLines","ellipsizeMode","small","width","name","Loading","ActivityIndicator","position","right","bottom","TokenItem","accent","useColors","onSelectToken","Selectable","selected","ITEM_SEPARATOR_HEIGHT","FlexView","alignItems","TokenLogo","View","flex","Button","duplicate","height","TokenSearch","provider","signer","tokens","tokenToAdd","setTokenToAdd","findIndex","t","useEffect","undefined","useDelayedEffect","trim","ethers","utils","isAddress","findOrFetchToken","Input","value","onChangeText","placeholder","autoFocus","inputStyle","marginHorizontal","fontSize","inputContainerStyle","borderBottomWidth","marginRight","labelStyle","paddingTop","paddingBottom","onAddToken","TokenList","loadingTokens","renderItem","item","key","data","useMemo","filter","sort","t1","t2","isZero","localeCompare","length","FlatList","keyExtractor","EmptyList","margin","normal","textAlign","selectable","TokenSelect","addCustomToken","search","setSearch","query","setQuery","find","toLowerCase","Expandable","expanded","onExpand","onChangeSymbol","hide","includes","ExperimentalNotice","onPressContract","useLinker","contractURL","marginVertical","useSwapState","useTokenPairState","chainId","kovanSigner","updateTokens","useSDK","getTrade","swap","createOrder","calculateSwapFee","calculateLimitOrderFee","calculateLimitOrderReturn","orderType","setOrderType","priceInETH","setPriceInETH","trade","setTrade","unsupported","setUnsupported","swapFee","setSwapFee","limitOrderPrice","setLimitOrderPrice","limitOrderFee","setLimitOrderFee","limitOrderSwapFee","setLimitOrderSwapFee","limitOrderReturn","setLimitOrderReturn","swapping","setSwapping","creatingOrder","setCreatingOrder","setFromSymbol","useAsyncEffect","fromToken","constants","WeiPerEther","Token","toToken","WETH","Fetcher","fetchPairData","pair","parseBalance","priceOf","toFixed","isEmptyValue","fromAmount","useDelayedOnBlockEffect","block","sub","onSwap","result","onCreateOrder","amountIn","Fraction","parse","apply","mul","pow10","div","limitOrderUnsupported","Swap","large","Border","OrderTypeSelect","OrderTypeItem","desc","FromTokenSelect","customTokens","Heading","ETH","ToTokenSelect","setToSymbol","AmountInput","TokenInput","onAmountChanged","setFromAmount","AmountNotice","lte","PriceInput","marketPrice","executionPrice","Zero","maxButtonText","LimitOrderUnsupportedNotice","TradeInfo","InfoBox","WrapInfo","SwapInfo","textDark","textLight","outputAmount","price","impact","priceImpact","Meta","label","suffix","SwapControls","error","setError","approveRequired","fromTokenAllowed","gt","InsufficientBalanceButton","FetchingButton","ROUTER","setFromTokenAllowed","message","code","ErrorMessage","SwapButton","catch","WrapButton","onWrap","wrapping","UnwrapButton","onUnwrap","unwrapping","LimitOrderInfo","d","LimitOrderControls","getTokenAllowance","allowed","setAllowed","SETTLEMENT","allowance","BigNumber","from","gte","PriceTooLowButton","PlaceOrderButton","goToLimitOrders","SwapScreen","Screen","Container","Content","Title","light","Platform","OS","WebFooter"],"mappings":"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","file":"static/js/10.4cbda8ec.chunk.js","sourcesContent":["import React from \"react\";\nimport { View, ViewStyle } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useStyles from \"../hooks/useStyles\";\nimport Button from \"./Button\";\nimport Text from \"./Text\";\n\nexport interface NoticeProps {\n    text: string;\n    clear?: boolean;\n    color?: string;\n    buttonText?: string;\n    onPressButton?: () => void;\n    style?: ViewStyle;\n}\n\nconst Notice = (props: NoticeProps) => {\n    const { border } = useStyles();\n    const borderStyle = border({ color: props.color });\n    const color = props.color || borderStyle.borderColor;\n    return (\n        <View style={[props.clear ? { paddingHorizontal: Spacing.tiny } : borderStyle, props.style]}>\n            <Text\n                note={true}\n                style={{\n                    color\n                }}>\n                {props.text}\n            </Text>\n            {props.buttonText && props.onPressButton && (\n                <Button\n                    title={props.buttonText}\n                    type={\"clear\"}\n                    size={\"small\"}\n                    fontWeight={\"bold\"}\n                    onPress={props.onPressButton}\n                    titleStyle={{ color }}\n                    buttonStyle={{ paddingHorizontal: 0, paddingVertical: 0 }}\n                    style={{ alignSelf: \"flex-end\", marginTop: Spacing.tiny }}\n                />\n            )}\n        </View>\n    );\n};\n\nexport default Notice;\n","import React, { FC, useCallback, useContext, useState } from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport Token from \"../types/Token\";\nimport Button from \"./Button\";\n\nexport interface ApproveButtonProps {\n    token: Token;\n    spender: string;\n    onSuccess: () => void;\n    onError: (e) => void;\n    hidden?: boolean;\n}\n\nconst ApproveButton: FC<ApproveButtonProps> = props => {\n    const { approveToken } = useContext(EthersContext);\n    const [loading, setLoading] = useState(false);\n    const onPress = useCallback(async () => {\n        if (props.token) {\n            props.onError({});\n            setLoading(true);\n            try {\n                const tx = await approveToken(props.token.address, props.spender);\n                if (tx) {\n                    await tx.wait();\n                    props.onSuccess();\n                }\n            } catch (e) {\n                props.onError(e);\n            } finally {\n                setLoading(false);\n            }\n        }\n    }, [props.token]);\n    if (props.hidden) return <View />;\n    return (\n        <Button\n            title={\"Approve \" + (props.token?.symbol || \"\")}\n            onPress={onPress}\n            loading={loading}\n            containerStyle={{ marginBottom: Spacing.tiny }}\n        />\n    );\n};\n\nexport default ApproveButton;\n","import React from \"react\";\nimport { TextStyle } from \"react-native\";\n\nimport { ethers } from \"ethers\";\nimport Token from \"../types/Token\";\nimport { formatBalance } from \"../utils\";\nimport Text from \"./Text\";\n\nconst TokenAmount = (props: { token: Token; amount?: ethers.BigNumber; disabled?: boolean; style?: TextStyle }) => (\n    <Text caption={true} disabled={props.disabled} style={props.style}>\n        {formatBalance(props.amount || props.token.balance, props.token.decimals, 8)}\n    </Text>\n);\n\nexport default TokenAmount;\n","import React from \"react\";\n\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport Token from \"../types/Token\";\nimport Text from \"./Text\";\n\nconst TokenSymbol = (props: { token: Token; disabled?: boolean }) => (\n    <Text medium={true} caption={true} disabled={props.disabled} style={{ marginLeft: Spacing.tiny }}>\n        {IS_DESKTOP ? props.token.symbol : \"\"}\n    </Text>\n);\n\nexport default TokenSymbol;\n","import React from \"react\";\n\nimport { TokenPairState } from \"../hooks/useTokenPairState\";\nimport Button from \"./Button\";\n\nconst UnsupportedButton = ({ state }: { state: TokenPairState }) => {\n    return <Button title={state.fromSymbol + \"-\" + state.toSymbol + \" Not Supported\"} disabled={true} />;\n};\n\nexport default UnsupportedButton;\n","import React from \"react\";\n\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport Token from \"../types/Token\";\nimport Text from \"./Text\";\n\nconst TokenName = (props: { token: Token; disabled?: boolean }) => (\n    <Text\n        caption={true}\n        numberOfLines={1}\n        ellipsizeMode={\"tail\"}\n        style={{ marginLeft: Spacing.small, width: 180 }}\n        disabled={props.disabled}>\n        {IS_DESKTOP ? props.token.name : props.token.symbol}\n    </Text>\n);\n\nexport default TokenName;\n","import React, { FC, useCallback, useContext, useEffect, useState } from \"react\";\nimport { ActivityIndicator, View } from \"react-native\";\n\nimport { ethers } from \"ethers\";\nimport { Spacing } from \"../constants/dimension\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport useColors from \"../hooks/useColors\";\nimport useDelayedEffect from \"../hooks/useDelayedEffect\";\nimport useStyles from \"../hooks/useStyles\";\nimport Token from \"../types/Token\";\nimport { findOrFetchToken } from \"../utils/fetch-utils\";\nimport Button from \"./Button\";\nimport FlexView from \"./FlexView\";\nimport Input from \"./Input\";\nimport { ITEM_SEPARATOR_HEIGHT } from \"./ItemSeparator\";\nimport Selectable from \"./Selectable\";\nimport TokenLogo from \"./TokenLogo\";\nimport TokenName from \"./TokenName\";\n\nexport interface TokenSearchProps {\n    tokens?: Token[];\n    text: string;\n    onChangeText: (text: string) => void;\n    onAddToken?: (token: Token) => void;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst TokenSearch: FC<TokenSearchProps> = props => {\n    const { border } = useStyles();\n    const { provider, signer, tokens } = useContext(EthersContext);\n    const [tokenToAdd, setTokenToAdd] = useState<Token>();\n    const [loading, setLoading] = useState(false);\n    const duplicate = !!tokenToAdd && tokens.findIndex(t => t.address === tokenToAdd.address) !== -1;\n    if (!props.tokens) return <View />;\n    useEffect(() => {\n        if (props.text === \"\") {\n            setLoading(false);\n            setTokenToAdd(undefined);\n        }\n    }, [props.text]);\n    useDelayedEffect(\n        async () => {\n            const address = props.text.trim();\n            if (provider && signer && ethers.utils.isAddress(address)) {\n                setLoading(true);\n                try {\n                    const token = await findOrFetchToken(provider, address);\n                    if (token.name && token.symbol && token.decimals) {\n                        setTokenToAdd(token as Token);\n                    }\n                } finally {\n                    setLoading(false);\n                }\n            }\n        },\n        300,\n        [provider, signer, props.text]\n    );\n    return (\n        <View>\n            <FlexView style={{ marginBottom: Spacing.small }}>\n                <Input\n                    value={props.text}\n                    onChangeText={props.onChangeText}\n                    placeholder={\"Token name, symbol or address\"}\n                    autoFocus={true}\n                    inputStyle={{ marginHorizontal: Spacing.tiny, fontSize: props.text ? 20 : 16 }}\n                    inputContainerStyle={{ borderBottomWidth: 0, marginRight: loading ? 32 : 0 }}\n                    labelStyle={{ height: 0 }}\n                    containerStyle={{\n                        ...border(),\n                        paddingHorizontal: Spacing.tiny,\n                        paddingTop: 12,\n                        paddingBottom: 0\n                    }}\n                />\n                {props.onAddToken && loading && <Loading />}\n            </FlexView>\n            {props.onAddToken && tokenToAdd && (\n                <TokenItem token={tokenToAdd} selected={true} onSelectToken={props.onAddToken} duplicate={duplicate} />\n            )}\n        </View>\n    );\n};\n\nconst Loading = () => <ActivityIndicator size={\"small\"} style={{ position: \"absolute\", right: 16, bottom: 16 }} />;\n\nconst TokenItem = (props: {\n    token: Token;\n    selected: boolean;\n    onSelectToken: (token: Token) => void;\n    duplicate: boolean;\n}) => {\n    const { accent } = useColors();\n    const onPress = useCallback(() => {\n        props.onSelectToken(props.token);\n    }, [props.onSelectToken, props.token]);\n    return (\n        <Selectable\n            selected={false}\n            disabled={true}\n            onPress={onPress}\n            containerStyle={{\n                marginBottom: ITEM_SEPARATOR_HEIGHT\n            }}>\n            <FlexView style={{ alignItems: \"center\" }}>\n                <TokenLogo token={props.token} />\n                <TokenName token={props.token} />\n                <View style={{ flex: 1 }} />\n                <Button\n                    type={\"clear\"}\n                    size={\"small\"}\n                    color={accent}\n                    title={props.duplicate ? \"Already Added\" : \"ADD \" + props.token.symbol}\n                    fontWeight={\"bold\"}\n                    onPress={onPress}\n                    disabled={props.duplicate}\n                    buttonStyle={{ paddingHorizontal: 4, height: 27 }}\n                />\n            </FlexView>\n        </Selectable>\n    );\n};\n\nexport default TokenSearch;\n","import React, { FC, useCallback, useContext, useEffect, useMemo, useState } from \"react\";\nimport { FlatList, View, ViewStyle } from \"react-native\";\n\nimport { ethers } from \"ethers\";\nimport { Spacing } from \"../constants/dimension\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport useDelayedEffect from \"../hooks/useDelayedEffect\";\nimport Token from \"../types/Token\";\nimport Expandable from \"./Expandable\";\nimport FlexView from \"./FlexView\";\nimport { ITEM_SEPARATOR_HEIGHT } from \"./ItemSeparator\";\nimport Loading from \"./Loading\";\nimport Selectable from \"./Selectable\";\nimport Text from \"./Text\";\nimport TokenAmount from \"./TokenAmount\";\nimport TokenLogo from \"./TokenLogo\";\nimport TokenName from \"./TokenName\";\nimport TokenSearch from \"./TokenSearch\";\nimport TokenSymbol from \"./TokenSymbol\";\n\nexport interface TokenSelectProps {\n    title: string;\n    symbol: string;\n    onChangeSymbol: (symbol: string) => void;\n    disabled?: (token: Token) => boolean;\n    hidden?: (token: Token) => boolean;\n    style?: ViewStyle;\n}\n\nconst TokenSelect: FC<TokenSelectProps> = props => {\n    const { tokens, addCustomToken } = useContext(EthersContext);\n    const [search, setSearch] = useState(\"\");\n    const [query, setQuery] = useState(\"\");\n    const token = useMemo(() => tokens.find(t => t.symbol === props.symbol), [tokens, props.symbol]);\n    const onSelectToken = t => props.onChangeSymbol(t.symbol);\n    const onUnselectToken = () => props.onChangeSymbol(\"\");\n    const onAddToken = async (t: Token) => {\n        await addCustomToken(t);\n        setSearch(\"\");\n        setQuery(\"\");\n    };\n    const hidden = (t: Token) => {\n        let hide = props.hidden?.(t) || false;\n        if (!hide && query.length > 0 && !ethers.utils.isAddress(query)) {\n            hide = !t.symbol.toLowerCase().includes(query) && !t.name.toLowerCase().includes(query);\n        }\n        return hide;\n    };\n    useEffect(() => setSearch(\"\"), [props.symbol]);\n    useDelayedEffect(() => setQuery(search.trim().toLowerCase()), 300, [search]);\n    return (\n        <View style={props.style}>\n            <Expandable title={props.title} expanded={!props.symbol} onExpand={() => props.onChangeSymbol(\"\")}>\n                <TokenSearch text={search} onChangeText={setSearch} tokens={tokens} onAddToken={onAddToken} />\n                <TokenList disabled={props.disabled} hidden={hidden} onSelectToken={onSelectToken} />\n            </Expandable>\n            {token && <TokenItem token={token} selected={true} onSelectToken={onUnselectToken} selectable={true} />}\n        </View>\n    );\n};\n\n// tslint:disable-next-line:max-func-body-length\nconst TokenList = (props: {\n    onSelectToken: (token: Token) => void;\n    disabled?: (token: Token) => boolean;\n    hidden?: (token: Token) => boolean;\n}) => {\n    const { loadingTokens, tokens } = useContext(EthersContext);\n    const renderItem = useCallback(\n        ({ item }) => {\n            return (\n                <TokenItem\n                    key={item.address}\n                    token={item}\n                    selected={false}\n                    onSelectToken={props.onSelectToken}\n                    disabled={props.disabled?.(item)}\n                />\n            );\n        },\n        [props.onSelectToken, props.disabled]\n    );\n    const data = useMemo(\n        () =>\n            tokens\n                .filter(token => (props.hidden ? !props.hidden(token) : true))\n                .sort(\n                    (t1, t2) =>\n                        (t2.balance.isZero() ? 0 : 10000000000) -\n                        (t1.balance.isZero() ? 0 : 10000000000) +\n                        t1.symbol.localeCompare(t2.symbol)\n                ),\n        [tokens, props.hidden]\n    );\n    return loadingTokens ? (\n        <Loading />\n    ) : data.length === 0 ? (\n        <EmptyList />\n    ) : (\n        <FlatList keyExtractor={item => item.address} data={data} renderItem={renderItem} />\n    );\n};\n\nconst EmptyList = () => {\n    return (\n        <View style={{ margin: Spacing.normal }}>\n            <Text disabled={true} style={{ textAlign: \"center\", width: \"100%\" }}>\n                {\"You don't have any matching tokens.\"}\n            </Text>\n        </View>\n    );\n};\n\nconst TokenItem = (props: {\n    token: Token;\n    selected: boolean;\n    onSelectToken: (token: Token) => void;\n    disabled?: boolean;\n    selectable?: boolean;\n}) => {\n    const onPress = useCallback(() => {\n        props.onSelectToken(props.token);\n    }, [props.onSelectToken, props.token]);\n    return (\n        <Selectable\n            selected={props.selected}\n            onPress={onPress}\n            disabled={props.disabled || props.selectable}\n            containerStyle={{\n                marginBottom: ITEM_SEPARATOR_HEIGHT\n            }}>\n            <FlexView style={{ alignItems: \"center\" }}>\n                <TokenLogo token={props.token} disabled={props.disabled} />\n                <TokenName token={props.token} disabled={props.disabled} />\n                <TokenAmount token={props.token} disabled={props.disabled} style={{ flex: 1, textAlign: \"right\" }} />\n                <TokenSymbol token={props.token} disabled={props.disabled} />\n            </FlexView>\n        </Selectable>\n    );\n};\n\nexport default TokenSelect;\n","import React from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useLinker from \"../hooks/useLinker\";\nimport Notice from \"./Notice\";\n\nconst ExperimentalNotice = (props: { contractURL: string }) => {\n    const onPressContract = useLinker(props.contractURL, \"\", \"_blank\");\n    return (\n        <View style={{ marginVertical: Spacing.tiny }}>\n            <Notice\n                text={\n                    \"This feature is in beta and contracts are unaudited. Read the contract yourself and use it at your own risk.\"\n                }\n                color={\"orange\"}\n                buttonText={\"View Contract\"}\n                onPressButton={onPressContract}\n            />\n        </View>\n    );\n};\n\nexport default ExperimentalNotice;\n","import { useCallback, useContext, useEffect, useState } from \"react\";\n\nimport { Trade } from \"@sushiswap/sdk\";\nimport { Fetcher, Token, WETH } from \"@uniswap/sdk\";\nimport { ethers } from \"ethers\";\nimport useAsyncEffect from \"use-async-effect\";\nimport { IS_DESKTOP } from \"../constants/dimension\";\nimport Fraction from \"../constants/Fraction\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport { formatBalance, isEmptyValue, parseBalance, pow10 } from \"../utils\";\nimport useDelayedEffect from \"./useDelayedEffect\";\nimport useDelayedOnBlockEffect from \"./useDelayedOnBlockEffect\";\nimport useSDK from \"./useSDK\";\nimport useTokenPairState, { TokenPairState } from \"./useTokenPairState\";\n\nexport type OrderType = \"market\" | \"limit\";\n\nexport interface SwapState extends TokenPairState {\n    orderType?: OrderType;\n    setOrderType: (orderType?: OrderType) => void;\n    priceInETH?: ethers.BigNumber | null;\n    trade?: Trade;\n    unsupported: boolean;\n    limitOrderUnsupported: boolean;\n    limitOrderPrice: string;\n    setLimitOrderPrice: (price: string) => void;\n    swapFee: string;\n    limitOrderFee: string;\n    limitOrderSwapFee: string;\n    limitOrderReturn: string;\n    onSwap: () => Promise<void>;\n    swapping: boolean;\n    onCreateOrder: () => Promise<void>;\n    creatingOrder: boolean;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst useSwapState: () => SwapState = () => {\n    const state = useTokenPairState();\n    const { chainId, provider, signer, kovanSigner, updateTokens } = useContext(EthersContext);\n    const {\n        getTrade,\n        swap,\n        createOrder,\n        calculateSwapFee,\n        calculateLimitOrderFee,\n        calculateLimitOrderReturn\n    } = useSDK();\n    const [loading, setLoading] = useState(true);\n    const [orderType, setOrderType] = useState<OrderType>();\n    const [priceInETH, setPriceInETH] = useState<ethers.BigNumber | null>();\n    const [trade, setTrade] = useState<Trade>();\n    const [unsupported, setUnsupported] = useState(false);\n    const [swapFee, setSwapFee] = useState(\"\");\n    const [limitOrderPrice, setLimitOrderPrice] = useState<string>(\"\");\n    const [limitOrderFee, setLimitOrderFee] = useState(\"\");\n    const [limitOrderSwapFee, setLimitOrderSwapFee] = useState(\"\");\n    const [limitOrderReturn, setLimitOrderReturn] = useState(\"\");\n    const [swapping, setSwapping] = useState(false);\n    const [creatingOrder, setCreatingOrder] = useState(false);\n\n    useEffect(() => {\n        if (!orderType) {\n            state.setFromSymbol(\"\");\n        }\n        setLimitOrderPrice(\"\");\n    }, [orderType]);\n\n    useAsyncEffect(async () => {\n        setPriceInETH(undefined);\n        if (provider && state.fromToken) {\n            if (state.fromToken.symbol === \"WETH\") {\n                setPriceInETH(ethers.constants.WeiPerEther);\n            } else {\n                try {\n                    const fromToken = new Token(chainId, state.fromToken.address, state.fromToken.decimals);\n                    const toToken = WETH[chainId];\n                    const pair = await Fetcher.fetchPairData(fromToken, toToken);\n                    setPriceInETH(parseBalance(pair.priceOf(toToken).toFixed(), fromToken.decimals));\n                } catch (e) {\n                    setPriceInETH(null);\n                }\n            }\n        }\n    }, [chainId, provider, state.fromToken]);\n\n    useDelayedEffect(\n        () => {\n            if (isEmptyValue(state.fromAmount)) {\n                setLimitOrderPrice(\"\");\n                setTrade(undefined);\n            }\n        },\n        300,\n        [state.fromAmount]\n    );\n\n    useDelayedOnBlockEffect(\n        async block => {\n            if (!block) {\n                setLoading(true);\n            }\n            if (state.fromToken && state.toToken && state.fromAmount && signer?.provider) {\n                const amount = parseBalance(state.fromAmount, state.fromToken.decimals);\n                if (!amount.isZero()) {\n                    setUnsupported(false);\n                    try {\n                        setTrade(await getTrade(state.fromToken, state.toToken, amount, signer?.provider));\n                    } catch (e) {\n                        setUnsupported(true);\n                    } finally {\n                        setLoading(false);\n                    }\n                }\n            }\n        },\n        () => \"getTrade(\" + state.fromSymbol + \",\" + state.toSymbol + \",\" + state.fromAmount + \")\",\n        [state.fromSymbol, state.toSymbol, state.fromAmount]\n    );\n\n    useAsyncEffect(() => {\n        if (trade && !isEmptyValue(state.fromAmount)) {\n            const fromAmount = parseBalance(state.fromAmount, state.fromToken!.decimals);\n            setSwapFee(formatBalance(calculateSwapFee(fromAmount), state.fromToken!.decimals, 8));\n            if (orderType === \"limit\") {\n                setLimitOrderFee(formatBalance(calculateLimitOrderFee(fromAmount), state.fromToken!.decimals, 8));\n                setLimitOrderSwapFee(\n                    formatBalance(\n                        calculateSwapFee(fromAmount.sub(calculateLimitOrderFee(fromAmount))),\n                        state.fromToken!.decimals,\n                        8\n                    )\n                );\n            }\n        }\n    }, [orderType, trade, state.fromAmount]);\n\n    useAsyncEffect(() => {\n        if (state.fromToken && state.toToken && !isEmptyValue(state.fromAmount) && !isEmptyValue(limitOrderPrice)) {\n            setLimitOrderReturn(\n                formatBalance(\n                    calculateLimitOrderReturn(\n                        state.fromToken,\n                        state.toToken,\n                        parseBalance(state.fromAmount, state.fromToken.decimals),\n                        limitOrderPrice\n                    ),\n                    state.toToken.decimals,\n                    IS_DESKTOP ? 18 : 8\n                )\n            );\n        }\n    }, [state.fromToken, state.toToken, state.fromAmount, limitOrderPrice]);\n\n    const onSwap = useCallback(async () => {\n        if (state.fromToken && state.toToken && state.fromAmount && signer && trade) {\n            setSwapping(true);\n            try {\n                const result = await swap(trade, signer);\n                if (result) {\n                    await result.tx.wait();\n                    await updateTokens();\n                    setTrade(undefined);\n                    setOrderType(undefined);\n                }\n            } finally {\n                setSwapping(false);\n            }\n        }\n    }, [state.fromToken, state.toToken, state.fromAmount, signer, trade]);\n\n    const onCreateOrder = useCallback(async () => {\n        if (\n            state.fromToken &&\n            state.toToken &&\n            state.fromAmount &&\n            !isEmptyValue(limitOrderPrice) &&\n            signer &&\n            kovanSigner\n        ) {\n            setCreatingOrder(true);\n            try {\n                const amountIn = parseBalance(state.fromAmount, state.fromToken.decimals);\n                const tx = await createOrder(\n                    state.fromToken,\n                    state.toToken,\n                    amountIn,\n                    Fraction.parse(limitOrderPrice)\n                        .apply(amountIn)\n                        .mul(pow10(state.toToken.decimals))\n                        .div(pow10(state.fromToken.decimals)),\n                    signer,\n                    kovanSigner\n                );\n                await tx.wait();\n                setTrade(undefined);\n                setOrderType(undefined);\n            } finally {\n                setCreatingOrder(false);\n            }\n        }\n    }, [state.fromToken, state.toToken, state.fromAmount, signer, kovanSigner, limitOrderPrice]);\n\n    return {\n        ...state,\n        loading: loading || state.loading,\n        orderType,\n        setOrderType,\n        priceInETH,\n        trade,\n        unsupported,\n        swapFee,\n        limitOrderPrice,\n        setLimitOrderPrice,\n        limitOrderFee,\n        limitOrderSwapFee,\n        limitOrderReturn,\n        onSwap,\n        swapping,\n        limitOrderUnsupported: orderType === \"limit\" && (state.fromSymbol === \"ETH\" || state.toSymbol === \"ETH\"),\n        onCreateOrder,\n        creatingOrder\n    };\n};\n\nexport default useSwapState;\n","import React, { useCallback, useContext, useState } from \"react\";\nimport { Platform, View } from \"react-native\";\n\nimport { ethers } from \"ethers\";\nimport useAsyncEffect from \"use-async-effect\";\nimport ApproveButton from \"../components/ApproveButton\";\nimport Border from \"../components/Border\";\nimport Button from \"../components/Button\";\nimport Container from \"../components/Container\";\nimport Content from \"../components/Content\";\nimport ErrorMessage from \"../components/ErrorMessage\";\nimport Expandable from \"../components/Expandable\";\nimport ExperimentalNotice from \"../components/ExperimentalNotice\";\nimport FetchingButton from \"../components/FetchingButton\";\nimport Heading from \"../components/Heading\";\nimport InfoBox from \"../components/InfoBox\";\nimport InsufficientBalanceButton from \"../components/InsufficientBalanceButton\";\nimport { ITEM_SEPARATOR_HEIGHT } from \"../components/ItemSeparator\";\nimport Meta from \"../components/Meta\";\nimport Notice from \"../components/Notice\";\nimport Selectable from \"../components/Selectable\";\nimport Text from \"../components/Text\";\nimport Title from \"../components/Title\";\nimport TokenInput from \"../components/TokenInput\";\nimport TokenSelect from \"../components/TokenSelect\";\nimport UnsupportedButton from \"../components/UnsupportedButton\";\nimport WebFooter from \"../components/web/WebFooter\";\nimport { SwapSubMenu } from \"../components/web/WebSubMenu\";\nimport { ROUTER, SETTLEMENT } from \"../constants/contracts\";\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport Fraction from \"../constants/Fraction\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport useColors from \"../hooks/useColors\";\nimport useDelayedEffect from \"../hooks/useDelayedEffect\";\nimport useLinker from \"../hooks/useLinker\";\nimport useSwapState, { OrderType, SwapState } from \"../hooks/useSwapState\";\nimport MetamaskError from \"../types/MetamaskError\";\nimport Token from \"../types/Token\";\nimport { formatBalance, isEmptyValue, parseBalance } from \"../utils\";\nimport Screen from \"./Screen\";\n\nconst SwapScreen = () => {\n    return (\n        <Screen>\n            <SwapSubMenu />\n            <Container>\n                <Content>\n                    <Title text={\"New Order\"} />\n                    <Text light={true}>Swap now or place a limit order with a desired price.</Text>\n                    <Swap />\n                    {Platform.OS === \"web\" && <WebFooter />}\n                </Content>\n            </Container>\n        </Screen>\n    );\n};\n\nconst Swap = () => {\n    const state = useSwapState();\n    return (\n        <View style={{ marginTop: Spacing.large }}>\n            <OrderTypeSelect state={state} />\n            <Border />\n            <FromTokenSelect state={state} />\n            <Border />\n            <ToTokenSelect state={state} />\n            <Border />\n            <AmountInput state={state} />\n            {state.orderType === \"limit\" && (\n                <View>\n                    <AmountNotice state={state} />\n                    <Border />\n                    <PriceInput state={state} />\n                </View>\n            )}\n            <TradeInfo state={state} />\n        </View>\n    );\n};\n\nconst OrderTypeSelect = ({ state }: { state: SwapState }) => {\n    return (\n        <View>\n            <Expandable title={\"Order Type\"} expanded={!state.orderType} onExpand={() => state.setOrderType()}>\n                <OrderTypeItem state={state} orderType={\"market\"} />\n                <OrderTypeItem state={state} orderType={\"limit\"} />\n            </Expandable>\n            {state.orderType && <OrderTypeItem state={state} orderType={state.orderType} selectable={true} />}\n            {state.orderType === \"limit\" && (\n                <ExperimentalNotice\n                    contractURL={\n                        \"https://github.com/sushiswap/sushiswap-settlement/blob/master/contracts/Settlement.sol\"\n                    }\n                />\n            )}\n        </View>\n    );\n};\n\nconst OrderTypeItem = ({\n    state,\n    orderType,\n    selectable\n}: {\n    state: SwapState;\n    orderType: OrderType;\n    selectable?: boolean;\n}) => {\n    const selected = state.orderType === orderType;\n    const type = orderType === \"market\" ? \"Market Order\" : \"Limit Order\";\n    const desc =\n        orderType === \"market\" ? \"Settle an order immediately\" : \"Place an order with a desired price to be settled\";\n    const onPress = () => state.setOrderType(state.orderType === orderType ? undefined : orderType);\n    return (\n        <Selectable\n            containerStyle={{ marginBottom: ITEM_SEPARATOR_HEIGHT }}\n            style={{\n                paddingHorizontal: Spacing.small + Spacing.tiny\n            }}\n            selected={selected}\n            disabled={selectable}\n            onPress={onPress}>\n            <Text fontWeight={\"regular\"}>{type}</Text>\n            <Text note={true}>{desc}</Text>\n        </Selectable>\n    );\n};\n\nconst FromTokenSelect = ({ state }: { state: SwapState }) => {\n    const { tokens, customTokens } = useContext(EthersContext);\n    if (!state.orderType) {\n        return <Heading text={\"Token To Sell\"} disabled={true} />;\n    }\n    const ETH = tokens ? tokens.find(token => token.symbol === \"ETH\") : null;\n    return (\n        <View>\n            <TokenSelect\n                title={\"Token To Sell\"}\n                symbol={state.fromSymbol}\n                onChangeSymbol={state.setFromSymbol}\n                hidden={token =>\n                    (!customTokens.find(t => t.address === token.address) && token.balance.isZero()) ||\n                    (state.orderType === \"limit\" && token.symbol === \"ETH\")\n                }\n            />\n            {state.orderType === \"limit\" && !state.fromSymbol && ETH && !ETH.balance.isZero() && (\n                <LimitOrderUnsupportedNotice />\n            )}\n        </View>\n    );\n};\n\nconst ToTokenSelect = ({ state }: { state: SwapState }) => {\n    if (!state.orderType || !state.fromSymbol) {\n        return <Heading text={\"Token To Buy\"} disabled={true} />;\n    }\n    return (\n        <View>\n            <TokenSelect\n                title={\"Token To Buy\"}\n                symbol={state.toSymbol}\n                onChangeSymbol={state.setToSymbol}\n                hidden={token =>\n                    token.symbol === state.fromSymbol || (state.orderType === \"limit\" && token.symbol === \"ETH\")\n                }\n            />\n            {state.orderType === \"limit\" && !state.toSymbol && <LimitOrderUnsupportedNotice />}\n        </View>\n    );\n};\n\nconst AmountInput = ({ state }: { state: SwapState }) => {\n    if (!state.fromSymbol || !state.toSymbol) {\n        return <Heading text={\"Amount\"} disabled={true} />;\n    }\n    return (\n        <View>\n            <Heading text={state.fromSymbol + \" Amount\"} />\n            <TokenInput\n                token={state.fromToken}\n                amount={state.fromAmount}\n                onAmountChanged={state.setFromAmount}\n                autoFocus={true}\n            />\n        </View>\n    );\n};\n\nconst AmountNotice = ({ state }: { state: SwapState }) => {\n    if (\n        state.priceInETH === undefined ||\n        isEmptyValue(state.fromAmount) ||\n        !state.fromToken ||\n        (state.priceInETH && parseBalance(state.fromAmount, state.fromToken.decimals).lte(state.priceInETH.mul(10)))\n    ) {\n        return <View />;\n    }\n    return (\n        <View style={{ marginTop: Spacing.small }}>\n            <Notice\n                text={\n                    state.priceInETH === null\n                        ? \"This token is not supported in beta.\"\n                        : \"Maximum allowed amount in beta is \" +\n                          formatBalance(state.priceInETH.mul(10), state.fromToken!.decimals) +\n                          \" \" +\n                          state.fromSymbol +\n                          \" (≈ 10 ETH).\"\n                }\n                color={\"red\"}\n            />\n        </View>\n    );\n};\n\nconst PriceInput = ({ state }: { state: SwapState }) => {\n    if (!state.fromSymbol || !state.toSymbol) {\n        return <Heading text={\"Minimum Price\"} disabled={true} />;\n    }\n    const marketPrice =\n        state.toToken && state.trade\n            ? parseBalance(state.trade.executionPrice.toFixed(state.toToken.decimals), state.toToken.decimals)\n            : ethers.constants.Zero;\n    return (\n        <TokenInput\n            title={\"Minimum Price (\" + state.toSymbol + \"/\" + state.fromSymbol + \")\"}\n            token={\n                {\n                    ...state.toToken,\n                    balance: marketPrice\n                } as Token\n            }\n            amount={state.limitOrderPrice}\n            onAmountChanged={state.setLimitOrderPrice}\n            maxButtonText={\"MARKET\"}\n        />\n    );\n};\n\nconst LimitOrderUnsupportedNotice = () => {\n    const { placeholder } = useColors();\n    return (\n        <Notice\n            text={\"⚠️ ETH not supported for limit orders. Use WETH instead.\"}\n            color={placeholder}\n            clear={true}\n            style={{ marginVertical: Spacing.small }}\n        />\n    );\n};\n\nconst TradeInfo = ({ state }: { state: SwapState }) => {\n    if (\n        (state.fromSymbol === \"ETH\" && state.toSymbol === \"WETH\") ||\n        (state.fromSymbol === \"WETH\" && state.toSymbol === \"ETH\")\n    ) {\n        return <WrapInfo state={state} />;\n    }\n    const disabled =\n        state.fromSymbol === \"\" ||\n        state.toSymbol === \"\" ||\n        isEmptyValue(state.fromAmount) ||\n        (state.orderType === \"limit\" && state.fromSymbol === \"ETH\");\n    return (\n        <InfoBox>\n            {state.orderType === \"limit\" ? (\n                <LimitOrderInfo state={state} />\n            ) : (\n                <SwapInfo state={state} disabled={disabled} />\n            )}\n        </InfoBox>\n    );\n};\n\nconst WrapInfo = ({ state }: { state: SwapState }) => {\n    const disabled = isEmptyValue(state.fromAmount);\n    return (\n        <InfoBox>\n            <Text style={{ fontSize: 28, marginBottom: Spacing.normal }} disabled={disabled}>\n                {disabled ? \"N/A\" : state.fromAmount + \" \" + state.toSymbol}\n            </Text>\n            <SwapControls state={state} />\n        </InfoBox>\n    );\n};\n\nconst SwapInfo = ({ state, disabled }: { state: SwapState; disabled: boolean }) => {\n    const { textDark, textLight, placeholder } = useColors();\n    const amount = state.trade?.outputAmount?.toFixed(IS_DESKTOP ? 18 : 8);\n    const price = state.trade?.executionPrice?.toFixed(IS_DESKTOP ? 18 : 8);\n    const impact = state.trade?.priceImpact?.toFixed(2);\n    return (\n        <View>\n            <Text\n                style={{\n                    fontSize: 28,\n                    marginBottom: Spacing.normal,\n                    color: disabled ? placeholder : amount ? textDark : textLight\n                }}>\n                {disabled ? \"N/A\" : amount ? amount + \" \" + state.toSymbol : \"Fetching…\"}\n            </Text>\n            <Meta\n                label={\"Price\"}\n                text={price}\n                suffix={state.toSymbol + \"  = 1 \" + state.fromSymbol}\n                disabled={disabled}\n            />\n            <Meta label={\"Price Impact\"} text={impact} suffix={\"%\"} disabled={disabled} />\n            <Meta label={\"Fee (0.30%)\"} text={state.swapFee} suffix={state.fromSymbol} disabled={disabled} />\n            <SwapControls state={state} />\n        </View>\n    );\n};\n\n// tslint:disable-next-line:max-func-body-length\nconst SwapControls = ({ state }: { state: SwapState }) => {\n    const [error, setError] = useState<MetamaskError>({});\n    useAsyncEffect(() => setError({}), [state.fromSymbol, state.toSymbol, state.fromAmount]);\n    const approveRequired = state.fromSymbol !== \"ETH\" && !state.fromTokenAllowed;\n    return (\n        <View style={{ marginTop: Spacing.normal }}>\n            {!state.fromToken || !state.toToken || isEmptyValue(state.fromAmount) ? (\n                <SwapButton state={state} onError={setError} disabled={true} />\n            ) : parseBalance(state.fromAmount, state.fromToken.decimals).gt(state.fromToken.balance) ? (\n                <InsufficientBalanceButton symbol={state.fromSymbol} />\n            ) : state.fromSymbol === \"WETH\" && state.toSymbol === \"ETH\" ? (\n                <UnwrapButton state={state} onError={setError} />\n            ) : state.fromSymbol === \"ETH\" && state.toSymbol === \"WETH\" ? (\n                <WrapButton state={state} onError={setError} />\n            ) : state.unsupported ? (\n                <UnsupportedButton state={state} />\n            ) : state.loading || !state.trade ? (\n                <FetchingButton />\n            ) : (\n                <>\n                    <ApproveButton\n                        token={state.fromToken}\n                        spender={ROUTER}\n                        onSuccess={() => state.setFromTokenAllowed(true)}\n                        onError={setError}\n                        hidden={!approveRequired}\n                    />\n                    <SwapButton state={state} onError={setError} disabled={approveRequired} />\n                </>\n            )}\n            {error.message && error.code !== 4001 && <ErrorMessage error={error} />}\n        </View>\n    );\n};\n\nconst SwapButton = ({ state, onError, disabled }: { state: SwapState; onError: (e) => void; disabled: boolean }) => {\n    const onPress = useCallback(() => {\n        onError({});\n        state.onSwap().catch(onError);\n    }, [state.onSwap, onError]);\n    return (\n        <Button\n            title={state.fromSymbol && state.toSymbol ? \"Swap \" + state.fromSymbol + \"-\" + state.toSymbol : \"Swap\"}\n            disabled={disabled}\n            loading={state.swapping}\n            onPress={onPress}\n        />\n    );\n};\n\nconst WrapButton = ({ state, onError }: { state: SwapState; onError: (e) => void }) => {\n    const onPress = useCallback(async () => {\n        onError({});\n        state.onWrap().catch(onError);\n    }, []);\n    return <Button title={\"Wrap\"} loading={state.wrapping} onPress={onPress} />;\n};\n\nconst UnwrapButton = ({ state, onError }: { state: SwapState; onError: (e) => void }) => {\n    const onPress = useCallback(async () => {\n        onError({});\n        state.onUnwrap().catch(onError);\n    }, []);\n    return <Button title={\"Unwrap\"} loading={state.unwrapping} onPress={onPress} />;\n};\n\nconst LimitOrderInfo = ({ state }: { state: SwapState }) => {\n    const d = !state.trade?.executionPrice;\n    return (\n        <View>\n            <Text\n                disabled={isEmptyValue(state.limitOrderReturn)}\n                style={{ fontSize: 28, marginBottom: Spacing.normal }}>\n                {isEmptyValue(state.limitOrderReturn) ? \"N/A\" : state.limitOrderReturn + \" \" + state.toSymbol}\n            </Text>\n            <Meta\n                label={\"Market Price\"}\n                text={state.trade?.executionPrice?.toFixed(8) || undefined}\n                suffix={state.toSymbol + \" / \" + state.fromSymbol + \"\"}\n                disabled={d}\n            />\n            <Meta label={\"Relayer Fee (0.20%)\"} text={state.limitOrderFee} suffix={state.fromSymbol} disabled={d} />\n            <Meta label={\"Swap Fee (0.30%)\"} text={state.limitOrderSwapFee} suffix={state.fromSymbol} disabled={d} />\n            <Meta label={\"Expiration\"} text={\"24 Hours From Now\"} disabled={d} />\n            <LimitOrderControls state={state} />\n        </View>\n    );\n};\n\n// tslint:disable-next-line:max-func-body-length\nconst LimitOrderControls = ({ state }: { state: SwapState }) => {\n    const { getTokenAllowance } = useContext(EthersContext);\n    const [error, setError] = useState<MetamaskError>({});\n    const [allowed, setAllowed] = useState<boolean>();\n    useAsyncEffect(() => setError({}), [state.fromSymbol, state.toSymbol, state.fromAmount]);\n    useDelayedEffect(\n        async () => {\n            if (state.fromToken && !isEmptyValue(state.fromAmount)) {\n                const fromAmount = parseBalance(state.fromAmount, state.fromToken.decimals);\n                const allowance = await getTokenAllowance(state.fromToken.address, SETTLEMENT);\n                setAllowed(ethers.BigNumber.from(allowance).gte(fromAmount));\n            }\n        },\n        500,\n        [state.fromToken, state.fromAmount]\n    );\n    const disabled =\n        state.orderType === \"market\" ||\n        state.toSymbol === \"\" ||\n        !state.fromToken ||\n        !state.toToken ||\n        isEmptyValue(state.fromAmount) ||\n        !state.priceInETH ||\n        parseBalance(state.fromAmount, state.fromToken!.decimals).gt(state.priceInETH.mul(10)) ||\n        !state.trade ||\n        isEmptyValue(state.limitOrderPrice);\n    return (\n        <View style={{ marginTop: Spacing.normal }}>\n            {disabled ? (\n                <PlaceOrderButton state={state} onError={setError} disabled={true} />\n            ) : parseBalance(state.fromAmount, state.fromToken!.decimals).gt(state.fromToken!.balance) ? (\n                <InsufficientBalanceButton symbol={state.fromSymbol} />\n            ) : !Fraction.parse(state.limitOrderPrice).gt(\n                  Fraction.parse(state.trade!.executionPrice.toFixed(state.toToken!.decimals))\n              ) ? (\n                <PriceTooLowButton />\n            ) : state.unsupported ? (\n                <UnsupportedButton state={state} />\n            ) : state.loading || !state.trade ? (\n                <FetchingButton />\n            ) : (\n                <>\n                    <ApproveButton\n                        token={state.fromToken!}\n                        spender={SETTLEMENT}\n                        onSuccess={() => setAllowed(true)}\n                        onError={setError}\n                        hidden={allowed}\n                    />\n                    <PlaceOrderButton state={state} onError={setError} disabled={!allowed} />\n                </>\n            )}\n            {error.message && error.code !== 4001 && <ErrorMessage error={error} />}\n        </View>\n    );\n};\n\nconst PriceTooLowButton = () => {\n    return <Button title={\"Set Price Greater Than Market\"} disabled={true} />;\n};\n\nconst PlaceOrderButton = ({\n    state,\n    onError,\n    disabled\n}: {\n    state: SwapState;\n    onError: (e) => void;\n    disabled: boolean;\n}) => {\n    const goToLimitOrders = useLinker(\"/swap/my-orders\", \"LimitOrders\");\n    const onPress = useCallback(async () => {\n        onError({});\n        try {\n            await state.onCreateOrder();\n            goToLimitOrders();\n        } catch (e) {\n            onError(e);\n        }\n    }, [state.onCreateOrder, goToLimitOrders, onError]);\n    return <Button title={\"Place Limit Order\"} disabled={disabled} loading={state.creatingOrder} onPress={onPress} />;\n};\n\nexport default SwapScreen;\n"],"sourceRoot":""}