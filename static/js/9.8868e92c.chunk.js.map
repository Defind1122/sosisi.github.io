{"version":3,"sources":["src/components/Notice.tsx","src/components/Meta.tsx","src/hooks/useDelayedEffect.tsx","src/components/TokenAmount.tsx","src/components/UnsupportedButton.tsx","src/components/ExperimentalNotice.tsx","src/components/TokenName.tsx","src/components/TokenSearch.tsx","src/components/TokenSelect.tsx","src/hooks/useSwapState.tsx","src/screens/SwapScreen.tsx"],"names":["Notice","props","borderStyle","border","useStyles","color","borderColor","style","clear","paddingHorizontal","Spacing","tiny","note","text","buttonText","onPressButton","title","type","size","fontWeight","onPress","titleStyle","buttonStyle","paddingVertical","alignSelf","marginTop","Meta","useColors","textMedium","textLight","placeholder","useLinker","url","disabled","suffix","justifyContent","fontSize","label","undefined","textDecorationLine","handles","useDelayedEffect","effect","timeout","inputs","key","toString","useAsyncEffect","handle","setTimeout","clearTimeout","TokenAmount","caption","formatBalance","amount","token","balance","decimals","UnsupportedButton","state","fromSymbol","toSymbol","ExperimentalNotice","onPressContract","contractURL","marginVertical","TokenName","Text","numberOfLines","ellipsizeMode","marginLeft","small","width","name","Loading","ActivityIndicator","position","right","bottom","TokenItem","accent","useCallback","onSelectToken","Selectable","selected","marginBottom","ITEM_SEPARATOR_HEIGHT","FlexView","alignItems","TokenLogo","View","flex","Button","duplicate","symbol","height","TokenSearch","useContext","EthersContext","provider","signer","getTokenBalance","tokens","useState","tokenToAdd","setTokenToAdd","loading","setLoading","findIndex","t","address","useEffect","a","async","trim","ethers","utils","isAddress","findOrFetchToken","getAddress","Input","value","onChangeText","autoFocus","inputStyle","marginHorizontal","inputContainerStyle","borderBottomWidth","marginRight","labelStyle","containerStyle","paddingTop","paddingBottom","onAddToken","TokenList","loadingTokens","renderItem","item","data","useMemo","filter","hidden","sort","t1","t2","isZero","localeCompare","length","FlatList","keyExtractor","EmptyList","margin","normal","textAlign","selectable","TokenSymbol","TokenSelect","addCustomToken","search","setSearch","query","setQuery","find","toLowerCase","Expandable","expanded","onExpand","onChangeSymbol","hide","includes","useSwapState","useTokenPairState","kovanSigner","updateTokens","useSDK","getTrade","swap","createOrder","calculateSwapFee","calculateLimitOrderFee","calculateLimitOrderReturn","orderType","setOrderType","priceInETH","setPriceInETH","trade","setTrade","unsupported","setUnsupported","swapFee","setSwapFee","limitOrderPrice","setLimitOrderPrice","limitOrderFee","setLimitOrderFee","limitOrderSwapFee","setLimitOrderSwapFee","limitOrderReturn","setLimitOrderReturn","swapping","setSwapping","creatingOrder","setCreatingOrder","setFromSymbol","fromToken","constants","WeiPerEther","getNetwork","chainId","Token","toToken","WETH","Fetcher","fetchPairData","pair","parseBalance","priceOf","toFixed","isEmptyValue","fromAmount","useDelayedOnBlockEffect","block","sub","onSwap","result","tx","wait","onCreateOrder","amountIn","Fraction","parse","apply","mul","pow10","div","limitOrderUnsupported","Swap","large","Border","OrderTypeSelect","OrderTypeItem","desc","FromTokenSelect","customTokens","Heading","ETH","ToTokenSelect","setToSymbol","AmountInput","TokenInput","onAmountChanged","setFromAmount","AmountNotice","lte","PriceInput","marketPrice","executionPrice","Zero","maxButtonText","LimitOrderUnsupportedNotice","TradeInfo","InfoBox","WrapInfo","SwapInfo","textDark","outputAmount","price","impact","priceImpact","SwapControls","error","setError","approveRequired","fromTokenAllowed","gt","InsufficientBalanceButton","onError","FetchingButton","ApproveButton","spender","ROUTER","onSuccess","setFromTokenAllowed","message","code","ErrorMessage","SwapButton","catch","WrapButton","onWrap","wrapping","UnwrapButton","onUnwrap","unwrapping","LimitOrderInfo","d","LimitOrderControls","getTokenAllowance","allowed","setAllowed","SETTLEMENT","allowance","BigNumber","from","gte","PriceTooLowButton","PlaceOrderButton","goToLimitOrders","SwapScreen","Screen","Container","Content","Title","light","Platform","OS","WebFooter"],"mappings":"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","file":"static/js/9.8868e92c.chunk.js","sourcesContent":["import React from \"react\";\nimport { View, ViewStyle } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useStyles from \"../hooks/useStyles\";\nimport Button from \"./Button\";\nimport Text from \"./Text\";\n\nexport interface NoticeProps {\n    text: string;\n    clear?: boolean;\n    color?: string;\n    buttonText?: string;\n    onPressButton?: () => void;\n    style?: ViewStyle;\n}\n\nconst Notice = (props: NoticeProps) => {\n    const { border } = useStyles();\n    const borderStyle = border({ color: props.color });\n    const color = props.color || borderStyle.borderColor;\n    return (\n        <View style={[props.clear ? { paddingHorizontal: Spacing.tiny } : borderStyle, props.style]}>\n            <Text\n                note={true}\n                style={{\n                    color\n                }}>\n                {props.text}\n            </Text>\n            {props.buttonText && props.onPressButton && (\n                <Button\n                    title={props.buttonText}\n                    type={\"clear\"}\n                    size={\"small\"}\n                    fontWeight={\"bold\"}\n                    onPress={props.onPressButton}\n                    titleStyle={{ color }}\n                    buttonStyle={{ paddingHorizontal: 0, paddingVertical: 0 }}\n                    style={{ alignSelf: \"flex-end\", marginTop: Spacing.tiny }}\n                />\n            )}\n        </View>\n    );\n};\n\nexport default Notice;\n","import React, { FC } from \"react\";\n\nimport useColors from \"../hooks/useColors\";\nimport useLinker from \"../hooks/useLinker\";\nimport FlexView from \"./FlexView\";\nimport Text from \"./Text\";\n\nexport interface MetaProps {\n    label: string;\n    text?: string;\n    suffix?: string;\n    url?: string;\n    disabled?: boolean;\n}\n\nconst Meta: FC<MetaProps> = props => {\n    const { textMedium, textLight, placeholder } = useColors();\n    const onPress = useLinker(props.url || \"\", \"\", \"_blank\");\n    const text = props.disabled\n        ? \"N/A\"\n        : props.text\n        ? props.text + (props.suffix ? \" \" + props.suffix : \"\")\n        : \"Fetching…\";\n    return (\n        <FlexView style={{ justifyContent: \"space-between\", marginTop: 4 }}>\n            <Text fontWeight={\"bold\"} style={{ fontSize: 13, color: props.disabled ? placeholder : textMedium }}>\n                {props.label}\n            </Text>\n            <Text\n                onPress={props.url ? onPress : undefined}\n                style={{\n                    fontSize: 13,\n                    color: props.disabled ? placeholder : props.text ? textMedium : textLight,\n                    textDecorationLine: props.url ? \"underline\" : \"none\"\n                }}>\n                {text}\n            </Text>\n        </FlexView>\n    );\n};\n\nexport default Meta;\n","import useAsyncEffect from \"use-async-effect\";\n\nconst handles = {};\n\nconst useDelayedEffect = (\n    effect: (isMounted: () => boolean) => unknown | Promise<unknown>,\n    timeout: number,\n    inputs?: any[]\n) => {\n    const key = effect.toString();\n    useAsyncEffect<number>(\n        () => {\n            const handle = setTimeout(effect, timeout);\n            handles[key] = handle;\n            return handle;\n        },\n        handle => {\n            clearTimeout(handle);\n        },\n        inputs\n    );\n};\nexport default useDelayedEffect;\n","import React from \"react\";\nimport { TextStyle } from \"react-native\";\n\nimport { ethers } from \"ethers\";\nimport Token from \"../types/Token\";\nimport { formatBalance } from \"../utils\";\nimport Text from \"./Text\";\n\nconst TokenAmount = (props: { token: Token; amount?: ethers.BigNumber; disabled?: boolean; style?: TextStyle }) => (\n    <Text caption={true} disabled={props.disabled} style={props.style}>\n        {formatBalance(props.amount || props.token.balance, props.token.decimals, 8)}\n    </Text>\n);\n\nexport default TokenAmount;\n","import React from \"react\";\n\nimport { TokenPairState } from \"../hooks/useTokenPairState\";\nimport Button from \"./Button\";\n\nconst UnsupportedButton = ({ state }: { state: TokenPairState }) => {\n    return <Button title={state.fromSymbol + \"-\" + state.toSymbol + \" Not Supported\"} disabled={true} />;\n};\n\nexport default UnsupportedButton;\n","import React from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useLinker from \"../hooks/useLinker\";\nimport Notice from \"./Notice\";\n\nconst ExperimentalNotice = (props: { contractURL: string }) => {\n    const onPressContract = useLinker(props.contractURL, \"\", \"_blank\");\n    return (\n        <View style={{ marginVertical: Spacing.tiny }}>\n            <Notice\n                text={\n                    \"This feature is in beta and contracts are unaudited. Read the contract yourself and use it at your own risk.\"\n                }\n                color={\"orange\"}\n                buttonText={\"View Contract\"}\n                onPressButton={onPressContract}\n            />\n        </View>\n    );\n};\n\nexport default ExperimentalNotice;\n","import React from \"react\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport Token from \"../types/Token\";\nimport Text from \"./Text\";\n\nconst TokenName = (props: { token: Token; disabled?: boolean }) => (\n    <Text\n        caption={true}\n        numberOfLines={1}\n        ellipsizeMode={\"tail\"}\n        style={{ marginLeft: Spacing.small, width: 180 }}\n        disabled={props.disabled}>\n        {props.token.name}\n    </Text>\n);\n\nexport default TokenName;\n","import React, { FC, useCallback, useContext, useEffect, useState } from \"react\";\nimport { ActivityIndicator, View } from \"react-native\";\n\nimport { ethers } from \"ethers\";\nimport { Spacing } from \"../constants/dimension\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport useColors from \"../hooks/useColors\";\nimport useDelayedEffect from \"../hooks/useDelayedEffect\";\nimport useStyles from \"../hooks/useStyles\";\nimport Token from \"../types/Token\";\nimport { findOrFetchToken } from \"../utils/fetch-utils\";\nimport Button from \"./Button\";\nimport FlexView from \"./FlexView\";\nimport Input from \"./Input\";\nimport { ITEM_SEPARATOR_HEIGHT } from \"./ItemSeparator\";\nimport Selectable from \"./Selectable\";\nimport TokenLogo from \"./TokenLogo\";\nimport TokenName from \"./TokenName\";\n\nexport interface TokenSearchProps {\n    tokens?: Token[];\n    text: string;\n    onChangeText: (text: string) => void;\n    onAddToken?: (token: Token) => void;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst TokenSearch: FC<TokenSearchProps> = props => {\n    const { border } = useStyles();\n    const { provider, signer, getTokenBalance, tokens } = useContext(EthersContext);\n    const [tokenToAdd, setTokenToAdd] = useState<Token>();\n    const [loading, setLoading] = useState(false);\n    const duplicate = !!tokenToAdd && tokens.findIndex(t => t.address === tokenToAdd.address) !== -1;\n    if (!props.tokens) return <View />;\n    useEffect(() => {\n        if (props.text === \"\") {\n            setLoading(false);\n            setTokenToAdd(undefined);\n        }\n    }, [props.text]);\n    useDelayedEffect(\n        async () => {\n            const address = props.text.trim();\n            if (provider && signer && ethers.utils.isAddress(address)) {\n                setLoading(true);\n                try {\n                    const token = await findOrFetchToken(provider, address);\n                    if (token.name && token.symbol && token.decimals) {\n                        const balance = await getTokenBalance(address, await signer.getAddress());\n                        setTokenToAdd({\n                            ...token,\n                            balance\n                        } as Token);\n                    }\n                } finally {\n                    setLoading(false);\n                }\n            }\n        },\n        300,\n        [provider, signer, props.text]\n    );\n    return (\n        <View>\n            <FlexView style={{ marginBottom: Spacing.small }}>\n                <Input\n                    value={props.text}\n                    onChangeText={props.onChangeText}\n                    placeholder={\"Search for a token… (name, symbol or address)\"}\n                    autoFocus={true}\n                    inputStyle={{ marginHorizontal: Spacing.tiny, fontSize: props.text ? 20 : 16 }}\n                    inputContainerStyle={{ borderBottomWidth: 0, marginRight: loading ? 32 : 0 }}\n                    labelStyle={{ height: 0 }}\n                    containerStyle={{\n                        ...border(),\n                        paddingHorizontal: Spacing.tiny,\n                        paddingTop: 12,\n                        paddingBottom: 0\n                    }}\n                />\n                {props.onAddToken && loading && <Loading />}\n            </FlexView>\n            {props.onAddToken && tokenToAdd && (\n                <TokenItem token={tokenToAdd} selected={true} onSelectToken={props.onAddToken} duplicate={duplicate} />\n            )}\n        </View>\n    );\n};\n\nconst Loading = () => <ActivityIndicator size={\"small\"} style={{ position: \"absolute\", right: 16, bottom: 16 }} />;\n\nconst TokenItem = (props: {\n    token: Token;\n    selected: boolean;\n    onSelectToken: (token: Token) => void;\n    duplicate: boolean;\n}) => {\n    const { accent } = useColors();\n    const onPress = useCallback(() => {\n        props.onSelectToken(props.token);\n    }, [props.onSelectToken, props.token]);\n    return (\n        <Selectable\n            selected={false}\n            disabled={true}\n            onPress={onPress}\n            style={{\n                marginBottom: ITEM_SEPARATOR_HEIGHT\n            }}>\n            <FlexView style={{ alignItems: \"center\" }}>\n                <TokenLogo token={props.token} />\n                <TokenName token={props.token} />\n                <View style={{ flex: 1 }} />\n                <Button\n                    type={\"clear\"}\n                    size={\"small\"}\n                    color={accent}\n                    title={props.duplicate ? \"Already Added\" : \"ADD \" + props.token.symbol}\n                    fontWeight={\"bold\"}\n                    onPress={onPress}\n                    disabled={props.duplicate}\n                    buttonStyle={{ paddingHorizontal: 4, height: 27 }}\n                />\n            </FlexView>\n        </Selectable>\n    );\n};\n\nexport default TokenSearch;\n","import React, { FC, useCallback, useContext, useEffect, useMemo, useState } from \"react\";\nimport { FlatList, View, ViewStyle } from \"react-native\";\n\nimport { ethers } from \"ethers\";\nimport { Spacing } from \"../constants/dimension\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport useDelayedEffect from \"../hooks/useDelayedEffect\";\nimport Token from \"../types/Token\";\nimport Expandable from \"./Expandable\";\nimport FlexView from \"./FlexView\";\nimport { ITEM_SEPARATOR_HEIGHT } from \"./ItemSeparator\";\nimport Loading from \"./Loading\";\nimport Selectable from \"./Selectable\";\nimport Text from \"./Text\";\nimport TokenAmount from \"./TokenAmount\";\nimport TokenLogo from \"./TokenLogo\";\nimport TokenName from \"./TokenName\";\nimport TokenSearch from \"./TokenSearch\";\nimport TokenSymbol from \"./TokenSymbol\";\n\nexport interface TokenSelectProps {\n    title: string;\n    symbol: string;\n    onChangeSymbol: (symbol: string) => void;\n    disabled?: (token: Token) => boolean;\n    hidden?: (token: Token) => boolean;\n    style?: ViewStyle;\n}\n\nconst TokenSelect: FC<TokenSelectProps> = props => {\n    const { tokens, addCustomToken } = useContext(EthersContext);\n    const [search, setSearch] = useState(\"\");\n    const [query, setQuery] = useState(\"\");\n    const token = useMemo(() => tokens.find(t => t.symbol === props.symbol), [tokens, props.symbol]);\n    const onSelectToken = t => props.onChangeSymbol(t.symbol);\n    const onUnselectToken = () => props.onChangeSymbol(\"\");\n    const onAddToken = async (t: Token) => {\n        await addCustomToken(t);\n        setSearch(\"\");\n        setQuery(\"\");\n    };\n    const hidden = (t: Token) => {\n        let hide = props.hidden?.(t) || false;\n        if (!hide && query.length > 0 && !ethers.utils.isAddress(query)) {\n            hide = !t.symbol.toLowerCase().includes(query) && !t.name.toLowerCase().includes(query);\n        }\n        return hide;\n    };\n    useEffect(() => setSearch(\"\"), [props.symbol]);\n    useDelayedEffect(() => setQuery(search.trim().toLowerCase()), 300, [search]);\n    return (\n        <View style={props.style}>\n            <Expandable title={props.title} expanded={!props.symbol} onExpand={() => props.onChangeSymbol(\"\")}>\n                <TokenSearch text={search} onChangeText={setSearch} tokens={tokens} onAddToken={onAddToken} />\n                <TokenList disabled={props.disabled} hidden={hidden} onSelectToken={onSelectToken} />\n            </Expandable>\n            {token && <TokenItem token={token} selected={true} onSelectToken={onUnselectToken} selectable={true} />}\n        </View>\n    );\n};\n\n// tslint:disable-next-line:max-func-body-length\nconst TokenList = (props: {\n    onSelectToken: (token: Token) => void;\n    disabled?: (token: Token) => boolean;\n    hidden?: (token: Token) => boolean;\n}) => {\n    const { loadingTokens, tokens } = useContext(EthersContext);\n    const renderItem = useCallback(\n        ({ item }) => {\n            return (\n                <TokenItem\n                    key={item.address}\n                    token={item}\n                    selected={false}\n                    onSelectToken={props.onSelectToken}\n                    disabled={props.disabled?.(item)}\n                />\n            );\n        },\n        [props.onSelectToken, props.disabled]\n    );\n    const data = useMemo(\n        () =>\n            tokens\n                .filter(token => (props.hidden ? !props.hidden(token) : true))\n                .sort(\n                    (t1, t2) =>\n                        (t2.balance.isZero() ? 0 : 10000000000) -\n                        (t1.balance.isZero() ? 0 : 10000000000) +\n                        t1.symbol.localeCompare(t2.symbol)\n                ),\n        [tokens, props.hidden]\n    );\n    return loadingTokens ? (\n        <Loading />\n    ) : data.length === 0 ? (\n        <EmptyList />\n    ) : (\n        <FlatList keyExtractor={item => item.address} data={data} renderItem={renderItem} />\n    );\n};\n\nconst EmptyList = () => {\n    return (\n        <View style={{ margin: Spacing.normal }}>\n            <Text disabled={true} style={{ textAlign: \"center\", width: \"100%\" }}>\n                {\"You don't have any matching tokens.\"}\n            </Text>\n        </View>\n    );\n};\n\nconst TokenItem = (props: {\n    token: Token;\n    selected: boolean;\n    onSelectToken: (token: Token) => void;\n    disabled?: boolean;\n    selectable?: boolean;\n}) => {\n    const onPress = useCallback(() => {\n        props.onSelectToken(props.token);\n    }, [props.onSelectToken, props.token]);\n    return (\n        <Selectable\n            selected={props.selected}\n            onPress={onPress}\n            disabled={props.disabled || props.selectable}\n            style={{\n                marginBottom: ITEM_SEPARATOR_HEIGHT\n            }}>\n            <FlexView style={{ alignItems: \"center\" }}>\n                <TokenLogo token={props.token} disabled={props.disabled} />\n                <TokenName token={props.token} disabled={props.disabled} />\n                <TokenAmount token={props.token} disabled={props.disabled} style={{ flex: 1, textAlign: \"right\" }} />\n                <TokenSymbol token={props.token} disabled={props.disabled} />\n            </FlexView>\n        </Selectable>\n    );\n};\n\nexport default TokenSelect;\n","import { useCallback, useContext, useEffect, useState } from \"react\";\n\nimport { Trade } from \"@sushiswap/sdk\";\nimport { Fetcher, Token, WETH } from \"@uniswap/sdk\";\nimport { ethers } from \"ethers\";\nimport useAsyncEffect from \"use-async-effect\";\nimport Fraction from \"../constants/Fraction\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport { formatBalance, isEmptyValue, parseBalance, pow10 } from \"../utils\";\nimport useDelayedEffect from \"./useDelayedEffect\";\nimport useDelayedOnBlockEffect from \"./useDelayedOnBlockEffect\";\nimport useSDK from \"./useSDK\";\nimport useTokenPairState, { TokenPairState } from \"./useTokenPairState\";\n\nexport type OrderType = \"market\" | \"limit\";\n\nexport interface SwapState extends TokenPairState {\n    orderType?: OrderType;\n    setOrderType: (orderType?: OrderType) => void;\n    priceInETH?: ethers.BigNumber | null;\n    trade?: Trade;\n    unsupported: boolean;\n    limitOrderUnsupported: boolean;\n    limitOrderPrice: string;\n    setLimitOrderPrice: (price: string) => void;\n    swapFee: string;\n    limitOrderFee: string;\n    limitOrderSwapFee: string;\n    limitOrderReturn: string;\n    onSwap: () => Promise<void>;\n    swapping: boolean;\n    onCreateOrder: () => Promise<void>;\n    creatingOrder: boolean;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst useSwapState: () => SwapState = () => {\n    const state = useTokenPairState();\n    const { provider, signer, kovanSigner, updateTokens } = useContext(EthersContext);\n    const {\n        getTrade,\n        swap,\n        createOrder,\n        calculateSwapFee,\n        calculateLimitOrderFee,\n        calculateLimitOrderReturn\n    } = useSDK();\n    const [loading, setLoading] = useState(true);\n    const [orderType, setOrderType] = useState<OrderType>();\n    const [priceInETH, setPriceInETH] = useState<ethers.BigNumber | null>();\n    const [trade, setTrade] = useState<Trade>();\n    const [unsupported, setUnsupported] = useState(false);\n    const [swapFee, setSwapFee] = useState(\"\");\n    const [limitOrderPrice, setLimitOrderPrice] = useState<string>(\"\");\n    const [limitOrderFee, setLimitOrderFee] = useState(\"\");\n    const [limitOrderSwapFee, setLimitOrderSwapFee] = useState(\"\");\n    const [limitOrderReturn, setLimitOrderReturn] = useState(\"\");\n    const [swapping, setSwapping] = useState(false);\n    const [creatingOrder, setCreatingOrder] = useState(false);\n\n    useEffect(() => {\n        if (!orderType) {\n            state.setFromSymbol(\"\");\n        }\n        setLimitOrderPrice(\"\");\n    }, [orderType]);\n\n    useAsyncEffect(async () => {\n        setPriceInETH(undefined);\n        if (provider && state.fromToken) {\n            if (state.fromToken.symbol === \"WETH\") {\n                setPriceInETH(ethers.constants.WeiPerEther);\n            } else {\n                const { chainId } = await provider.getNetwork();\n                try {\n                    const fromToken = new Token(chainId, state.fromToken.address, state.fromToken.decimals);\n                    const toToken = WETH[chainId];\n                    const pair = await Fetcher.fetchPairData(fromToken, toToken);\n                    setPriceInETH(parseBalance(pair.priceOf(toToken).toFixed(), fromToken.decimals));\n                } catch (e) {\n                    setPriceInETH(null);\n                }\n            }\n        }\n    }, [provider, state.fromToken]);\n\n    useDelayedEffect(\n        () => {\n            if (isEmptyValue(state.fromAmount)) {\n                setLimitOrderPrice(\"\");\n                setTrade(undefined);\n            }\n        },\n        300,\n        [state.fromAmount]\n    );\n\n    useDelayedOnBlockEffect(\n        async block => {\n            if (!block) {\n                setLoading(true);\n            }\n            if (state.fromToken && state.toToken && state.fromAmount && signer?.provider) {\n                const amount = parseBalance(state.fromAmount, state.fromToken.decimals);\n                if (!amount.isZero()) {\n                    setUnsupported(false);\n                    try {\n                        setTrade(await getTrade(state.fromToken, state.toToken, amount, signer?.provider));\n                    } catch (e) {\n                        setUnsupported(true);\n                    } finally {\n                        setLoading(false);\n                    }\n                }\n            }\n        },\n        () => \"getTrade(\" + state.fromSymbol + \",\" + state.toSymbol + \",\" + state.fromAmount + \")\",\n        [state.fromSymbol, state.toSymbol, state.fromAmount]\n    );\n\n    useAsyncEffect(() => {\n        if (trade && !isEmptyValue(state.fromAmount)) {\n            const fromAmount = parseBalance(state.fromAmount, state.fromToken!.decimals);\n            setSwapFee(formatBalance(calculateSwapFee(fromAmount), state.fromToken!.decimals, 8));\n            if (orderType === \"limit\") {\n                setLimitOrderFee(formatBalance(calculateLimitOrderFee(fromAmount), state.fromToken!.decimals, 8));\n                setLimitOrderSwapFee(\n                    formatBalance(\n                        calculateSwapFee(fromAmount.sub(calculateLimitOrderFee(fromAmount))),\n                        state.fromToken!.decimals,\n                        8\n                    )\n                );\n            }\n        }\n    }, [orderType, trade, state.fromAmount]);\n\n    useAsyncEffect(() => {\n        if (state.fromToken && state.toToken && !isEmptyValue(state.fromAmount) && !isEmptyValue(limitOrderPrice)) {\n            setLimitOrderReturn(\n                formatBalance(\n                    calculateLimitOrderReturn(\n                        state.fromToken,\n                        state.toToken,\n                        parseBalance(state.fromAmount, state.fromToken.decimals),\n                        limitOrderPrice\n                    ),\n                    state.toToken.decimals\n                )\n            );\n        }\n    }, [state.fromToken, state.toToken, state.fromAmount, limitOrderPrice]);\n\n    const onSwap = useCallback(async () => {\n        if (state.fromToken && state.toToken && state.fromAmount && signer && trade) {\n            setSwapping(true);\n            try {\n                const result = await swap(trade, signer);\n                if (result) {\n                    await result.tx.wait();\n                    await updateTokens();\n                    setTrade(undefined);\n                    setOrderType(undefined);\n                }\n            } finally {\n                setSwapping(false);\n            }\n        }\n    }, [state.fromToken, state.toToken, state.fromAmount, signer, trade]);\n\n    const onCreateOrder = useCallback(async () => {\n        if (\n            state.fromToken &&\n            state.toToken &&\n            state.fromAmount &&\n            !isEmptyValue(limitOrderPrice) &&\n            signer &&\n            kovanSigner\n        ) {\n            setCreatingOrder(true);\n            try {\n                const amountIn = parseBalance(state.fromAmount, state.fromToken.decimals);\n                const tx = await createOrder(\n                    state.fromToken,\n                    state.toToken,\n                    amountIn,\n                    Fraction.parse(limitOrderPrice)\n                        .apply(amountIn)\n                        .mul(pow10(state.toToken.decimals))\n                        .div(pow10(state.fromToken.decimals)),\n                    signer,\n                    kovanSigner\n                );\n                await tx.wait();\n                setTrade(undefined);\n                setOrderType(undefined);\n            } finally {\n                setCreatingOrder(false);\n            }\n        }\n    }, [state.fromToken, state.toToken, state.fromAmount, signer, kovanSigner, limitOrderPrice]);\n\n    return {\n        ...state,\n        loading: loading || state.loading,\n        orderType,\n        setOrderType,\n        priceInETH,\n        trade,\n        unsupported,\n        swapFee,\n        limitOrderPrice,\n        setLimitOrderPrice,\n        limitOrderFee,\n        limitOrderSwapFee,\n        limitOrderReturn,\n        onSwap,\n        swapping,\n        limitOrderUnsupported: orderType === \"limit\" && (state.fromSymbol === \"ETH\" || state.toSymbol === \"ETH\"),\n        onCreateOrder,\n        creatingOrder\n    };\n};\n\nexport default useSwapState;\n","import React, { useCallback, useContext, useState } from \"react\";\nimport { Platform, View } from \"react-native\";\n\nimport { ethers } from \"ethers\";\nimport useAsyncEffect from \"use-async-effect\";\nimport ApproveButton from \"../components/ApproveButton\";\nimport Border from \"../components/Border\";\nimport Button from \"../components/Button\";\nimport Container from \"../components/Container\";\nimport Content from \"../components/Content\";\nimport ErrorMessage from \"../components/ErrorMessage\";\nimport Expandable from \"../components/Expandable\";\nimport ExperimentalNotice from \"../components/ExperimentalNotice\";\nimport FetchingButton from \"../components/FetchingButton\";\nimport Heading from \"../components/Heading\";\nimport InfoBox from \"../components/InfoBox\";\nimport InsufficientBalanceButton from \"../components/InsufficientBalanceButton\";\nimport { ITEM_SEPARATOR_HEIGHT } from \"../components/ItemSeparator\";\nimport Meta from \"../components/Meta\";\nimport Notice from \"../components/Notice\";\nimport Selectable from \"../components/Selectable\";\nimport Text from \"../components/Text\";\nimport Title from \"../components/Title\";\nimport TokenInput from \"../components/TokenInput\";\nimport TokenSelect from \"../components/TokenSelect\";\nimport UnsupportedButton from \"../components/UnsupportedButton\";\nimport WebFooter from \"../components/web/WebFooter\";\nimport { SwapSubMenu } from \"../components/web/WebSubMenu\";\nimport { ROUTER, SETTLEMENT } from \"../constants/contracts\";\nimport { Spacing } from \"../constants/dimension\";\nimport Fraction from \"../constants/Fraction\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport useColors from \"../hooks/useColors\";\nimport useDelayedEffect from \"../hooks/useDelayedEffect\";\nimport useLinker from \"../hooks/useLinker\";\nimport useSwapState, { OrderType, SwapState } from \"../hooks/useSwapState\";\nimport MetamaskError from \"../types/MetamaskError\";\nimport Token from \"../types/Token\";\nimport { formatBalance, isEmptyValue, parseBalance } from \"../utils\";\nimport Screen from \"./Screen\";\n\nconst SwapScreen = () => {\n    return (\n        <Screen>\n            <SwapSubMenu />\n            <Container>\n                <Content>\n                    <Title text={\"New Order\"} />\n                    <Text light={true}>Swap now or place a limit order with a desired price.</Text>\n                    <Swap />\n                    {Platform.OS === \"web\" && <WebFooter />}\n                </Content>\n            </Container>\n        </Screen>\n    );\n};\n\nconst Swap = () => {\n    const state = useSwapState();\n    return (\n        <View style={{ marginTop: Spacing.large }}>\n            <OrderTypeSelect state={state} />\n            <Border />\n            <FromTokenSelect state={state} />\n            <Border />\n            <ToTokenSelect state={state} />\n            <Border />\n            <AmountInput state={state} />\n            {state.orderType === \"limit\" && (\n                <View>\n                    <AmountNotice state={state} />\n                    <Border />\n                    <PriceInput state={state} />\n                </View>\n            )}\n            <TradeInfo state={state} />\n        </View>\n    );\n};\n\nconst OrderTypeSelect = ({ state }: { state: SwapState }) => {\n    return (\n        <View>\n            <Expandable title={\"Order Type\"} expanded={!state.orderType} onExpand={() => state.setOrderType()}>\n                <OrderTypeItem state={state} orderType={\"market\"} />\n                <OrderTypeItem state={state} orderType={\"limit\"} />\n            </Expandable>\n            {state.orderType && <OrderTypeItem state={state} orderType={state.orderType} selectable={true} />}\n            {state.orderType === \"limit\" && (\n                <ExperimentalNotice\n                    contractURL={\n                        \"https://github.com/sushiswap/sushiswap-settlement/blob/master/contracts/Settlement.sol\"\n                    }\n                />\n            )}\n        </View>\n    );\n};\n\nconst OrderTypeItem = ({\n    state,\n    orderType,\n    selectable\n}: {\n    state: SwapState;\n    orderType: OrderType;\n    selectable?: boolean;\n}) => {\n    const selected = state.orderType === orderType;\n    const type = orderType === \"market\" ? \"Market Order\" : \"Limit Order\";\n    const desc =\n        orderType === \"market\"\n            ? \"Settle an order immediately\"\n            : \"Place an order with a desired price waiting to be settled\";\n    const onPress = () => state.setOrderType(state.orderType === orderType ? undefined : orderType);\n    return (\n        <Selectable\n            style={{\n                marginBottom: ITEM_SEPARATOR_HEIGHT,\n                paddingHorizontal: Spacing.small + Spacing.tiny\n            }}\n            selected={selected}\n            disabled={selectable}\n            onPress={onPress}>\n            <Text fontWeight={\"regular\"}>{type}</Text>\n            <Text note={true}>{desc}</Text>\n        </Selectable>\n    );\n};\n\nconst FromTokenSelect = ({ state }: { state: SwapState }) => {\n    const { tokens, customTokens } = useContext(EthersContext);\n    if (!state.orderType) {\n        return <Heading text={\"Token To Sell\"} disabled={true} />;\n    }\n    const ETH = tokens ? tokens.find(token => token.symbol === \"ETH\") : null;\n    return (\n        <View>\n            <TokenSelect\n                title={\"Token To Sell\"}\n                symbol={state.fromSymbol}\n                onChangeSymbol={state.setFromSymbol}\n                hidden={token =>\n                    (!customTokens.find(t => t.address === token.address) && token.balance.isZero()) ||\n                    (state.orderType === \"limit\" && token.symbol === \"ETH\")\n                }\n            />\n            {state.orderType === \"limit\" && !state.fromSymbol && ETH && !ETH.balance.isZero() && (\n                <LimitOrderUnsupportedNotice />\n            )}\n        </View>\n    );\n};\n\nconst ToTokenSelect = ({ state }: { state: SwapState }) => {\n    if (!state.orderType || !state.fromSymbol) {\n        return <Heading text={\"Token To Buy\"} disabled={true} />;\n    }\n    return (\n        <View>\n            <TokenSelect\n                title={\"Token To Buy\"}\n                symbol={state.toSymbol}\n                onChangeSymbol={state.setToSymbol}\n                hidden={token =>\n                    token.symbol === state.fromSymbol || (state.orderType === \"limit\" && token.symbol === \"ETH\")\n                }\n            />\n            {state.orderType === \"limit\" && !state.toSymbol && <LimitOrderUnsupportedNotice />}\n        </View>\n    );\n};\n\nconst AmountInput = ({ state }: { state: SwapState }) => {\n    if (!state.fromSymbol || !state.toSymbol) {\n        return <Heading text={\"Amount\"} disabled={true} />;\n    }\n    return (\n        <View>\n            <Heading text={state.fromSymbol + \" Amount\"} />\n            <TokenInput\n                token={state.fromToken}\n                amount={state.fromAmount}\n                onAmountChanged={state.setFromAmount}\n                autoFocus={true}\n            />\n        </View>\n    );\n};\n\nconst AmountNotice = ({ state }: { state: SwapState }) => {\n    if (\n        state.priceInETH === undefined ||\n        isEmptyValue(state.fromAmount) ||\n        !state.fromToken ||\n        (state.priceInETH && parseBalance(state.fromAmount, state.fromToken.decimals).lte(state.priceInETH.mul(10)))\n    ) {\n        return <View />;\n    }\n    return (\n        <View style={{ marginTop: Spacing.small }}>\n            <Notice\n                text={\n                    state.priceInETH === null\n                        ? \"This token is not supported in beta.\"\n                        : \"Maximum allowed amount in beta is \" +\n                          formatBalance(state.priceInETH.mul(10), state.fromToken!.decimals) +\n                          \" \" +\n                          state.fromSymbol +\n                          \" (≈ 10 ETH).\"\n                }\n                color={\"red\"}\n            />\n        </View>\n    );\n};\n\nconst PriceInput = ({ state }: { state: SwapState }) => {\n    if (!state.fromSymbol || !state.toSymbol) {\n        return <Heading text={\"Minimum Price\"} disabled={true} />;\n    }\n    const marketPrice =\n        state.toToken && state.trade\n            ? parseBalance(state.trade.executionPrice.toFixed(state.toToken.decimals), state.toToken.decimals)\n            : ethers.constants.Zero;\n    return (\n        <TokenInput\n            title={\"Minimum Price (\" + state.toSymbol + \"/\" + state.fromSymbol + \")\"}\n            token={\n                {\n                    ...state.toToken,\n                    balance: marketPrice\n                } as Token\n            }\n            amount={state.limitOrderPrice}\n            onAmountChanged={state.setLimitOrderPrice}\n            maxButtonText={\"MARKET\"}\n        />\n    );\n};\n\nconst LimitOrderUnsupportedNotice = () => {\n    const { placeholder } = useColors();\n    return (\n        <Notice\n            text={\"⚠️ ETH not supported for limit orders. Use WETH instead.\"}\n            color={placeholder}\n            clear={true}\n            style={{ marginVertical: Spacing.small }}\n        />\n    );\n};\n\nconst TradeInfo = ({ state }: { state: SwapState }) => {\n    if (\n        (state.fromSymbol === \"ETH\" && state.toSymbol === \"WETH\") ||\n        (state.fromSymbol === \"WETH\" && state.toSymbol === \"ETH\")\n    ) {\n        return <WrapInfo state={state} />;\n    }\n    const disabled =\n        state.fromSymbol === \"\" ||\n        state.toSymbol === \"\" ||\n        isEmptyValue(state.fromAmount) ||\n        (state.orderType === \"limit\" && state.fromSymbol === \"ETH\");\n    return (\n        <InfoBox>\n            {state.orderType === \"limit\" ? (\n                <LimitOrderInfo state={state} />\n            ) : (\n                <SwapInfo state={state} disabled={disabled} />\n            )}\n        </InfoBox>\n    );\n};\n\nconst WrapInfo = ({ state }: { state: SwapState }) => {\n    const disabled = isEmptyValue(state.fromAmount);\n    return (\n        <InfoBox>\n            <Text style={{ fontSize: 28, marginBottom: Spacing.normal }} disabled={disabled}>\n                {disabled ? \"N/A\" : state.fromAmount + \" \" + state.toSymbol}\n            </Text>\n            <SwapControls state={state} />\n        </InfoBox>\n    );\n};\n\nconst SwapInfo = ({ state, disabled }: { state: SwapState; disabled: boolean }) => {\n    const { textDark, textLight, placeholder } = useColors();\n    const amount = state.trade?.outputAmount?.toFixed(8);\n    const price = state.trade?.executionPrice?.toFixed(8);\n    const impact = state.trade?.priceImpact?.toFixed(2);\n    return (\n        <View>\n            <Text\n                style={{\n                    fontSize: 28,\n                    marginBottom: Spacing.normal,\n                    color: disabled ? placeholder : amount ? textDark : textLight\n                }}>\n                {disabled ? \"N/A\" : amount ? amount + \" \" + state.toSymbol : \"Fetching…\"}\n            </Text>\n            <Meta\n                label={\"Price\"}\n                text={price}\n                suffix={state.toSymbol + \"  = 1 \" + state.fromSymbol}\n                disabled={disabled}\n            />\n            <Meta label={\"Price Impact\"} text={impact} suffix={\"%\"} disabled={disabled} />\n            <Meta label={\"Fee (0.30%)\"} text={state.swapFee} suffix={state.fromSymbol} disabled={disabled} />\n            <SwapControls state={state} />\n        </View>\n    );\n};\n\n// tslint:disable-next-line:max-func-body-length\nconst SwapControls = ({ state }: { state: SwapState }) => {\n    const [error, setError] = useState<MetamaskError>({});\n    useAsyncEffect(() => setError({}), [state.fromSymbol, state.toSymbol, state.fromAmount]);\n    const approveRequired = state.fromSymbol !== \"ETH\" && !state.fromTokenAllowed;\n    return (\n        <View style={{ marginTop: Spacing.normal }}>\n            {!state.fromToken || !state.toToken || isEmptyValue(state.fromAmount) ? (\n                <SwapButton state={state} onError={setError} disabled={true} />\n            ) : parseBalance(state.fromAmount, state.fromToken.decimals).gt(state.fromToken.balance) ? (\n                <InsufficientBalanceButton symbol={state.fromSymbol} />\n            ) : state.fromSymbol === \"WETH\" && state.toSymbol === \"ETH\" ? (\n                <UnwrapButton state={state} onError={setError} />\n            ) : state.fromSymbol === \"ETH\" && state.toSymbol === \"WETH\" ? (\n                <WrapButton state={state} onError={setError} />\n            ) : state.unsupported ? (\n                <UnsupportedButton state={state} />\n            ) : state.loading || !state.trade ? (\n                <FetchingButton />\n            ) : (\n                <>\n                    <ApproveButton\n                        token={state.fromToken}\n                        spender={ROUTER}\n                        onSuccess={() => state.setFromTokenAllowed(true)}\n                        onError={setError}\n                        hidden={!approveRequired}\n                    />\n                    <SwapButton state={state} onError={setError} disabled={approveRequired} />\n                </>\n            )}\n            {error.message && error.code !== 4001 && <ErrorMessage error={error} />}\n        </View>\n    );\n};\n\nconst SwapButton = ({ state, onError, disabled }: { state: SwapState; onError: (e) => void; disabled: boolean }) => {\n    const onPress = useCallback(() => {\n        onError({});\n        state.onSwap().catch(onError);\n    }, [state.onSwap, onError]);\n    return (\n        <Button\n            title={state.fromSymbol && state.toSymbol ? \"Swap \" + state.fromSymbol + \"-\" + state.toSymbol : \"Swap\"}\n            disabled={disabled}\n            loading={state.swapping}\n            onPress={onPress}\n        />\n    );\n};\n\nconst WrapButton = ({ state, onError }: { state: SwapState; onError: (e) => void }) => {\n    const onPress = useCallback(async () => {\n        onError({});\n        state.onWrap().catch(onError);\n    }, []);\n    return <Button title={\"Wrap\"} loading={state.wrapping} onPress={onPress} />;\n};\n\nconst UnwrapButton = ({ state, onError }: { state: SwapState; onError: (e) => void }) => {\n    const onPress = useCallback(async () => {\n        onError({});\n        state.onUnwrap().catch(onError);\n    }, []);\n    return <Button title={\"Unwrap\"} loading={state.unwrapping} onPress={onPress} />;\n};\n\nconst LimitOrderInfo = ({ state }: { state: SwapState }) => {\n    const d = !state.trade?.executionPrice;\n    return (\n        <View>\n            <Text\n                disabled={isEmptyValue(state.limitOrderReturn)}\n                style={{ fontSize: 28, marginBottom: Spacing.normal }}>\n                {isEmptyValue(state.limitOrderReturn) ? \"N/A\" : state.limitOrderReturn + \" \" + state.toSymbol}\n            </Text>\n            <Meta\n                label={\"Market Price\"}\n                text={state.trade?.executionPrice?.toFixed(8) || undefined}\n                suffix={state.toSymbol + \" / \" + state.fromSymbol + \"\"}\n                disabled={d}\n            />\n            <Meta label={\"Relayer Fee (0.20%)\"} text={state.limitOrderFee} suffix={state.fromSymbol} disabled={d} />\n            <Meta label={\"Swap Fee (0.30%)\"} text={state.limitOrderSwapFee} suffix={state.fromSymbol} disabled={d} />\n            <Meta label={\"Expiration\"} text={\"24 Hours From Now\"} disabled={d} />\n            <LimitOrderControls state={state} />\n        </View>\n    );\n};\n\n// tslint:disable-next-line:max-func-body-length\nconst LimitOrderControls = ({ state }: { state: SwapState }) => {\n    const { getTokenAllowance } = useContext(EthersContext);\n    const [error, setError] = useState<MetamaskError>({});\n    const [allowed, setAllowed] = useState<boolean>();\n    useAsyncEffect(() => setError({}), [state.fromSymbol, state.toSymbol, state.fromAmount]);\n    useDelayedEffect(\n        async () => {\n            if (state.fromToken && !isEmptyValue(state.fromAmount)) {\n                const fromAmount = parseBalance(state.fromAmount, state.fromToken.decimals);\n                const allowance = await getTokenAllowance(state.fromToken.address, SETTLEMENT);\n                setAllowed(ethers.BigNumber.from(allowance).gte(fromAmount));\n            }\n        },\n        500,\n        [state.fromToken, state.fromAmount]\n    );\n    const disabled =\n        state.orderType === \"market\" ||\n        state.toSymbol === \"\" ||\n        !state.fromToken ||\n        !state.toToken ||\n        isEmptyValue(state.fromAmount) ||\n        !state.priceInETH ||\n        parseBalance(state.fromAmount, state.fromToken!.decimals).gt(state.priceInETH.mul(10)) ||\n        !state.trade ||\n        isEmptyValue(state.limitOrderPrice);\n    return (\n        <View style={{ marginTop: Spacing.normal }}>\n            {disabled ? (\n                <PlaceOrderButton state={state} onError={setError} disabled={true} />\n            ) : parseBalance(state.fromAmount, state.fromToken!.decimals).gt(state.fromToken!.balance) ? (\n                <InsufficientBalanceButton symbol={state.fromSymbol} />\n            ) : !Fraction.parse(state.limitOrderPrice).gt(\n                  Fraction.parse(state.trade!.executionPrice.toFixed(state.toToken!.decimals))\n              ) ? (\n                <PriceTooLowButton />\n            ) : state.unsupported ? (\n                <UnsupportedButton state={state} />\n            ) : state.loading || !state.trade ? (\n                <FetchingButton />\n            ) : (\n                <>\n                    <ApproveButton\n                        token={state.fromToken!}\n                        spender={SETTLEMENT}\n                        onSuccess={() => setAllowed(true)}\n                        onError={setError}\n                        hidden={allowed}\n                    />\n                    <PlaceOrderButton state={state} onError={setError} disabled={!allowed} />\n                </>\n            )}\n            {error.message && error.code !== 4001 && <ErrorMessage error={error} />}\n        </View>\n    );\n};\n\nconst PriceTooLowButton = () => {\n    return <Button title={\"Set Price Greater Than Market\"} disabled={true} />;\n};\n\nconst PlaceOrderButton = ({\n    state,\n    onError,\n    disabled\n}: {\n    state: SwapState;\n    onError: (e) => void;\n    disabled: boolean;\n}) => {\n    const goToLimitOrders = useLinker(\"/swap/my-orders\", \"LimitOrders\");\n    const onPress = useCallback(async () => {\n        onError({});\n        try {\n            await state.onCreateOrder();\n            goToLimitOrders();\n        } catch (e) {\n            onError(e);\n        }\n    }, [state.onCreateOrder, goToLimitOrders, onError]);\n    return <Button title={\"Place Limit Order\"} disabled={disabled} loading={state.creatingOrder} onPress={onPress} />;\n};\n\nexport default SwapScreen;\n"],"sourceRoot":""}