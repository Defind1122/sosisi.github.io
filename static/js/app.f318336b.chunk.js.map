{"version":3,"sources":["assets/empty-token.png","src/constants/tokens.ts","src/utils/index.ts","src/utils/analytics-utils.ts","src/constants/contracts.ts","src/utils/fetch-utils.ts","src/context/GlobalContext.tsx","src/context/EthersContext.tsx","src/context/index.tsx","src/constants/dimension.ts","src/components/FlexView.tsx","src/constants/colors.ts","src/hooks/useColors.tsx","src/components/Text.tsx","src/components/web/WebFooter.tsx","src/components/web/WebHeader.tsx","src/hooks/useStyles.tsx","src/components/web/WebStatus.tsx","src/components/Button.tsx","src/components/ApproveButton.tsx","src/components/ButtonGroup.tsx","src/components/CloseIcon.tsx","src/components/Column.tsx","src/components/Container.tsx","src/components/Content.tsx","src/components/ErrorMessage.tsx","src/components/FetchingButton.tsx","src/components/InsufficientBalanceButton.tsx","src/components/Border.tsx","src/components/LPTokenSelect.tsx","src/components/Meta.tsx","src/components/Notice.tsx","src/components/SelectIcon.tsx","src/components/Subtitle.tsx","src/components/Input.tsx","src/components/TokenInput.tsx","src/hooks/useAllCommonPairs.tsx","src/hooks/useSDK.tsx","src/hooks/useTokenPairState.tsx","src/hooks/useLiquidityState.tsx","src/hooks/useLPTokensState.tsx","src/hooks/useFarmingState.tsx","src/hooks/useLinker.tsx","src/components/app/AppHeader.tsx","src/components/web/ConnectToWallet.tsx","src/components/web/MobileNotSupported.tsx","src/screens/Screen.tsx","src/screens/FarmingScreen.tsx","src/components/TokenSelect.tsx","src/components/UnsupportedButton.tsx","src/components/AddLiquidity.tsx","src/components/LPTokenItem.tsx","src/components/RemoveLiquidity.tsx","src/hooks/useAddLiquidityState.tsx","src/hooks/useRemoveLiquidityState.tsx","src/screens/LiquidityScreen.tsx","src/hooks/useMigrateState.tsx","src/screens/MigrateScreen.tsx","src/hooks/useStakingState.tsx","src/screens/StakingScreen.tsx","src/hooks/useSwapState.tsx","src/screens/SwapScreen.tsx","src/screens/index.tsx","App.tsx","web-build/register-service-worker.js","globals.js","assets/levx-typography-dark.png","assets/levx-typography.png","assets/metamask-dark.png","assets/metamask.png","assets/sushiswap.jpg"],"names":["module","exports","ETH","address","ethers","constants","AddressZero","decimals","symbol","logoURI","balance","BigNumber","from","CONTRACTS","ERC20","IUniswapV2Factory","IUniswapV2Pair","IUniswapV2Router02","IWETH","MasterChef","Migrator2","SushiBar","formatBalance","value","maxFraction","formatted","utils","formatUnits","split","length","substr","parseBalance","parseUnits","isEmptyValue","text","isBigNumber","isZero","replace","convertToken","token","WETH","SDKToken","ChainId","MAINNET","convertAmount","amount","TokenAmount","toString","parseCurrencyAmount","toExact","getContract","name","signer","contract","ContractFactory","abi","logTransaction","tx","a","async","args","Analytics","hash","gasLimit","gasPrice","chainId","ROUTER","MASTER_CHEF","SUSHI_BAR","MIGRATOR2","fetchTokens","provider","fetch","response","json","getAddress","account","send","tokens","map","balances","getBalance","i","tokenBalances","tokenBalance","sort","t1","t2","sub","div","pow","toNumber","fetchPools","pools","pool","Promise","all","poolToken","balanceOf","totalDeposited","masterChef","userInfo","amountDeposited","pendingSushi","id","tokenA","tokenB","fetchMyLPTokens","factory","SUSHISWAP_FACTORY","allPairsLength","Array","_","allPairs","pairs","pair","erc20","Number","totalSupply","findOrGetToken","token0","token1","result","filter","fetchMyUniswapLPTokens","UNISWAP_FACTORY","require","scanner","findPairs","Math","min","concat","find","t","toLowerCase","meta","logo","Zero","GlobalContext","React","createContext","load","clear","deviceType","undefined","darkMode","setDarkMode","mnemonic","setMnemonic","GlobalContextProvider","children","colorScheme","useColorScheme","useState","setDeviceType","useAsyncEffect","getDeviceTypeAsync","Provider","AsyncStorage","getItem","mode","mne","removeItem","setItem","String","Consumer","EthersContext","addOnBlockListener","_name","_listener","removeOnBlockListener","updateTokens","loadingTokens","approveToken","_token","_spender","_amount","getTokenAllowance","EthersContextProvider","useContext","setProvider","setSigner","setChainId","setAddress","onBlockListeners","setOnBlockListeners","setTokens","setLoadingTokens","window","ethereum","web3","providers","Web3Provider","alchemy","AlchemyProvider","network","getSigner","useEffect","onAccountsChanged","selectedAddress","onChainChanged","on","off","Constants","manifest","extra","alchemyApiKey","wallet","Wallet","fromMnemonic","connect","data","useCallback","spender","MaxUint256","estimateGas","approve","owner","listener","old","onBlock","block","Object","entries","ContextProvider","IS_HIGH_RESOLUTION","round","Dimensions","get","width","height","HEADER_HEIGHT","Platform","OS","Spacing","tiny","small","normal","large","huge","content","FlexView","props","flexDirection","direction","View","style","Colors","common","white","transparent","primary","secondary","green","twitter","facebook","light","background","backgroundHovered","border","borderDark","textDark","textMedium","textLight","disabled","shadow","placeholder","underlay","dark","useColors","Text","fontFamily","fontWeight","h1Style","h2Style","h3Style","h4Style","fontSize","note","caption","color","medium","Link","to","onPress","open","textDecorationLine","marginRight","WebFooter","position","bottom","margin","marginLeft","Title","alignSelf","alignItems","textDecoration","Image","source","Menu","title","path","MenuItem","match","useRouteMatch","marginBottom","padding","isExact","left","right","backgroundColor","DarkModeSwitch","onChange","transform","scale","WebHeader","top","zIndex","paddingBottom","flex","justifyContent","paddingTop","paddingHorizontal","useStyles","shadowColor","borderRadius","elevation","shadowOffset","shadowOpacity","shadowRadius","overflow","WebStatus","connected","substring","Button","type","size","buttonStyle","borderColor","titleStyle","containerStyle","ApproveButton","loading","setLoading","onError","wait","onSuccess","hidden","ButtonGroup","index","setIndex","selectedIndex","textStyle","borderTopLeftRadius","borderBottomLeftRadius","borderTopRightRadius","buttons","borderBottomRightRadius","selectedButtonStyle","marginHorizontal","marginVertical","CloseIcon","Column","marginTop","noTopMargin","Container","Universal","select","web","ScrollView","contentContainerStyle","default","SafeAreaView","Content","multiplier","contentPadding","paddingVertical","ErrorMessage","error","borderWidth","code","message","FetchingButton","InsufficientBalanceButton","Border","Filter","onFilterChanged","handler","f","checked","CheckBox","iconRight","iconType","checkedIcon","uncheckedIcon","checkedColor","LPTokenList","state","emptyText","Item","renderItem","item","key","selected","onSelectToken","setSelectedLPToken","lpTokens","gt","ActivityIndicator","FlatList","keyExtractor","JSON","stringify","ItemSeparatorComponent","EmptyList","textAlign","LPTokenSelect","onUnselectToken","showFilter","selectedLPToken","Meta","label","Notice","SelectIcon","Subtitle","Input","onChangeText","errors","forbidden","forEach","validation","regexp","push","allowed","join","inputStyle","outline","labelStyle","placeholderTextColor","errorStyle","MaxButton","onPressMax","fee","updateAmount","TokenInput","onAmountChanged","e","endsWith","indexOf","DAI","Token","USDC","USDT","SUSHI","YAM","AMPL","BASES_TO_CHECK_TRADES_AGAINST","CUSTOM_BASES","wrappedCurrency","currency","ETHER","useAllCommonPairs","loadAllCommonPairs","currencyA","currencyB","bases","basePairs","flatMap","base","otherBase","t0","allPairCombinations","Boolean","b","customBases","customBasesA","customBasesB","equals","Fetcher","fetchPairData","minAmount","percent","mul","numerator","denominator","useSDK","allowedSlippage","Percent","getTrade","fromToken","toToken","fromAmount","isETH","CurrencyAmount","ether","Trade","bestTradeExactIn","maxHops","maxNumResults","swap","trade","Router","feeOnTransfer","recipient","ttl","params","swapCallParameters","router","methodName","functions","arg","wrapETH","weth","deposit","unwrapETH","withdraw","getPair","addLiquidity","toAmount","deadline","floor","Date","getTime","removeLiquidityETH","liquidity","amountETH","removeLiquidity","addLiquidityETH","getExpectedSushiRewardPerBlock","totalAllocPoint","sushiPerBlock","poolInfo","allocPoint","lpTokenId","enterSushiBar","sushiBar","enter","leaveSushiBar","leave","migrate","lpToken","migrator2","calculateFee","useTokenPairState","fromSymbol","setFromSymbol","toSymbol","setToSymbol","setFromAmount","setToAmount","fromTokenAllowed","setFromTokenAllowed","toTokenAllowed","setToTokenAllowed","wrapping","setWrapping","unwrapping","setUnwrapping","minAllowance","fromAllowance","gte","toAllowance","onWrap","onUnwrap","useLiquidityState","setPair","updatePair","useLPTokensState","lastTimeRefreshed","setLastTimeRefreshed","setLPTokens","selectedLPTokenAllowed","setSelectedLPTokenAllowed","setAmount","updateLPTokens","updateLastTimeRefreshed","now","useFarmingState","filteredBy","setFilteredBy","action","setAction","expectedSushiRewardPerBlock","setExpectedSushiRewardPerBlock","depositing","setDepositing","withdrawing","setWithdrawing","allowance","onDeposit","onWithdraw","route","target","_target","navigate","useNavigation","AppHeader","StatusBar","translucent","ConnectWallet","enable","Linking","Social","onPressTwitter","onPressGithub","onPressDiscord","reverseColor","reverse","raised","MobileNotSupported","minHeight","Screen","DeviceType","PHONE","ConnectToWallet","AppLoading","Actions","Farming","h4","TokenItem","field","hovered","TouchableHighlight","LogoSymbol","isEmpty","setIsEmpty","uri","ActionSelect","element","DepositText","WithdrawText","Deposit","AddLiquidityNotice","DepositInfo","sushiReward","DepositControls","setError","approveRequired","AddLiquidityButton","useLinker","DepositButton","catch","Withdraw","NoLPTokenNotice","WithdrawInfo","WithdrawControls","WithdrawButton","FarmingScreen","TokenList","useMemo","filterTokens","localeCompare","TokenSelect","onChangeSymbol","UnsupportedButton","FromTokenInput","newAmount","fromPrice","priceOf","quote","ToTokenInput","toPrice","PriceInfo","initialPrice","price","toSignificant","Price","Controls","insufficientFromToken","insufficientToToken","fromApproveRequired","toApproveRequired","SupplyButton","onAdd","adding","AddLiquidity","LPTokenItem","AmountInfo","ArrowDown","Amount","RemoveButton","onRemove","removing","RemoveLiquidity","useAddLiquidityState","setAdding","useRemoveLiquidityState","setRemoving","liquidityToken","fromReserve","reserveOf","toReserve","amountToRemove","amountToRemoveETH","OR","Line","LiquidityScreen","addLiquidityState","removeLiquidityState","useMigrateState","migrating","setMigrating","onMigrate","Migrate","MigrateButton","MigrateScreen","useStakingState","sushiStaked","setSushiStaked","sushiSupply","setSushiSupply","xSushiSupply","setXSushiSupply","sushiAllowed","setSushiAllowed","xSushiAllowed","setXSushiAllowed","entering","setEntering","leaving","setLeaving","sushi","xSushi","sushiAllowance","xSushiAllowance","sushiContract","xSushiContract","onEnter","onLeave","Staking","StakeText","UnstakeText","NoSushiNotice","NoXSushiNotice","StakeInfo","xSushiAmount","share","StakeButton","UnstakeButton","StakingScreen","useSwapState","setTrade","unsupported","setUnsupported","swapping","setSwapping","updateTrade","onSwap","Swap","TradeInfo","WrapInfo","SwapInfo","outputAmount","executionPrice","impact","priceImpact","SwapButton","WrapButton","UnwrapButton","SwapScreen","Screens","WebScreens","Tab","createBottomTabNavigator","AppScreens","theme","DefaultTheme","colors","card","notification","NavigationContainer","Navigator","tabBarOptions","activeTintColor","inactiveTintColor","component","options","tabOptions","iconName","tabBarIcon","App","useFonts","UnicaOne_400Regular","OpenSans_300Light","regular","OpenSans_400Regular","bold","OpenSans_700Bold","navigator","addEventListener","serviceWorker","register","scope","then","info","console","global","Buffer"],"mappings":"yEAAAA,EAAOC,QAAU,IAA0B,yC,8LCG9BC,EAAa,CACtBC,QAASC,SAAOC,UAAUC,YAC1BC,SAAU,GACVC,OAAQ,MACRC,QAAS,kDACTC,QAASN,SAAOO,UAAUC,KAAK,I,gFCI7BC,EAAY,CACdC,QACAC,oBACAC,iBACAC,qBACAC,QACAC,aACAC,YACAC,YAGSC,EAAgB,SAACC,GAAgE,IAApChB,EAAmC,uDAAxB,GAAIiB,EAAoB,uDAAN,EAC7EC,EAAYrB,SAAOsB,MAAMC,YAAYJ,EAAOhB,GAClD,GAAIiB,EAAc,EAAG,CACjB,IAAMI,EAAQH,EAAUG,MAAM,KAC9B,GAAIA,EAAMC,OAAS,EACf,OAAOD,EAAM,GAAK,IAAMA,EAAM,GAAGE,OAAO,EAAGN,GAGnD,OAAOC,GAGEM,EAAe,SAACR,GAAkC,IAAnBhB,EAAkB,uDAAP,GACnD,OAAOH,SAAOsB,MAAMM,WAAWT,GAAS,IAAKhB,IAGpC0B,EAAe,SAACC,GAAD,OACxB9B,SAAOO,UAAUwB,YAAYD,GACvB9B,SAAOO,UAAUC,KAAKsB,GAAME,SACnB,KAATF,GAA4D,KAA7CA,EAAKG,QAAQ,KAAM,IAAIA,QAAQ,KAAM,KAEjDC,EAAe,SAACC,GACzB,MAAwB,QAAjBA,EAAM/B,OAAmBgC,IAAK,GAAO,IAAIC,IAASC,IAAQC,QAASJ,EAAMpC,QAASoC,EAAMhC,WAGtFqC,EAAgB,SAACL,EAAcM,GACxC,OAAO,IAAIC,IAAYR,EAAaC,GAAQR,EAAac,EAAQN,EAAMhC,UAAUwC,aAGxEC,EAAsB,SAACzB,GAA0C,IAAnBhB,EAAkB,uDAAP,GAClE,OAAOH,SAAOO,UAAUC,KAAKmB,EAAaR,EAAM0B,UAAW1C,KAGlD2C,EAAc,SAACC,EAAchD,EAAiBiD,GACvD,IAAMC,EAAWxC,EAAUsC,GAC3B,OAAO/C,SAAOkD,gBAAgBJ,YAAY/C,EAASkD,EAASE,IAAKH,ICrDxDI,EAAiB,SAC1BC,EACAN,GAF0B,+BAAAO,EAAAC,OAAA,+DAGvBC,EAHuB,iCAGvBA,EAHuB,4BAAAF,EAAA,MAKpBG,IAAmB,MAAQV,EAAM,CACnCS,KAAMA,GAAQ,GACdE,KAAML,EAAGK,KACTvC,MAAOkC,EAAGlC,MAAMwB,WAChBgB,SAAUN,EAAGM,SAAShB,WACtBiB,SAAUP,EAAGO,SAASjB,WACtBkB,QAASR,EAAGQ,WAXU,gCAanBR,GAbmB,6D,0BCFjBS,EADmB,6CAEnBC,EAAc,6CACdC,EAAY,6CAGZC,EAAY,6C,ikBCElB,IAAMC,EAAc,SAAOC,EAA6CnB,GAApD,qBAAAM,EAAAC,OAAA,oDACnBY,IAAYnB,EADO,mCAAAM,EAAA,MAEIc,MAAM,0CAFV,cAEbC,EAFa,kBAAAf,EAAA,MAGAe,EAASC,QAHT,cAGbA,EAHa,kBAAAhB,EAAA,MAKGN,EAAOuB,cALV,cAKbC,EALa,mBAAAlB,EAAA,MAMIa,EAASM,KAAK,2BAA4B,CAC7DD,EACAF,EAAKI,OAAOC,KAAI,SAAAxC,GAAK,OAAIA,EAAMpC,cARhB,eAMb6E,EANa,wBAYR9E,GAZQ,oBAAAwD,EAAA,MAaIa,EAASU,WAAWL,IAbxB,iCAaXlE,QAbW,wEAeZgE,EAAKI,OAAOC,KAAI,SAACxC,EAAO2C,GAAR,cACZ3C,GADY,IAEf7B,QAASN,SAAOO,UAAUC,KAAKoE,EAASG,cAAcD,GAAGE,cAAgB,UAE/EC,MAAK,SAACC,EAAIC,GACR,OAAOA,EAAG7E,QACL8E,IAAIF,EAAG5E,SACP+E,IAAIrF,SAAOO,UAAUC,KAAK,IAAI8E,IAAI,KAClCC,eAvBU,8DA4BdC,EAAa,SAAOrB,EAA6CnB,GAApD,qBAAAM,EAAAC,OAAA,oDAClBY,IAAYnB,EADM,mCAAAM,EAAA,MAEKc,MAAM,yCAFX,cAEZC,EAFY,kBAAAf,EAAA,MAGEe,EAASC,QAHX,cAGZmB,EAHY,kBAAAnC,EAAA,MAIIN,EAAOuB,cAJX,cAIZxE,EAJY,mBAAAuD,EAAA,MAKKa,EAASM,KAAK,2BAA4B,CAAC1E,EAAS0F,EAAMd,KAAI,SAAAe,GAAI,OAAIA,EAAK3F,cALhF,eAKZ6E,EALY,mBAAAtB,EAAA,MAMJqC,QAAQC,IAClBH,EAAMd,KAAI,SAAOe,EAAMZ,GAAb,yBAAAxB,EAAAC,OAAA,uDACAsC,EAAY/C,EAAY,QAAS4C,EAAK3F,QAASiD,GAD/C,WAAAM,EAAA,MAEuBuC,EAAUC,UAAU/B,IAF3C,cAEAgC,EAFA,OAGAC,EAAalD,EAAY,aAAciB,EAAaf,GAHpD,WAAAM,EAAA,MAIoC0C,EAAWC,SAASnB,EAAG/E,IAJ3D,uBAIUmG,EAJV,EAIEzD,OAJF,YAAAa,EAAA,MAKqB0C,EAAWG,aAAarB,EAAG/E,IALhD,eAKAoG,EALA,gCAOCT,GAPD,IAQFU,GAAItB,EACJ1E,OAAQsF,EAAKW,OAAOjG,OAAS,IAAMsF,EAAKY,OAAOlG,OAAS,MACxDE,QAASN,SAAOO,UAAUC,KAAKoE,EAASG,cAAcD,GAAGE,cAAgB,GACzEe,iBACAG,kBACAC,kBAbE,kEAPI,uGA2BbI,EAAkB,SAC3B7B,EACAP,EACAnB,GAH2B,uBAAAM,EAAAC,OAAA,oDAKvBY,IAAYnB,EALW,wBAMjBwD,EAAU1D,EAAY,oBAAqB2D,IAAmBzD,GAN7C,WAAAM,EAAA,MAOFkD,EAAQE,kBAPN,cAOjBjF,EAPiB,kBAAA6B,EAAA,MAQHqC,QAAQC,IACxBe,MAAMnG,KAAK,CAAEiB,WAAUkD,KAAI,SAACiC,EAAG9B,GAC3B,OAAO0B,EAAQK,SAAS/B,QAVT,cAQjBgC,EARiB,cAAAxD,EAAA,KAaAa,EAbA,YAAAb,EAAA,MAaiDN,EAAOuB,cAbxD,gCAasEuC,EAbtE,2BAaSrC,KAbT,UAac,2BAbd,0DAajBG,EAbiB,mBAAAtB,EAAA,MAcFqC,QAAQC,IACzBkB,EAAMnC,KAAI,SAAO5E,EAAS+E,GAAhB,2BAAAxB,EAAAC,OAAA,qDACAjD,EAAUN,SAAOO,UAAUC,KAAKoE,EAASG,cAAcD,GAAGE,eACpDhD,SAFN,yCAGK,MAHL,cAKA+E,EAAOjE,EAAY,iBAAkB/C,EAASiD,GAC9CgE,EAAQlE,EAAY,QAAS/C,EAASiD,GANtC,KAOWiE,OAPX,WAAA3D,EAAA,MAOwB0D,EAAM7G,YAP9B,0BAOAA,GAPA,0BAAAmD,EAAA,MAQoB0D,EAAME,eAR1B,eAQAA,EARA,cAAA5D,EAAA,KASe6D,EATf,YAAA7D,EAAA,MASoCyD,EAAKK,UATzC,gCASmD1C,EATnD,KAS2DP,EAT3D,kFASAkC,EATA,cAAA/C,EAAA,KAUe6D,EAVf,YAAA7D,EAAA,MAUoCyD,EAAKM,UAVzC,kCAUmD3C,EAVnD,MAU2DP,EAV3D,uFAUAmC,EAVA,yBAWC,CAAEvG,UAASI,WAAUG,UAAS4G,cAAab,SAAQC,WAXpD,kEAfS,eAcjBgB,EAdiB,yBA6BhBA,EAAOC,QAAO,SAAApF,GAAK,QAAMA,MA7BT,8DAiClBqF,EAAyB,SAClC9C,EACAP,EACAnB,GAHkC,+BAAAM,EAAAC,OAAA,qDAK9BY,GAAYnB,GAAU0B,GALQ,wBAMxB8B,EAAU1D,EAAY,oBAAqB2E,IAAiBzE,GANpC,WAAAM,EAAA,MAOTkD,EAAQE,kBAPC,cAOxBjF,EAPwB,OAQxB0B,EAAMuE,EAAQ,KACdC,EAAU3H,SAAOkD,gBAAgBJ,YDpGf,6CCoG6CK,EAAKH,GAT5C,WAAAM,EAAA,MAURN,EAAOuB,cAVC,OAUxBC,EAVwB,OAW1BsC,EAAe,GACVhC,EAAI,EAZiB,aAYdA,EAAIrD,GAZU,6BAalBqF,EAbkB,YAAAxD,EAAA,MAchBqE,EAAQC,UAAUpD,EAASiD,IAAiB3C,EAAG+C,KAAKC,IAAIhD,EAAI,IAAMrD,EAAO8D,cAdzD,oBAa1BuB,EAb0B,KAaZiB,OAbY,wBAYFjD,GAAK,IAZH,2CAAAxB,EAAA,MAiBPa,EAASM,KAAK,2BAA4B,CAACD,EAASsC,EAAMnC,KAAI,SAAAoC,GAAI,OAAIA,EAAK5E,YAjBpE,eAiBxByC,EAjBwB,mBAAAtB,EAAA,MAkBTqC,QAAQC,IACzBkB,EAAMnC,KAAI,SAAOoC,EAAMjC,GAAb,yBAAAxB,EAAAC,OAAA,uDACAjD,EAAUN,SAAOO,UAAUC,KAAKoE,EAASG,cAAcD,GAAGE,cAC1DgC,EAAQlE,EAAY,QAASiE,EAAK5E,MAAOa,GAFzC,KAGWiE,OAHX,WAAA3D,EAAA,MAGwB0D,EAAM7G,YAH9B,0BAGAA,GAHA,yBAAAmD,EAAA,MAIoB0D,EAAME,eAJ1B,cAIAA,EAJA,cAAA5D,EAAA,KAKe6D,EALf,YAAA7D,EAAA,MAKoCyD,EAAKK,QALzC,gCAKiD1C,EALjD,KAKyDP,EALzD,kFAKAkC,EALA,cAAA/C,EAAA,KAMe6D,EANf,YAAA7D,EAAA,MAMoCyD,EAAKM,QANzC,kCAMiD3C,EANjD,MAMyDP,EANzD,uFAMAmC,EANA,yBAOC,CAAEvG,QAASgH,EAAK5E,MAAOhC,WAAUG,UAAS4G,cAAab,SAAQC,WAPhE,kEAnBgB,eAkBxBgB,EAlBwB,yBA6BvBA,EAAOC,QAAO,SAAApF,GAAK,QAAMA,MA7BF,8DAiChCgF,EAAiB,SAAOpH,EAAiB2E,EAAiBP,GAAzC,iBAAAb,EAAAC,OAAA,qDACbpB,EAAQuC,EAAOsD,MAAK,SAAAC,GAAC,OAAIA,EAAElI,QAAQmI,gBAAkBnI,EAAQmI,kBADhD,yCAGR/F,GAHQ,yBAAAmB,EAAA,MAKAa,EAASM,KAAK,2BAA4B,CAAC1E,KAL3C,cAKboI,EALa,yBAMZ,CACHpI,UACAK,OAAQ+H,EAAK/H,OACbD,SAAUgI,EAAKhI,SACfE,QAAS8H,EAAKC,KACd9H,QAASN,SAAOC,UAAUoI,OAXX,6D,wCC1HVC,GAAgBC,IAAMC,cAAc,CAC7CC,KAAM,oBAAAnF,EAAAC,OAAA,sGACNmF,MAAO,oBAAApF,EAAAC,OAAA,sGACPoF,gBAAYC,EACZC,UAAU,EACVC,YAAa,SAAMD,GAAN,SAAAvF,EAAAC,OAAA,sGACbwF,SAAU,GACVC,YAAa,SAACD,OAILE,GAAwB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAC9BC,EAAcC,2BAD+B,EAEfC,qBAFe,WAE5CV,EAF4C,KAEhCW,EAFgC,OAGnBD,mBAAyB,SAAhBF,GAHU,WAG5CN,EAH4C,KAGlCC,EAHkC,OAInBO,mBAAS,IAJU,WAI5CN,EAJ4C,KAIlCC,EAJkC,KAQnD,OAHAO,KAAe,oBAAAjG,EAAAC,OAAA,4DACX+F,EADW,WAAAhG,EAAA,MACSkG,gBADT,gGAEZ,IAEC,kBAAClB,GAAcmB,SAAf,CACItI,MAAO,CACHsH,KAAM,4BAAAnF,EAAAC,OAAA,kEAAAD,EAAA,MACiBoG,KAAaC,QAAQ,cADtC,cACIC,EADJ,OAEFd,EAAqB,SAATc,GAFV,WAAAtG,EAAA,MAGgBoG,KAAaC,QAAQ,aAHrC,QAGIE,EAHJ,SAKEb,EAAYa,GALd,6DAQNnB,MAAO,oBAAApF,EAAAC,OAAA,uDACHuF,GAAY,GADT,WAAAxF,EAAA,MAEGoG,KAAaI,WAAW,cAF3B,yBAAAxG,EAAA,MAGGoG,KAAaI,WAAW,aAH3B,6DAKPnB,aACAE,WACAC,YAAa,SAAOc,GAAP,SAAAtG,EAAAC,OAAA,kEAAAD,EAAA,MACHoG,KAAaK,QAAQ,YAAaC,OAAOJ,KADtC,OAETd,EAAYc,GAFH,6DAIbb,WACAC,YAAa,SAAOa,GAAP,SAAAvG,EAAAC,OAAA,kEAAAD,EAAA,MACHoG,KAAaK,QAAQ,WAAYF,IAD9B,OAETb,EAAYa,GAFH,+DAKhBX,IAKwBZ,GAAc2B,S,qkBC3C5C,IAAMC,GAAgB3B,IAAMC,cAAc,CAC7CrE,cAAUyE,EACV5F,YAAQ4F,EACR/E,QAAS,EACT9D,QAAS,KACToK,mBAAoB,SAACC,EAAeC,KACpCC,sBAAuB,SAACF,KACxB1F,OAAQ,CAAC5E,GACTyK,aAAc,oBAAAjH,EAAAC,OAAA,sGACdiH,eAAe,EACfC,aAAc,SAAOC,EAAgBC,EAAkBC,GAAzC,SAAAtH,EAAAC,OAAA,yEACH,IADG,6DAGdsH,kBAAmB,SAAOH,EAAgBC,GAAvB,SAAArH,EAAAC,OAAA,yEACRvD,SAAOC,UAAUoI,MADT,+DAMVyC,GAAwB,SAAC,GAAkB,IAAhB5B,EAAe,EAAfA,SAC5BH,EAAagC,qBAAWzC,IAAxBS,SAD2C,EAEnBM,qBAFmB,WAE5ClF,EAF4C,KAElC6G,EAFkC,OAGvB3B,qBAHuB,WAG5CrG,EAH4C,KAGpCiI,EAHoC,OAIrB5B,mBAAiB,GAJI,WAI5CxF,EAJ4C,KAInCqH,EAJmC,OAKrB7B,mBAAwBrJ,SAAOC,UAAUC,aALpB,WAK5CH,EAL4C,KAKnCoL,EALmC,OAMH9B,mBAA8C,IAN3C,WAM5C+B,EAN4C,KAM1BC,EAN0B,OAOvBhC,mBAAkB,IAPK,WAO5C3E,EAP4C,KAOpC4G,EAPoC,OAQTjC,oBAAS,GARA,WAQ5CmB,EAR4C,KAQ7Be,EAR6B,KAUnDhC,KAAe,4BAAAjG,EAAAC,OAAA,oDACPiI,OAAOC,SADA,uBAEDC,EAAO,IAAI1L,SAAO2L,UAAUC,aAAaJ,OAAOC,UAChDI,EAAU,IAAI7L,SAAO2L,UAAUG,gBAAgBJ,EAAKK,QAAS,oCACnEf,EAAYa,GAJL,KAKPZ,EALO,WAAA3H,EAAA,MAKSoI,EAAKM,aALd,gGAOZ,CAACR,OAAOC,WAEXQ,qBAAU,WACN,GAAIT,OAAOC,SAAU,CACjB,IAAMS,EAAoB,WACtBf,EAAWK,OAAOC,SAASU,iBACvBX,OAAOC,SAAS5H,SAAW2H,OAAOC,SAASU,iBAC3C1I,IAAoBwD,OAAOuE,OAAOC,SAAS5H,SAAW,IAAM2H,OAAOC,SAASU,kBAG9EC,EAAiB,WACnBlB,EAAWjE,OAAOuE,OAAOC,SAAS5H,WAMtC,OAJAqI,IACAE,IACAZ,OAAOC,SAASY,GAAG,kBAAmBH,GACtCV,OAAOC,SAASY,GAAG,eAAgBD,GAC5B,WACHZ,OAAOC,SAASa,IAAI,kBAAmBJ,GACvCV,OAAOC,SAASa,IAAI,eAAgBJ,OAG7C,CAACV,OAAOC,SAAUzI,IAErBiJ,qBAAU,WACN,GAAIlD,EAAU,CACV,IAAM8C,EAAU,IAAI7L,SAAO2L,UAAUG,gBAAgB,EAAGS,IAAUC,SAASC,MAAMC,eACjF1B,EAAYa,GACZ,IAAMc,EAAS3M,SAAO4M,OAAOC,aAAa9D,GAAU+D,QAAQjB,GAC5DZ,EAAU0B,MAEf,CAAC5D,IAEJ,IAAMwB,EAAe,0BAAAjH,EAAAC,OAAA,2EAAAD,EAAA,MAEMY,EAAYC,EAAUnB,IAF5B,YAEP+J,EAFO,0CAAAzJ,EAAA,MAIHgI,EAAUyB,IAJP,uBAObxB,GAAiB,GAPJ,iFAWrBhC,KAAe,oBAAAjG,EAAAC,OAAA,oDACPY,IAAYnB,EADL,uBAEPuI,GAAiB,GAFV,WAAAjI,EAAA,MAGDiH,KAHC,8DAKZ,CAACpG,EAAUnB,EAAQjD,IAEtB,IAAM0K,EAAeuC,uBACjB,SAAO7K,EAAe8K,EAAiBxK,GAAvC,mBAAAa,EAAAC,OAAA,oDACQP,EADR,wBAEQP,EAASA,GAAUzC,SAAOC,UAAUiN,WAC9BlG,EAAQlE,EAAY,QAASX,EAAOa,GAHlD,WAAAM,EAAA,MAI+B0D,EAAMmG,YAAYC,QAAQH,EAASxK,IAJlE,cAIckB,EAJd,kBAAAL,EAAA,MAKyB0D,EAAMoG,QAAQH,EAASxK,EAAQ,CAC5CkB,cANZ,cAKcN,EALd,mBAAAC,EAAA,MAQqBF,EAAeC,EAAI,kBAAmB4J,EAASxK,EAAOE,aAR3E,wGAWA,CAACK,IAGC6H,EAAoBmC,uBACtB,SAAO7K,EAAe8K,GAAtB,SAAA3J,EAAAC,OAAA,oDACQY,IAAYnB,EADpB,+BAAAM,EAAA,KAEqBa,EAFrB,KAI0BhC,EAJ1B,WAAAmB,EAAA,MAK6BN,EAAOuB,cALpC,+BAMgB0I,EANhB,MAIgBhK,SAJhB,KAKgBoK,MALhB,KAMgBJ,QANhB,4BAE8BxI,KAF9B,UAEmC,4BAFnC,mJAWA,CAACN,EAAUnB,IAGTmH,EAAqB6C,uBACvB,SAACjK,EAAMuK,GACHjC,GAAoB,SAAAkC,GAAG,gBAAUA,GAAV,UAAgBxK,EAAOuK,SAElD,CAACjC,IAGCf,EAAwB0C,uBAC1B,SAAAjK,GACIsI,GAAoB,SAAAkC,GAEhB,cADOA,EAAIxK,GACJwK,OAGf,CAAClC,IAiBL,OAdAY,qBAAU,WACN,GAAI9H,GAAYnB,GAAsB,IAAZa,EAAe,CACrC,IAAM2J,EAAU,SAAOC,GAAP,qBAAAnK,EAAAC,OAAA,sDACWmK,OAAOC,QAAQvC,GAD1B,+CACDkC,EADC,gBAAAhK,EAAA,eAEFgK,EAAS,SAFP,EAEF,OAAAA,EAAcG,IAFZ,uFAMhB,OADAtJ,EAASkI,GAAG,QAASmB,GACd,WACHrJ,EAASmI,IAAI,QAASkB,OAG/B,CAACrJ,EAAUnB,EAAQa,EAASuH,IAG3B,kBAAClB,GAAcT,SAAf,CACItI,MAAO,CACHgD,WACAnB,SACAa,UACA9D,UACA2E,SACA6F,eACAC,gBACAC,eACAI,oBACAV,qBACAG,0BAEHpB,IAsCwBgB,GAAcD,SCrN5C,IAAM2D,GAAkB,SAAC,GAAkB,IAAhB1E,EAAe,EAAfA,SAC9B,OACI,kBAAC,GAAD,KACI,kBAAC,GAAD,KAAwBA,K,oFCJvB2E,IAFehG,KAAKiG,MAAMC,KAAWC,IAAI,UAAUC,OACnCpG,KAAKiG,MAAMC,KAAWC,IAAI,UAAUE,QACf,KACrCC,GAAgC,QAAhBC,KAASC,GAAe,GAAK,GAE7CC,GAAUT,GACjB,CACIU,KAAM,EACNC,MAAO,GACPC,OAAQ,GACRC,MAAO,GACPC,KAAM,GACNC,QAAS,IAEb,CACIL,KAAM,EACNC,MAAO,GACPC,OAAQ,GACRC,MAAO,GACPC,KAAM,GACNC,QAAS,I,oBCXJC,GAJoC,SAAAC,GAC/C,IAAMC,EAAgBD,EAAME,WAAa,MACzC,OAAO,kBAACC,GAAA,EAAD,QAAUH,EAAV,CAAiBI,MAAO,CAAC,CAAEH,iBAAiBD,EAAMI,WCThDC,GAAS,CAClBC,OAAQ,CACJC,MAAO,UACPC,YAAa,YACbC,QAAS,UACTC,UAAW,UACXC,MAAO,UACPC,QAAS,UACTC,SAAU,WAEdC,MAAO,CACHC,WAAY,UACZC,kBAAmB,UACnBC,OAAQ,UACRC,WAAY,UACZC,SAAU,UACVC,WAAY,UACZC,UAAW,UACXC,SAAU,UACVC,OAAQ,UACRC,YAAa,UACbC,SAAU,WAEdC,KAAM,CACFX,WAAY,UACZC,kBAAmB,UACnBC,OAAQ,YACRC,WAAY,UACZC,SAAU,UACVC,WAAY,UACZC,UAAW,UACXC,SAAU,YACVC,OAAQ,UACRC,YAAa,UACbC,SAAU,c,qkBC7BlB,IAQeE,GARG,WAAO,IACb5H,EAAakC,qBAAWzC,IAAxBO,SACR,OAAO,SACAsG,GAAOtG,EAAW,OAAS,UAC3BsG,GAAOC,SC0BHsB,GArBa,SAAA5B,GAAU,IAAD,EACW2B,KAApCR,EADyB,EACzBA,SAAUC,EADe,EACfA,WAAYC,EADG,EACHA,UACxBQ,EAAa7B,EAAM8B,YAAc,UACvC,OACI,kBAAC,KAAD,QACQ9B,EADR,CAEI+B,QAAS,CAAC,CAAEF,cAAc7B,EAAM+B,SAChCC,QAAS,CAAC,CAAEH,cAAc7B,EAAMgC,SAChCC,QAAS,CAAC,CAAEJ,cAAc7B,EAAMiC,SAChCC,QAAS,CAAC,CAAEL,cAAc7B,EAAMkC,SAChC9B,MAAO,CACH,CACIyB,aACAM,SAAUnC,EAAMoC,KAAO,GAAKpC,EAAMqC,QAAU,GAAK,GACjDC,MAAOtC,EAAMoC,MAAQpC,EAAMc,MAAQO,EAAYrB,EAAMuC,OAASnB,EAAaD,GAE/EnB,EAAMI,WCJhBoC,GAAO,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,GAAIzP,EAAW,EAAXA,KACV0P,EAAUxE,uBAAY,WACxBxB,OAAOiG,KAAKF,EAAI,YACjB,IACH,OACI,kBAAC,GAAD,CAAML,MAAM,EAAMhC,MAAO,CAAEwC,mBAAoB,YAAaC,YAAa,GAAKH,QAASA,GAClF1P,IAKE8P,GA9BG,kBACd,kBAAC3C,GAAA,EAAD,CAEIC,MAAO,CACH2C,SAAU,QACVC,OAAQ,EACRC,OAAQzD,GAAQM,UAEpB,kBAAC,GAAD,CAAMsC,MAAM,EAAMhC,MAAO,CAAE8C,WAAY,KAAvC,YACa,kBAAC,GAAD,CAAMT,GAAI,kBAAmBzP,KAAM,eAEhD,kBAAC,GAAD,KACI,kBAAC,GAAD,CAAMyP,GAAI,yCAA0CzP,KAAM,WAC1D,kBAAC,GAAD,CAAMyP,GAAI,8BAA+BzP,KAAM,YAC/C,kBAAC,GAAD,CAAMyP,GAAI,4BAA6BzP,KAAM,e,mBCoB5CmQ,GAAQ,WAAO,IAChBpJ,EAAakC,qBAAWzC,IAAxBO,SADe,EAEI4H,KAAnBlB,EAFe,EAEfA,QAASF,EAFM,EAENA,MACjB,OACI,kBAACJ,GAAA,EAAD,CAAMC,MAAO,CAAEgD,UAAW,SAAUC,WAAY,WAC5C,kBAAC,KAAD,CAAMZ,GAAI,IAAKrC,MAAO,CAAEkD,eAAgB,SACpC,kBAAC,GAAD,CAAMlD,MAAO,CAAEyB,WAAY,QAASM,SAAU,GAAIG,MAAOvI,EAAWwG,EAAQE,IAA5E,cAEJ,kBAAC8C,GAAA,EAAD,CACIC,OAEU5K,EADNmB,EACc,IACA,KAElBqG,MAAO,CAAEjB,MAAO,GAAIC,OAAQ,QAMtCqE,GAAO,WACT,OACI,kBAAC,GAAD,CACIrD,MAAO,CACHhB,OAAQ,OACRiE,WAAY,aAEhB,kBAAC,GAAD,CAAUK,MAAO,OAAQC,KAAM,MAC/B,kBAAC,GAAD,CAAUD,MAAO,YAAaC,KAAM,eACpC,kBAAC,GAAD,CAAUD,MAAO,UAAWC,KAAM,aAClC,kBAAC,GAAD,CAAUD,MAAO,UAAWC,KAAM,aAClC,kBAAC,GAAD,CAAUD,MAAO,UAAWC,KAAM,aAClC,kBAAC,GAAD,QAKNC,GAAW,SAAC,GAAqB,IAAnBF,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,KACfxC,EAAaQ,KAAbR,SACF0C,EAAQC,aAAcH,GAC5B,OACI,kBAAC,KAAD,CAAMlB,GAAIkB,EAAMvD,MAAO,CAAE8C,WAAY1D,GAAQE,MAAOqE,aAAc,EAAGT,eAAgB,SACjF,kBAACnD,GAAA,EAAD,KACI,kBAAC,GAAD,CAAMC,MAAO,CAAEyB,WAAY,UAAWM,SAAU,GAAIG,MAAOnB,EAAU6C,QAAS,IAAMN,IAC9E,MAALG,OAAA,EAAAA,EAAOI,UACJ,kBAAC9D,GAAA,EAAD,CACIC,MAAO,CACH2C,SAAU,WACV3D,OAAQ,EACR8E,KAAM,EACNC,MAAO,EACPnB,OAAQ,EACRoB,gBAAiBjD,QASvCkD,GAAiB,WAAO,IAAD,EACSpI,qBAAWzC,IAArCO,EADiB,EACjBA,SAAUC,EADO,EACPA,YACZsK,EAAWpG,uBACb,SAAMwD,GAAN,SAAAlN,EAAAC,OAAA,kEAAAD,EAAA,MACUwF,EAAY0H,IADtB,8DAGA,CAAC1H,IAEL,OACI,kBAACmG,GAAA,EAAD,CAAMC,MAAO,CAAE8C,WAAY1D,GAAQE,MAAOqE,aAAc,IACpD,kBAAC,KAAD,CACI1R,MAAO0H,EACPuK,SAAUA,EACVlE,MAAO,CACHmE,UAAW,CACP,CACIC,MAAO,UASpBC,GAnHG,WAAO,IACb1D,EAAeY,KAAfZ,WACR,OACI,kBAACZ,GAAA,EAAD,CAEIC,MAAO,CACH2C,SAAU,QACV2B,IAAK,EACLC,OAAQ,IACRxF,MAAO,OACPC,OAAQC,GACRuF,cAAe,GACfR,gBAAiBrD,IAErB,kBAAC,GAAD,CACIX,MAAO,CACHyE,KAAM,EACNC,eAAgB,gBAChBzB,WAAY,WACZ0B,WAAYvF,GAAQE,MACpBsF,kBAAmBxF,GAAQM,UAE/B,kBAAC,GAAD,MACA,kBAAC,GAAD,SChBDmF,GAdG,WAAO,IACLC,EAAgBvD,KAAxBJ,OAUR,MAAO,CAAEA,OATiB,CACtB4D,aAAc3F,GAAQC,KACtB2F,UAAW5F,GAAQE,MACnBwF,cACAG,aAAc,CAAElG,MAAO,EAAGC,OAAQ,GAClCkG,cAAe,GACfC,aAAc,EACdC,SAAU,a,qkBCJlB,IA8BeC,GA9BG,WAAO,IAAD,EACqB9D,KAAjCP,EADY,EACZA,WAAYC,EADA,EACAA,UAAWV,EADX,EACWA,MACvBY,EAAW0D,KAAX1D,OAFY,EAGStF,qBAAWb,IAAhCrG,EAHY,EAGZA,QAAS9D,EAHG,EAGHA,QACXyU,EAAwB,IAAZ3Q,GAAiB9D,EAC7ByS,EAAQgC,EACRzU,EAAS0U,UAAU,EAAG,GAAK,MAAQ1U,EAAS0U,UAAU1U,EAAS0B,OAAS,EAAG1B,EAAS0B,QACpF,gBACA2P,EAAQoD,EAAY/E,EAAQU,EAClC,OACI,kBAAC,GAAD,CAEIjB,MAAK,IACD2C,SAAU,QACVoB,MAAO3E,GAAQM,QACfkD,OAAQxD,GAAQG,OAChBP,OAAQ,GACRiE,WAAY,SACZyB,eAAgB,SAChBE,kBAAmBxF,GAAQE,MAC3ByF,aAAc,IACX5D,IAEP,kBAACpB,GAAA,EAAD,CAAMC,MAAO,CAAEgE,gBAAiB9B,EAAOnD,MAAO,EAAGC,OAAQ,EAAG+F,aAAc,EAAGtC,YAAa,MAC1F,kBAAC,GAAD,CAAMzC,MAAO,CAAE+B,SAAU,GAAIG,MAAOlB,EAAYyB,YAAa,IAAMa,K,mBCOhEkC,GA3BiB,SAAA5F,GAAU,IAAD,EACO2B,KAApClB,EAD6B,EAC7BA,QAASS,EADoB,EACpBA,WAAYE,EADQ,EACRA,WACrBG,EAAW0D,KAAX1D,OACFsE,EAAO7F,EAAM6F,MAAQ,QACrBC,EAAO9F,EAAM8F,MAAQ,SACrB1G,EAAwB,UAAfY,EAAM8F,KAAmB,GAAc,WAATA,EAAoB,GAAK,GAChE3D,EAA0B,UAAfnC,EAAM8F,KAAmB,GAAc,WAATA,EAAoB,GAAK,GAClEjE,EAAa7B,EAAM8B,YAAc,UACjCQ,EAAiB,UAATuD,EAAmB,QAAU7F,EAAMsC,OAASlB,EAC1D,OACI,kBAAC,KAAD,QACQpB,EADR,CAEI6F,KAAMA,EACNE,YAAa,CACT,CACI3G,SACA4F,kBAAmBxF,GAAQE,MAC3B0E,gBAA0B,UAATyB,EAAmB7F,EAAMsC,OAAS7B,EAAU,cAC7DuF,YAAa9E,GAEjBlB,EAAM+F,aAEVE,WAAY,CAAC,CAAE9D,WAAUN,aAAYS,SAAStC,EAAMiG,YACpDC,eAAgB,CAAU,UAATL,GAA6B,YAATA,EAAqBtE,EAAS,GAAIvB,EAAMkG,oBCW1EC,GAhC+B,SAAAnG,GAAU,IAAD,EAC3CrE,EAAiBM,qBAAWb,IAA5BO,aAD2C,EAErBpB,oBAAS,GAFY,WAE5C6L,EAF4C,KAEnCC,EAFmC,KAG7C3D,EAAUxE,uBAAY,0BAAA1J,EAAAC,OAAA,oDACpBuL,EAAM3M,MADc,wBAEpB2M,EAAMsG,QAAQ,IACdD,GAAW,GAHS,oBAAA7R,EAAA,MAKCmH,EAAaqE,EAAM3M,MAAMpC,QAAS+O,EAAM7B,UALzC,cAKV5J,EALU,kBAAAC,EAAA,MAMVD,EAAGgS,QANO,OAOhBvG,EAAMwG,YAPU,kDAShBxG,EAAMsG,QAAN,MATgB,yBAWhBD,GAAW,GAXK,sFAczB,CAACrG,EAAM3M,QACV,OAAI2M,EAAMyG,OACC,kBAACtG,GAAA,EAAD,MAGP,kBAAC,GAAD,CACI2F,KAAM,QACNpC,MAAO,aAAc,SAAA1D,EAAM3M,YAAN,IAAa/B,SAAU,IAC5CoR,QAASA,EACT0D,QAASA,EACTF,eAAgB,CAAEnC,aAAcvE,GAAQE,U,qkBCnCpD,IAiDegH,GAjD2B,SAAA1G,GAAU,IACxCkB,EAAeS,KAAfT,WACAK,EAAW0D,KAAX1D,OAFuC,EAGrBhH,qBAHqB,WAGxCoM,EAHwC,KAGjCC,EAHiC,KAIzClE,EAAUxE,uBAAY,SAAAlI,GACxB4Q,EAAS5Q,GACTgK,EAAM0C,QAAQ1M,KACf,IACH,OACI,kBAAC,KAAD,QACQgK,EADR,CAEI6G,cAAe7G,EAAM6G,eAAiBF,EACtCjE,QAASA,EACToE,UAAW,CACP,CACIjF,WAAY,WAEhB7B,EAAM8G,WAEVf,YAAa,CACT,CACIgB,oBAA+B,IAAVJ,EAAcnH,GAAQC,KAAO,EAClDuH,uBAAkC,IAAVL,EAAcnH,GAAQC,KAAO,EACrDwH,qBACIjH,EAAMkH,QAAQvU,OAAS,GAAKgU,IAAU3G,EAAMkH,QAAQvU,OAAS,EAAI6M,GAAQC,KAAO,EACpF0H,wBACInH,EAAMkH,QAAQvU,OAAS,GAAKgU,IAAU3G,EAAMkH,QAAQvU,OAAS,EAAI6M,GAAQC,KAAO,GAExFO,EAAM+F,aAEVqB,oBAAqB,CACjB,CACIhD,gBAAiBlD,GAErBlB,EAAMoH,qBAEVlB,eAAgB,CAAC,IAETmB,iBAAkB,EAClBC,eAAgB,EAChBlI,OAAQ,IACLmC,GAEPvB,EAAMkG,oBCxCPqB,GALG,WAAO,IACblG,EAAcM,KAAdN,UACR,OAAO,kBAAC,KAAD,CAAMwE,KAAM,qBAAsB5R,KAAM,QAASqO,MAAOjB,EAAWjB,MAAO,CAAE8C,WAAY1D,GAAQC,SCe5F+H,GAbiB,SAAAxH,GAAK,OACjC,kBAACG,GAAA,EAAD,QACQH,EADR,CAEII,MAAO,CACH,CACIjB,MAAuB,QAAhBG,KAASC,GAAe,IAAM,OACrCkI,UAAWzH,EAAM0H,YAAc,EAAoB,QAAhBpI,KAASC,GAAeC,GAAQI,MAAQJ,GAAQG,QAEvFK,EAAMI,W,mBCwBHuH,GAjCuB,SAAA3H,GAAU,IACpCe,EAAeY,KAAfZ,WACF6G,EAAYtI,KAASuI,OAAO,CAC9BC,IAAK,kBACD,kBAACC,GAAA,EAAD,MACIC,sBAAuB,CAAEnD,KAAM,GAC/BzE,MAAO,CACH,CACIgE,gBAAiBrD,EACjB0G,UAAWpI,IAEfW,EAAMI,QAENJ,KAGZiI,QAAS,kBACL,kBAACC,GAAA,EAAD,CAAc9H,MAAO,CAAEyE,KAAM,IACzB,kBAACkD,GAAA,EAAD,QACQ/H,EADR,CAEII,MAAO,CACH,CACIgE,gBAAiBrD,GAErBf,EAAMI,cAM1B,OAAO,kBAACwH,EAAD,OCHIO,GA1BwC,SAAAnI,GAAU,IACrDe,EAAeY,KAAfZ,WACFqH,EAAa,CACf1I,MAAO,IACPC,OAAQ,EACRC,MAAO,KACTI,EAAMqI,gBAAkB,UAC1B,OACI,kBAAClI,GAAA,EAAD,CAAMC,MAAO,CAAEiD,WAAY,SAAUwB,KAAM,EAAG1F,MAAO,OAAQiF,gBAAiBrD,IAC1E,kBAACZ,GAAA,EAAD,CAAMC,MAAO,CAAEjB,MAAuB,QAAhBG,KAASC,GAAe,KAAO,OAAQsF,KAAM,EAAGd,aAAcvE,GAAQK,OACxF,kBAACM,GAAA,EAAD,QACQH,EADR,CAEII,MAAO,CACH,CACI4E,kBAAmBxF,GAAQM,QAAUsI,EACrCE,gBAAiC,QAAhBhJ,KAASC,GAAeC,GAAQG,OAASyI,EAAa,EACvEhE,gBAAiBrD,EACjBsC,WAAY,UAEhBrD,EAAMI,aCFfmI,GApBM,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACjB,kBAACrI,GAAA,EAAD,CACIC,MAAO,CACH4F,YAAa,MACbyC,YAAa,EACbtJ,MAAO,OACP6E,QAASxE,GAAQC,KACjBgI,UAAWjI,GAAQE,QAEtB8I,EAAME,MACH,kBAAC,GAAD,CAAM5G,WAAY,OAAQ1B,MAAO,CAAEkC,MAAO,MAAOH,SAAU,KAA3D,cACgBqG,EAAME,MAG1B,kBAAC,GAAD,CAAMtG,MAAM,EAAMhC,MAAO,CAAEkC,MAAO,MAAOH,SAAU,KAC9CqG,EAAMG,WCfJC,GAHQ,WACnB,OAAO,kBAAC,GAAD,CAAQ9C,KAAM,QAASpC,MAAO,iBAAapC,UAAU,KCEjDuH,GAHmB,SAAC,GAAoC,IAAlCvX,EAAiC,EAAjCA,OACjC,OAAO,kBAAC,GAAD,CAAQwU,KAAM,QAASpC,MAAO,gBAAkBpS,IAAU,EAAiBgQ,UAAU,K,kBCKjFwH,GALA,WAAO,IACV7H,EAAWU,KAAXV,OACR,OAAO,kBAACd,GAAA,EAAD,CAAMC,MAAO,CAAEhB,OAAQ,EAAGD,MAAO,OAAQiF,gBAAiBnD,MCsD/D8H,GAAS,SAAC,GAAiC,IAA/BtQ,EAA8B,EAA9BA,OAAQuQ,EAAsB,EAAtBA,gBAChBC,EAAU,SAACC,GAAD,OAAe,kBAAMF,EAAgBE,KACrD,OACI,kBAAC,GAAD,CAAU9I,MAAO,CAAEjB,MAAO,OAAQ2F,eAAgB,aAC9C,kBAAC,GAAD,CAAUqE,QAAoB,YAAX1Q,EAAsBiK,QAASuG,EAAQ,WAAYvF,MAAO,iBAC7E,kBAAC,GAAD,CACIyF,QAAoB,oBAAX1Q,EACTiK,QAASuG,EAAQ,mBACjBvF,MAAO,iBAEX,kBAAC,GAAD,CAAUyF,SAAU1Q,EAAQiK,QAASuG,EAAQ,IAAKvF,MAAO,UAK/D0F,GAAW,SAACpJ,GAA0B,IAChCjG,EAAakC,qBAAWzC,IAAxBO,SAD+B,EAEG4H,KAAlClB,EAF+B,EAE/BA,QAASC,EAFsB,EAEtBA,UAAWW,EAFW,EAEXA,UAC5B,OACI,kBAAC,KAAD,QACQrB,EADR,CAEI8G,UAAW,CAAEjF,WAAY,UAAWM,SAAU,GAAIG,MAAOjB,EAAW6B,WAAY,EAAGL,YAAa,GAChGqD,eAAgB,CACZ9B,gBAAiB,cACjBqE,YAAa,EACbvF,WAAY1D,GAAQC,KACpBoD,YAAa,EACbyE,eAAgB9H,GAAQE,MACxBsE,QAAS,GAEbqF,WAAW,EACXC,SAAU,qBACVC,YAAa,kBACbC,cAAe,iBACfC,aAAc1P,EAAW2G,EAAYD,MAM3CiJ,GAAc,SAAC,GAUd,IATHC,EASE,EATFA,MACAC,EAQE,EARFA,UACAnR,EAOE,EAPFA,OACAoR,EAME,EANFA,KAOMC,EAAa5L,uBACf,YAAe,IAAZ6L,EAAW,EAAXA,KACC,OACI,kBAACF,EAAD,CACIG,IAAKD,EAAK9Y,QACVoC,MAAO0W,EACPE,UAAU,EACVxR,OAAQA,EACRyR,cAAeP,EAAMQ,uBAIjC,CAAC1R,EAAQkR,EAAMQ,qBAEflM,EAAO0L,EAAMS,SAASjU,MAAK,SAACC,EAAIC,GAChC,OAAQA,EAAGY,gBAAkB/F,SAAOC,UAAUoI,MACzCjD,IAAIF,EAAGa,gBAAkB/F,SAAOC,UAAUoI,MAC1ChD,IAAIrF,SAAOO,UAAUC,KAAK,IAAI8E,IAAI,KAClCC,cAOT,MALe,oBAAXgC,EACAwF,EAAOA,EAAKxF,QAAO,SAAApF,GAAK,sBAAIA,EAAM+D,sBAAV,EAAI,EAAuBiT,GAAG,MACpC,YAAX5R,IACPwF,EAAOA,EAAKxF,QAAO,SAAApF,GAAK,OAAIA,EAAM7B,QAAQ6Y,GAAG,OAE1CV,EAAMvD,QACT,kBAACkE,GAAA,EAAD,CAAmBxE,KAAM,QAAS1F,MAAO,CAAEqH,UAAWjI,GAAQI,SAC9C,IAAhB3B,EAAKtL,OACL,kBAAC,GAAD,CAAWK,KAAM4W,IAEjB,kBAACW,GAAA,EAAD,CACIC,aAAc,SAAAT,GAAI,OAAIU,KAAKC,UAAUX,IACrC9L,KAAMA,EACN6L,WAAYA,EACZa,uBAAwB7B,MAK9B8B,GAAY,SAAC,GAAgC,IAA9B5X,EAA6B,EAA7BA,KACjB,OACI,kBAACmN,GAAA,EAAD,CAAMC,MAAO,CAAE6C,OAAQzD,GAAQG,SAC3B,kBAAC,GAAD,CAAMmB,OAAO,EAAMV,MAAO,CAAEyK,UAAW,SAAU1L,MAAO,SACnDnM,KAMF8X,GA/H+B,SAAA9K,GAC1C,IAAM+K,EAAkB7M,uBAAY,WAChC8B,EAAM2J,MAAMQ,wBAAmBrQ,KAChC,CAACkG,EAAM2J,MAAMQ,qBAChB,OACI,kBAAC,GAAD,KACI,kBAAC,GAAD,CACIrI,WAAY,OACZS,QAAQ,EACRnC,MAAO,CAAE2D,aAAc/D,EAAMgL,WAAaxL,GAAQC,KAAOD,GAAQG,OAAQwC,SAAU,KAClFnC,EAAM0D,OAEV1D,EAAMgL,YAAc,kBAAC,GAAD,CAAQvS,OAAQuH,EAAMvH,OAAQuQ,gBAAiBhJ,EAAMgJ,kBACzEhJ,EAAM2J,MAAMsB,gBACT,kBAACjL,EAAM6J,KAAP,CACIxW,MAAO2M,EAAM2J,MAAMsB,gBACnBhB,UAAU,EACVxR,OAAQ,GACRyR,cAAea,IAGnB,kBAAC,GAAD,CAAapB,MAAO3J,EAAM2J,MAAOlR,OAAQuH,EAAMvH,OAAQmR,UAAW5J,EAAM4J,UAAWC,KAAM7J,EAAM6J,SCtChGqB,GAXF,SAAC,GAAsD,IAApDC,EAAmD,EAAnDA,MAAOnY,EAA4C,EAA5CA,KACnB,OACI,kBAAC,GAAD,CAAUoN,MAAO,CAAE0E,eAAgB,gBAAiB2C,UAAWjI,GAAQC,KAAM4H,iBAAkB7H,GAAQE,QACnG,kBAAC,GAAD,CAAMoC,WAAY,OAAQ1B,MAAO,CAAE+B,SAAU,KACxCgJ,GAEL,kBAAC,GAAD,CAAM/K,MAAO,CAAE+B,SAAU,KAAOnP,KCc7BoY,GAnBA,SAACpL,GAA6C,IACjDjG,EAAakC,qBAAWzC,IAAxBO,SADgD,EAEzB4H,KAAvBlB,EAFgD,EAEhDA,QAASC,EAFuC,EAEvCA,UACX4B,EAAQtC,EAAMsC,QAAUvI,EAAW2G,EAAYD,GACrD,OACI,kBAAC,GAAD,CACI2B,MAAM,EACNhC,MAAO,CACHkC,QACA0D,YAAa1D,EACbmG,YAAa,EACbtD,aAAc,EACdnB,QAASxE,GAAQE,QAEpBM,EAAMhN,OCDJqY,GAbI,WAAO,IACdtR,EAAakC,qBAAWzC,IAAxBO,SADa,EAEU4H,KAAvBlB,EAFa,EAEbA,QAASC,EAFI,EAEJA,UACjB,OACI,kBAAC,KAAD,CACImF,KAAM,qBACN5R,KAAM,gBACNqO,MAAOvI,EAAW2G,EAAYD,EAC9BL,MAAO,CAAE8C,WAAY1D,GAAQC,SCE1B6L,GARqB,SAAAtL,GAChC,OACI,kBAAC,GAAD,CAAM8B,WAAY,OAAQS,QAAQ,EAAMnC,MAAO,CAAE2D,aAAcvE,GAAQG,OAAQwC,SAAU,KACpFnC,EAAMhN,OCyDJuY,GAhDe,SAAAvL,GAAU,IAAD,EACS2B,KAApCR,EAD2B,EAC3BA,SAAUC,EADiB,EACjBA,WAAYC,EADK,EACLA,UACxByE,EAAO9F,EAAM8F,MAAQ,SACrBxD,EAAQtC,EAAMsC,OAASnB,EACvBgB,EAAoB,UAAT2D,EAAmB,GAAc,UAATA,EAAmB,GAAK,GAC3D0F,EAAetN,uBACjB,SAAClL,GACG,MAAAgN,EAAMwL,cAANxL,EAAMwL,aAAexY,GACrB,MAAAgN,EAAMsG,SAANtG,EAAMsG,QAAU,IAChB,IAAMmF,EAAS,GACF,KAATzY,GAAegN,EAAM0L,WACrB1L,EAAM0L,UAAUC,SAAQ,SAAAC,GAChB5Y,EAAK6Q,MAAM+H,EAAWC,SACtBJ,EAAOK,KAAKF,EAAWpD,UAItB,KAATxV,GAAegN,EAAM+L,SACrB/L,EAAM+L,QAAQJ,SAAQ,SAAAC,GACb5Y,EAAK6Q,MAAM+H,EAAWC,SACvBJ,EAAOK,KAAKF,EAAWpD,UAI/BiD,EAAO9Y,OAAS,IAChB,MAAAqN,EAAMsG,SAANtG,EAAMsG,QAAUmF,EAAOO,KAAK,UAGpC,CAAChM,EAAMwL,aAAcxL,EAAMsG,QAAStG,EAAM0L,UAAW1L,EAAM+L,UAE/D,OACI,kBAAC,KAAD,QACQ/L,EADR,CAEIiM,WAAY,CACR,CAAE9J,WAAUN,WAAY,UAAW+C,cAAe,EAAGtC,QAAOmF,UAAW,GAEvD,QAAhBnI,KAASC,GAAe,CAAE2M,QAAS,QAAW,GAC9ClM,EAAMiM,YAEVE,WAAY,CAAC,CAAE7J,MAAOlB,GAAcpB,EAAMmM,YAC1CC,qBAAsBpM,EAAMoM,sBAAwB/K,EACpDgL,WAAYrM,EAAMsG,QAAU,CAAElH,OAAQ,GAAMY,EAAMqM,WAClDnG,eAAgB,CAAC,CAAElB,kBAAmB,EAAGyC,UAAWjI,GAAQC,MAAQO,EAAMkG,gBAC1EsF,aAAcA,MCVpBc,GAAY,SAACtM,GAA2C,IAClDjG,EAAakC,qBAAWzC,IAAxBO,SADiD,EAE1B4H,KAAvBlB,EAFiD,EAEjDA,QAASC,EAFwC,EAExCA,UACX6L,EAAarO,uBAAY,WAC3B,GAAI8B,EAAM3M,MAAO,CACb,IAAI7B,EAAUwO,EAAM3M,MAAM7B,QAC1B,GAA2B,QAAvBwO,EAAM3M,MAAM/B,OAAkB,CAE9B,IAAMkb,EAAMtb,SAAOO,UAAUC,KAAK,IAAI8E,IAAI,IAC1ChF,EAAUA,EAAQ6Y,GAAGmC,GAAOhb,EAAQ8E,IAAIkW,GAAOtb,SAAOC,UAAUoI,KAEpEyG,EAAMyM,aAAara,EAAcZ,EAASwO,EAAM3M,MAAMhC,cAE3D,CAAC2O,EAAM3M,MAAO2M,EAAMyM,eACvB,OACI,kBAACtM,GAAA,EAAD,CAAMC,MAAO,CAAE2C,SAAU,WAAYoB,MAAO,EAAGnB,OAAwB,QAAhB1D,KAASC,GAAe,GAAK,KAChF,kBAAC,GAAD,CACIsG,KAAM,QACNvD,MAAOvI,EAAW2G,EAAYD,EAC9BiD,MAAO,MACP5B,WAAY,OACZY,QAAS6J,EACTxG,YAAa,CAAEf,kBAAmB,OAMnC0H,GA3DyB,SAAA1M,GAAU,IAAD,MACvCwL,EAAetN,uBACjB,SAAClL,GACG,GAAIgN,EAAM3M,OAAS2M,EAAM2M,gBACrB,IACI9Z,EAAaG,EAAMgN,EAAM3M,MAAMhC,UAC/B2O,EAAM2M,gBAAgB3Z,GACxB,MAAO4Z,GACD5Z,EAAK6Z,SAAS,MAAQ7Z,EAAK8Z,QAAQ,OAAS9Z,EAAKL,OAAS,GAC1DqN,EAAM2M,gBAAgB3Z,MAKtC,CAACgN,EAAM3M,MAAO2M,EAAM2M,kBAExB,GAAI3M,EAAMyG,OACN,OAAO,kBAAC,GAAD,CAAQiB,aAAa,IAEhC,IAAMyD,EAAK,SAAGnL,EAAM3M,YAAT,EAAG,EAAa/B,OAC3B,OACI,kBAAC,GAAD,CAAQoW,aAAc1H,EAAM0D,OACvB1D,EAAM0D,OAAS,kBAAC,GAAD,CAAU1Q,KAAMgN,EAAM0D,QACtC,kBAACvD,GAAA,EAAD,CAAMC,MAAO,CAAEiH,iBAAkB7H,GAAQE,QACrC,kBAAC,GAAD,CAAOyL,MAAOA,EAAO9Y,MAAO2N,EAAMrM,OAAQ6X,aAAcA,EAAchK,YAAa,SAClF,SAAAxB,EAAM3M,QAAN,WAAa7B,cAAb,IAAsB6Y,GAAG,KAAM,kBAAC,GAAD,CAAWhX,MAAO2M,EAAM3M,MAAOoZ,aAAczM,EAAM2M,qBC3C7FI,GAAM,IAAIC,IAAMxZ,IAAQC,QAAS,6CAA8C,GAAI,MAAO,kBAC1FwZ,GAAO,IAAID,IAAMxZ,IAAQC,QAAS,6CAA8C,EAAG,OAAQ,UAC3FyZ,GAAO,IAAIF,IAAMxZ,IAAQC,QAAS,6CAA8C,EAAG,OAAQ,cAC3F0Z,GAAQ,IAAIH,IAAMxZ,IAAQC,QAAS,6CAA8C,GAAI,QAAS,aAC9F2Z,GAAM,IAAIJ,IAAMxZ,IAAQC,QAAS,6CAA8C,GAAI,MAAO,OAC1F4Z,GAAO,IAAIL,IAAMxZ,IAAQC,QAAS,6CAA8C,EAAG,OAAQ,cAE3F6Z,GAAgC,CAACha,IAAKE,IAAQC,SAAUsZ,GAAKE,GAAMC,GAAMC,GAAOC,IAChFG,GAAY,OACbF,GAAKpc,QAAU,CAAC8b,GAAKzZ,IAAKE,IAAQC,WAGvC,SAAS+Z,GAAgBC,GACrB,OAAOA,IAAaC,IAAQpa,IAAKE,IAAQC,SAAWga,aAAoBT,IAAQS,OAAW3T,EAI/F,IAuDe6T,GAvDW,WAoDtB,MAAO,CAAEC,mBAnDkB1P,uBAEvB,SAAO2P,EAAsBC,EAAsBzY,GAAnD,2BAAAb,EAAAC,OAAA,uDACUsZ,EAAiBT,GAD3B,EAE6B,CAACE,GAAgBK,GAAYL,GAAgBM,IAA/DvW,EAFX,KAEmBC,EAFnB,KAGUwW,EAA8BD,EAC/BE,SAAQ,SAACC,GAAD,OAA4BH,EAAMlY,KAAI,SAAAsY,GAAS,MAAI,CAACD,EAAMC,SAClE1V,QAAO,2BAAE2V,EAAF,KAAMhY,EAAN,YAAcgY,EAAGnd,UAAYmF,EAAGnF,WAEtCod,EACF9W,GAAUC,EACJ,CAEI,CAACD,EAAQC,IAFb,WAIOuW,EAAMlY,KAAI,SAACqY,GAAD,MAA0B,CAAC3W,EAAQ2W,OAJpD,IAMOH,EAAMlY,KAAI,SAACqY,GAAD,MAA0B,CAAC1W,EAAQ0W,OANpD,IAQOF,IAEFvV,QAAO,SAAC7C,GAAD,OAAsC0Y,QAAQ1Y,EAAO,IAAMA,EAAO,OACzE6C,QAAO,2BAAE2V,EAAF,KAAMhY,EAAN,YAAcgY,EAAGnd,UAAYmF,EAAGnF,WACvCwH,QAAO,YAAa,IAAD,WAAVjE,EAAU,KAAP+Z,EAAO,KACVC,EAAcjB,GACpB,IAAKiB,EAAa,OAAO,EAEzB,IAAMC,EAAoCD,EAAYha,EAAEvD,SAClDyd,EAAoCF,EAAYD,EAAEtd,SAExD,OAAKwd,IAAiBC,KAElBD,IAAiBA,EAAavV,MAAK,SAAAgV,GAAI,OAAI1W,EAAOmX,OAAOT,UACpDQ,IAAiBA,EAAaxV,MAAK,SAAAgV,GAAI,OAAI3W,EAAOoX,OAAOT,UAE1E,GAjCd,WAAA1Z,EAAA,MAmCwBqC,QAAQC,IACxBuX,EAAoBxY,KAAI,SAAMoC,GAAN,SAAAzD,EAAAC,OAAA,2EAAAD,EAAA,MAEHoa,IAAQC,cAAc5W,EAAK,GAAIA,EAAK,GAAI5C,IAFrC,iGAIT,MAJS,oEApChC,cAmCU2C,EAnCV,yBA4CWA,EAAMS,QAAO,SAAAR,GAAI,OAAa,OAATA,MA5ChC,8DA8CA,MCuQF6W,GAAY,SAACnb,EAA0Bob,GACzC,OAAOpb,EAAO2C,IAAI3C,EAAOqb,IAAID,EAAQE,UAAUpb,YAAY0C,IAAIwY,EAAQG,YAAYrb,cAGxEsb,GApUA,WAAO,IAAD,EACYlT,qBAAWb,IAAhC/F,EADS,EACTA,SAAUnB,EADD,EACCA,OACV0Z,EAAuBD,KAAvBC,mBACFwB,EAAkB,IAAIC,IAAQ,KAAM,SAGpCC,EAAWpR,uBACb,SAAOqR,EAAkBC,EAAgBC,GAAzC,uBAAAjb,EAAAC,OAAA,oDACQY,EADR,uBAEcqa,EAA6B,QAArBH,EAAUje,OAClBI,EAAO0B,EAAamc,GACpB9M,EAAKrP,EAAaoc,GAJhC,WAAAhb,EAAA,MAK4BoZ,EAAmBlc,EAAM+Q,EAAIpN,IALzD,cAKc2C,EALd,OAMcrE,EAAS+b,EACTC,IAAeC,MAAMH,EAAW5b,YAChC,IAAID,IAAYlC,EAAM+d,EAAW5b,YAR/C,kBASegc,IAAMC,iBAAiB9X,EAAOrE,EAAQ8O,EAAI,CAAEsN,QAAS,EAAGC,cAAe,IAAK,IAT3F,8DAYA,CAAC3a,IAGC4a,EAAO/R,uBACT,SAAOgS,GAAP,yBAAA1b,EAAAC,OAAA,oDACQP,EADR,qBAEYgc,EAFZ,6BAG2BC,IAH3B,KAGqDD,EAHrD,KAKgBd,EALhB,WAAA5a,EAAA,MAMiCN,EAAOuB,cANxC,+BAnBQ,KAmBR,MAIgB2a,eAAe,EACfhB,gBALhB,KAMgBiB,UANhB,KAOgBC,IAPhB,MAGkBC,EAHlB,KAGkCC,mBAHlC,qBASkBC,EAASzc,EAAY,qBAAsBgB,EAAQd,GATrE,YAAAM,EAAA,OAUmC,EAAAic,EAAOpS,aAAYkS,EAAOG,YAA1B,YAAyCH,EAAO7b,MAAhD,QAAsD,CACzErC,MAAOke,EAAOle,WAX9B,eAUkBwC,EAVlB,mBAAAL,EAAA,OAa6B,EAAAic,EAAOE,WAAUJ,EAAOG,YAAxB,YAAuCH,EAAO7b,MAA9C,QAAoD,CACjErC,MAAOke,EAAOle,MACdwC,SAAUA,EAASma,IAAI,KAAKzY,IAAI,UAfhD,eAakBhC,EAblB,mBAAAC,EAAA,MAiBkBF,EAAc,WAAd,GACFC,EACA,qBAAuBgc,EAAOG,WAAa,MAFzC,WAGCH,EAAO7b,KAAKmB,KAAI,SAAA+a,GAAG,OAAIA,EAAI/c,kBApB9C,iCAsBmB,CACHqc,QACA3b,OAxBhB,+DA6BA,CAACL,IAGC2c,EAAU3S,uBACZ,SAAOvK,GAAP,mBAAAa,EAAAC,OAAA,oDACQP,EADR,wBAEc4c,EAAO9c,EAAY,QAASV,IAAK,GAAGrC,QAASiD,GAF3D,WAAAM,EAAA,MAG+Bsc,EAAKzS,YAAY0S,QAAQ,CAC5C1e,MAAOsB,KAJnB,cAGckB,EAHd,kBAAAL,EAAA,MAMyBsc,EAAKC,QAAQ,CAC1B1e,MAAOsB,EACPkB,cARZ,cAMcN,EANd,mBAAAC,EAAA,MAUqBF,EAAeC,EAAI,mBAVxC,wGAaA,CAACL,IAGC8c,EAAY9S,uBACd,SAAOvK,GAAP,mBAAAa,EAAAC,OAAA,oDACQP,EADR,wBAEc4c,EAAO9c,EAAY,QAASV,IAAK,GAAGrC,QAASiD,GAF3D,WAAAM,EAAA,MAG+Bsc,EAAKzS,YAAY4S,SAAStd,IAHzD,cAGckB,EAHd,kBAAAL,EAAA,MAIyBsc,EAAKG,SAAStd,EAAQ,CACnCkB,cALZ,cAIcN,EAJd,mBAAAC,EAAA,MAOqBF,EAAeC,EAAI,oBAPxC,wGAUA,CAACL,IAGCgd,EAAUhT,uBACZ,SAAOqR,EAAkBC,GAAzB,iBAAAhb,EAAAC,OAAA,oDACQY,EADR,uBAEc3D,EAAO0B,EAAamc,GACpB9M,EAAKrP,EAAaoc,GAHhC,WAAAhb,EAAA,MAIqBoa,IAAQC,cAAcnd,EAAM+Q,EAAIpN,IAJrD,sGAOA,CAACA,IAGC8b,EAAejT,uBACjB,SAAOqR,EAAkBC,EAAgBC,EAA8B2B,GAAvE,2BAAA5c,EAAAC,OAAA,oDACQP,EADR,wBAEcuc,EAASzc,EAAY,qBAAsBgB,EAAQd,GACnDmd,EAHd,MAG+BtY,KAAKuY,OAAM,IAAIC,MAAOC,UAAY,KAjGzD,MAiGsE3d,SAAS,IAHvF,KAKY0b,EAAUte,QALtB,KAMYue,EAAQve,QANpB,KAOYwe,EAPZ,KAQY2B,EARZ,KASYtC,GAAUW,EAAYL,GATlC,KAUYN,GAAUsC,EAAUhC,GAVhC,YAAA5a,EAAA,MAWkBN,EAAOuB,cAXzB,gCAYY4b,EARE3c,EAJd,sDAAAF,EAAA,OAc+B,EAAAic,EAAOpS,aAAY8S,aAAnB,QAAmCzc,IAdlE,eAccG,EAdd,mBAAAL,EAAA,OAeyB,EAAAic,EAAOE,WAAUQ,aAAjB,QAAiCzc,EAAjC,QAAuC,CACpDG,SAAUA,EAASma,IAAI,KAAKzY,IAAI,UAhB5C,eAechC,EAfd,yBAkBeD,EAAc,WAAd,GAAeC,EAAI,oCAAnB,WAA0DG,EAAKmB,KAAI,SAAA+a,GAAG,OAAIA,EAAI/c,kBAlB7F,+DAqBA,CAACK,IAGCud,EAAqBvT,uBACvB,SAAO7K,EAAcqe,EAA6B/d,EAA0Bge,GAA5E,2BAAAnd,EAAAC,OAAA,oDACQP,EADR,wBAEcuc,EAASzc,EAAY,qBAAsBgB,EAAQd,GACnDmd,EAHd,MAG+BtY,KAAKuY,OAAM,IAAIC,MAAOC,UAAY,KA1HzD,MA0HsE3d,SAAS,IAHvF,KAKYR,EAAMpC,QALlB,KAMYygB,EANZ,KAOY5C,GAAUnb,EAAQyb,GAP9B,KAQYN,GAAU6C,EAAWvC,GARjC,WAAA5a,EAAA,MASkBN,EAAOuB,cATzB,+BAUY4b,EANE3c,EAJd,4CAAAF,EAAA,OAY+B,EAAAic,EAAOpS,aAAYoT,mBAAnB,QAAyC/c,IAZxE,eAYcG,EAZd,mBAAAL,EAAA,OAayB,EAAAic,EAAOE,WAAUc,mBAAjB,QAAuC/c,EAAvC,QAA6C,CAC1DG,SAAUA,EAASma,IAAI,KAAKzY,IAAI,UAd5C,eAachC,EAbd,yBAgBeD,EAAc,WAAd,GAAeC,EAAI,0CAAnB,WAAgEG,EAAKmB,KAAI,SAAA+a,GAAG,OAAIA,EAAI/c,kBAhBnG,+DAmBA,CAACK,IAGC0d,EAAkB1T,uBACpB,SACIqR,EACAC,EACAkC,EACAjC,EACA2B,GALJ,2BAAA5c,EAAAC,OAAA,oDAOQP,EAPR,wBAQcuc,EAASzc,EAAY,qBAAsBgB,EAAQd,GACnDmd,EATd,MAS+BtY,KAAKuY,OAAM,IAAIC,MAAOC,UAAY,KAvJzD,MAuJsE3d,SAAS,IATvF,KAWY0b,EAAUte,QAXtB,KAYYue,EAAQve,QAZpB,KAaYygB,EAbZ,KAcY5C,GAAUW,EAAYL,GAdlC,KAeYN,GAAUsC,EAAUhC,GAfhC,YAAA5a,EAAA,MAgBkBN,EAAOuB,cAhBzB,gCAiBY4b,EAPE3c,EAVd,iDAAAF,EAAA,OAmB+B,EAAAic,EAAOpS,aAAYuT,gBAAnB,QAAsCld,IAnBrE,eAmBcG,EAnBd,mBAAAL,EAAA,OAoByB,EAAAic,EAAOE,WAAUiB,gBAAjB,QAAoCld,EAApC,QAA0C,CACvDG,SAAUA,EAASma,IAAI,KAAKzY,IAAI,UArB5C,eAoBchC,EApBd,yBAuBeD,EAAc,WAAd,GAAeC,EAAI,uCAAnB,WAA6DG,EAAKmB,KAAI,SAAA+a,GAAG,OAAIA,EAAI/c,kBAvBhG,+DA0BA,CAACK,IAGC2d,EAAkB3T,uBACpB,SAAO7K,EAAcM,EAA0Bge,GAA/C,2BAAAnd,EAAAC,OAAA,oDACQP,EADR,wBAEcuc,EAASzc,EAAY,qBAAsBgB,EAAQd,GACnDmd,EAHd,MAG+BtY,KAAKuY,OAAM,IAAIC,MAAOC,UAAY,KA/KzD,MA+KsE3d,SAAS,IAHvF,KAKYR,EAAMpC,QALlB,KAMY0C,EANZ,KAOYmb,GAAUnb,EAAQyb,GAP9B,KAQYN,GAAU6C,EAAWvC,GARjC,WAAA5a,EAAA,MASkBN,EAAOuB,cATzB,+BAUY4b,EANE3c,EAJd,4CAAAF,EAAA,OAY+B,EAAAic,EAAOpS,aAAYwT,gBAAnB,QAAsCnd,EAAtC,QAA4C,CAC/DrC,MAAOsf,OAbnB,eAYc9c,EAZd,mBAAAL,EAAA,OAeyB,EAAAic,EAAOE,WAAUkB,gBAAjB,QAAoCnd,EAApC,QAA0C,CACvDG,SAAUA,EAASma,IAAI,KAAKzY,IAAI,KAChClE,MAAOsf,OAjBnB,eAecpd,EAfd,yBAmBeD,EAAc,WAAd,GAAeC,EAAI,uCAAnB,WAA6DG,EAAKmB,KAAI,SAAA+a,GAAG,OAAIA,EAAI/c,kBAnBhG,+DAsBA,CAACK,IAGC4d,EAAiC5T,uBACnC,SAAO7K,GAAP,uBAAAmB,EAAAC,OAAA,oDACQP,EADR,wBAEcgD,EAAalD,EAAY,aAAciB,EAAaf,GAFlE,WAAAM,EAAA,MAGsC0C,EAAW6a,mBAHjD,cAGcA,EAHd,kBAAAvd,EAAA,MAIoC0C,EAAW8a,iBAJ/C,cAIcA,EAJd,mBAAAxd,EAAA,MAKqC0C,EAAW+a,SAAS5e,EAAMiE,KAL/D,wBAKgB4a,EALhB,EAKgBA,WALhB,kBAMehhB,SAAOO,UAAUC,KAAKsgB,GACxBhD,IAAIkD,GACJ3b,IAAIwb,IARjB,+DAWA,CAAC7d,IAGC6c,EAAU7S,uBACZ,SAAOiU,EAAmBxe,GAA1B,mBAAAa,EAAAC,OAAA,oDACQP,EADR,uBAEcgD,EAAalD,EAAY,aAAciB,EAAaf,GAFlE,WAAAM,EAAA,MAG+B0C,EAAWmH,YAAY0S,QAAQoB,EAAWxe,IAHzE,cAGckB,EAHd,kBAAAL,EAAA,MAIyB0C,EAAW6Z,QAAQoB,EAAWxe,EAAQ,CACnDkB,SAAUA,EAASma,IAAI,KAAKzY,IAAI,QAL5C,cAIchC,EAJd,yBAOeD,EAAeC,EAAI,uBAAwB4d,EAAWxe,EAAOE,aAP5E,8DAUA,CAACK,IAGC+c,EAAW/S,uBACb,SAAOiU,EAAmBxe,GAA1B,mBAAAa,EAAAC,OAAA,oDACQP,EADR,uBAEcgD,EAAalD,EAAY,aAAciB,EAAaf,GAFlE,WAAAM,EAAA,MAG+B0C,EAAWmH,YAAY4S,SAASkB,EAAWxe,IAH1E,cAGckB,EAHd,kBAAAL,EAAA,MAIyB0C,EAAW+Z,SAASkB,EAAWxe,EAAQ,CACpDkB,SAAUA,EAASma,IAAI,KAAKzY,IAAI,QAL5C,cAIchC,EAJd,yBAOeD,EAAeC,EAAI,wBAAyB4d,EAAWxe,EAAOE,aAP7E,8DAUA,CAACK,IAGCke,EAAgBlU,uBAClB,SAAOvK,GAAP,mBAAAa,EAAAC,OAAA,oDACQP,EADR,uBAEcme,EAAWre,EAAY,WAAYkB,EAAWhB,GAF5D,WAAAM,EAAA,MAG+B6d,EAAShU,YAAYiU,MAAM3e,IAH1D,cAGckB,EAHd,kBAAAL,EAAA,MAIyB6d,EAASC,MAAM3e,EAAQ,CACpCkB,SAAUA,EAASma,IAAI,KAAKzY,IAAI,QAL5C,cAIchC,EAJd,yBAOeD,EAAeC,EAAI,mBAAoBZ,EAAOE,aAP7D,8DAUA,CAACK,IAGCqe,EAAgBrU,uBAClB,SAAOvK,GAAP,mBAAAa,EAAAC,OAAA,oDACQP,EADR,uBAEcme,EAAWre,EAAY,WAAYkB,EAAWhB,GAF5D,WAAAM,EAAA,MAG+B6d,EAAShU,YAAYmU,MAAM7e,IAH1D,cAGckB,EAHd,kBAAAL,EAAA,MAIyB6d,EAASG,MAAM7e,EAAQ,CACpCkB,SAAUA,EAASma,IAAI,KAAKzY,IAAI,QAL5C,cAIchC,EAJd,yBAOeD,EAAeC,EAAI,mBAAoBZ,EAAOE,aAP7D,8DAUA,CAACK,IAGCue,EAAUvU,uBACZ,SAAOwU,EAAkB/e,GAAzB,yBAAAa,EAAAC,OAAA,oDACQP,EADR,wBAEcye,EAAY3e,EAAY,YAAamB,EAAWjB,GAChDmd,EAHd,MAG+BtY,KAAKuY,OAAM,IAAIC,MAAOC,UAAY,KAhRzD,MAgRsE3d,SAAS,IACzEa,EAAO,CACTge,EAAQnb,OAAOtG,QACfyhB,EAAQlb,OAAOvG,QACf0C,EACAzC,SAAOC,UAAUoI,KACjBrI,SAAOC,UAAUoI,KACjB8X,GAVZ,WAAA7c,EAAA,OAY+B,EAAAme,EAAUtU,aAAYoU,QAAtB,QAAiC/d,IAZhE,cAYcG,EAZd,kBAAAL,EAAA,MAayBme,EAAUF,QAAV,MAAAE,EAAqBje,EAAX,OAAD,CAAkB,CACxCG,SAAUA,EAASma,IAAI,KAAKzY,IAAI,UAd5C,cAachC,EAbd,yBAgBeD,EAAc,WAAd,GAAeC,EAAI,uBAAnB,WAA6CG,EAAKmB,KAAI,SAAA+a,GAAG,OAAIA,EAAI/c,kBAhBhF,+DAmBA,CAACK,IAOL,MAAO,CACHkb,kBACAE,WACAW,OACAY,UACAG,YACAE,UACAC,eACAU,kBACAD,kBACAH,qBACAK,iCACAf,UACAE,WACAmB,gBACAG,gBACAE,UACAG,aArBiB,SAACnD,GAClB,OAAOA,EAAWT,IAAI,GAAGzY,IAAI,QC3KtBsc,GA1GiC,WAAO,IAAD,EAC6B5W,qBAAWb,IAAlF/F,EAD0C,EAC1CA,SAAUnB,EADgC,EAChCA,OAAQjD,EADwB,EACxBA,QAAS2E,EADe,EACfA,OAAQ6F,EADO,EACPA,aAAcM,EADP,EACOA,kBADP,EAEnBoT,KAAvB0B,EAF0C,EAE1CA,QAASG,EAFiC,EAEjCA,UAFiC,EAGdzW,mBAAS,IAHK,WAG3CuY,EAH2C,KAG/BC,EAH+B,OAIlBxY,mBAAS,IAJS,WAI3CyY,EAJ2C,KAIjCC,EAJiC,OAKd1Y,mBAAS,IALK,WAK3CkV,EAL2C,KAK/ByD,EAL+B,OAMlB3Y,mBAAS,IANS,WAM3C6W,EAN2C,KAMjC+B,EANiC,OAOF5Y,oBAAS,GAPP,WAO3C6Y,EAP2C,KAOzBC,EAPyB,OAQN9Y,oBAAS,GARH,WAQ3C+Y,EAR2C,KAQ3BC,EAR2B,OASpBhZ,oBAAS,GATW,WAS3C6L,EAT2C,KASlCC,EATkC,OAUlB9L,oBAAS,GAVS,WAU3CiZ,EAV2C,KAUjCC,EAViC,OAWdlZ,oBAAS,GAXK,WAW3CmZ,EAX2C,KAW/BC,EAX+B,KAa5CpE,EAAY3Z,EAAOsD,MAAK,SAAA7F,GAAK,OAAIA,EAAM/B,SAAWwhB,KAClDtD,GAAU5Z,EAAOsD,MAAK,SAAA7F,GAAK,OAAIA,EAAM/B,SAAW0hB,KAEtD7V,qBAAU,WACa,KAAf2V,GACAG,EAAY,IAEhBC,EAAc,IACdC,EAAY,MACb,CAACL,EAAYE,IAEhB7V,qBAAU,WACN4V,EAAc,MACf,CAAC9hB,IAEJwJ,KAAe,8BAAAjG,EAAAC,OAAA,qDACP8a,GAAaC,IAAWna,GAAYnB,GAD7B,oBAEPmf,GAAoB,GACpBE,GAAkB,GAClBlN,GAAW,GAJJ,SAMGuN,EAAe1iB,SAAOO,UAAUC,KAAK,GACtC8E,IAAI,IACJF,IAAI,GACgB,QAArBiZ,EAAUje,OATX,mCAAAkD,EAAA,MAU6BuH,EAAkBwT,EAAUte,QAAS+D,IAVlE,OAUO6e,EAVP,OAWCR,EAAoBniB,SAAOO,UAAUC,KAAKmiB,GAAeC,IAAIF,IAX9D,WAaoB,QAAnBpE,GAAQle,OAbT,oCAAAkD,EAAA,MAc2BuH,EAAkByT,GAAQve,QAAS+D,IAd9D,QAcO+e,EAdP,OAeCR,EAAkBriB,SAAOO,UAAUC,KAAKqiB,GAAaD,IAAIF,IAf1D,yBAkBHvN,GAAW,GAlBR,oFAqBZ,CAACkJ,EAAWC,GAASna,EAAUnB,IAElC,IAAM8f,GAAS9V,uBAAY,0BAAA1J,EAAAC,OAAA,oDACnBgb,IAAcvb,EADK,wBAEnBuf,GAAY,GAFO,oBAAAjf,EAAA,MAIEqc,EAAQhe,EAAa4c,KAJvB,YAITlb,EAJS,2CAAAC,EAAA,MAMLD,EAAGgS,QANE,0BAAA/R,EAAA,MAOLiH,KAPK,QAQXsX,EAAc,IARH,yBAWfU,GAAY,GAXG,oFAcxB,CAAChE,EAAYvb,IAEV+f,GAAW/V,uBAAY,0BAAA1J,EAAAC,OAAA,oDACrBgb,IAAcvb,EADO,wBAErByf,GAAc,GAFO,oBAAAnf,EAAA,MAIAwc,EAAUne,EAAa4c,KAJvB,YAIXlb,EAJW,2CAAAC,EAAA,MAMPD,EAAGgS,QANI,0BAAA/R,EAAA,MAOPiH,KAPO,QAQbsX,EAAc,IARD,yBAWjBY,GAAc,GAXG,oFAc1B,CAAClE,EAAYvb,IAEhB,MAAO,CACH4e,aACAC,gBACAC,WACAC,cACA1D,YACAC,WACAC,aACAyD,gBACA9B,WACA+B,cACAC,mBACAC,sBACAC,iBACAC,oBACAnN,UACA4N,UACAR,WACAS,YACAP,e,qkBC3HR,IAuCeQ,GAvCiC,WAC5C,IAAMvK,EAAQkJ,KADoC,EAEc5W,qBAAWb,IAAnE/F,EAF0C,EAE1CA,SAAUgG,EAFgC,EAEhCA,mBAAoBG,EAFY,EAEZA,sBAFY,EAGpBjB,oBAAS,GAHW,WAG3C6L,EAH2C,KAGlCC,EAHkC,OAI1B9L,qBAJ0B,WAI3CtC,EAJ2C,KAIrCkc,EAJqC,KAK1CjD,EAAY/B,KAAZ+B,QA2BR,OAzBA/T,qBAAU,WACN,GAAIwM,EAAMmJ,YAAcnJ,EAAMqJ,SAAU,CACpC,IAAMoB,EAAa,oBAAA5f,EAAAC,OAAA,qDACXkV,EAAM4F,WAAa5F,EAAM6F,SAAWna,GADzB,wBAEX8e,OAAQra,GAFG,cAIPqa,EAJO,WAAA3f,EAAA,MAIO0c,EAAQvH,EAAM4F,UAAW5F,EAAM6F,UAJtC,6GAOPnJ,GAAW,GAPJ,qFAYnBA,GAAW,GACX+N,IACA,IAAMngB,EAAO,cAAgB0V,EAAMmJ,WAAa,IAAMnJ,EAAMqJ,SAAW,IAGvE,OADA3X,EAAmBpH,EAAMmgB,GAClB,WACH5Y,EAAsBvH,OAG/B,CAAC0V,EAAMmJ,WAAYnJ,EAAMqJ,WAErB,SACArJ,GADP,IAEIvD,QAASA,GAAWuD,EAAMvD,QAC1BnO,U,qkBCzBR,IA6Deoc,GA7DyC,SAAAvZ,GACpD,IAAM6O,EAAQuK,KAD8C,EAE6BjY,qBAAWb,IAA5F/F,EAFoD,EAEpDA,SAAUnB,EAF0C,EAE1CA,OAAQjD,EAFkC,EAElCA,QAASoK,EAFyB,EAEzBA,mBAAoBG,EAFK,EAELA,sBAAuB5F,EAFlB,EAEkBA,OAFlB,EAGV2E,mBAAS,GAHC,WAGrD+Z,EAHqD,KAGlCC,EAHkC,OAI9Bha,oBAAS,GAJqB,WAIrD6L,EAJqD,KAI5CC,EAJ4C,OAK5B9L,mBAAoB,IALQ,WAKrD6P,EALqD,KAK3CoK,EAL2C,OAMdja,qBANc,WAMrD0Q,EANqD,KAMpCd,EANoC,OAOA5P,oBAAS,GAPT,WAOrDka,EAPqD,KAO7BC,EAP6B,OAQhCna,mBAAS,IARuB,WAQrD5G,EARqD,KAQ7CghB,EAR6C,KAUtDC,EAAiB,0BAAApgB,EAAAC,OAAA,2EAAAD,EAAA,MAEc,UAATsG,EACdpE,EAAWrB,EAAUnB,GACZ,iBAAT4G,EACArD,EAAgB7B,EAAQP,EAAUnB,GAClCwE,EAAuB9C,EAAQP,EAAUnB,IANhC,QAET+J,EAFS,SAQXuW,EAAYvW,GARD,uBAWfoI,GAAW,GAXI,+EAkCvB,OAnBAlJ,qBAAU,WACD8N,GACD0J,EAAU,MAEf,CAAC1J,IAEJ9N,qBAAU,WACN,GAAI9H,GAAYnB,IAAoB,UAAT4G,GAAoBlF,EAAOjD,OAAS,GAAI,CAC/D0T,GAAW,GACXuO,IAEA,IAAM3gB,EAAO,mBAEb,OADAoH,EAAmBpH,EAAM2gB,GAClB,WACHpZ,EAAsBvH,OAG/B,CAACoB,EAAUnB,EAAQ0B,EAAOjD,OAAQ1B,EAASqjB,IAEvC,SACA3K,GADP,IAEIvD,QAASuD,EAAMvD,SAAWA,EAC1BkO,oBACAO,wBAAyB,WACrBN,EAAqBhD,KAAKuD,QAE9B1K,WACAa,kBACAd,qBACAsK,yBACAC,4BACA/gB,SACAghB,e,qkBCrDR,IAgGeI,GAhG6B,WACxC,IAAMpL,EAAQ0K,GAAiB,SADe,EAEEpY,qBAAWb,IAAnD/F,EAFsC,EAEtCA,SAAUnB,EAF4B,EAE5BA,OAAQ6H,EAFoB,EAEpBA,kBAFoB,EAGgBoT,KAAtD2C,EAHsC,EAGtCA,+BAAgCf,EAHM,EAGNA,QAASE,EAHH,EAGGA,SAHH,EAIV1W,mBAAS,IAJC,WAIvCya,EAJuC,KAI3BC,EAJ2B,OAKlB1a,qBALkB,WAKvC2a,EALuC,KAK/BC,EAL+B,OAMhB5a,oBAAS,GANO,WAMvC6L,EANuC,KAM9BC,EAN8B,OAOwB9L,qBAPxB,WAOvC6a,EAPuC,KAOVC,EAPU,OAQV9a,oBAAS,GARC,WAQvC+a,EARuC,KAQ3BC,EAR2B,OASRhb,oBAAS,GATD,WASvCib,EATuC,KAS1BC,EAT0B,KAW9CtY,qBAAU,WACN8X,EAAc,IACdE,OAAUrb,GACVuM,GAAW,GACXkP,GAAc,GACdE,GAAe,GACfJ,OAA+Bvb,KAChC,CAAC6P,EAAMsB,kBAEVxQ,KAAe,oBAAAjG,EAAAC,OAAA,oDACPP,IAAUyV,EAAMsB,gBADT,wBAEP5E,GAAW,GAFJ,cAIHgP,EAJG,WAAA7gB,EAAA,MAIkCsd,EAA+BnI,EAAMsB,kBAJvE,yDAMH5E,GAAW,GANR,kFASZ,CAACnS,EAAQyV,EAAMsB,kBAElBxQ,KAAe,4BAAAjG,EAAAC,OAAA,qDACPY,GAAYnB,GAAUyV,EAAMsB,iBADrB,wBAEP5E,GAAW,GACXsD,EAAM+K,2BAA0B,GAHzB,SAKGd,EAAe1iB,SAAOO,UAAUC,KAAK,GACtC8E,IAAI,IACJF,IAAI,GAPN,WAAA9B,EAAA,MAQqBuH,EAAkB4N,EAAMsB,gBAAgBha,QAASgE,IARtE,OAQGygB,EARH,OASH/L,EAAM+K,0BAA0BxjB,SAAOO,UAAUC,KAAKgkB,GAAW5B,IAAIF,IATlE,uBAWHvN,GAAW,GAXR,kFAcZ,CAAChR,EAAUnB,EAAQyV,EAAMsB,kBAE5B9N,qBAAU,WACNwM,EAAMgL,UAAU,MACjB,CAACO,IAEJ,IAAMS,EAAYzX,uBAAY,8BAAA1J,EAAAC,OAAA,sDACtB,SAAAkV,EAAMsB,sBAAN,IAAuB3T,KAAMqS,EAAMhW,QAAUO,GADvB,wBAEtBqhB,GAAc,GAFQ,SAIZ5hB,EAASd,EAAa8W,EAAMhW,OAAQgW,EAAMsB,gBAAgB5Z,UAJ9C,WAAAmD,EAAA,MAKDuc,EAAQpH,EAAMsB,gBAAgB3T,GAAI3D,IALjC,cAKZY,EALY,kBAAAC,EAAA,MAMZD,EAAGgS,QANS,cAOlBoD,EAAMQ,wBAAmBrQ,GAPP,YAAAtF,EAAA,MAQZmV,EAAMkL,2BARM,yBAUlBU,GAAc,GAVI,oFAa3B,CAAC5L,EAAMsB,gBAAiBtB,EAAMhW,OAAQO,IAEnC0hB,EAAa1X,uBAAY,8BAAA1J,EAAAC,OAAA,sDACvB,SAAAkV,EAAMsB,sBAAN,IAAuB3T,KAAMqS,EAAMhW,QAAUO,GADtB,wBAEvBuhB,GAAe,GAFQ,SAIb9hB,EAASd,EAAa8W,EAAMhW,OAAQgW,EAAMsB,gBAAgB5Z,UAJ7C,WAAAmD,EAAA,MAKFyc,EAAStH,EAAMsB,gBAAgB3T,GAAI3D,IALjC,cAKbY,EALa,kBAAAC,EAAA,MAMbD,EAAGgS,QANU,cAOnBoD,EAAMQ,wBAAmBrQ,GAPN,YAAAtF,EAAA,MAQbmV,EAAMkL,2BARO,yBAUnBY,GAAe,GAVI,oFAa5B,CAAC9L,EAAMsB,gBAAiBtB,EAAMhW,OAAQO,IAEzC,OAAO,SACAyV,GADP,IAEIvD,QAASuD,EAAMvD,SAAWA,EAC1B4O,aACAC,gBACAC,SACAC,YACAC,8BACAO,YACAL,aACAM,aACAJ,iB,SCpGOlW,GAAgB,QAAhBA,KAASC,GAbH,SAACoE,EAAckS,EAAeC,GAC/C,OAAO5X,uBAAY,WACfxB,OAAOiG,KAAKgB,EAAMmS,KACnB,CAACnS,EAAMmS,KAGO,SAACnS,EAAckS,EAAeE,GAAsB,IAC7DC,EAAaC,2BAAbD,SACR,OAAO9X,uBAAY,WACf8X,EAASH,KACV,CAACA,K,UCOOK,GAdG,WAAO,IACbnV,EAAeY,KAAfZ,WACR,OACI,kBAACZ,GAAA,EAAD,CACIC,MAAO,CACHjB,MAAO,OACPC,OAAQC,GACR+E,gBAAiBrD,IAErB,kBAACoV,GAAA,UAAD,CAAWC,aAAa,EAAOhS,gBAAiBrD,M,UCc7CsV,GAtBO,WAAO,IACjBtc,EAAakC,qBAAWzC,IAAxBO,SACF2I,EAAUxE,uBAAY,oBAAA1J,EAAAC,OAAA,oDACpBiI,OAAOC,SADa,kCAAAnI,EAAA,MAEdkI,OAAOC,SAAS2Z,UAFF,+CAAA9hB,EAAA,MAId+hB,WAAgB,yBAJF,8DAMzB,CAAC7Z,OAAOC,WACL+G,EAAQhH,OAAOC,SAAW,UAAY,mBAC5C,OACI,kBAACwD,GAAA,EAAD,CAAMC,MAAO,CAAEyE,KAAM,EAAGxB,WAAY,SAAUyB,eAAgB,WAC1D,kBAACvB,GAAA,EAAD,CACIC,OACe5K,EAAXmB,EAAmB,IAA+C,KAEtEqG,MAAO,CAAEjB,MAAO,IAAKC,OAAQ,IAAK2E,aAAcvE,GAAQK,QAE5D,kBAAC,GAAD,CAAQgG,KAAM,UAAWC,KAAM,QAASpD,QAASA,EAASgB,MAAOA,EAAOwC,eAAgB,CAAE/G,MAAO,SCQvGqX,GAAS,WACX,IAAMC,EAAiBvY,uBAAY,kBAAMqY,WAAgB,iCAAgC,IACnFG,EAAgBxY,uBAAY,kBAAMqY,WAAgB,4CAA2C,IAC7FI,EAAiBzY,uBAAY,kBAAMqY,WAAgB,+BAA8B,IACvF,OACI,kBAAC,GAAD,CAAUnW,MAAO,CAAEqH,UAAWjI,GAAQI,MAAOmE,aAAcvE,GAAQK,KAAMiF,eAAgB,WACrF,kBAAC,KAAD,CACIe,KAAM,qBACN5R,KAAM,cACNqO,MAAO,QACPsU,aAAc,QACdC,SAAS,EACTC,QAAQ,EACRpU,QAASgU,IAEb,kBAAC,KAAD,CAAY7Q,KAAK,UAAUnD,QAAS+T,IACpC,kBAAC,KAAD,CACI5Q,KAAM,qBACN5R,KAAM,UACNqO,MAAO,UACPuU,SAAS,EACTC,QAAQ,EACRpU,QAASiU,MAMVI,GAnDY,WAAO,IACtBhW,EAAeY,KAAfZ,WACR,OACI,kBAACZ,GAAA,EAAD,CACIC,MAAO,CACH0E,eAAgB,SAChBzB,WAAY,SACZe,gBAAiBrD,EACjB5B,MAAO,OACP6X,UAAW,OACXhT,QAASxE,GAAQG,SAErB,kBAAC4D,GAAA,EAAD,CACIC,OAAQ5K,EAAQ,KAChBwH,MAAO,CAAEjB,MAAO,IAAKC,OAAQ,IAAK2E,aAAcvE,GAAQG,UAE5D,kBAAC,GAAD,MACA,kBAAC,GAAD,CAAMS,MAAO,CAAEqH,UAAWjI,GAAQG,SAAlC,qCACA,kBAAC,GAAD,QCaGsX,GA7BA,SAAAjX,GAAU,IACbnG,EAAeoC,qBAAWzC,IAA1BK,WADY,EAESoC,qBAAWb,IAAhCnK,EAFY,EAEZA,QAAS8D,EAFG,EAEHA,QACTgM,EAAeY,KAAfZ,WACR,OAAKlH,EAGe,QAAhByF,KAASC,GACL1F,IAAeqd,KAAWC,MAAc,kBAAC,GAAD,MACvClmB,EACW,IAAZ8D,EAEI,kBAACoL,GAAA,EAAD,CAAMC,MAAO,CAAEyE,KAAM,EAAGxB,WAAY,SAAUyB,eAAgB,SAAUV,gBAAiBrD,IACrF,kBAAC,GAAD,CAAMD,OAAO,EAAMV,MAAO,CAAEyK,UAAW,WAClC,iDAIV,kBAAC1K,GAAA,EAAD,QAAUH,EAAV,CAAiBI,MAAO,CAAC,CAAEyE,KAAM,GAAK7E,EAAMI,UAT9B,kBAACgX,GAAD,MAYjB,kBAACjX,GAAA,EAAD,CAAMC,MAAO,CAAEjB,MAAO,OAAQC,OAAQ,SAClC,kBAAC,GAAD,MACA,kBAACe,GAAA,EAAD,QAAUH,EAAV,CAAiBI,MAAO,CAAC,CAAEyE,KAAM,GAAK7E,EAAMI,WAlB7C,kBAACiX,EAAA,EAAD,O,qkBCgBf,IAAMC,GAAU,CAAC,UAAW,YAgBtBC,GAAU,WACZ,IAAM5N,EAAQoL,KACRnL,EACmB,oBAArBD,EAAMqL,WACA,wCACqB,YAArBrL,EAAMqL,WACN,wCACA,oCACV,OACI,oCACI,kBAAC,GAAD,KACI,kBAAC,GAAD,CAAMwC,IAAI,EAAMpX,MAAO,CAAEyK,UAAW,SAAU9G,aAAcvE,GAAQG,SAApE,yBAIJ,kBAAC,GAAD,CACIgK,MAAOA,EACPjG,MAAO,sCACPkG,UAAWA,EACXoB,YAAarB,EAAMsB,gBACnBxS,OAAQkR,EAAMqL,WACdhM,gBAAiBW,EAAMsL,cACvBpL,KAAM4N,KAEV,kBAAC,GAAD,CAAc9N,MAAOA,IACrB,kBAAC,GAAD,CAASA,MAAOA,IAChB,kBAAC,GAAD,CAAUA,MAAOA,MAMvB8N,GAAkC,SAAAzX,GAAU,IAAD,EACS2B,KAA9CZ,EADqC,EACrCA,WAAYC,EADyB,EACzBA,kBAAmBI,EADM,EACNA,WACjCzN,GACgB,YAAjBqM,EAAMvH,OACDuH,EAAM3M,MAAM7B,QACK,oBAAjBwO,EAAMvH,OACNuH,EAAM3M,MAAM+D,gBACZ4I,EAAM3M,MAAM4D,iBAAmB,IACnCyL,EAAUxE,uBAAY,WACxB8B,EAAMkK,cAAclK,EAAM3M,SAC3B,CAAC2M,EAAMkK,cAAelK,EAAM3M,QACzBqkB,EACe,oBAAjB1X,EAAMvH,OAA+B,aAAgC,YAAjBuH,EAAMvH,OAAuB,aAAe,gBACpG,OACI,kBAAC,KAAD,MACK,gBAAGkf,EAAH,EAAGA,QAAH,OACG,kBAACC,GAAA,EAAD,CAAoBlV,QAASA,GACzB,kBAACvC,GAAA,EAAD,CAAMC,MAAO,CAAEgE,gBAAiBuT,EAAU3W,EAAoBD,IAC1D,kBAAC,GAAD,CAAUX,MAAO,CAAEiD,WAAY,SAAUJ,OAAQzD,GAAQE,QACrD,kBAACS,GAAA,EAAD,KACI,kBAAC,GAAD,CAAY9M,MAAO2M,EAAM3M,MAAMkE,SAC/B,kBAAC,GAAD,CAAYlE,MAAO2M,EAAM3M,MAAMmE,UAEnC,kBAAC2I,GAAA,EAAD,CAAMC,MAAO,CAAEyE,KAAM,IACjB,kBAAC,GAAD,CAAMzE,MAAO,CAAEyK,UAAW,QAAS1I,SAAU,KAAOuV,GACpD,kBAAC,GAAD,CAAM5W,OAAO,EAAMV,MAAO,CAAEyK,UAAW,QAAS1I,SAAU,GAAIG,MAAOlB,IAChEhP,EAAcuB,EAAQqM,EAAM3M,MAAMhC,SAAU,KAGpD2O,EAAMiK,SAAW,kBAAC,GAAD,MAAgB,kBAAC,GAAD,aASxD4N,GAAa,SAAC,GAAe,IAAbxkB,EAAY,EAAZA,MACV+N,EAAeO,KAAfP,WADsB,EAEA7G,oBAAS,GAFT,WAEvBud,EAFuB,KAEdC,EAFc,KAGxBvU,GAAUnQ,EAAM9B,SAAWumB,EAAUlf,EAAQ,KAAkC,CAAEof,IAAK3kB,EAAM9B,SAClG,OACI,kBAAC,GAAD,CAAU6O,MAAO,CAAEiD,WAAY,SAAUU,aAAcvE,GAAQC,OAC3D,kBAAC8D,GAAA,EAAD,CACIC,OAAQA,EACR8C,QAAS,kBAAMyR,GAAW,IAC1B3X,MAAO,CAAEjB,MAAO,GAAIC,OAAQ,GAAIgF,gBAAiB,QAASe,aAAc,MAE5E,kBAAC,GAAD,CAAMrE,OAAO,EAAMV,MAAO,CAAE+B,SAAU,GAAIG,MAAOlB,EAAY8B,WAAY1D,GAAQE,QAC5ErM,EAAM/B,OAAO6B,QAAQ,MAAO,UAMvC8kB,GAAe,SAAC,GAAwC,IAAtCtO,EAAqC,EAArCA,MACpB,IAAKA,EAAMsB,gBACP,OAAO,kBAAC,GAAD,CAAQvD,aAAa,IAEhC,IAAMf,EAAQgD,EAAMuL,OAASoC,GAAQxK,QAAQnD,EAAMuL,QAAU,KACvDxS,EAAUxE,uBAAY,SAAClI,GACzB2T,EAAMwL,UAAUmC,GAAQthB,MACzB,IACGxE,EAAUY,EAAcuX,EAAMsB,gBAAiBzZ,QAASmY,EAAMsB,gBAAiB5Z,UAC/E0f,EAAU3e,EAAcuX,EAAMsB,gBAAgB7T,iBAAmB,IAAKuS,EAAMsB,gBAAiB5Z,UACnG,OACI,kBAAC,GAAD,KACI,kBAAC,GAAD,CAAU2B,KAAM,2CAChB,kBAACmN,GAAA,EAAD,CAAMC,MAAO,CAAEiH,iBAAkB7H,GAAQE,MAAOqE,aAAcvE,GAAQG,SAClE,kBAAC,GAAD,CAAMwL,MAAO,aAAcnY,KAAMxB,IACjC,kBAAC,GAAD,CAAM2Z,MAAO,aAAcnY,KAAM+d,KAErC,kBAAC,GAAD,CACIlK,cAAeF,EACfjE,QAASA,EACTwE,QAAS,CAAC,CAAEgR,QAASC,IAAe,CAAED,QAASE,KAC/ClS,eAAgB,CAAEmB,iBAAkB7H,GAAQE,WAMtDyY,GAAc,WAChB,OACI,kBAAC,GAAD,CAAU/X,MAAO,CAAEiD,WAAY,WAC3B,kBAAC,GAAD,CAAMjD,MAAO,CAAEkC,MAAO,UAAtB,WACA,kBAAC,KAAD,CACIuD,KAAM,qBACN5R,KAAM,gBACNqO,MAAO,QACPlC,MAAO,CAAE8C,WAAY1D,GAAQC,KAAMgI,UAAW,OAMxD2Q,GAAe,WACjB,OACI,kBAAC,GAAD,CAAUhY,MAAO,CAAEiD,WAAY,WAC3B,kBAAC,GAAD,CAAMjD,MAAO,CAAEkC,MAAO,UAAtB,YACA,kBAAC,KAAD,CACIuD,KAAM,qBACN5R,KAAM,gBACNqO,MAAO,QACPlC,MAAO,CAAE8C,WAAY1D,GAAQC,KAAMgI,UAAW,OAMxD4Q,GAAU,SAAC,GAAwC,IAAtC1O,EAAqC,EAArCA,MACf,OAAKA,EAAMsB,iBAAoC,YAAjBtB,EAAMuL,OAIhC,kBAAC,GAAD,KACI,kBAAC,GAAD,CAAoBvL,MAAOA,IAC3B,kBAAC,GAAD,CACIjG,MAAO,kCACPrQ,MAAOsW,EAAMsB,gBACbxE,OAAQkD,EAAMsB,gBAAgBzZ,QAAQ0B,SACtCS,OAAQgW,EAAMhW,OACdgZ,gBAAiBhD,EAAMgL,YAE3B,kBAAC,GAAD,CAAahL,MAAOA,IACpB,kBAAC,GAAD,CAAiBA,MAAOA,KAbrB,kBAAC,GAAD,CAAQjC,aAAa,KAkB9B4Q,GAAqB,SAAC,GAAwC,IAAtC3O,EAAqC,EAArCA,MAClBhJ,EAAUgB,KAAVhB,MACR,OAAKgJ,EAAMsB,gBAAiBzZ,QAAQ0B,SAIhC,oCACI,kBAACiN,GAAA,EAAD,CAAMC,MAAO,CAAEiH,iBAAkB7H,GAAQE,QACrC,kBAAC,GAAD,CACI4C,MAAO3B,EACP3N,KACI,iBACA2W,EAAMsB,gBAAiB3Z,OACvB,iEAIZ,kBAAC,GAAD,OAdG,kBAAC,GAAD,CAAQoW,aAAa,KAmB9B6Q,GAAc,SAAC,GAAwC,IAAtC5O,EAAqC,EAArCA,MACnB,GAAIA,EAAMsB,gBAAiBzZ,QAAQ0B,SAC/B,OAAO,kBAAC,GAAD,CAAQwU,aAAa,IAEhC,IAAMlW,EAAUY,EAAcuX,EAAMsB,gBAAiBzZ,QAASmY,EAAMsB,gBAAiB5Z,UAC/EmnB,EACF7O,EAAMyL,6BAA+BzL,EAAMhW,OACrCvB,EACIuX,EAAMyL,4BACDpG,IAAInc,EAAa8W,EAAMhW,OAAQ,KAC/B4C,IAAIrF,SAAOO,UAAUC,KAAK,IAAI8E,IAAI,KACvC,IAEJ,KACV,OACI,kBAAC,GAAD,CAAQkR,aAAa,GACjB,kBAAC,GAAD,CAAMyD,MAAO,aAAcnY,KAAMxB,KAC/BuB,EAAa4W,EAAMhW,SAAW,kBAAC,GAAD,CAAMwX,MAAO,yBAA0BnY,KAAMwlB,GAAe,aAKlGC,GAAkB,SAAC,GAAwC,IAAtC9O,EAAqC,EAArCA,MAAqC,EAClCpP,mBAAwB,IADU,WACrDiO,EADqD,KAC9CkQ,EAD8C,KAG5D,GADAje,KAAe,kBAAMie,EAAS,MAAK,CAAC/O,EAAMsB,kBACtCtB,EAAMsB,gBAAiBzZ,QAAQ0B,SAC/B,OAAO,kBAAC,GAAD,CAAQwU,aAAa,IAEhC,IAAMiR,GAAmBhP,EAAM8K,uBACzBnT,EAAWqX,GAAmB5lB,EAAa4W,EAAMhW,QACvD,OACI,kBAAC,GAAD,KACKd,EAAa8W,EAAMhW,OAAQgW,EAAMsB,gBAAiB5Z,UAAUgZ,GAAGV,EAAMsB,gBAAiBzZ,SACnF,kBAAC,GAAD,CAA2BF,OAAQqY,EAAMsB,gBAAiB3Z,SAC1DqY,EAAMvD,QACN,kBAAC,GAAD,MAEA,oCACI,kBAAC,GAAD,CACI/S,MAAOsW,EAAMsB,gBACb9M,QAASlJ,EACTuR,UAAW,kBAAMmD,EAAM+K,2BAA0B,IACjDpO,QAASoS,EACTjS,OAAQ1T,EAAa4W,EAAMhW,UAAYglB,IAE3C,kBAAC,GAAD,CAAehP,MAAOA,EAAOrD,QAASoS,EAAUpX,SAAUA,KAGjEkH,EAAMG,SAA0B,OAAfH,EAAME,MAAiB,kBAAC,GAAD,CAAcF,MAAOA,MAKpEoQ,GAAqB,WAAO,IACtBjY,EAAUgB,KAAVhB,MACF+B,EAAUmW,GAAU,aAAc,aACxC,OACI,kBAAC,GAAD,CACIvW,MAAO3B,EACP+C,MAAO,gBACPwC,eAAgB,CAAEuB,UAAWjI,GAAQG,QACrC+C,QAASA,KAKfoW,GAAgB,SAAC,GAQhB,IAPHnP,EAOE,EAPFA,MACArD,EAME,EANFA,QACAhF,EAKE,EALFA,SAMMoB,EAAUxE,uBAAY,WACxBoI,EAAQ,IACRqD,EAAMgM,YAAYoD,MAAMzS,KACzB,CAACqD,EAAMgM,UAAWrP,IACrB,OAAO,kBAAC,GAAD,CAAQR,KAAM,QAASpC,MAAO,UAAWpC,SAAUA,EAAU8E,QAASuD,EAAM2L,WAAY5S,QAASA,KAGtGsW,GAAW,SAAC,GAAwC,IAAD,EAArCrP,EAAqC,EAArCA,MAChB,IAAKA,EAAMsB,iBAAoC,aAAjBtB,EAAMuL,OAChC,OAAO,kBAAC,GAAD,CAAQxN,aAAa,IAEhC,IAAMrU,EAAc,SACbsW,EAAMsB,iBADO,IAEhBzZ,QAASmY,EAAMsB,gBAAgB7T,iBAAmBlG,SAAOC,UAAUoI,OAEvE,OACI,kBAAC,GAAD,KACI,kBAAC,GAAD,CAAiBoQ,MAAOA,IACxB,kBAAC,GAAD,CACIjG,MAAO,mCACPrQ,MAAOA,EACPoT,OAAQkD,EAAMvD,UAAN,SAAiBuD,EAAMsB,gBAAgB7T,sBAAvC,EAAiB,EAAuClE,YAAY,EAC5ES,OAAQgW,EAAMhW,OACdgZ,gBAAiBhD,EAAMgL,YAE3B,kBAAC,GAAD,CAAchL,MAAOA,IACrB,kBAAC,GAAD,CAAkBA,MAAOA,MAK/BsP,GAAkB,SAAC,GAAwC,IAAD,EAArCtP,EAAqC,EAArCA,MACvB,OAAIA,EAAMvD,SAAYuD,EAAMsB,kBAAmB,SAACtB,EAAMsB,gBAAgB7T,sBAAvB,EAAC,EAAuClE,UAInF,kBAAC,GAAD,CAAQwU,aAAa,GACjB,kBAACvH,GAAA,EAAD,CAAMC,MAAO,CAAEiH,iBAAkB7H,GAAQE,QACrC,kBAAC,GAAD,CACI1M,KAAM,sBAAwB2W,EAAMsB,gBAAiB3Z,OAAS,0CANnE,kBAAC,GAAD,CAAQoW,aAAa,KAa9BwR,GAAe,SAAC,GAAwC,IAAD,EAArCvP,EAAqC,EAArCA,MACpB,GACIA,EAAMvD,UACLuD,EAAMsB,kBACNtB,EAAMsB,gBAAgB7T,kBAFvB,SAGAuS,EAAMsB,gBAAgB7T,sBAHtB,EAGA,EAAuClE,YACtCyW,EAAMsB,gBAAgB5T,aAEvB,OAAO,kBAAC,GAAD,CAAQqQ,aAAa,IAEhC,IAAMqJ,EAAU3e,EAAcuX,EAAMsB,gBAAgB7T,gBAAiBuS,EAAMsB,gBAAiB5Z,UACtFgG,EAAejF,EACjBuX,EAAMsB,gBAAgB5T,cAAgBnG,SAAOC,UAAUoI,KACvDoQ,EAAMsB,gBAAiB5Z,UAE3B,OACI,kBAAC,GAAD,CAAQqW,aAAa,GACjB,kBAAC,GAAD,CAAMyD,MAAO,aAAcnY,KAAM+d,IACjC,kBAAC,GAAD,CAAM5F,MAAO,uBAAwBnY,KAAMqE,IAC3C,kBAAC8I,GAAA,EAAD,CAAMC,MAAO,CAAEqH,UAAWjI,GAAQG,OAAQ0H,iBAAkB7H,GAAQE,QAChE,kBAAC,GAAD,CAAQ1M,KAAM,4EAMxBmmB,GAAmB,SAAC,GAAwC,IAAtCxP,EAAqC,EAArCA,MAAqC,EACnCpP,mBAAwB,IADW,WACtDiO,EADsD,KAC/CkQ,EAD+C,KAG7D,OADAje,KAAe,kBAAMie,EAAS,MAAK,CAAC/O,EAAMsB,kBACtCtB,EAAMvD,QAEF,kBAAC,GAAD,KACI,kBAAC,GAAD,OAKPuD,EAAMsB,iBACNtB,EAAMsB,gBAAgB7T,kBACvBuS,EAAMsB,gBAAgB7T,gBAAgBlE,SAKtC,kBAAC,GAAD,KACKL,EAAa8W,EAAMhW,OAAQgW,EAAMsB,gBAAiB5Z,UAAUgZ,GAAGV,EAAMsB,gBAAgB7T,iBAClF,kBAAC,GAAD,CAA2B9F,OAAQqY,EAAMsB,gBAAiB3Z,SAE1D,kBAAC,GAAD,CAAgBqY,MAAOA,EAAOrD,QAASoS,EAAUpX,SAAUvO,EAAa4W,EAAMhW,UAEjF6U,EAAMG,SAA0B,OAAfH,EAAME,MAAiB,kBAAC,GAAD,CAAcF,MAAOA,KAT3D,kBAAC,GAAD,CAAQd,aAAa,KAc9B0R,GAAiB,SAAC,GAQjB,IAPHzP,EAOE,EAPFA,MACArD,EAME,EANFA,QACAhF,EAKE,EALFA,SAMMoB,EAAUxE,uBAAY,WACxBoI,EAAQ,IACRqD,EAAMiM,aAAamD,MAAMzS,KAC1B,CAACqD,EAAMiM,WAAYtP,IACtB,OACI,kBAAC,GAAD,CAAQR,KAAM,QAASpC,MAAO,WAAYpC,SAAUA,EAAU8E,QAASuD,EAAM6L,YAAa9S,QAASA,KAI5F2W,GAzYO,WAClB,OACI,kBAAC,GAAD,KACI,kBAAC,GAAD,KACI,kBAAC,GAAD,KACI,kBAAClZ,GAAA,EAAD,CAAMC,MAAO,CAAEiD,WAAY,SAAUU,aAAcvE,GAAQI,QACvD,kBAAC,GAAD,WCUlB0Z,GAAY,SAACtZ,GAA+F,IAAD,EAC3E/D,qBAAWb,IAArCM,EADqG,EACrGA,cAAe9F,EADsF,EACtFA,OACjBkU,EAAa5L,uBACf,YAAe,IAAZ6L,EAAW,EAAXA,KACC,OAAO,kBAAC,GAAD,CAAWC,IAAKD,EAAK9Y,QAASoC,MAAO0W,EAAME,UAAU,EAAOC,cAAelK,EAAMkK,kBAE5F,CAAClK,EAAMkK,gBAELjM,EAAOsb,mBACT,kBACI3jB,EACK6C,OAAOuH,EAAMwZ,cACbrjB,MACG,SAACC,EAAIC,GAAL,OACKA,EAAG7E,QAAQ0B,SAAW,EAAI,OAC1BkD,EAAG5E,QAAQ0B,SAAW,EAAI,MAC3BkD,EAAG9E,OAAOmoB,cAAcpjB,EAAG/E,aAE3C,CAACsE,IAEL,OAAO8F,EACH,kBAAC4O,GAAA,EAAD,CAAmBxE,KAAM,QAAS1F,MAAO,CAAEqH,UAAWjI,GAAQI,SAC9C,IAAhB3B,EAAKtL,OACL,kBAAC,GAAD,MAEA,kBAAC4X,GAAA,EAAD,CACIC,aAAc,SAAAT,GAAI,OAAIU,KAAKC,UAAUX,IACrC9L,KAAMA,EACN6L,WAAYA,EACZa,uBAAwB7B,MAK9B8B,GAAY,WACd,OACI,kBAACzK,GAAA,EAAD,CAAMC,MAAO,CAAE6C,OAAQzD,GAAQG,SAC3B,kBAAC,GAAD,CAAMmB,OAAO,EAAMV,MAAO,CAAEyK,UAAW,SAAU1L,MAAO,SACnD,oFAMXsY,GAAY,SAACzX,GAAuF,IAAD,EAC/C2B,KAA9CZ,EAD6F,EAC7FA,WAAYC,EADiF,EACjFA,kBAAmBI,EAD8D,EAC9DA,WAD8D,EAEvE7G,oBAAS,GAF8D,WAE9Fud,EAF8F,KAErFC,EAFqF,KAG/FrV,EAAUxE,uBAAY,WACxB8B,EAAMkK,cAAclK,EAAM3M,SAC3B,CAAC2M,EAAMkK,cAAelK,EAAM3M,QACzBmQ,EAASsU,EAAUlf,EAAQ,KAAkC,CAAEof,IAAKhY,EAAM3M,MAAM9B,SACtF,OACI,kBAAC,KAAD,MACK,gBAAGomB,EAAH,EAAGA,QAAH,OACG,kBAACC,GAAA,EAAD,CAAoBlV,QAASA,GACzB,kBAACvC,GAAA,EAAD,CAAMC,MAAO,CAAEgE,gBAAiBuT,EAAU3W,EAAoBD,IAC1D,kBAAC,GAAD,CAAUX,MAAO,CAAEiD,WAAY,SAAUJ,OAAQzD,GAAQE,QACrD,kBAAC6D,GAAA,EAAD,CACIC,OAAQA,EACR8C,QAAS,kBAAMyR,GAAW,IAC1B3X,MAAO,CAAEjB,MAAO,GAAIC,OAAQ,GAAIgF,gBAAiB,QAASe,aAAc,MAE5E,kBAAC,GAAD,CAAMrE,OAAO,EAAMV,MAAO,CAAE8C,WAAY1D,GAAQE,MAAOyC,SAAU,GAAIG,MAAOlB,IACvEpB,EAAM3M,MAAM/B,QAEjB,kBAAC,GAAD,CAAMwP,OAAO,EAAMV,MAAO,CAAEyE,KAAM,EAAGgG,UAAW,QAAS1I,SAAU,GAAIG,MAAOlB,IACzEhP,EAAc4N,EAAM3M,MAAM7B,QAASwO,EAAM3M,MAAMhC,SAAU,IAE7D2O,EAAMiK,SAAW,kBAAC,GAAD,MAAgB,kBAAC,GAAD,aAS/CyP,GAzG2B,SAAA1Z,GAAU,IAE1C3M,EADa4I,qBAAWb,IAAtBxF,OACasD,MAAK,SAAAC,GAAC,OAAIA,EAAE7H,SAAW0O,EAAM1O,UAC5C4Y,EAAgBhM,uBAClB,SAAA/E,GACI6G,EAAM2Z,eAAexgB,EAAE7H,UAE3B,CAAC0O,EAAM2Z,iBAEL5O,EAAkB7M,uBAAY,WAChC8B,EAAM2Z,eAAe,MACtB,CAAC3Z,EAAM2Z,iBACV,OAAmD3Z,EAAMyG,OAC9C,kBAAC,GAAD,CAAQiB,aAAa,IAG5B,kBAAC,GAAD,KACI,kBAAC,GAAD,CAAU1U,KAAMgN,EAAM0D,QACrBrQ,EACG,kBAAC,GAAD,CAAWA,MAAOA,EAAO4W,UAAU,EAAMC,cAAea,IAExD,kBAAC,GAAD,CAAWyO,aAAcxZ,EAAMwZ,aAActP,cAAeA,MCrC7D0P,GAJW,SAAC,GAA0C,IAAxCjQ,EAAuC,EAAvCA,MACzB,OAAO,kBAAC,GAAD,CAAQ7D,KAAM,QAASpC,MAAOiG,EAAMmJ,WAAa,IAAMnJ,EAAMqJ,SAAW,iBAAkB1R,UAAU,KC4CzGuY,GAAiB,SAAC,GAA6C,IAA3ClQ,EAA0C,EAA1CA,MAChBgD,EAAkBzO,uBACpB,SAAC4b,GAEG,GADAnQ,EAAMuJ,cAAc4G,GAChBnQ,EAAM1R,MAAQ0R,EAAM4F,UAAW,CAC/B,IAAMwK,EAAYpQ,EAAM1R,KAAK+hB,QAAQ5mB,EAAauW,EAAM4F,YACxD5F,EAAMwJ,YAAY4G,EAAUE,MAAMvmB,EAAciW,EAAM4F,UAAWuK,IAAY/lB,cAGrF,CAAC4V,EAAM1R,KAAM0R,EAAM4F,YAEvB,OACI,kBAAC,GAAD,CACI7L,MAAO,eAAiBiG,EAAMmJ,WAAa,IAAMnJ,EAAMqJ,SAAW,0BAClE3f,MAAOsW,EAAM4F,UACb9I,QAASkD,EAAM4F,YAAc5F,EAAM6F,QACnC7b,OAAQgW,EAAM8F,WACd9C,gBAAiBA,KAKvBuN,GAAe,SAAC,GAA6C,IAA3CvQ,EAA0C,EAA1CA,MACdgD,EAAkBzO,uBACpB,SAAC4b,GAEG,GADAnQ,EAAMwJ,YAAY2G,GACdnQ,EAAM1R,MAAQ0R,EAAM6F,QAAS,CAC7B,IAAM2K,EAAUxQ,EAAM1R,KAAK+hB,QAAQ5mB,EAAauW,EAAM6F,UACtD7F,EAAMuJ,cAAciH,EAAQF,MAAMvmB,EAAciW,EAAM6F,QAASsK,IAAY/lB,cAGnF,CAAC4V,EAAM1R,KAAM0R,EAAM6F,UAEvB,OACI,kBAAC,GAAD,CACInc,MAAOsW,EAAM6F,QACb/I,QAASkD,EAAM4F,YAAc5F,EAAM6F,QACnC7b,OAAQgW,EAAMyH,SACdzE,gBAAiBA,KAKvByN,GAAY,SAAC,GAA6C,IAA3CzQ,EAA0C,EAA1CA,MACjB,IAAK5W,EAAa4W,EAAM8F,cAAgB9F,EAAMvD,UAAYuD,EAAM1R,KAAM,CAAC,IAAD,IAC5DoiB,EAAejoB,EACjBS,EAAa8W,EAAMyH,SAAP,SAAiBzH,EAAM6F,cAAvB,EAAiB,EAAene,UACvC2d,IAAI9d,SAAOO,UAAUC,KAAK,IAAI8E,IAAI,IAClCD,IAAI1D,EAAa8W,EAAM8F,WAAP,SAAmB9F,EAAM4F,gBAAzB,EAAmB,EAAiBle,WACzD,GAEJ,OACI,kBAAC,GAAD,CAAQqW,aAAa,GACjB,kBAAC,GAAD,CACI1U,KACI,0GAIL2W,EAAM8F,cAAgB9F,EAAMyH,UAC3B,kBAAC,GAAD,CAAOkJ,MAAOD,EAAcvH,WAAYnJ,EAAMmJ,WAAYE,SAAUrJ,EAAMqJ,YAK1F,IAAKrJ,EAAM4F,YAAc5F,EAAM6F,QAC3B,OAAO,kBAAC,GAAD,CAAQ9H,aAAa,IAEhC,IAAM4S,EAAQ3Q,EAAM1R,KAAO0R,EAAM1R,KAAK+hB,QAAQ5mB,EAAauW,EAAM4F,YAAYgL,cAAc,GAAK,SAChG,OACI,kBAAC,GAAD,CAAQ7S,aAAa,GACjB,kBAAC,GAAD,CAAO4S,MAAOA,EAAOxH,WAAYnJ,EAAMmJ,WAAYE,SAAUrJ,EAAMqJ,aAKzEwH,GAAQ,SAAC,GAAD,IAAGF,EAAH,EAAGA,MAAOxH,EAAV,EAAUA,WAAYE,EAAtB,EAAsBA,SAAtB,OACV,kBAAC,GAAD,CAAM7H,MAAO,QAASnY,KAAMsnB,EAAQ,IAAMtH,EAAW,QAAUF,KAI7D2H,GAAW,SAAC,GAA6C,IAA3C9Q,EAA0C,EAA1CA,MAA0C,EAChCpP,mBAAwB,IADQ,WACnDiO,EADmD,KAC5CkQ,EAD4C,KAG1D,GADAje,KAAe,kBAAMie,EAAS,MAAK,CAAC/O,EAAMmJ,WAAYnJ,EAAMqJ,SAAUrJ,EAAM8F,cACvE9F,EAAM4F,YAAc5F,EAAM6F,QAC3B,OAAO,kBAAC,GAAD,CAAQ9H,aAAa,IAEhC,IAAMgT,EAAwB7nB,EAAa8W,EAAM8F,WAAY9F,EAAM4F,UAAUle,UAAUgZ,GAAGV,EAAM4F,UAAU/d,SACpGmpB,EAAsB9nB,EAAa8W,EAAMyH,SAAUzH,EAAM6F,QAAQne,UAAUgZ,GAAGV,EAAM6F,QAAQhe,SAC5FopB,EAA2C,QAArBjR,EAAMmJ,aAAyBnJ,EAAMyJ,iBAC3DyH,EAAuC,QAAnBlR,EAAMqJ,WAAuBrJ,EAAM2J,eACvDhS,EACFsZ,GAAuBC,GAAqB9nB,EAAa4W,EAAM8F,aAAe1c,EAAa4W,EAAMyH,UACrG,OACI,kBAAC,GAAD,KACKsJ,EACG,kBAAC,GAAD,CAA2BppB,OAAQqY,EAAMmJ,aACzC6H,EACA,kBAAC,GAAD,CAA2BrpB,OAAQqY,EAAMqJ,WACzCrJ,EAAMvD,UAAYuD,EAAM1R,KACxB,kBAAC,GAAD,MACsB,QAArB0R,EAAMmJ,YAA2C,SAAnBnJ,EAAMqJ,UACjB,SAArBrJ,EAAMmJ,YAA4C,QAAnBnJ,EAAMqJ,SACpC,kBAAC,GAAD,CAAmBrJ,MAAOA,IAE1B,oCACI,kBAAC,GAAD,CACItW,MAAOsW,EAAM4F,UACbpR,QAASnJ,EACTwR,UAAW,kBAAMmD,EAAM0J,qBAAoB,IAC3C/M,QAASoS,EACTjS,QAASmU,IAEb,kBAAC,GAAD,CACIvnB,MAAOsW,EAAM6F,QACbrR,QAASnJ,EACTwR,UAAW,kBAAMmD,EAAM4J,mBAAkB,IACzCjN,QAASoS,EACTjS,QAASoU,IAEb,kBAAC,GAAD,CAAclR,MAAOA,EAAOrD,QAASoS,EAAUpX,SAAUA,KAGhEkH,EAAMG,SAA0B,OAAfH,EAAME,MAAiB,kBAAC,GAAD,CAAcF,MAAOA,MAKpEsS,GAAe,SAAC,GAQf,IAPHnR,EAOE,EAPFA,MACArD,EAME,EANFA,QACAhF,EAKE,EALFA,SAMMoB,EAAUxE,uBAAY,WACxBoI,EAAQ,IACRqD,EAAMoR,QAAQhC,MAAMzS,KACrB,CAACqD,EAAMoR,MAAOzU,IACjB,OACI,kBAAC,GAAD,CACIR,KAAM,QACNpC,MAAO,UAAYiG,EAAMmJ,WAAa,IAAMnJ,EAAMqJ,SAClD1R,SAAUA,EACV8E,QAASuD,EAAMqR,OACftY,QAASA,KAKNuY,GApLM,SAAC,GAAD,IAAGtR,EAAH,EAAGA,MAAH,OACjB,oCACI,kBAAC,GAAD,KACI,kBAAC,GAAD,CAAM6N,IAAI,EAAMpX,MAAO,CAAEyK,UAAW,SAAU9G,aAAcvE,GAAQG,SAApE,+BAIJ,kBAAC,GAAD,CACI+D,MAAO,2CACP+C,QAAQ,EACRnV,OAAQqY,EAAMmJ,WACd6G,eAAgBhQ,EAAMoJ,cACtByG,aAAc,SAAAnmB,GAAK,OAAIA,EAAM7B,UAAY6B,EAAM7B,QAAQ0B,YAE3D,kBAAC,GAAD,CACIwQ,MAAO,2CACP+C,OAA6B,KAArBkD,EAAMmJ,WACdxhB,OAAQqY,EAAMqJ,SACd2G,eAAgBhQ,EAAMsJ,YACtBuG,aAAc,SAAAnmB,GAAK,OAAIA,EAAM/B,SAAWqY,EAAMmJ,YAAczf,EAAM7B,UAAY6B,EAAM7B,QAAQ0B,YAEhG,kBAAC,GAAD,CAAgByW,MAAOA,IACvB,kBAAC,GAAD,CAAcA,MAAOA,IACrB,kBAAC,GAAD,CAAWA,MAAOA,IAClB,kBAAC,GAAD,CAAUA,MAAOA,MCAnBkO,GAAa,SAAC,GAAe,IAAbxkB,EAAY,EAAZA,MACV+N,EAAeO,KAAfP,WADsB,EAEA7G,oBAAS,GAFT,WAEvBud,EAFuB,KAEdC,EAFc,KAGxBvU,EAASsU,EAAUlf,EAAQ,KAAkC,CAAEof,IAAK3kB,EAAM9B,SAChF,OACI,kBAAC,GAAD,CAAU6O,MAAO,CAAEiD,WAAY,SAAUU,aAAcvE,GAAQC,OAC3D,kBAAC8D,GAAA,EAAD,CACIC,OAAQA,EACR8C,QAAS,kBAAMyR,GAAW,IAC1B3X,MAAO,CAAEjB,MAAO,GAAIC,OAAQ,GAAIgF,gBAAiB,QAASe,aAAc,MAE5E,kBAAC,GAAD,CAAMrE,OAAO,EAAMV,MAAO,CAAE+B,SAAU,GAAIG,MAAOlB,EAAY8B,WAAY1D,GAAQE,QAC5ErM,EAAM/B,OAAO6B,QAAQ,MAAO,UAM9B+nB,GAnD2B,SAAAlb,GAAU,IAAD,EACO2B,KAA9CZ,EADuC,EACvCA,WAAYC,EAD2B,EAC3BA,kBAAmBI,EADQ,EACRA,WACjC5P,EAAUY,EAAc4N,EAAM3M,MAAM7B,QAASwO,EAAM3M,MAAMhC,SAAU,IACnEqR,EAAUxE,uBAAY,WACxB8B,EAAMkK,cAAclK,EAAM3M,SAC3B,CAAC2M,EAAMkK,cAAelK,EAAM3M,QAC/B,OACI,kBAAC,KAAD,MACK,gBAAGskB,EAAH,EAAGA,QAAH,OACG,kBAACC,GAAA,EAAD,CAAoBlV,QAASA,GACzB,kBAACvC,GAAA,EAAD,CAAMC,MAAO,CAAEgE,gBAAiBuT,EAAU3W,EAAoBD,IAC1D,kBAAC,GAAD,CAAUX,MAAO,CAAEiD,WAAY,SAAUJ,OAAQzD,GAAQE,QACrD,kBAACS,GAAA,EAAD,KACI,kBAAC,GAAD,CAAY9M,MAAO2M,EAAM3M,MAAMkE,SAC/B,kBAAC,GAAD,CAAYlE,MAAO2M,EAAM3M,MAAMmE,UAEnC,kBAAC2I,GAAA,EAAD,CAAMC,MAAO,CAAEyE,KAAM,IACjB,kBAAC,GAAD,CAAMzC,MAAM,EAAMhC,MAAO,CAAEyK,UAAW,UAAtC,cAGA,kBAAC,GAAD,CAAM/J,OAAO,EAAMV,MAAO,CAAEyK,UAAW,QAAS1I,SAAU,GAAIG,MAAOlB,IAChE5P,IAGRwO,EAAMiK,SAAW,kBAAC,GAAD,MAAgB,kBAAC,GAAD,aCSxDkR,GAAa,SAAC,GAAgD,IAA9CxR,EAA6C,EAA7CA,MAClB,OAAKA,EAAMsB,iBAAmBlY,EAAa4W,EAAM8F,aAAe1c,EAAa4W,EAAMyH,UACxE,kBAAC,GAAD,CAAQ1J,aAAa,IAG5B,kBAAC,GAAD,CAAQA,aAAa,GACjB,kBAAC,GAAD,MACA,kBAAC,GAAD,CAAQ/T,OAAQgW,EAAM8F,WAAYpc,MAAOsW,EAAM4F,YAC/C,kBAAC,GAAD,CAAQ5b,OAAQgW,EAAMyH,SAAU/d,MAAOsW,EAAM6F,YAKnD4L,GAAY,WAAO,IACb/Z,EAAcM,KAAdN,UACR,OAAO,kBAAC,KAAD,CAAMwE,KAAM,qBAAsB5R,KAAM,aAAcqO,MAAOjB,EAAWjB,MAAO,CAAE6C,OAAQzD,GAAQE,UAGtG2b,GAAS,SAAC,GAAuB,IAArB1nB,EAAoB,EAApBA,OAAQN,EAAY,EAAZA,MAChB/B,EAA0B,SAAjB+B,EAAM/B,OAAoB,MAAQ+B,EAAM/B,OACvD,OACI,kBAAC,GAAD,CAAM8O,MAAO,CAAE+B,SAAU,GAAI0I,UAAW,WACnClX,EADL,IACcrC,IAKhBmpB,GAAW,SAAC,GAAgD,IAA9C9Q,EAA6C,EAA7CA,MAA6C,EACnCpP,mBAAwB,IADW,WACtDiO,EADsD,KAC/CkQ,EAD+C,KAG7D,GADAje,KAAe,kBAAMie,EAAS,MAAK,CAAC/O,EAAMmJ,WAAYnJ,EAAMqJ,SAAUrJ,EAAM8F,cACvE9F,EAAMsB,gBACP,OAAO,kBAAC,GAAD,CAAQvD,aAAa,IAEhC,IAAMiR,GAAmBhP,EAAM8K,uBACzBnT,EAAWqX,GAAmB5lB,EAAa4W,EAAMhW,QACvD,OACI,kBAAC,GAAD,KACKd,EAAa8W,EAAMhW,OAAQgW,EAAMsB,gBAAgB5Z,UAAUgZ,GAAGV,EAAMsB,gBAAgBzZ,SACjF,kBAAC,GAAD,CAA2BF,OAAQqY,EAAMsB,gBAAgB3Z,SACzDqY,EAAMvD,UAAYuD,EAAM1R,KACxB,kBAAC,GAAD,MAEA,oCACI,kBAAC,GAAD,CACI5E,MAAOsW,EAAMsB,gBACb9M,QAASnJ,EACTwR,UAAW,kBAAMmD,EAAM+K,2BAA0B,IACjDpO,QAASoS,EACTjS,QAASkS,IAEb,kBAAC,GAAD,CAAchP,MAAOA,EAAOrD,QAASoS,EAAUpX,SAAUA,KAGhEkH,EAAMG,SAA0B,OAAfH,EAAME,MAAiB,kBAAC,GAAD,CAAcF,MAAOA,MAKpE8S,GAAe,SAAC,GAQf,IAPH3R,EAOE,EAPFA,MACArD,EAME,EANFA,QACAhF,EAKE,EALFA,SAMMoB,EAAUxE,uBAAY,WACxBoI,EAAQ,IACRqD,EAAM4R,WAAWxC,MAAMzS,KACxB,CAACqD,EAAM4R,SAAUjV,IACpB,OAAO,kBAAC,GAAD,CAAQR,KAAM,QAASpC,MAAO,SAAUpC,SAAUA,EAAU8E,QAASuD,EAAM6R,SAAU9Y,QAASA,KAG1F+Y,GAnGS,SAAC,GAAD,IAAG9R,EAAH,EAAGA,MAAH,OACpB,oCACI,kBAAC,GAAD,KACI,kBAAC,GAAD,CAAM6N,IAAI,EAAMpX,MAAO,CAAEyK,UAAW,SAAU9G,aAAcvE,GAAQG,SAApE,kCAIJ,kBAAC,GAAD,CACIgK,MAAOA,EACPjG,MAAO,+CACPkG,UAAW,gCACXC,KAAMqR,KAEV,kBAAC,GAAD,CACIxX,MAAO,4CACPrQ,MAAOsW,EAAMsB,gBACbxE,QAASkD,EAAMsB,gBACftX,OAAQgW,EAAMhW,OACdgZ,gBAAiBhD,EAAMgL,YAE3B,kBAAC,GAAD,CAAYhL,MAAOA,IACnB,kBAAC,GAAD,CAAUA,MAAOA,M,qkBC7BzB,IAsCe+R,GAtCuC,WAClD,IAAM/R,EAAQuK,KAD0C,EAEvBjY,qBAAWb,IAApClH,EAFgD,EAEhDA,OAAQuH,EAFwC,EAExCA,aAFwC,EAG5BlB,oBAAS,GAHmB,WAGjDygB,EAHiD,KAGzCW,EAHyC,OAIdxM,KAAlCgC,EAJgD,EAIhDA,aAAcU,EAJkC,EAIlCA,gBAEhBkJ,EAAQ7c,uBAAY,0CAAA1J,EAAAC,OAAA,qDAClBkV,EAAM4F,WAAa5F,EAAM6F,SAAW7F,EAAM8F,YAAc9F,EAAMyH,UAAYld,GADxD,oBAElBynB,GAAU,GAFQ,SAIRlM,EAAa5c,EAAa8W,EAAM8F,WAAY9F,EAAM4F,UAAUle,UAC5D+f,EAAWve,EAAa8W,EAAMyH,SAAUzH,EAAM6F,QAAQne,UACnC,QAArBsY,EAAMmJ,YAA2C,QAAnBnJ,EAAMqJ,SAN1B,0BAQe,QAArBrJ,EAAMmJ,WACA,CAACnJ,EAAM6F,QAAS4B,EAAU3B,GAC1B,CAAC9F,EAAM4F,UAAWE,EAAY2B,GAV9B,WAOH/d,EAPG,KAOIM,EAPJ,KAOYge,EAPZ,gBAAAnd,EAAA,MAWOqd,EAAgBxe,EAAOM,EAAQge,IAXtC,cAWJpd,EAXI,mBAAAC,EAAA,MAYJD,EAAGgS,QAZC,mDAAA/R,EAAA,MAcO2c,EAAaxH,EAAM4F,UAAW5F,EAAM6F,QAASC,EAAY2B,IAdhE,eAcJ7c,EAdI,mBAAAC,EAAA,MAeJD,EAAGgS,QAfC,2BAAA/R,EAAA,MAiBRiH,KAjBQ,QAkBdkO,EAAMoJ,cAAc,IAlBN,yBAoBd4I,GAAU,GApBI,oFAuBvB,CAAChS,EAAM4F,UAAW5F,EAAM6F,QAAS7F,EAAM8F,WAAY9F,EAAMyH,SAAUld,EAAQuH,IAE9E,OAAO,SACAkO,GADP,IAEIoR,QACAC,Y,qkBC/BR,IAoGeY,GApG6C,WACxD,IAAMjS,EAAQ0K,GAAiB,gBAD+B,EAEApY,qBAAWb,IAAjE/F,EAFsD,EAEtDA,SAAUnB,EAF4C,EAE5CA,OAAQuH,EAFoC,EAEpCA,aAAcM,EAFsB,EAEtBA,kBAFsB,EAGdoT,KAAxCyC,EAHsD,EAGtDA,gBAAiBH,EAHqC,EAGrCA,mBAHqC,EAIhClX,oBAAS,GAJuB,WAIvD6L,EAJuD,KAI9CC,EAJ8C,OAK9B9L,oBAAS,GALqB,WAKvDihB,EALuD,KAK7CK,EAL6C,KAO9DphB,KAAe,4BAAAjG,EAAAC,OAAA,qDACPY,GAAYnB,GAAUyV,EAAMsB,iBADrB,wBAEPtB,EAAMoJ,cAAcpJ,EAAMsB,gBAAgB1T,OAAOjG,QACjDqY,EAAMsJ,YAAYtJ,EAAMsB,gBAAgBzT,OAAOlG,QAE/C+U,GAAW,GACXsD,EAAM+K,2BAA0B,GANzB,SAQGd,EAAe1iB,SAAOO,UAAUC,KAAK,GACtC8E,IAAI,IACJF,IAAI,GAVN,WAAA9B,EAAA,MAWqBuH,EAAkB4N,EAAMsB,gBAAgBha,QAAS+D,IAXtE,OAWG0gB,EAXH,OAYH/L,EAAM+K,0BAA0BxjB,SAAOO,UAAUC,KAAKgkB,GAAW5B,IAAIF,IAZlE,yBAcHvN,GAAW,GAdR,oFAiBZ,CAAChR,EAAUnB,EAAQyV,EAAMsB,kBAG5BxQ,KAAe,4BAAAjG,EAAAC,OAAA,gDAEPkV,EAAMsB,iBACNtB,EAAMsB,gBAAgB7S,aACtBuR,EAAM1R,MACN0R,EAAM4F,WACN5F,EAAM6F,SAEF7F,EAAM1R,KAAK6jB,eAAe7qB,UAAY0Y,EAAMsB,gBAAgBha,UACtD8qB,EAAcjoB,EAChB6V,EAAM1R,KAAK+jB,UAAU5oB,EAAauW,EAAM4F,YACxC5F,EAAM4F,UAAUle,UAEd4qB,EAAYnoB,EACd6V,EAAM1R,KAAK+jB,UAAU5oB,EAAauW,EAAM6F,UACxC7F,EAAM6F,QAAQne,UAElBsY,EAAMuJ,cACF9gB,EACIS,EAAa8W,EAAMhW,OAAQgW,EAAMsB,gBAAgB5Z,UAC5C2d,IAAI+M,GACJxlB,IAAIoT,EAAMsB,gBAAgB7S,aAC1BvE,WACL8V,EAAMsB,gBAAgB1T,OAAOlG,WAGrCsY,EAAMwJ,YACF/gB,EACIS,EAAa8W,EAAMhW,OAAQgW,EAAMsB,gBAAgB5Z,UAC5C2d,IAAIiN,GACJ1lB,IAAIoT,EAAMsB,gBAAgB7S,aAC1BvE,WACL8V,EAAMsB,gBAAgBzT,OAAOnG,YAhClC,8DAqCZ,CAACsY,EAAMsB,gBAAiBtB,EAAMhW,OAAQgW,EAAM1R,KAAM0R,EAAM4F,UAAW5F,EAAM6F,QAAStb,IAErF,IAAMqnB,EAAWrd,uBAAY,4CAAA1J,EAAAC,OAAA,qDACrBkV,EAAM8F,YAAc9F,EAAMyH,UAAYzH,EAAMsB,iBAAmBtB,EAAMhW,QAAUO,GAD1D,oBAErB2nB,GAAY,GAFS,SAIXpM,EAAa5c,EAAa8W,EAAM8F,WAAY9F,EAAM4F,UAAWle,UAC7D+f,EAAWve,EAAa8W,EAAMyH,SAAUzH,EAAM6F,QAASne,UACvDqgB,EAAY7e,EAAa8W,EAAMhW,OAAQgW,EAAMsB,gBAAgB5Z,UAC1C,SAArBsY,EAAMmJ,YAA4C,SAAnBnJ,EAAMqJ,SAPxB,0BASY,SAArBrJ,EAAMmJ,WACA,CAACnJ,EAAM6F,QAAU4B,EAAU3B,GAC3B,CAAC9F,EAAM4F,UAAYE,EAAY2B,GAX5B,WAQN/d,EARM,KAQC6oB,EARD,KAQiBC,EARjB,iBAAA3nB,EAAA,MAYIid,EAAmBpe,EAAOqe,EAAWwK,EAAgBC,IAZzD,eAYP5nB,EAZO,mBAAAC,EAAA,MAaPD,EAAGgS,QAbI,mDAAA/R,EAAA,MAeIod,EAAgBjI,EAAM4F,UAAY5F,EAAM6F,QAAUkC,EAAWjC,EAAY2B,IAf7E,eAeP7c,EAfO,mBAAAC,EAAA,MAgBPD,EAAGgS,QAhBI,2BAAA/R,EAAA,MAkBXiH,KAlBW,QAmBjBkO,EAAMQ,wBAAmBrQ,GAnBR,yBAqBjB+hB,GAAY,GArBK,oFAwB1B,CAAClS,EAAM8F,WAAY9F,EAAMyH,SAAUzH,EAAMsB,gBAAiBtB,EAAMhW,OAAQO,EAAQuH,IAEnF,OAAO,SACAkO,GADP,IAEIvD,QAASuD,EAAMvD,SAAWA,EAC1BmV,WACAC,cC9EFY,GAAK,WAAO,IACNrb,EAAeY,KAAfZ,WACR,OACI,kBAAC,GAAD,KACI,kBAAC,GAAD,CACIX,MAAO,CACHjB,MAAO,OACP6F,kBAAmBxF,GAAQE,MAC3B4I,gBAAiC,QAAhBhJ,KAASC,GAAeC,GAAQK,KAAOL,GAAQG,OAChE0D,WAAY,WAEhB,kBAAC,GAAD,MACA,kBAAC,GAAD,CACIvC,OAAO,EACPV,MAAO,CACH4E,kBAAmBxF,GAAQE,MAC3BkF,cAAepF,GAAQC,KACvB2E,gBAAiBrD,EACjBoB,SAAU,KANlB,MAUA,kBAAC,GAAD,SAMVka,GAAO,WAAO,IACRpb,EAAWU,KAAXV,OACR,OAAO,kBAACd,GAAA,EAAD,CAAMC,MAAO,CAAEhB,OAAQ,EAAGyF,KAAM,EAAGT,gBAAiBnD,MAGhDqb,GAnDS,WACpB,IAAMC,EAAoBb,KACpBc,EAAuBZ,KAC7B,OACI,kBAAC,GAAD,KACI,kBAAC,GAAD,KACI,kBAAC,GAAD,KACI,kBAACzb,GAAA,EAAD,CAAMC,MAAO,CAAEjB,MAAO,OAAQkE,WAAY,SAAUU,aAA6B,EAAfvE,GAAQK,QACpE2c,EAAqBvR,iBAAmB,kBAAC,GAAD,CAActB,MAAO4S,KAC7DC,EAAqBvR,iBAAmB,kBAAC,GAAD,MAC1C,kBAAC,GAAD,CAAiBtB,MAAO6S,S,qkBCVhD,IA8CeC,GA9C6B,WACxC,IAAM9S,EAAQ0K,GAAiB,wBADe,EAEgBpY,qBAAWb,IAAjE/F,EAFsC,EAEtCA,SAAUnB,EAF4B,EAE5BA,OAAQ6H,EAFoB,EAEpBA,kBAAmBN,EAFC,EAEDA,aACrCgX,EAAYtD,KAAZsD,QAHsC,EAIhBlY,oBAAS,GAJO,WAIvC6L,EAJuC,KAI9BC,EAJ8B,OAKZ9L,oBAAS,GALG,WAKvCmiB,EALuC,KAK5BC,EAL4B,KAO9CliB,KAAe,4BAAAjG,EAAAC,OAAA,qDACPY,GAAYnB,GAAUyV,EAAMsB,iBADrB,wBAEP5E,GAAW,GACXsD,EAAM+K,2BAA0B,GAHzB,SAKGd,EAAe1iB,SAAOO,UAAUC,KAAK,GACtC8E,IAAI,IACJF,IAAI,GAPN,WAAA9B,EAAA,MAQqBuH,EAAkB4N,EAAMsB,gBAAgBha,QAASkE,IARtE,OAQGugB,EARH,OASH/L,EAAM+K,0BAA0BxjB,SAAOO,UAAUC,KAAKgkB,GAAW5B,IAAIF,IATlE,uBAWHvN,GAAW,GAXR,kFAcZ,CAAChR,EAAUnB,EAAQyV,EAAMsB,kBAE5B,IAAM2R,EAAY1e,uBAAY,4BAAA1J,EAAAC,OAAA,qDACtBkV,EAAMsB,iBAAmBtB,EAAMhW,QAAUO,GADnB,wBAEtByoB,GAAa,GAFS,SAIZhpB,EAASd,EAAa8W,EAAMhW,OAAQgW,EAAMsB,gBAAgB5Z,UAJ9C,WAAAmD,EAAA,MAKDie,EAAQ9I,EAAMsB,gBAAiBtX,IAL9B,cAKZY,EALY,kBAAAC,EAAA,MAMZD,EAAGgS,QANS,0BAAA/R,EAAA,MAOZiH,KAPY,QAQlBkO,EAAMQ,wBAAmBrQ,GARP,yBAUlB6iB,GAAa,GAVK,oFAa3B,CAAChT,EAAMsB,gBAAiBtB,EAAMhW,OAAQO,EAAQuH,IAEjD,OAAO,SACAkO,GADP,IAEIvD,QAASuD,EAAMvD,SAAWA,EAC1BwW,YACAF,eCtBFG,GAAU,WACZ,IAAMlT,EAAQ8S,KACd,OACI,kBAACtc,GAAA,EAAD,CAAMC,MAAO,CAAEiD,WAAY,SAAUU,aAA6B,EAAfvE,GAAQK,OACvD,kBAAC,GAAD,KACI,kBAAC,GAAD,CAAM2X,IAAI,EAAMpX,MAAO,CAAEyK,UAAW,SAAU9G,aAAcvE,GAAQG,SAApE,2CAGA,kBAAC,GAAD,CACI3M,KACI,6MAEJsP,MAAO,WAEX,kBAAC,GAAD,CACIqH,MAAOA,EACPjG,MAAO,4CACPkG,UAAW,2CACXC,KAAMqR,KAEV,kBAAC,GAAD,CACIxX,MAAO,wCACPrQ,MAAOsW,EAAMsB,gBACbxE,QAASkD,EAAMsB,gBACftX,OAAQgW,EAAMhW,OACdgZ,gBAAiBhD,EAAMgL,YAE3B,kBAAC,GAAD,CAAUhL,MAAOA,OAM3B8Q,GAAW,SAAC,GAAwC,IAAtC9Q,EAAqC,EAArCA,MAAqC,EAC3BpP,mBAAwB,IADG,WAC9CiO,EAD8C,KACvCkQ,EADuC,KAGrD,OADAje,KAAe,kBAAMie,EAAS,MAAK,CAAC/O,EAAMhW,UACrCgW,EAAMsB,iBAAmBlY,EAAa4W,EAAMhW,QAAgB,kBAAC,GAAD,CAAQ+T,aAAa,IAElF,kBAAC,GAAD,KACK7U,EAAa8W,EAAMhW,OAAQgW,EAAMsB,gBAAgB5Z,UAAUgZ,GAAGV,EAAMsB,gBAAgBzZ,SACjF,kBAAC,GAAD,CAA2BF,OAAQqY,EAAMsB,gBAAgB3Z,SACzDqY,EAAMvD,QACN,kBAAC,GAAD,MAEA,oCACI,kBAAC,GAAD,CACI/S,MAAOsW,EAAMsB,gBACb9M,QAAShJ,EACTqR,UAAW,kBAAMmD,EAAM+K,2BAA0B,IACjDpO,QAASoS,EACTjS,OAAQkD,EAAM8K,yBAElB,kBAAC,GAAD,CAAe9K,MAAOA,EAAOrD,QAASoS,EAAUpX,UAAWqI,EAAM8K,0BAGxEjM,EAAMG,SAA0B,OAAfH,EAAME,MAAiB,kBAAC,GAAD,CAAcF,MAAOA,MAKpEsU,GAAgB,SAAC,GAQhB,IAPHnT,EAOE,EAPFA,MACArD,EAME,EANFA,QACAhF,EAKE,EALFA,SAMMoB,EAAUxE,uBAAY,oBAAA1J,EAAAC,OAAA,uDACxB6R,EAAQ,IADgB,oBAAA9R,EAAA,MAGdmV,EAAMiT,aAHQ,sDAKpBtW,EAAQ,EAAD,IALa,iEAOzB,IACH,OAAO,kBAAC,GAAD,CAAQR,KAAM,QAASpC,MAAO,UAAW0C,QAASuD,EAAM+S,UAAWha,QAASA,EAASpB,SAAUA,KAG3Fyb,GA5FO,WAClB,OACI,kBAAC,GAAD,KACI,kBAAC,GAAD,KACI,kBAAC,GAAD,KACI,kBAAC,GAAD,UCyGLC,GApG6B,WAAO,IAAD,EACiC/gB,qBAAWb,IAAlF/F,EADsC,EACtCA,SAAUnB,EAD4B,EAC5BA,OAAQjD,EADoB,EACpBA,QAAS8K,EADW,EACXA,kBAAmBnG,EADR,EACQA,OAAQ6F,EADhB,EACgBA,aADhB,EAEL0T,KAAjCiD,EAFsC,EAEtCA,cAAeG,EAFuB,EAEvBA,cAFuB,EAGlBhY,qBAHkB,WAGvC2a,EAHuC,KAG/BC,EAH+B,OAIR5a,qBAJQ,WAIvC0iB,EAJuC,KAI1BC,EAJ0B,OAKR3iB,qBALQ,WAKvC4iB,EALuC,KAK1BC,EAL0B,OAMN7iB,qBANM,WAMvC8iB,EANuC,KAMzBC,EANyB,OAOlB/iB,mBAAS,IAPS,WAOvC5G,EAPuC,KAO/BghB,EAP+B,OAQNpa,oBAAS,GARH,WAQvCgjB,EARuC,KAQzBC,EARyB,OASJjjB,oBAAS,GATL,WASvCkjB,EATuC,KASxBC,EATwB,OAUhBnjB,oBAAS,GAVO,WAUvC6L,EAVuC,KAU9BC,EAV8B,OAWd9L,oBAAS,GAXK,WAWvCojB,EAXuC,KAW7BC,EAX6B,QAYhBrjB,oBAAS,GAZO,aAYvCsjB,GAZuC,MAY9BC,GAZ8B,MAcxCC,GAAQnoB,EAAOsD,MAAK,SAAA7F,GAAK,MAAqB,UAAjBA,EAAM/B,UACnC0sB,GAASpoB,EAAOsD,MAAK,SAAA7F,GAAK,MAAqB,WAAjBA,EAAM/B,UAE1C6L,qBAAU,WACNwX,EAAU,MACX,CAAC1jB,EAASikB,IAEbza,KAAe,kCAAAjG,EAAAC,OAAA,qDACPspB,IAASC,IAAU3oB,GAAYnB,GADxB,wBAEPspB,GAAgB,GAChBE,GAAiB,GACjBrX,GAAW,GAJJ,SAMGuN,EAAe1iB,SAAOO,UAAUC,KAAK,GACtC8E,IAAI,IACJF,IAAI,GARN,WAAA9B,EAAA,MAS0BuH,EAAkBgiB,GAAM9sB,QAASiE,IAT3D,cASG+oB,EATH,OAUHT,EAAgBtsB,SAAOO,UAAUC,KAAKusB,GAAgBnK,IAAIF,IAVvD,YAAApf,EAAA,MAW2BuH,EAAkBiiB,GAAO/sB,QAASiE,IAX7D,eAWGgpB,EAXH,OAYHR,EAAiBxsB,SAAOO,UAAUC,KAAKwsB,GAAiBpK,IAAIF,IAEtDuK,EAAgBnqB,EAAY,QAAS+pB,GAAM9sB,QAASiD,GAdvD,KAeHgpB,EAfG,YAAA1oB,EAAA,MAekB2pB,EAAcnnB,UAAU9B,IAf1C,+CAgBHkoB,EAhBG,YAAA5oB,EAAA,MAgBkB2pB,EAAc/lB,eAhBhC,0CAiBGgmB,EAAiBpqB,EAAY,QAASgqB,GAAO/sB,QAASiD,GAjBzD,KAkBHopB,EAlBG,YAAA9oB,EAAA,MAkBmB4pB,EAAehmB,eAlBlC,4DAoBHiO,GAAW,GApBR,oFAuBZ,CAAC0X,GAAOC,GAAQ3oB,EAAUnB,IAE7B,IAAMmqB,GAAUngB,uBAAY,0BAAA1J,EAAAC,OAAA,oDACpBd,IAAUO,EADU,wBAEpB0pB,GAAY,GAFQ,oBAAAppB,EAAA,MAIC4d,EAAcvf,EAAac,KAJ5B,YAIVY,EAJU,2CAAAC,EAAA,MAMND,EAAGgS,QANG,0BAAA/R,EAAA,MAONiH,KAPM,QAQZkZ,EAAU,IARE,yBAWhBiJ,GAAY,GAXI,oFAczB,CAACjqB,EAAQO,IAENoqB,GAAUpgB,uBAAY,0BAAA1J,EAAAC,OAAA,oDACpBd,IAAUO,EADU,wBAEpB4pB,IAAW,GAFS,oBAAAtpB,EAAA,MAIC+d,EAAc1f,EAAac,KAJ5B,YAIVY,EAJU,2CAAAC,EAAA,MAMND,EAAGgS,QANG,0BAAA/R,EAAA,MAONiH,KAPM,QAQZkZ,EAAU,IARE,yBAWhBmJ,IAAW,GAXK,oFAczB,CAACnqB,EAAQO,IAEZ,MAAO,CACHghB,SACAC,YACA4I,SACAC,UACAf,cACAE,cACAE,eACA1pB,SACAghB,YACA4I,eACAC,kBACAC,gBACAC,mBACAtX,UACAiY,WACAV,WACAW,WACAT,aCrGFvG,GAAU,CAAC,QAAS,SAcpBiH,GAAU,WACZ,IAAM5U,EAAQqT,KACd,OACI,kBAAC7c,GAAA,EAAD,CAAMC,MAAO,CAAEiD,WAAY,SAAUU,aAA6B,EAAfvE,GAAQK,OACvD,kBAAC,GAAD,KACI,kBAAC,GAAD,CAAM2X,IAAI,EAAMpX,MAAO,CAAEyK,UAAW,WAApC,yBAIJ,kBAAC,GAAD,CAAclB,MAAOA,IACH,UAAjBA,EAAMuL,QAAsBvL,EAAMoU,OAASpU,EAAMoU,MAAMvsB,QAAQ0B,UAAY,kBAAC,GAAD,MAC1D,UAAjByW,EAAMuL,QAAsBvL,EAAMqU,QAAUrU,EAAMqU,OAAOxsB,QAAQ0B,UAAY,kBAAC,GAAD,MAC9E,kBAAC,GAAD,CACIwQ,MAAO,0CACPrQ,MAAOsW,EAAMoU,MACbtX,OAAyB,UAAjBkD,EAAMuL,SAAuBvL,EAAMoU,OAASpU,EAAMoU,MAAMvsB,QAAQ0B,SACxES,OAAQgW,EAAMhW,OACdgZ,gBAAiBhD,EAAMgL,YAE3B,kBAAC,GAAD,CACIjR,MAAO,6CACPrQ,MAAOsW,EAAMqU,OACbvX,OAAyB,UAAjBkD,EAAMuL,SAAuBvL,EAAMqU,QAAUrU,EAAMqU,OAAOxsB,QAAQ0B,SAC1ES,OAAQgW,EAAMhW,OACdgZ,gBAAiBhD,EAAMgL,YAE3B,kBAAC,GAAD,CAAWhL,MAAOA,IAClB,kBAAC,GAAD,CAAUA,MAAOA,MAKvBsO,GAAe,SAAC,GAAwC,IAAtCtO,EAAqC,EAArCA,MACpB,IAAKA,EAAMoU,QAAUpU,EAAMqU,SAAWrU,EAAMsT,cAAgBtT,EAAM0T,aAC9D,OACI,kBAAC,GAAD,CAAQ3V,aAAa,GACjB,kBAAC4C,GAAA,EAAD,CAAmBxE,KAAM,QAAS1F,MAAO,CAAEqH,UAAWjI,GAAQI,UAI1E,IAAM+G,EAAQgD,EAAMuL,OAASoC,GAAQxK,QAAQnD,EAAMuL,QAAU,KACvDxS,EAAUxE,uBAAY,SAAClI,GACzB2T,EAAMwL,UAAUmC,GAAQthB,MACzB,IACH,OACI,kBAAC,GAAD,KACI,kBAAC,GAAD,CAAUhD,KAAM,wCAChB,kBAACmN,GAAA,EAAD,CAAMC,MAAO,CAAEiH,iBAAkB7H,GAAQE,MAAOqE,aAAcvE,GAAQG,SAClE,kBAAC,GAAD,CAAMwL,MAAO,qBAAsBnY,KAAMZ,EAAcuX,EAAMsT,YAAatT,EAAMoU,MAAM1sB,YACtF,kBAAC,GAAD,CAAM8Z,MAAO,mBAAoBnY,KAAMZ,EAAcuX,EAAMoU,MAAMvsB,QAASmY,EAAMoU,MAAM1sB,YACtF,kBAAC,GAAD,MACA,kBAAC,GAAD,CAAM8Z,MAAO,sBAAuBnY,KAAMZ,EAAcuX,EAAM0T,aAAc1T,EAAMqU,OAAO3sB,YACzF,kBAAC,GAAD,CAAM8Z,MAAO,oBAAqBnY,KAAMZ,EAAcuX,EAAMqU,OAAOxsB,QAASmY,EAAMqU,OAAO3sB,aAE7F,kBAAC,GAAD,CACIwV,cAAeF,EACfjE,QAASA,EACTwE,QAAS,CAAC,CAAEgR,QAASsG,IAAa,CAAEtG,QAASuG,KAC7CvY,eAAgB,CAAEmB,iBAAkB7H,GAAQE,WAMtD2c,GAAO,WAAO,IACRpb,EAAWU,KAAXV,OACR,OACI,kBAACd,GAAA,EAAD,CAAMC,MAAO,CAAEjB,MAAO,OAAQ6F,kBAAmBxF,GAAQE,QACrD,kBAACS,GAAA,EAAD,CACIC,MAAO,CACHhB,OAAQ,EACRD,MAAO,OACPsI,UAAWjI,GAAQE,MACnBqE,aAAcvE,GAAQC,KACtB2E,gBAAiBnD,OAO/Bud,GAAY,WACd,OACI,kBAAC,GAAD,CAAUpe,MAAO,CAAEiD,WAAY,WAC3B,kBAAC,GAAD,CAAMjD,MAAO,CAAEkC,MAAO,UAAtB,eACA,kBAAC,KAAD,CACIuD,KAAM,qBACN5R,KAAM,gBACNqO,MAAO,QACPlC,MAAO,CAAE8C,WAAY1D,GAAQC,UAMvCgf,GAAc,WAChB,OACI,kBAAC,GAAD,CAAUre,MAAO,CAAEiD,WAAY,WAC3B,kBAAC,GAAD,CAAMjD,MAAO,CAAEkC,MAAO,UAAtB,kBACA,kBAAC,KAAD,CACIuD,KAAM,qBACN5R,KAAM,gBACNqO,MAAO,QACPlC,MAAO,CAAE8C,WAAY1D,GAAQC,UAMvCif,GAAgB,WAClB,OACI,kBAAC,GAAD,CAAQhX,aAAa,EAAMtH,MAAO,CAAE4D,QAASxE,GAAQE,MAAO+H,UAAWjI,GAAQE,QAC3E,kBAAC,GAAD,CAAQ1M,KAAM,wCAKpB2rB,GAAiB,WACnB,OACI,kBAAC,GAAD,CAAQjX,aAAa,EAAMtH,MAAO,CAAE4D,QAASxE,GAAQE,MAAO+H,UAAWjI,GAAQE,QAC3E,kBAAC,GAAD,CAAQ1M,KAAM,wCAKpB4rB,GAAY,SAAC,GAAwC,IAAtCjV,EAAqC,EAArCA,MACjB,IAAKA,EAAMoU,QAAUpU,EAAMqU,SAAWrU,EAAMwT,cAAgBxT,EAAM0T,cAAgBtqB,EAAa4W,EAAMhW,QACjG,OAAO,kBAAC,GAAD,CAAQ+T,aAAa,IAEhC,IACMmX,EADShsB,EAAa8W,EAAMhW,OAAQgW,EAAMoU,MAAM1sB,UAC1B2d,IAAIrF,EAAM0T,cAAc9mB,IAAIoT,EAAMwT,aACxD2B,EAAQD,EAAa7P,IAAI9d,SAAOO,UAAUC,KAAK,IAAI8E,IAAI,IAAID,IAAIoT,EAAM0T,cAC3E,OACI,kBAAC,GAAD,CAAQ3V,aAAa,GACjB,kBAAC,GAAD,CAAMyD,MAAO,gBAAiBnY,KAAMZ,EAAcysB,EAAclV,EAAMqU,OAAO3sB,YAC7E,kBAAC,GAAD,CAAM8Z,MAAO,eAAgBnY,KAAMZ,EAAc0sB,EAAO,GAAK,QAKnErE,GAAW,SAAC,GAAwC,IAAtC9Q,EAAqC,EAArCA,MAAqC,EAC3BpP,mBAAwB,IADG,WAC9CiO,EAD8C,KACvCkQ,EADuC,KAErDje,KAAe,kBAAMie,EAAS,MAAK,CAAC/O,EAAMuL,OAAQvL,EAAMhW,SACxD,IAAMN,EAAyB,UAAjBsW,EAAMuL,OAAqBvL,EAAMqU,OAASrU,EAAMoU,MAC9D,OAAKpU,EAAMuL,QAAW7hB,IAASN,EAAa4W,EAAMhW,QAE9C,kBAAC,GAAD,KACKd,EAAa8W,EAAMhW,OAAQN,EAAMhC,UAAUgZ,GAAGhX,EAAM7B,SACjD,kBAAC,GAAD,CAA2BF,OAAQ+B,EAAM/B,SACzCqY,EAAMvD,QACN,kBAAC,GAAD,MAEA,oCACI,kBAAC,GAAD,CACI/S,MAAOA,EACP8K,QAASjJ,EACTsR,UAAW,kBAAMmD,EAAM6T,iBAAgB,IACvClX,QAASoS,EACTjS,OAAyB,UAAjBkD,EAAMuL,QAAsBvL,EAAM4T,eAE5B,UAAjB5T,EAAMuL,OACH,kBAAC,GAAD,CAAevL,MAAOA,EAAOrD,QAASoS,IAEtC,kBAAC,GAAD,CAAa/O,MAAOA,EAAOrD,QAASoS,EAAUpX,UAAWqI,EAAM4T,gBAI1E/U,EAAMG,SAA0B,OAAfH,EAAME,MAAiB,kBAAC,GAAD,CAAcF,MAAOA,KAvBJ,kBAAC,GAAD,CAAQd,aAAa,KA4BrFqX,GAAc,SAAC,GAQd,IAPHpV,EAOE,EAPFA,MACArD,EAME,EANFA,QACAhF,EAKE,EALFA,SAMMoB,EAAUxE,uBAAY,oBAAA1J,EAAAC,OAAA,uDACxB6R,EAAQ,IADgB,oBAAA9R,EAAA,MAGdmV,EAAM0U,WAHQ,OAIpB1U,EAAMwL,YAJc,gDAMpB7O,EAAQ,EAAD,IANa,kEAQzB,IACH,OAAO,kBAAC,GAAD,CAAQR,KAAM,QAASpC,MAAO,QAAS0C,QAASuD,EAAMgU,SAAUjb,QAASA,EAASpB,SAAUA,KAGjG0d,GAAgB,SAAC,GAAuE,IAArErV,EAAoE,EAApEA,MAAOrD,EAA6D,EAA7DA,QACtB5D,EAAUxE,uBAAY,oBAAA1J,EAAAC,OAAA,uDACxB6R,EAAQ,IADgB,oBAAA9R,EAAA,MAGdmV,EAAM2U,WAHQ,OAIpB3U,EAAMwL,YAJc,gDAMpB7O,EAAQ,EAAD,IANa,kEAQzB,IACH,OAAO,kBAAC,GAAD,CAAQR,KAAM,QAASpC,MAAO,UAAW0C,QAASuD,EAAMkU,QAASnb,QAASA,KAGtEuc,GA1NO,WAClB,OACI,kBAAC,GAAD,KACI,kBAAC,GAAD,KACI,kBAAC,GAAD,KACI,kBAAC,GAAD,U,qkBCpBpB,IAiEeC,GAjEuB,WAClC,IAAMvV,EAAQkJ,KAD0B,EAE8C5W,qBAAWb,IAAzF/F,EAFgC,EAEhCA,SAAUnB,EAFsB,EAEtBA,OAAQmH,EAFc,EAEdA,mBAAoBG,EAFN,EAEMA,sBAAuBC,EAF7B,EAE6BA,aAF7B,EAGb0T,KAAnBG,EAHgC,EAGhCA,SAAUW,EAHsB,EAGtBA,KAHsB,EAIV1V,oBAAS,GAJC,WAIjC6L,EAJiC,KAIxBC,EAJwB,OAKd9L,qBALc,WAKjC2V,EALiC,KAK1BiP,EAL0B,OAMF5kB,oBAAS,GANP,WAMjC6kB,EANiC,KAMpBC,EANoB,OAOR9kB,oBAAS,GAPD,WAOjC+kB,EAPiC,KAOvBC,EAPuB,KASxCpiB,qBAAU,WACN,GAAIwM,EAAMmJ,YAAcnJ,EAAMqJ,UAAYrJ,EAAM8F,WAAY,CACxD,IAAM+P,EAAc,0BAAAhrB,EAAAC,OAAA,qDACZkV,EAAM4F,WAAa5F,EAAM6F,SAAW7F,EAAM8F,YAAcpa,GAD5C,qBAEN1B,EAASd,EAAa8W,EAAM8F,WAAY9F,EAAM4F,UAAUle,WAClD6B,SAHA,wBAIRisB,OAASrlB,GACTulB,GAAe,GALP,cAOJF,EAPI,WAAA3qB,EAAA,MAOW8a,EAAS3F,EAAM4F,UAAW5F,EAAM6F,QAAS7b,IAPpD,oFASJ0rB,GAAe,GATX,yBAWJhZ,GAAW,GAXP,qFAiBpBA,GAAW,GACXmZ,IACA,IAAMvrB,EAAO,eAAiB0V,EAAMmJ,WAAa,IAAMnJ,EAAMqJ,SAAW,IAAMrJ,EAAM8F,WAAa,IAGjG,OADApU,EAAmBpH,EAAMurB,GAClB,WACHhkB,EAAsBvH,OAG/B,CAAC0V,EAAMmJ,WAAYnJ,EAAMqJ,SAAUrJ,EAAM8F,aAE5C,IAAMgQ,EAASvhB,uBAAY,0BAAA1J,EAAAC,OAAA,qDACnBkV,EAAM4F,WAAa5F,EAAM6F,SAAW7F,EAAM8F,YAAcvb,GAAUgc,GAD/C,wBAEnBqP,GAAY,GAFO,oBAAA/qB,EAAA,MAIMyb,EAAKC,IAJX,YAIT1X,EAJS,2CAAAhE,EAAA,MAMLgE,EAAOjE,GAAGgS,QANL,0BAAA/R,EAAA,MAOLiH,KAPK,QAQXkO,EAAMoJ,cAAc,IART,yBAWfwM,GAAY,GAXG,oFAcxB,CAAC5V,EAAM4F,UAAW5F,EAAM6F,QAAS7F,EAAM8F,WAAYvb,EAAQgc,IAE9D,OAAO,SACAvG,GADP,IAEIvD,QAASA,GAAWuD,EAAMvD,QAC1B8J,QACAkP,cACAK,SACAH,cCjCFI,GAAO,WACT,IAAM/V,EAAQuV,KACd,OACI,oCACI,kBAAC,GAAD,CACIxb,MAAO,wCACP+C,QAAQ,EACRnV,OAAQqY,EAAMmJ,WACd6G,eAAgBhQ,EAAMoJ,cACtByG,aAAc,SAAAnmB,GAAK,OAAIA,EAAM7B,UAAY6B,EAAM7B,QAAQ0B,YAE3D,kBAAC,GAAD,CACIwQ,MAAO,uCACP+C,OAA6B,KAArBkD,EAAMmJ,WACdxhB,OAAQqY,EAAMqJ,SACd2G,eAAgBhQ,EAAMsJ,YACtBuG,aAAc,SAAAnmB,GAAK,OAAIA,EAAM/B,SAAWqY,EAAMmJ,cAElD,kBAAC,GAAD,CACIpP,MAAO,gBAAkBiG,EAAMmJ,YAAc,UAAY,wBACzDzf,MAAOsW,EAAM4F,UACb9I,QAASkD,EAAM4F,UACf5b,OAAQgW,EAAM8F,WACd9C,gBAAiBhD,EAAMuJ,gBAE3B,kBAAC,GAAD,CAAWvJ,MAAOA,IAClB,kBAAC,GAAD,CAAUA,MAAOA,MAKvBgW,GAAY,SAAC,GAAqC,IAAnChW,EAAkC,EAAlCA,MACjB,OACK5W,EAAa4W,EAAM8F,cACG,QAArB9F,EAAMmJ,YAA2C,SAAnBnJ,EAAMqJ,UACZ,SAArBrJ,EAAMmJ,YAA4C,QAAnBnJ,EAAMqJ,UAEnC,kBAAC,GAAD,CAAUrJ,MAAOA,IAEH,KAArBA,EAAMmJ,YAAwC,KAAnBnJ,EAAMqJ,UAAmBjgB,EAAa4W,EAAM8F,YAChE,kBAAC,GAAD,CAAQ/H,aAAa,IAEzB,kBAAC,GAAD,CAAUiC,MAAOA,KAGtBiW,GAAW,SAAC,GAAqC,IAAnCjW,EAAkC,EAAlCA,MAChB,OACI,kBAAC,GAAD,CAAQjC,aAAa,GACjB,kBAAC,GAAD,MACA,kBAAC,GAAD,CAAMtH,MAAO,CAAE+B,SAAU,GAAI0I,UAAW,WACnClB,EAAM8F,WADX,IACwB9F,EAAMqJ,YAMpC6M,GAAW,SAAC,GAAqC,IAAD,YAAlClW,EAAkC,EAAlCA,MACRiJ,EAAiBzD,KAAjByD,aACFjf,EAAM,SAAGgW,EAAMuG,QAAT,SAAG,EAAa4P,mBAAhB,EAAG,EAA2BvF,cAAc,GAClDD,EAAK,SAAG3Q,EAAMuG,QAAT,SAAG,EAAa6P,qBAAhB,EAAG,EAA6BxF,cAAc,GACnDyF,EAAM,SAAGrW,EAAMuG,QAAT,SAAG,EAAa+P,kBAAhB,EAAG,EAA0B1F,cAAc,GACjD/N,EAAM7C,EAAM4F,UACZnd,EACIwgB,EAAa/f,EAAa8W,EAAM8F,WAAY9F,EAAM4F,UAAUle,WAC5DsY,EAAM4F,UAAUle,SAChB,GAEJ,GACN,OACI,kBAAC,GAAD,CAAQqW,aAAa,GACjB,kBAAC,GAAD,MACA,kBAAC,GAAD,CAAMtH,MAAO,CAAE+B,SAAU,GAAI0I,UAAW,SAAU9G,aAAcvE,GAAQG,SACnEhM,GAAU,SADf,IACqBgW,EAAMqJ,UAE3B,kBAAC,GAAD,CAAM7H,MAAO,QAASnY,KAAMsnB,EAAQA,EAAQ,IAAM3Q,EAAMqJ,SAAW,SAAWrJ,EAAMmJ,WAAa,WACjG,kBAAC,GAAD,CAAM3H,MAAO,eAAgBnY,KAAMgtB,EAASA,EAAS,IAAM,WAC3D,kBAAC,GAAD,CAAM7U,MAAO,cAAenY,KAAMwZ,EAAMA,EAAM,IAAM7C,EAAMmJ,WAAa,aAK7EsI,GAAY,WAAO,IACb/Z,EAAcM,KAAdN,UACR,OAAO,kBAAC,KAAD,CAAMwE,KAAM,qBAAsB5R,KAAM,aAAcqO,MAAOjB,EAAWjB,MAAO,CAAE6C,OAAQzD,GAAQC,SAItGgb,GAAW,SAAC,GAAqC,IAAnC9Q,EAAkC,EAAlCA,MAAkC,EACxBpP,mBAAwB,IADA,WAC3CiO,EAD2C,KACpCkQ,EADoC,KAGlD,GADAje,KAAe,kBAAMie,EAAS,MAAK,CAAC/O,EAAMmJ,WAAYnJ,EAAMqJ,SAAUrJ,EAAM8F,aACrD,KAAnB9F,EAAMqJ,UAAmBjgB,EAAa4W,EAAM8F,cAAgB9F,EAAM4F,UAClE,OAAO,kBAAC,GAAD,CAAQ7H,aAAa,IAEhC,IAAMiR,EAAuC,QAArBhP,EAAMmJ,aAAyBnJ,EAAMyJ,iBAC7D,OACI,kBAAC,GAAD,KACKvgB,EAAa8W,EAAM8F,WAAY9F,EAAM4F,UAAUle,UAAUgZ,GAAGV,EAAM4F,UAAU/d,SACzE,kBAAC,GAAD,CAA2BF,OAAQqY,EAAMmJ,aACpB,SAArBnJ,EAAMmJ,YAA4C,QAAnBnJ,EAAMqJ,SACrC,kBAAC,GAAD,CAAcrJ,MAAOA,EAAOrD,QAASoS,IAChB,QAArB/O,EAAMmJ,YAA2C,SAAnBnJ,EAAMqJ,SACpC,kBAAC,GAAD,CAAYrJ,MAAOA,EAAOrD,QAASoS,IACnC/O,EAAMyV,YACN,kBAAC,GAAD,CAAmBzV,MAAOA,IAC1BA,EAAMvD,UAAYuD,EAAMuG,MACxB,kBAAC,GAAD,MAEA,oCACI,kBAAC,GAAD,CACI7c,MAAOsW,EAAM4F,UACbpR,QAASnJ,EACTwR,UAAW,kBAAMmD,EAAM0J,qBAAoB,IAC3C/M,QAASoS,EACTjS,QAASkS,IAEb,kBAAC,GAAD,CAAYhP,MAAOA,EAAOrD,QAASoS,EAAUpX,SAAUqX,KAG9DnQ,EAAMG,SAA0B,OAAfH,EAAME,MAAiB,kBAAC,GAAD,CAAcF,MAAOA,MAKpE0X,GAAa,SAAC,GAAiG,IAA/FvW,EAA8F,EAA9FA,MAAOrD,EAAuF,EAAvFA,QAAShF,EAA8E,EAA9EA,SAC5BoB,EAAUxE,uBAAY,WACxBoI,EAAQ,IACRqD,EAAM8V,SAAS1G,MAAMzS,KACtB,CAACqD,EAAM8V,OAAQnZ,IAClB,OACI,kBAAC,GAAD,CACIR,KAAM,QACNpC,MAAO,QAAUiG,EAAMmJ,WAAa,IAAMnJ,EAAMqJ,SAChD1R,SAAUA,EACV8E,QAASuD,EAAM2V,SACf5c,QAASA,KAKfyd,GAAa,SAAC,GAAoE,IAAlExW,EAAiE,EAAjEA,MAAOrD,EAA0D,EAA1DA,QACnB5D,EAAUxE,uBAAY,oBAAA1J,EAAAC,OAAA,gDACxB6R,EAAQ,IACRqD,EAAMqK,SAAS+E,MAAMzS,GAFG,8DAGzB,IACH,OAAO,kBAAC,GAAD,CAAQR,KAAM,QAASpC,MAAO,OAAQ0C,QAASuD,EAAM6J,SAAU9Q,QAASA,KAG7E0d,GAAe,SAAC,GAAoE,IAAlEzW,EAAiE,EAAjEA,MAAOrD,EAA0D,EAA1DA,QACrB5D,EAAUxE,uBAAY,oBAAA1J,EAAAC,OAAA,gDACxB6R,EAAQ,IACRqD,EAAMsK,WAAW8E,MAAMzS,GAFC,8DAGzB,IACH,OAAO,kBAAC,GAAD,CAAQR,KAAM,QAASpC,MAAO,SAAU0C,QAASuD,EAAM+J,WAAYhR,QAASA,KAGxE2d,GA5KI,WACf,OACI,kBAAC,GAAD,KACI,kBAAC,GAAD,KACI,kBAAC,GAAD,KACI,kBAAC,GAAD,CAAQjgB,MAAO,CAAEiD,WAAY,WACzB,kBAAC,GAAD,CAAMmU,IAAI,EAAMpX,MAAO,CAAEyK,UAAW,SAAU9G,aAAcvE,GAAQG,SAApE,6BAIJ,kBAAC,GAAD,U,qkBClBb,IAAM2gB,GAAU,WAAO,IAClB3mB,EAASsC,qBAAWzC,IAApBG,KAER,OADAc,IAAed,EAAM,IACE,QAAhB2F,KAASC,GAAe,kBAAC,GAAD,MAAiB,kBAAC,GAAD,OAG9CghB,GAAa,WACf,OACI,kBAAC,KAAD,KACI,kBAACpgB,GAAA,EAAD,CAAMC,MAAO,CAAEyE,KAAM,IACjB,kBAAC,KAAD,KACI,kBAAC,KAAD,CAAOlB,KAAM,cACT,kBAAC,GAAD,OAEJ,kBAAC,KAAD,CAAOA,KAAM,YACT,kBAAC,GAAD,OAEJ,kBAAC,KAAD,CAAOA,KAAM,YACT,kBAAC,GAAD,OAEJ,kBAAC,KAAD,CAAOA,KAAM,YACT,kBAAC,GAAD,OAEJ,kBAAC,KAAD,CAAOA,KAAM,KACT,kBAAC,GAAD,QAGR,kBAAC,GAAD,MACA,kBAAC,GAAD,MACA,kBAAC,GAAD,SAMV6c,GAAMC,eAENC,GAAa,WAAO,IACd3mB,EAAakC,qBAAWzC,IAAxBO,SADa,EAEkD4H,KAA/DlB,EAFa,EAEbA,QAASC,EAFI,EAEJA,UAAWK,EAFP,EAEOA,WAAYE,EAFnB,EAEmBA,OAAQE,EAF3B,EAE2BA,SAAUG,EAFrC,EAEqCA,SACpDqf,EAAY,SACXC,MADW,IAEdlf,KAAM3H,EACN8mB,OAAQ,CACJpgB,UACAM,aACAE,SACA6f,KAAM/f,EACNggB,aAAchgB,EACd/N,KAAMmO,KAGd,OACI,kBAAC6f,GAAA,EAAD,CAAqBL,MAAOA,GACxB,kBAACH,GAAIS,UAAL,CACIC,cAAe,CACXC,gBAAiBpnB,EAAW2G,EAAYD,EACxC2gB,kBAAmB9f,EACnB6K,WAAY,CAAEpI,aAAc,KAEhC,kBAACyc,GAAIvJ,OAAL,CAAYhjB,KAAK,OAAOotB,UAAWhB,GAAYiB,QAASC,GAAW,UACnE,kBAACf,GAAIvJ,OAAL,CAAYhjB,KAAK,YAAYotB,UAAW/E,GAAiBgF,QAASC,GAAW,WAC7E,kBAACf,GAAIvJ,OAAL,CAAYhjB,KAAK,UAAUotB,UAAWhI,GAAeiI,QAASC,GAAW,aAMnFA,GAAa,SAAAC,GAAQ,MAAK,CAC5BC,WAAY,gBAAGnf,EAAH,EAAGA,MAAH,OAAe,kBAAC,KAAD,CAAMuD,KAAM,qBAAsB5R,KAAMutB,EAAUlf,MAAOA,OCtDzEof,IAjBH,WAAO,IAAD,EACQC,YAAS,CAC3Bje,MAAOke,IACP9gB,MAAO+gB,IACPC,QAASC,IACTC,KAAMC,MAEV,OAPc,YAWV,kBAAC,GAAD,KACI,kBAAC,GAAD,OAJG,kBAAC5K,EAAA,EAAD,Q,+DCvBX,kBAAmB6K,WACrBxlB,OAAOylB,iBAAiB,QAAQ,WAC9BD,UAAUE,cACPC,SAAS,0BAA2B,CAAEC,MAAO,MAC7CC,MAAK,SAAUC,OAGfzJ,OAAM,SAAUvQ,GACfia,QAAQD,KAAK,oCAAqCha,U,qBCV1Dka,cAAOC,OAAS/pB,EAAQ,KAAU+pB,S,8kICAlC7xB,EAAOC,QAAU,IAA0B,kD,oBCA3CD,EAAOC,QAAU,IAA0B,6C,oBCA3CD,EAAOC,QAAU,IAA0B,2C,oBCA3CD,EAAOC,QAAU,IAA0B,sC,oBCA3CD,EAAOC,QAAU,IAA0B,wC","file":"static/js/app.f318336b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/empty-token.e8aa64c5.png\";","import { ethers } from \"ethers\";\nimport Token from \"../types/Token\";\n\nexport const ETH: Token = {\n    address: ethers.constants.AddressZero,\n    decimals: 18,\n    symbol: \"ETH\",\n    logoURI: \"https://sushiswap.levx.io/images/tokens/ETH.png\",\n    balance: ethers.BigNumber.from(0)\n};\n","import ERC20 from \"@sushiswap/core/build/contracts/ERC20.json\";\nimport IUniswapV2Factory from \"@sushiswap/core/build/contracts/IUniswapV2Factory.json\";\nimport IUniswapV2Pair from \"@sushiswap/core/build/contracts/IUniswapV2Pair.json\";\nimport IUniswapV2Router02 from \"@sushiswap/core/build/contracts/IUniswapV2Router02.json\";\nimport IWETH from \"@sushiswap/core/build/contracts/IWETH.json\";\nimport MasterChef from \"@sushiswap/core/build/contracts/MasterChef.json\";\nimport Migrator2 from \"@sushiswap/core/build/contracts/Migrator2.json\";\nimport SushiBar from \"@sushiswap/core/build/contracts/SushiBar.json\";\nimport { ChainId, CurrencyAmount, Token as SDKToken, TokenAmount, WETH } from \"@sushiswap/sdk\";\nimport { ethers } from \"ethers\";\nimport Token from \"../types/Token\";\n\nconst CONTRACTS = {\n    ERC20,\n    IUniswapV2Factory,\n    IUniswapV2Pair,\n    IUniswapV2Router02,\n    IWETH,\n    MasterChef,\n    Migrator2,\n    SushiBar\n};\n\nexport const formatBalance = (value: ethers.BigNumberish, decimals = 18, maxFraction = 0) => {\n    const formatted = ethers.utils.formatUnits(value, decimals);\n    if (maxFraction > 0) {\n        const split = formatted.split(\".\");\n        if (split.length > 1) {\n            return split[0] + \".\" + split[1].substr(0, maxFraction);\n        }\n    }\n    return formatted;\n};\n\nexport const parseBalance = (value: string, decimals = 18) => {\n    return ethers.utils.parseUnits(value || \"0\", decimals);\n};\n\nexport const isEmptyValue = (text: string) =>\n    ethers.BigNumber.isBigNumber(text)\n        ? ethers.BigNumber.from(text).isZero()\n        : text === \"\" || text.replace(/0/g, \"\").replace(/\\./, \"\") === \"\";\n\nexport const convertToken = (token: Token) => {\n    return token.symbol === \"ETH\" ? WETH[\"1\"] : new SDKToken(ChainId.MAINNET, token.address, token.decimals);\n};\n\nexport const convertAmount = (token: Token, amount: string) => {\n    return new TokenAmount(convertToken(token), parseBalance(amount, token.decimals).toString());\n};\n\nexport const parseCurrencyAmount = (value: CurrencyAmount, decimals = 18) => {\n    return ethers.BigNumber.from(parseBalance(value.toExact(), decimals));\n};\n\nexport const getContract = (name: string, address: string, signer: ethers.Signer) => {\n    const contract = CONTRACTS[name];\n    return ethers.ContractFactory.getContract(address, contract.abi, signer);\n};\n","import * as Analytics from \"expo-firebase-analytics\";\n\nimport { ethers } from \"ethers\";\n\nexport const logTransaction = async (\n    tx: ethers.providers.TransactionResponse,\n    name: string,\n    ...args: any[]\n): Promise<ethers.providers.TransactionResponse> => {\n    await Analytics.logEvent(\"tx:\" + name, {\n        args: args || [],\n        hash: tx.hash,\n        value: tx.value.toString(),\n        gasLimit: tx.gasLimit.toString(),\n        gasPrice: tx.gasPrice.toString(),\n        chainId: tx.chainId\n    });\n    return tx;\n};\n","// export const UNISWAP_ROUTER = \"0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\";\nexport const SUSHISWAP_ROUTER = \"0xd9e1ce17f2641f24ae83637ab66a2cca9c378b9f\";\nexport const ROUTER = SUSHISWAP_ROUTER;\nexport const MASTER_CHEF = \"0xc2edad668740f1aa35e4d8f227fb8e17dca888cd\";\nexport const SUSHI_BAR = \"0x8798249c2e607446efb7ad49ec89dd1865ff4272\";\nexport const SUSHI_ROLL = \"0x94CfE11E6b57f6f84bBa2c6DfB0fAeA47C4741D6\";\nexport const LP_TOKEN_SCANNER = \"0xD132Ce8eA8865348Ac25E416d95ab1Ba84D216AF\";\nexport const MIGRATOR2 = \"0x60A02cD1e3443E8ab7825DccF8d7080Eb78BCA6F\";\n","import { FACTORY_ADDRESS as SUSHISWAP_FACTORY } from \"@sushiswap/sdk\";\nimport { FACTORY_ADDRESS as UNISWAP_FACTORY } from \"@uniswap/sdk\";\nimport { ethers } from \"ethers\";\nimport { LP_TOKEN_SCANNER, MASTER_CHEF } from \"../constants/contracts\";\nimport { ETH } from \"../constants/tokens\";\nimport LPToken from \"../types/LPToken\";\nimport Token from \"../types/Token\";\nimport { getContract } from \"./index\";\n\nexport const fetchTokens = async (provider?: ethers.providers.JsonRpcProvider, signer?: ethers.Signer) => {\n    if (provider && signer) {\n        const response = await fetch(\"https://sushiswap.levx.io/tokens.json\");\n        const json = await response.json();\n\n        const account = await signer.getAddress();\n        const balances = await provider.send(\"alchemy_getTokenBalances\", [\n            account,\n            json.tokens.map(token => token.address)\n        ]);\n        return [\n            {\n                ...ETH,\n                balance: await provider.getBalance(account)\n            },\n            ...json.tokens.map((token, i) => ({\n                ...token,\n                balance: ethers.BigNumber.from(balances.tokenBalances[i].tokenBalance || 0)\n            }))\n        ].sort((t1, t2) => {\n            return t2.balance\n                .sub(t1.balance)\n                .div(ethers.BigNumber.from(10).pow(10))\n                .toNumber();\n        });\n    }\n};\n\nexport const fetchPools = async (provider?: ethers.providers.JsonRpcProvider, signer?: ethers.Signer) => {\n    if (provider && signer) {\n        const response = await fetch(\"https://sushiswap.levx.io/pools.json\");\n        const pools = await response.json();\n        const address = await signer.getAddress();\n        const balances = await provider.send(\"alchemy_getTokenBalances\", [address, pools.map(pool => pool.address)]);\n        return (await Promise.all(\n            pools.map(async (pool, i) => {\n                const poolToken = getContract(\"ERC20\", pool.address, signer);\n                const totalDeposited = await poolToken.balanceOf(MASTER_CHEF);\n                const masterChef = getContract(\"MasterChef\", MASTER_CHEF, signer);\n                const { amount: amountDeposited } = await masterChef.userInfo(i, address);\n                const pendingSushi = await masterChef.pendingSushi(i, address);\n                return {\n                    ...pool,\n                    id: i,\n                    symbol: pool.tokenA.symbol + \"-\" + pool.tokenB.symbol + \" LP\",\n                    balance: ethers.BigNumber.from(balances.tokenBalances[i].tokenBalance || 0),\n                    totalDeposited,\n                    amountDeposited,\n                    pendingSushi\n                };\n            })\n        )) as LPToken[];\n    }\n};\n\nexport const fetchMyLPTokens = async (\n    tokens: Token[],\n    provider?: ethers.providers.JsonRpcProvider,\n    signer?: ethers.Signer\n) => {\n    if (provider && signer) {\n        const factory = getContract(\"IUniswapV2Factory\", SUSHISWAP_FACTORY, signer);\n        const length = await factory.allPairsLength();\n        const pairs = await Promise.all(\n            Array.from({ length }).map((_, i) => {\n                return factory.allPairs(i);\n            })\n        );\n        const balances = await provider.send(\"alchemy_getTokenBalances\", [await signer.getAddress(), pairs]);\n        const result = await Promise.all(\n            pairs.map(async (address, i) => {\n                const balance = ethers.BigNumber.from(balances.tokenBalances[i].tokenBalance);\n                if (balance.isZero()) {\n                    return null;\n                }\n                const pair = getContract(\"IUniswapV2Pair\", address, signer);\n                const erc20 = getContract(\"ERC20\", address, signer);\n                const decimals = Number(await erc20.decimals());\n                const totalSupply = await erc20.totalSupply();\n                const tokenA = await findOrGetToken(await pair.token0(), tokens, provider);\n                const tokenB = await findOrGetToken(await pair.token1(), tokens, provider);\n                return { address, decimals, balance, totalSupply, tokenA, tokenB } as LPToken;\n            })\n        );\n        return result.filter(token => !!token) as LPToken[];\n    }\n};\n\nexport const fetchMyUniswapLPTokens = async (\n    tokens: Token[],\n    provider?: ethers.providers.JsonRpcProvider,\n    signer?: ethers.Signer\n) => {\n    if (provider && signer && tokens) {\n        const factory = getContract(\"IUniswapV2Factory\", UNISWAP_FACTORY, signer);\n        const length = await factory.allPairsLength();\n        const abi = require(\"../constants/abi/LPTokenScanner.json\");\n        const scanner = ethers.ContractFactory.getContract(LP_TOKEN_SCANNER, abi, signer);\n        const account = await signer.getAddress();\n        let pairs: any[] = [];\n        for (let i = 0; i < length; i += 5000) {\n            pairs = pairs.concat(\n                await scanner.findPairs(account, UNISWAP_FACTORY, i, Math.min(i + 5000, length.toNumber()))\n            );\n        }\n        const balances = await provider.send(\"alchemy_getTokenBalances\", [account, pairs.map(pair => pair.token)]);\n        const result = await Promise.all(\n            pairs.map(async (pair, i) => {\n                const balance = ethers.BigNumber.from(balances.tokenBalances[i].tokenBalance);\n                const erc20 = getContract(\"ERC20\", pair.token, signer);\n                const decimals = Number(await erc20.decimals());\n                const totalSupply = await erc20.totalSupply();\n                const tokenA = await findOrGetToken(await pair.token0, tokens, provider);\n                const tokenB = await findOrGetToken(await pair.token1, tokens, provider);\n                return { address: pair.token, decimals, balance, totalSupply, tokenA, tokenB } as LPToken;\n            })\n        );\n        return result.filter(token => !!token) as LPToken[];\n    }\n};\n\nconst findOrGetToken = async (address: string, tokens: Token[], provider: ethers.providers.JsonRpcProvider) => {\n    const token = tokens.find(t => t.address.toLowerCase() === address.toLowerCase());\n    if (token) {\n        return token;\n    }\n    const meta = await provider.send(\"alchemy_getTokenMetadata\", [address]);\n    return {\n        address,\n        symbol: meta.symbol,\n        decimals: meta.decimals,\n        logoURI: meta.logo,\n        balance: ethers.constants.Zero\n    } as Token;\n};\n","import React, { useState } from \"react\";\nimport { useColorScheme } from \"react-native-appearance\";\n\nimport { DeviceType, getDeviceTypeAsync } from \"expo-device\";\n\nimport AsyncStorage from \"@react-native-community/async-storage\";\nimport useAsyncEffect from \"use-async-effect\";\n\nexport const GlobalContext = React.createContext({\n    load: async () => {},\n    clear: async () => {},\n    deviceType: undefined as DeviceType | undefined,\n    darkMode: false as boolean,\n    setDarkMode: async darkMode => {},\n    mnemonic: \"\",\n    setMnemonic: (mnemonic: string) => {}\n});\n\n// tslint:disable-next-line:max-func-body-length\nexport const GlobalContextProvider = ({ children }) => {\n    const colorScheme = useColorScheme();\n    const [deviceType, setDeviceType] = useState<DeviceType>();\n    const [darkMode, setDarkMode] = useState(colorScheme === \"dark\");\n    const [mnemonic, setMnemonic] = useState(\"\");\n    useAsyncEffect(async () => {\n        setDeviceType(await getDeviceTypeAsync());\n    }, []);\n    return (\n        <GlobalContext.Provider\n            value={{\n                load: async () => {\n                    const mode = await AsyncStorage.getItem(\"dark_mode\");\n                    setDarkMode(mode === \"true\");\n                    const mne = await AsyncStorage.getItem(\"mnemonic\");\n                    if (mne) {\n                        setMnemonic(mne);\n                    }\n                },\n                clear: async () => {\n                    setDarkMode(false);\n                    await AsyncStorage.removeItem(\"dark_mode\");\n                    await AsyncStorage.removeItem(\"mnemonic\");\n                },\n                deviceType,\n                darkMode,\n                setDarkMode: async (mode: boolean) => {\n                    await AsyncStorage.setItem(\"dark_mode\", String(mode));\n                    setDarkMode(mode);\n                },\n                mnemonic,\n                setMnemonic: async (mne: string) => {\n                    await AsyncStorage.setItem(\"mnemonic\", mne);\n                    setMnemonic(mne);\n                }\n            }}>\n            {children}\n        </GlobalContext.Provider>\n    );\n};\n\nexport const GlobalContextConsumer = GlobalContext.Consumer;\n","import React, { useCallback, useContext, useEffect, useState } from \"react\";\n\nimport Constants from \"expo-constants\";\nimport * as Analytics from \"expo-firebase-analytics\";\n\nimport { EventType, Listener } from \"@ethersproject/abstract-provider\";\nimport { ethers } from \"ethers\";\nimport useAsyncEffect from \"use-async-effect\";\nimport { ETH } from \"../constants/tokens\";\nimport Token from \"../types/Token\";\nimport { getContract } from \"../utils\";\nimport { logTransaction } from \"../utils/analytics-utils\";\nimport { fetchTokens } from \"../utils/fetch-utils\";\nimport { GlobalContext } from \"./GlobalContext\";\n\nexport type OnBlockListener = (block: number) => Promise<void>;\n\nexport const EthersContext = React.createContext({\n    provider: undefined as ethers.providers.JsonRpcProvider | undefined,\n    signer: undefined as ethers.Signer | undefined,\n    chainId: 0,\n    address: null as string | null,\n    addOnBlockListener: (_name: string, _listener: OnBlockListener) => {},\n    removeOnBlockListener: (_name: string) => {},\n    tokens: [ETH] as Token[],\n    updateTokens: async () => {},\n    loadingTokens: false,\n    approveToken: async (_token: string, _spender: string, _amount?: ethers.BigNumber) => {\n        return {} as ethers.providers.TransactionResponse | undefined;\n    },\n    getTokenAllowance: async (_token: string, _spender: string) => {\n        return ethers.constants.Zero as ethers.BigNumber | undefined;\n    }\n});\n\n// tslint:disable-next-line:max-func-body-length\nexport const EthersContextProvider = ({ children }) => {\n    const { mnemonic } = useContext(GlobalContext);\n    const [provider, setProvider] = useState<ethers.providers.JsonRpcProvider>();\n    const [signer, setSigner] = useState<ethers.Signer>();\n    const [chainId, setChainId] = useState<number>(1);\n    const [address, setAddress] = useState<string | null>(ethers.constants.AddressZero);\n    const [onBlockListeners, setOnBlockListeners] = useState<{ [name: string]: OnBlockListener }>({});\n    const [tokens, setTokens] = useState<Token[]>([]);\n    const [loadingTokens, setLoadingTokens] = useState(true);\n\n    useAsyncEffect(async () => {\n        if (window.ethereum) {\n            const web3 = new ethers.providers.Web3Provider(window.ethereum);\n            const alchemy = new ethers.providers.AlchemyProvider(web3.network, \"yLD5iJzUEo_Kvlg_PwMXl7N9ESK2_b6E\");\n            setProvider(alchemy);\n            setSigner(await web3.getSigner());\n        }\n    }, [window.ethereum]);\n\n    useEffect(() => {\n        if (window.ethereum) {\n            const onAccountsChanged = () => {\n                setAddress(window.ethereum.selectedAddress);\n                if (window.ethereum.chainId && window.ethereum.selectedAddress) {\n                    Analytics.setUserId(Number(window.ethereum.chainId) + \":\" + window.ethereum.selectedAddress);\n                }\n            };\n            const onChainChanged = () => {\n                setChainId(Number(window.ethereum.chainId));\n            };\n            onAccountsChanged();\n            onChainChanged();\n            window.ethereum.on(\"accountsChanged\", onAccountsChanged);\n            window.ethereum.on(\"chainChanged\", onChainChanged);\n            return () => {\n                window.ethereum.off(\"accountsChanged\", onAccountsChanged);\n                window.ethereum.off(\"chainChanged\", onAccountsChanged);\n            };\n        }\n    }, [window.ethereum, signer]);\n\n    useEffect(() => {\n        if (mnemonic) {\n            const alchemy = new ethers.providers.AlchemyProvider(1, Constants.manifest.extra.alchemyApiKey);\n            setProvider(alchemy);\n            const wallet = ethers.Wallet.fromMnemonic(mnemonic).connect(alchemy);\n            setSigner(wallet);\n        }\n    }, [mnemonic]);\n\n    const updateTokens = async () => {\n        try {\n            const data = await fetchTokens(provider, signer);\n            if (data) {\n                await setTokens(data);\n            }\n        } finally {\n            setLoadingTokens(false);\n        }\n    };\n\n    useAsyncEffect(async () => {\n        if (provider && signer) {\n            setLoadingTokens(true);\n            await updateTokens();\n        }\n    }, [provider, signer, address]);\n\n    const approveToken = useCallback(\n        async (token: string, spender: string, amount?: ethers.BigNumber) => {\n            if (signer) {\n                amount = amount || ethers.constants.MaxUint256;\n                const erc20 = getContract(\"ERC20\", token, signer);\n                const gasLimit = await erc20.estimateGas.approve(spender, amount);\n                const tx = await erc20.approve(spender, amount, {\n                    gasLimit\n                });\n                return await logTransaction(tx, \"ERC20.approve()\", spender, amount.toString());\n            }\n        },\n        [signer]\n    );\n\n    const getTokenAllowance = useCallback(\n        async (token: string, spender: string) => {\n            if (provider && signer) {\n                return await provider.send(\"alchemy_getTokenAllowance\", [\n                    {\n                        contract: token,\n                        owner: await signer.getAddress(),\n                        spender\n                    }\n                ]);\n            }\n        },\n        [provider, signer]\n    );\n\n    const addOnBlockListener = useCallback(\n        (name, listener) => {\n            setOnBlockListeners(old => ({ ...old, [name]: listener }));\n        },\n        [setOnBlockListeners]\n    );\n\n    const removeOnBlockListener = useCallback(\n        name => {\n            setOnBlockListeners(old => {\n                delete old[name];\n                return old;\n            });\n        },\n        [setOnBlockListeners]\n    );\n\n    useEffect(() => {\n        if (provider && signer && chainId === 1) {\n            const onBlock = async (block: number) => {\n                for (const listener of Object.entries(onBlockListeners)) {\n                    await listener[1]?.(block);\n                }\n            };\n            provider.on(\"block\", onBlock);\n            return () => {\n                provider.off(\"block\", onBlock);\n            };\n        }\n    }, [provider, signer, chainId, onBlockListeners]);\n\n    return (\n        <EthersContext.Provider\n            value={{\n                provider,\n                signer,\n                chainId,\n                address,\n                tokens,\n                updateTokens,\n                loadingTokens,\n                approveToken,\n                getTokenAllowance,\n                addOnBlockListener,\n                removeOnBlockListener\n            }}>\n            {children}\n        </EthersContext.Provider>\n    );\n};\n\ninterface JsonRPCRequest {\n    jsonrpc: string;\n    method: string;\n    params: any[];\n    id: number;\n}\n\ninterface JsonRPCResponse {\n    jsonrpc: string;\n    id: number;\n    result?: any;\n    error?: string;\n}\n\ninterface Callback<ResultType> {\n    (error: Error): void;\n    (error: null, val: ResultType): void;\n}\n\ndeclare global {\n    interface Window {\n        ethereum: {\n            enable(): void;\n            send(payload: any, callback: any): any;\n            send(payload: JsonRPCRequest, callback: Callback<JsonRPCResponse>): any;\n            selectedAddress: string;\n            chainId: string;\n            on(eventName: EventType, listener: Listener);\n            off(eventName: EventType, listener: Listener);\n        };\n    }\n}\n\nexport const EthersContextConsumer = EthersContext.Consumer;\n","import React from \"react\";\n\nimport { EthersContextConsumer, EthersContextProvider } from \"./EthersContext\";\nimport { GlobalContextConsumer, GlobalContextProvider } from \"./GlobalContext\";\n\nexport const ContextProvider = ({ children }) => {\n    return (\n        <GlobalContextProvider>\n            <EthersContextProvider>{children}</EthersContextProvider>\n        </GlobalContextProvider>\n    );\n};\n\nexport const ContextConsumer = ({ children }) => {\n    return (\n        <GlobalContextConsumer>\n            {globalContext => (\n                <EthersContextConsumer>\n                    {ethersContext =>\n                        children({\n                            ...globalContext,\n                            ...ethersContext\n                        })\n                    }\n                </EthersContextConsumer>\n            )}\n        </GlobalContextConsumer>\n    );\n};\n","import { Dimensions, Platform } from \"react-native\";\n\nexport const SCREEN_WIDTH = Math.round(Dimensions.get(\"window\").width);\nexport const SCREEN_HEIGHT = Math.round(Dimensions.get(\"window\").height);\nexport const IS_HIGH_RESOLUTION = SCREEN_HEIGHT > 667;\nexport const HEADER_HEIGHT = Platform.OS === \"web\" ? 96 : 64;\n\nexport const Spacing = IS_HIGH_RESOLUTION\n    ? {\n          tiny: 8,\n          small: 16,\n          normal: 32,\n          large: 48,\n          huge: 64,\n          content: 40\n      }\n    : {\n          tiny: 6,\n          small: 12,\n          normal: 24,\n          large: 32,\n          huge: 48,\n          content: 30\n      };\n","import React, { FunctionComponent } from \"react\";\nimport { View, ViewProps } from \"react-native\";\n\ninterface FlexViewProps extends ViewProps {\n    direction?: \"row\" | \"column\";\n}\n\nconst FlexView: FunctionComponent<FlexViewProps> = props => {\n    const flexDirection = props.direction || \"row\";\n    return <View {...props} style={[{ flexDirection }, props.style]} />;\n};\nexport default FlexView;\n","export const Colors = {\n    common: {\n        white: \"#ffffff\",\n        transparent: \"#ffffff00\",\n        primary: \"#291C64\",\n        secondary: \"#9BECEE\",\n        green: \"#32CD32\",\n        twitter: \"#1da1f2\",\n        facebook: \"#3B5998\"\n    },\n    light: {\n        background: \"#ffffff\",\n        backgroundHovered: \"#f0f0f0\",\n        border: \"#e5e5e5\",\n        borderDark: \"#cccccc\",\n        textDark: \"#000000\",\n        textMedium: \"#121212\",\n        textLight: \"#888888\",\n        disabled: \"#b4b4b4\",\n        shadow: \"#444444\",\n        placeholder: \"#d8d8d8\",\n        underlay: \"#b4b4b4\"\n    },\n    dark: {\n        background: \"#121212\",\n        backgroundHovered: \"#202020\",\n        border: \"#ffffff33\",\n        borderDark: \"#666666\",\n        textDark: \"#ffffff\",\n        textMedium: \"#ededed\",\n        textLight: \"#aaaaaa\",\n        disabled: \"#aaaaaa80\",\n        shadow: \"#03080c\",\n        placeholder: \"#666666\",\n        underlay: \"#aaaaaa80\"\n    }\n};\n","import { useContext } from \"react\";\n\nimport { Colors } from \"../constants/colors\";\nimport { GlobalContext } from \"../context/GlobalContext\";\n\nconst useColors = () => {\n    const { darkMode } = useContext(GlobalContext);\n    return {\n        ...Colors[darkMode ? \"dark\" : \"light\"],\n        ...Colors.common\n    };\n};\n\nexport default useColors;\n","import React, { FC } from \"react\";\nimport { Text as NativeText, TextProps as NativeTextProps } from \"react-native-elements\";\n\nimport useColors from \"../hooks/useColors\";\n\nexport interface TextProps extends NativeTextProps {\n    note?: boolean;\n    caption?: boolean;\n    dark?: boolean;\n    medium?: boolean;\n    light?: boolean;\n    fontWeight?: \"light\" | \"regular\" | \"bold\";\n}\n\nconst Text: FC<TextProps> = props => {\n    const { textDark, textMedium, textLight } = useColors();\n    const fontFamily = props.fontWeight || \"regular\";\n    return (\n        <NativeText\n            {...props}\n            h1Style={[{ fontFamily }, props.h1Style]}\n            h2Style={[{ fontFamily }, props.h2Style]}\n            h3Style={[{ fontFamily }, props.h3Style]}\n            h4Style={[{ fontFamily }, props.h4Style]}\n            style={[\n                {\n                    fontFamily,\n                    fontSize: props.note ? 15 : props.caption ? 22 : 18,\n                    color: props.note || props.light ? textLight : props.medium ? textMedium : textDark\n                },\n                props.style\n            ]}\n        />\n    );\n};\nexport default Text;\n","import React, { useCallback } from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../../constants/dimension\";\nimport FlexView from \"../FlexView\";\nimport Text from \"../Text\";\n\nconst WebFooter = () => (\n    <View\n        // @ts-ignore\n        style={{\n            position: \"fixed\",\n            bottom: 0,\n            margin: Spacing.content\n        }}>\n        <Text note={true} style={{ marginLeft: 12 }}>\n            Built by <Link to={\"https://levx.io\"} text={\"Team LevX\"} />\n        </Text>\n        <FlexView>\n            <Link to={\"https://github.com/sushiswap-community\"} text={\"GitHub\"} />\n            <Link to={\"https://twitter.com/LevxApp\"} text={\"Twitter\"} />\n            <Link to={\"https://discord.gg/Mcdm7v\"} text={\"Discord\"} />\n        </FlexView>\n    </View>\n);\n\nconst Link = ({ to, text }) => {\n    const onPress = useCallback(() => {\n        window.open(to, \"_blank\");\n    }, []);\n    return (\n        <Text note={true} style={{ textDecorationLine: \"underline\", marginRight: 8 }} onPress={onPress}>\n            {text}\n        </Text>\n    );\n};\n\nexport default WebFooter;\n","import React, { useCallback, useContext } from \"react\";\nimport { Image, View } from \"react-native\";\nimport { Link, useRouteMatch } from \"react-router-dom\";\n\nimport Switch from \"expo-dark-mode-switch\";\n\nimport { HEADER_HEIGHT, Spacing } from \"../../constants/dimension\";\nimport { GlobalContext } from \"../../context/GlobalContext\";\nimport useColors from \"../../hooks/useColors\";\nimport FlexView from \"../FlexView\";\nimport Text from \"../Text\";\n\nconst WebHeader = () => {\n    const { background } = useColors();\n    return (\n        <View\n            // @ts-ignore\n            style={{\n                position: \"fixed\",\n                top: 0,\n                zIndex: 100,\n                width: \"100%\",\n                height: HEADER_HEIGHT,\n                paddingBottom: 16,\n                backgroundColor: background\n            }}>\n            <FlexView\n                style={{\n                    flex: 1,\n                    justifyContent: \"space-between\",\n                    alignItems: \"flex-end\",\n                    paddingTop: Spacing.small,\n                    paddingHorizontal: Spacing.content\n                }}>\n                <Title />\n                <Menu />\n            </FlexView>\n        </View>\n    );\n};\n\nexport const Title = () => {\n    const { darkMode } = useContext(GlobalContext);\n    const { primary, white } = useColors();\n    return (\n        <View style={{ alignSelf: \"center\", alignItems: \"center\" }}>\n            <Link to={\"/\"} style={{ textDecoration: \"none\" }}>\n                <Text style={{ fontFamily: \"title\", fontSize: 40, color: darkMode ? white : primary }}>SushiSwap</Text>\n            </Link>\n            <Image\n                source={\n                    darkMode\n                        ? require(\"../../../assets/levx-typography-dark.png\")\n                        : require(\"../../../assets/levx-typography.png\")\n                }\n                style={{ width: 76, height: 13 }}\n            />\n        </View>\n    );\n};\n\nconst Menu = () => {\n    return (\n        <FlexView\n            style={{\n                height: \"100%\",\n                alignItems: \"flex-end\"\n            }}>\n            <MenuItem title={\"SWAP\"} path={\"/\"} />\n            <MenuItem title={\"LIQUIDITY\"} path={\"/liquidity\"} />\n            <MenuItem title={\"FARMING\"} path={\"/farming\"} />\n            <MenuItem title={\"STAKING\"} path={\"/staking\"} />\n            <MenuItem title={\"MIGRATE\"} path={\"/migrate\"} />\n            <DarkModeSwitch />\n        </FlexView>\n    );\n};\n\nconst MenuItem = ({ title, path }) => {\n    const { textDark } = useColors();\n    const match = useRouteMatch(path);\n    return (\n        <Link to={path} style={{ marginLeft: Spacing.small, marginBottom: 4, textDecoration: \"none\" }}>\n            <View>\n                <Text style={{ fontFamily: \"regular\", fontSize: 20, color: textDark, padding: 4 }}>{title}</Text>\n                {match?.isExact && (\n                    <View\n                        style={{\n                            position: \"absolute\",\n                            height: 2,\n                            left: 0,\n                            right: 0,\n                            bottom: 0,\n                            backgroundColor: textDark\n                        }}\n                    />\n                )}\n            </View>\n        </Link>\n    );\n};\n\nconst DarkModeSwitch = () => {\n    const { darkMode, setDarkMode } = useContext(GlobalContext);\n    const onChange = useCallback(\n        async dark => {\n            await setDarkMode(dark);\n        },\n        [setDarkMode]\n    );\n    return (\n        <View style={{ marginLeft: Spacing.small, marginBottom: 4 }}>\n            <Switch\n                value={darkMode}\n                onChange={onChange}\n                style={{\n                    transform: [\n                        {\n                            scale: 0.7\n                        }\n                    ]\n                }}\n            />\n        </View>\n    );\n};\n\nexport default WebHeader;\n","import { ViewStyle } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"./useColors\";\n\nconst useStyles = () => {\n    const { shadow: shadowColor } = useColors();\n    const shadow: ViewStyle = {\n        borderRadius: Spacing.tiny,\n        elevation: Spacing.small,\n        shadowColor,\n        shadowOffset: { width: 0, height: 2 },\n        shadowOpacity: 0.5,\n        shadowRadius: 4,\n        overflow: \"visible\"\n    };\n    return { shadow };\n};\n\nexport default useStyles;\n","import React, { useContext } from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../../constants/dimension\";\nimport { EthersContext } from \"../../context/EthersContext\";\nimport useColors from \"../../hooks/useColors\";\nimport useStyles from \"../../hooks/useStyles\";\nimport FlexView from \"../FlexView\";\nimport Text from \"../Text\";\n\nconst WebStatus = () => {\n    const { textMedium, textLight, green } = useColors();\n    const { shadow } = useStyles();\n    const { chainId, address } = useContext(EthersContext);\n    const connected = chainId === 1 && address;\n    const title = connected\n        ? address!.substring(0, 6) + \"...\" + address!.substring(address!.length - 4, address!.length)\n        : \"Not connected\";\n    const color = connected ? green : textLight;\n    return (\n        <FlexView\n            // @ts-ignore\n            style={{\n                position: \"fixed\",\n                right: Spacing.content,\n                bottom: Spacing.normal,\n                height: 40,\n                alignItems: \"center\",\n                justifyContent: \"center\",\n                paddingHorizontal: Spacing.small,\n                borderRadius: 16,\n                ...shadow\n            }}>\n            <View style={{ backgroundColor: color, width: 6, height: 6, borderRadius: 3, marginRight: 12 }} />\n            <Text style={{ fontSize: 16, color: textMedium, marginRight: 2 }}>{title}</Text>\n            {/*<Icon type={\"material-community\"} name={\"chevron-down\"} color={textLight} size={22} />*/}\n        </FlexView>\n    );\n};\n\nexport default WebStatus;\n","import React, { FC } from \"react\";\nimport { Button as NativeButton, ButtonProps as NativeButtonProps } from \"react-native-elements\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport useStyles from \"../hooks/useStyles\";\n\nexport interface ButtonProps extends NativeButtonProps {\n    color?: string;\n    size?: \"small\" | \"normal\" | \"large\";\n    fontWeight?: \"light\" | \"regular\" | \"bold\";\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst Button: FC<ButtonProps> = props => {\n    const { primary, borderDark, textMedium } = useColors();\n    const { shadow } = useStyles();\n    const type = props.type || \"solid\";\n    const size = props.size || \"normal\";\n    const height = props.size === \"small\" ? 40 : size === \"normal\" ? 48 : 56;\n    const fontSize = props.size === \"small\" ? 14 : size === \"normal\" ? 16 : 18;\n    const fontFamily = props.fontWeight || \"regular\";\n    const color = type === \"solid\" ? \"white\" : props.color || textMedium;\n    return (\n        <NativeButton\n            {...props}\n            type={type}\n            buttonStyle={[\n                {\n                    height,\n                    paddingHorizontal: Spacing.small,\n                    backgroundColor: type === \"solid\" ? props.color || primary : \"transparent\",\n                    borderColor: borderDark\n                },\n                props.buttonStyle\n            ]}\n            titleStyle={[{ fontSize, fontFamily, color }, props.titleStyle]}\n            containerStyle={[type === \"solid\" || type === \"outline\" ? shadow : {}, props.containerStyle]}\n        />\n    );\n};\nexport default Button;\n","import React, { FC, useCallback, useContext, useState } from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport Token from \"../types/Token\";\nimport Button from \"./Button\";\n\nexport interface ApproveButtonProps {\n    token: Token;\n    spender: string;\n    onSuccess: () => void;\n    onError: (e) => void;\n    hidden?: boolean;\n}\n\nconst ApproveButton: FC<ApproveButtonProps> = props => {\n    const { approveToken } = useContext(EthersContext);\n    const [loading, setLoading] = useState(false);\n    const onPress = useCallback(async () => {\n        if (props.token) {\n            props.onError({});\n            setLoading(true);\n            try {\n                const tx = await approveToken(props.token.address, props.spender);\n                await tx.wait();\n                props.onSuccess();\n            } catch (e) {\n                props.onError(e);\n            } finally {\n                setLoading(false);\n            }\n        }\n    }, [props.token]);\n    if (props.hidden) {\n        return <View />;\n    }\n    return (\n        <Button\n            size={\"large\"}\n            title={\"Approve \" + (props.token?.symbol || \"\")}\n            onPress={onPress}\n            loading={loading}\n            containerStyle={{ marginBottom: Spacing.small }}\n        />\n    );\n};\n\nexport default ApproveButton;\n","import React, { FC, useCallback, useState } from \"react\";\nimport { ButtonGroup as NativeButtonGroup, ButtonGroupProps } from \"react-native-elements\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport useStyles from \"../hooks/useStyles\";\n\n// tslint:disable-next-line:max-func-body-length\nconst ButtonGroup: FC<ButtonGroupProps> = props => {\n    const { borderDark } = useColors();\n    const { shadow } = useStyles();\n    const [index, setIndex] = useState<number>();\n    const onPress = useCallback(i => {\n        setIndex(i);\n        props.onPress(i);\n    }, []);\n    return (\n        <NativeButtonGroup\n            {...props}\n            selectedIndex={props.selectedIndex || index}\n            onPress={onPress}\n            textStyle={[\n                {\n                    fontFamily: \"regular\"\n                },\n                props.textStyle\n            ]}\n            buttonStyle={[\n                {\n                    borderTopLeftRadius: index === 0 ? Spacing.tiny : 0,\n                    borderBottomLeftRadius: index === 0 ? Spacing.tiny : 0,\n                    borderTopRightRadius:\n                        props.buttons.length > 0 && index === props.buttons.length - 1 ? Spacing.tiny : 0,\n                    borderBottomRightRadius:\n                        props.buttons.length > 0 && index === props.buttons.length - 1 ? Spacing.tiny : 0\n                },\n                props.buttonStyle\n            ]}\n            selectedButtonStyle={[\n                {\n                    backgroundColor: borderDark\n                },\n                props.selectedButtonStyle\n            ]}\n            containerStyle={[\n                {\n                    marginHorizontal: 0,\n                    marginVertical: 0,\n                    height: 56,\n                    ...shadow\n                },\n                props.containerStyle\n            ]}\n        />\n    );\n};\n\nexport default ButtonGroup;\n","import React from \"react\";\nimport { Icon } from \"react-native-elements\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\n\nconst CloseIcon = () => {\n    const { textLight } = useColors();\n    return <Icon type={\"material-community\"} name={\"close\"} color={textLight} style={{ marginLeft: Spacing.tiny }} />;\n};\n\nexport default CloseIcon;\n","import React, { FC } from \"react\";\nimport { Platform, View, ViewProps, ViewStyle } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\n\ninterface ColumnProps extends ViewProps {\n    noTopMargin?: boolean;\n    style?: ViewStyle;\n}\n\nconst Column: FC<ColumnProps> = props => (\n    <View\n        {...props}\n        style={[\n            {\n                width: Platform.OS === \"web\" ? 440 : \"100%\",\n                marginTop: props.noTopMargin ? 0 : Platform.OS === \"web\" ? Spacing.large : Spacing.normal\n            },\n            props.style\n        ]}\n    />\n);\n\nexport default Column;\n","import React, { FC } from \"react\";\nimport { Platform, SafeAreaView, ScrollView, ViewProps } from \"react-native\";\n\nimport { HEADER_HEIGHT } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\n\nexport type ContainerProps = ViewProps;\n\n// tslint:disable-next-line:max-func-body-length\nconst Container: FC<ContainerProps> = props => {\n    const { background } = useColors();\n    const Universal = Platform.select({\n        web: () => (\n            <ScrollView\n                contentContainerStyle={{ flex: 1 }}\n                style={[\n                    {\n                        backgroundColor: background,\n                        marginTop: HEADER_HEIGHT\n                    },\n                    props.style\n                ]}\n                {...props}\n            />\n        ),\n        default: () => (\n            <SafeAreaView style={{ flex: 1 }}>\n                <ScrollView\n                    {...props}\n                    style={[\n                        {\n                            backgroundColor: background\n                        },\n                        props.style\n                    ]}\n                />\n            </SafeAreaView>\n        )\n    });\n    return <Universal />;\n};\n\nexport default Container;\n","import React from \"react\";\nimport { Platform, View, ViewProps } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\n\ninterface ContentProps extends ViewProps {\n    contentPadding?: \"small\" | \"normal\" | \"large\";\n}\n\nconst Content: React.FunctionComponent<ContentProps> = props => {\n    const { background } = useColors();\n    const multiplier = {\n        small: 0.75,\n        normal: 1,\n        large: 1.5\n    }[props.contentPadding || \"normal\"];\n    return (\n        <View style={{ alignItems: \"center\", flex: 1, width: \"100%\", backgroundColor: background }}>\n            <View style={{ width: Platform.OS === \"web\" ? 1280 : \"100%\", flex: 1, marginBottom: Spacing.huge }}>\n                <View\n                    {...props}\n                    style={[\n                        {\n                            paddingHorizontal: Spacing.content * multiplier,\n                            paddingVertical: Platform.OS === \"web\" ? Spacing.normal * multiplier : 0,\n                            backgroundColor: background,\n                            alignItems: \"center\"\n                        },\n                        props.style\n                    ]}\n                />\n            </View>\n        </View>\n    );\n};\nexport default Content;\n","import React from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport MetamaskError from \"../types/MetamaskError\";\nimport Text from \"./Text\";\n\nconst ErrorMessage = ({ error }: { error: MetamaskError }) => (\n    <View\n        style={{\n            borderColor: \"red\",\n            borderWidth: 1,\n            width: \"100%\",\n            padding: Spacing.tiny,\n            marginTop: Spacing.small\n        }}>\n        {error.code && (\n            <Text fontWeight={\"bold\"} style={{ color: \"red\", fontSize: 14 }}>\n                Error Code {error.code}\n            </Text>\n        )}\n        <Text note={true} style={{ color: \"red\", fontSize: 14 }}>\n            {error.message}\n        </Text>\n    </View>\n);\n\nexport default ErrorMessage;\n","import React from \"react\";\n\nimport Button from \"./Button\";\n\nconst FetchingButton = () => {\n    return <Button size={\"large\"} title={\"Fetching…\"} disabled={true} />;\n};\nexport default FetchingButton;\n","import React from \"react\";\n\nimport Button from \"./Button\";\n\nconst InsufficientBalanceButton = ({ symbol }: { symbol: string }) => {\n    return <Button size={\"large\"} title={\"Insufficient \" + symbol || \"\" + \" Balance\"} disabled={true} />;\n};\nexport default InsufficientBalanceButton;\n","import React from \"react\";\nimport { View } from \"react-native\";\n\nimport useColors from \"../hooks/useColors\";\n\nconst Border = () => {\n    const { border } = useColors();\n    return <View style={{ height: 1, width: \"100%\", backgroundColor: border }} />;\n};\n\nexport default Border;\n","import React, { FC, useCallback, useContext } from \"react\";\nimport { ActivityIndicator, FlatList, View } from \"react-native\";\nimport { CheckBox as NativeCheckBox, CheckBoxProps } from \"react-native-elements\";\n\nimport { ethers } from \"ethers\";\nimport { Spacing } from \"../constants/dimension\";\nimport { GlobalContext } from \"../context/GlobalContext\";\nimport useColors from \"../hooks/useColors\";\nimport { LPTokensState } from \"../hooks/useLPTokensState\";\nimport LPToken from \"../types/LPToken\";\nimport Border from \"./Border\";\nimport Column from \"./Column\";\nimport FlexView from \"./FlexView\";\nimport Text from \"./Text\";\n\nexport type LPTokenSelectFilter = \"balance\" | \"amountDeposited\" | \"\";\n\nexport interface LPTokenSelectProps {\n    state: LPTokensState;\n    title: string;\n    emptyText: string;\n    showFilter?: boolean;\n    filter?: LPTokenSelectFilter;\n    onFilterChanged?: (filter: LPTokenSelectFilter) => void;\n    Item: FC<LPTokenItemProps>;\n}\n\nexport interface LPTokenItemProps {\n    token: LPToken;\n    selected: boolean;\n    filter?: LPTokenSelectFilter;\n    onSelectToken: (token: LPToken) => void;\n}\n\nconst LPTokenSelect: FC<LPTokenSelectProps> = props => {\n    const onUnselectToken = useCallback(() => {\n        props.state.setSelectedLPToken(undefined);\n    }, [props.state.setSelectedLPToken]);\n    return (\n        <Column>\n            <Text\n                fontWeight={\"bold\"}\n                medium={true}\n                style={{ marginBottom: props.showFilter ? Spacing.tiny : Spacing.normal, fontSize: 20 }}>\n                {props.title}\n            </Text>\n            {props.showFilter && <Filter filter={props.filter} onFilterChanged={props.onFilterChanged} />}\n            {props.state.selectedLPToken ? (\n                <props.Item\n                    token={props.state.selectedLPToken}\n                    selected={true}\n                    filter={\"\"}\n                    onSelectToken={onUnselectToken}\n                />\n            ) : (\n                <LPTokenList state={props.state} filter={props.filter} emptyText={props.emptyText} Item={props.Item} />\n            )}\n        </Column>\n    );\n};\n\nconst Filter = ({ filter, onFilterChanged }) => {\n    const handler = (f: string) => () => onFilterChanged(f);\n    return (\n        <FlexView style={{ width: \"100%\", justifyContent: \"flex-end\" }}>\n            <CheckBox checked={filter === \"balance\"} onPress={handler(\"balance\")} title={\"with balance\"} />\n            <CheckBox\n                checked={filter === \"amountDeposited\"}\n                onPress={handler(\"amountDeposited\")}\n                title={\"with deposit\"}\n            />\n            <CheckBox checked={!filter} onPress={handler(\"\")} title={\"all\"} />\n        </FlexView>\n    );\n};\n\nconst CheckBox = (props: CheckBoxProps) => {\n    const { darkMode } = useContext(GlobalContext);\n    const { primary, secondary, textLight } = useColors();\n    return (\n        <NativeCheckBox\n            {...props}\n            textStyle={{ fontFamily: \"regular\", fontSize: 14, color: textLight, marginLeft: 0, marginRight: 4 }}\n            containerStyle={{\n                backgroundColor: \"transparent\",\n                borderWidth: 0,\n                marginLeft: Spacing.tiny,\n                marginRight: 0,\n                marginVertical: Spacing.small,\n                padding: 0\n            }}\n            iconRight={true}\n            iconType={\"material-community\"}\n            checkedIcon={\"radiobox-marked\"}\n            uncheckedIcon={\"radiobox-blank\"}\n            checkedColor={darkMode ? secondary : primary}\n        />\n    );\n};\n\n// tslint:disable-next-line:max-func-body-length\nconst LPTokenList = ({\n    state,\n    emptyText,\n    filter,\n    Item\n}: {\n    state: LPTokensState;\n    emptyText: string;\n    filter?: LPTokenSelectFilter;\n    Item: FC<LPTokenItemProps>;\n}) => {\n    const renderItem = useCallback(\n        ({ item }) => {\n            return (\n                <Item\n                    key={item.address}\n                    token={item}\n                    selected={false}\n                    filter={filter}\n                    onSelectToken={state.setSelectedLPToken}\n                />\n            );\n        },\n        [filter, state.setSelectedLPToken]\n    );\n    let data = state.lpTokens.sort((t1, t2) => {\n        return (t2.totalDeposited || ethers.constants.Zero)\n            .sub(t1.totalDeposited || ethers.constants.Zero)\n            .div(ethers.BigNumber.from(10).pow(14))\n            .toNumber();\n    });\n    if (filter === \"amountDeposited\") {\n        data = data.filter(token => token.amountDeposited?.gt(0));\n    } else if (filter === \"balance\") {\n        data = data.filter(token => token.balance.gt(0));\n    }\n    return state.loading ? (\n        <ActivityIndicator size={\"large\"} style={{ marginTop: Spacing.large }} />\n    ) : data.length === 0 ? (\n        <EmptyList text={emptyText} />\n    ) : (\n        <FlatList\n            keyExtractor={item => JSON.stringify(item)}\n            data={data}\n            renderItem={renderItem}\n            ItemSeparatorComponent={Border}\n        />\n    );\n};\n\nconst EmptyList = ({ text }: { text: string }) => {\n    return (\n        <View style={{ margin: Spacing.normal }}>\n            <Text light={true} style={{ textAlign: \"center\", width: \"100%\" }}>\n                {text}\n            </Text>\n        </View>\n    );\n};\n\nexport default LPTokenSelect;\n","import React from \"react\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport FlexView from \"./FlexView\";\nimport Text from \"./Text\";\n\nconst Meta = ({ label, text }: { label: string; text: string }) => {\n    return (\n        <FlexView style={{ justifyContent: \"space-between\", marginTop: Spacing.tiny, marginHorizontal: Spacing.small }}>\n            <Text fontWeight={\"bold\"} style={{ fontSize: 14 }}>\n                {label}\n            </Text>\n            <Text style={{ fontSize: 14 }}>{text}</Text>\n        </FlexView>\n    );\n};\n\nexport default Meta;\n","import React, { useContext } from \"react\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport { GlobalContext } from \"../context/GlobalContext\";\nimport useColors from \"../hooks/useColors\";\nimport Text from \"./Text\";\n\nconst Notice = (props: { text: string; color?: string }) => {\n    const { darkMode } = useContext(GlobalContext);\n    const { primary, secondary } = useColors();\n    const color = props.color || (darkMode ? secondary : primary);\n    return (\n        <Text\n            note={true}\n            style={{\n                color,\n                borderColor: color,\n                borderWidth: 1,\n                borderRadius: 4,\n                padding: Spacing.small\n            }}>\n            {props.text}\n        </Text>\n    );\n};\n\nexport default Notice;\n","import React, { useContext } from \"react\";\nimport { Icon } from \"react-native-elements\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport { GlobalContext } from \"../context/GlobalContext\";\nimport useColors from \"../hooks/useColors\";\n\nconst SelectIcon = () => {\n    const { darkMode } = useContext(GlobalContext);\n    const { primary, secondary } = useColors();\n    return (\n        <Icon\n            type={\"material-community\"}\n            name={\"chevron-right\"}\n            color={darkMode ? secondary : primary}\n            style={{ marginLeft: Spacing.tiny }}\n        />\n    );\n};\n\nexport default SelectIcon;\n","import React, { FC } from \"react\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport Text from \"./Text\";\n\ninterface SubtitleProps {\n    text: string;\n}\n\nconst Subtitle: FC<SubtitleProps> = props => {\n    return (\n        <Text fontWeight={\"bold\"} medium={true} style={{ marginBottom: Spacing.normal, fontSize: 20 }}>\n            {props.text}\n        </Text>\n    );\n};\n\nexport default Subtitle;\n","import React, { FC, useCallback } from \"react\";\nimport { Platform } from \"react-native\";\nimport { Input as NativeInput, InputProps as NativeInputProps } from \"react-native-elements\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\n\nexport interface Validation {\n    regexp: RegExp;\n    error: string;\n}\n\nexport interface InputProps extends NativeInputProps {\n    color?: string;\n    size?: \"small\" | \"normal\" | \"large\";\n    allowed?: Validation[];\n    forbidden?: Validation[];\n    onError?: (error: string) => void;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst Input: FC<InputProps> = props => {\n    const { textDark, textMedium, textLight } = useColors();\n    const size = props.size || \"normal\";\n    const color = props.color || textDark;\n    const fontSize = size === \"small\" ? 24 : size === \"large\" ? 36 : 30;\n    const onChangeText = useCallback(\n        (text: string) => {\n            props.onChangeText?.(text);\n            props.onError?.(\"\");\n            const errors = [] as string[];\n            if (text !== \"\" && props.forbidden) {\n                props.forbidden.forEach(validation => {\n                    if (text.match(validation.regexp)) {\n                        errors.push(validation.error);\n                    }\n                });\n            }\n            if (text !== \"\" && props.allowed) {\n                props.allowed.forEach(validation => {\n                    if (!text.match(validation.regexp)) {\n                        errors.push(validation.error);\n                    }\n                });\n            }\n            if (errors.length > 0) {\n                props.onError?.(errors.join(\"\\n\"));\n            }\n        },\n        [props.onChangeText, props.onError, props.forbidden, props.allowed]\n    );\n    return (\n        <NativeInput\n            {...props}\n            inputStyle={[\n                { fontSize, fontFamily: \"regular\", paddingBottom: 4, color, marginTop: 0 },\n                // @ts-ignore\n                Platform.OS === \"web\" ? { outline: \"none\" } : {},\n                props.inputStyle\n            ]}\n            labelStyle={[{ color: textMedium }, props.labelStyle]}\n            placeholderTextColor={props.placeholderTextColor || textLight}\n            errorStyle={props.onError ? { height: 0 } : props.errorStyle}\n            containerStyle={[{ paddingHorizontal: 0, marginTop: Spacing.tiny }, props.containerStyle]}\n            onChangeText={onChangeText}\n        />\n    );\n};\n\nexport default Input;\n","import React, { FC, useCallback, useContext } from \"react\";\nimport { Platform, View } from \"react-native\";\n\nimport { ethers } from \"ethers\";\nimport { Spacing } from \"../constants/dimension\";\nimport { GlobalContext } from \"../context/GlobalContext\";\nimport useColors from \"../hooks/useColors\";\nimport Token from \"../types/Token\";\nimport { formatBalance, parseBalance } from \"../utils\";\nimport Button from \"./Button\";\nimport Column from \"./Column\";\nimport Input from \"./Input\";\nimport Subtitle from \"./Subtitle\";\n\nexport interface TokenInputProps {\n    title?: string;\n    token?: Token;\n    hidden: boolean;\n    amount: string;\n    onAmountChanged: (amount: string) => void;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst TokenInput: FC<TokenInputProps> = props => {\n    const onChangeText = useCallback(\n        (text: string) => {\n            if (props.token && props.onAmountChanged) {\n                try {\n                    parseBalance(text, props.token.decimals);\n                    props.onAmountChanged(text);\n                } catch (e) {\n                    if (text.endsWith(\".\") && text.indexOf(\".\") === text.length - 1) {\n                        props.onAmountChanged(text);\n                    }\n                }\n            }\n        },\n        [props.token, props.onAmountChanged]\n    );\n    if (props.hidden) {\n        return <Column noTopMargin={true} />;\n    }\n    const label = props.token?.symbol;\n    return (\n        <Column noTopMargin={!props.title}>\n            {props.title && <Subtitle text={props.title} />}\n            <View style={{ marginHorizontal: Spacing.small }}>\n                <Input label={label} value={props.amount} onChangeText={onChangeText} placeholder={\"0.0\"} />\n                {props.token?.balance?.gt(0) && <MaxButton token={props.token} updateAmount={props.onAmountChanged} />}\n            </View>\n        </Column>\n    );\n};\n\nconst MaxButton = (props: { token: Token; updateAmount }) => {\n    const { darkMode } = useContext(GlobalContext);\n    const { primary, secondary } = useColors();\n    const onPressMax = useCallback(() => {\n        if (props.token) {\n            let balance = props.token.balance;\n            if (props.token.symbol === \"ETH\") {\n                // Subtract 0.01 ETH for gas fee\n                const fee = ethers.BigNumber.from(10).pow(16);\n                balance = balance.gt(fee) ? balance.sub(fee) : ethers.constants.Zero;\n            }\n            props.updateAmount(formatBalance(balance, props.token.decimals));\n        }\n    }, [props.token, props.updateAmount]);\n    return (\n        <View style={{ position: \"absolute\", right: 0, bottom: Platform.OS === \"web\" ? 12 : 28 }}>\n            <Button\n                type={\"clear\"}\n                color={darkMode ? secondary : primary}\n                title={\"MAX\"}\n                fontWeight={\"bold\"}\n                onPress={onPressMax}\n                buttonStyle={{ paddingHorizontal: 0 }}\n            />\n        </View>\n    );\n};\n\nexport default TokenInput;\n","import { useCallback } from \"react\";\n\nimport { ChainId, Currency, ETHER, Fetcher, Pair, Token, WETH } from \"@sushiswap/sdk\";\nimport { ethers } from \"ethers\";\n\nconst DAI = new Token(ChainId.MAINNET, \"0x6B175474E89094C44Da98b954EedeAC495271d0F\", 18, \"DAI\", \"Dai Stablecoin\");\nconst USDC = new Token(ChainId.MAINNET, \"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\", 6, \"USDC\", \"USD//C\");\nconst USDT = new Token(ChainId.MAINNET, \"0xdAC17F958D2ee523a2206206994597C13D831ec7\", 6, \"USDT\", \"Tether USD\");\nconst SUSHI = new Token(ChainId.MAINNET, \"0x6B3595068778DD592e39A122f4f5a5cF09C90fE2\", 18, \"SUSHI\", \"SushiSwap\");\nconst YAM = new Token(ChainId.MAINNET, \"0x0e2298E3B3390e3b945a5456fBf59eCc3f55DA16\", 18, \"YAM\", \"YAM\");\nconst AMPL = new Token(ChainId.MAINNET, \"0xD46bA6D942050d489DBd938a2C909A5d5039A161\", 9, \"AMPL\", \"Ampleforth\");\n\nconst BASES_TO_CHECK_TRADES_AGAINST = [WETH[ChainId.MAINNET], DAI, USDC, USDT, SUSHI, YAM];\nconst CUSTOM_BASES = {\n    [AMPL.address]: [DAI, WETH[ChainId.MAINNET]]\n};\n\nfunction wrappedCurrency(currency: Currency | undefined): Token | undefined {\n    return currency === ETHER ? WETH[ChainId.MAINNET] : currency instanceof Token ? currency : undefined;\n}\n\n// Source: https://github.com/Uniswap/uniswap-interface/blob/master/src/hooks/Trades.ts\nconst useAllCommonPairs = () => {\n    const loadAllCommonPairs = useCallback(\n        // tslint:disable-next-line:max-func-body-length\n        async (currencyA?: Currency, currencyB?: Currency, provider?: ethers.providers.BaseProvider) => {\n            const bases: Token[] = BASES_TO_CHECK_TRADES_AGAINST;\n            const [tokenA, tokenB] = [wrappedCurrency(currencyA), wrappedCurrency(currencyB)];\n            const basePairs: [Token, Token][] = bases\n                .flatMap((base): [Token, Token][] => bases.map(otherBase => [base, otherBase]))\n                .filter(([t0, t1]) => t0.address !== t1.address);\n\n            const allPairCombinations =\n                tokenA && tokenB\n                    ? [\n                          // the direct pair\n                          [tokenA, tokenB],\n                          // token A against all bases\n                          ...bases.map((base): [Token, Token] => [tokenA, base]),\n                          // token B against all bases\n                          ...bases.map((base): [Token, Token] => [tokenB, base]),\n                          // each base against all bases\n                          ...basePairs\n                      ]\n                          .filter((tokens): tokens is [Token, Token] => Boolean(tokens[0] && tokens[1]))\n                          .filter(([t0, t1]) => t0.address !== t1.address)\n                          .filter(([a, b]) => {\n                              const customBases = CUSTOM_BASES;\n                              if (!customBases) return true;\n\n                              const customBasesA: Token[] | undefined = customBases[a.address];\n                              const customBasesB: Token[] | undefined = customBases[b.address];\n\n                              if (!customBasesA && !customBasesB) return true;\n\n                              if (customBasesA && !customBasesA.find(base => tokenB.equals(base))) return false;\n                              return !(customBasesB && !customBasesB.find(base => tokenA.equals(base)));\n                          })\n                    : [];\n\n            const pairs = await Promise.all(\n                allPairCombinations.map(async pair => {\n                    try {\n                        return await Fetcher.fetchPairData(pair[0], pair[1], provider);\n                    } catch (e) {\n                        return null;\n                    }\n                })\n            );\n            return pairs.filter(pair => pair !== null) as Pair[];\n        },\n        []\n    );\n\n    return { loadAllCommonPairs };\n};\n\nexport default useAllCommonPairs;\n","import { useCallback, useContext } from \"react\";\n\nimport { CurrencyAmount, Fetcher, Percent, Router, TokenAmount, Trade, WETH } from \"@sushiswap/sdk\";\nimport { ethers } from \"ethers\";\nimport { MASTER_CHEF, MIGRATOR2, ROUTER, SUSHI_BAR } from \"../constants/contracts\";\nimport { ETH } from \"../constants/tokens\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport LPToken from \"../types/LPToken\";\nimport Token from \"../types/Token\";\nimport { convertToken, getContract } from \"../utils\";\nimport { logTransaction } from \"../utils/analytics-utils\";\nimport useAllCommonPairs from \"./useAllCommonPairs\";\n\n// tslint:disable-next-line:max-func-body-length\nconst useSDK = () => {\n    const { provider, signer } = useContext(EthersContext);\n    const { loadAllCommonPairs } = useAllCommonPairs();\n    const allowedSlippage = new Percent(\"50\", \"10000\"); // 0.05%\n    const ttl = 60 * 20;\n\n    const getTrade = useCallback(\n        async (fromToken: Token, toToken: Token, fromAmount: ethers.BigNumber) => {\n            if (provider) {\n                const isETH = fromToken.symbol === \"ETH\";\n                const from = convertToken(fromToken);\n                const to = convertToken(toToken);\n                const pairs = await loadAllCommonPairs(from, to, provider);\n                const amount = isETH\n                    ? CurrencyAmount.ether(fromAmount.toString())\n                    : new TokenAmount(from, fromAmount.toString());\n                return Trade.bestTradeExactIn(pairs, amount, to, { maxHops: 3, maxNumResults: 1 })[0];\n            }\n        },\n        [provider]\n    );\n\n    const swap = useCallback(\n        async (trade: Trade) => {\n            if (signer) {\n                if (trade) {\n                    const params = Router.swapCallParameters(trade, {\n                        feeOnTransfer: false,\n                        allowedSlippage,\n                        recipient: await signer.getAddress(),\n                        ttl\n                    });\n                    const router = getContract(\"IUniswapV2Router02\", ROUTER, signer);\n                    const gasLimit = await router.estimateGas[params.methodName](...params.args, {\n                        value: params.value\n                    });\n                    const tx = await router.functions[params.methodName](...params.args, {\n                        value: params.value,\n                        gasLimit: gasLimit.mul(120).div(100)\n                    });\n                    await logTransaction(\n                        tx,\n                        \"UniswapV2Router02.\" + params.methodName + \"()\",\n                        ...params.args.map(arg => arg.toString())\n                    );\n                    return {\n                        trade,\n                        tx\n                    };\n                }\n            }\n        },\n        [signer]\n    );\n\n    const wrapETH = useCallback(\n        async (amount: ethers.BigNumber) => {\n            if (signer) {\n                const weth = getContract(\"IWETH\", WETH[1].address, signer);\n                const gasLimit = await weth.estimateGas.deposit({\n                    value: amount\n                });\n                const tx = await weth.deposit({\n                    value: amount,\n                    gasLimit\n                });\n                return await logTransaction(tx, \"WETH.deposit()\");\n            }\n        },\n        [signer]\n    );\n\n    const unwrapETH = useCallback(\n        async (amount: ethers.BigNumber) => {\n            if (signer) {\n                const weth = getContract(\"IWETH\", WETH[1].address, signer);\n                const gasLimit = await weth.estimateGas.withdraw(amount);\n                const tx = await weth.withdraw(amount, {\n                    gasLimit\n                });\n                return await logTransaction(tx, \"WETH.withdraw()\");\n            }\n        },\n        [signer]\n    );\n\n    const getPair = useCallback(\n        async (fromToken: Token, toToken: Token) => {\n            if (provider) {\n                const from = convertToken(fromToken);\n                const to = convertToken(toToken);\n                return await Fetcher.fetchPairData(from, to, provider);\n            }\n        },\n        [provider]\n    );\n\n    const addLiquidity = useCallback(\n        async (fromToken: Token, toToken: Token, fromAmount: ethers.BigNumber, toAmount: ethers.BigNumber) => {\n            if (signer) {\n                const router = getContract(\"IUniswapV2Router02\", ROUTER, signer);\n                const deadline = `0x${(Math.floor(new Date().getTime() / 1000) + ttl).toString(16)}`;\n                const args = [\n                    fromToken.address,\n                    toToken.address,\n                    fromAmount,\n                    toAmount,\n                    minAmount(fromAmount, allowedSlippage),\n                    minAmount(toAmount, allowedSlippage),\n                    await signer.getAddress(),\n                    deadline\n                ];\n                const gasLimit = await router.estimateGas.addLiquidity(...args);\n                const tx = await router.functions.addLiquidity(...args, {\n                    gasLimit: gasLimit.mul(120).div(100)\n                });\n                return logTransaction(tx, \"UniswapV2Router02.addLiquidity()\", ...args.map(arg => arg.toString()));\n            }\n        },\n        [signer]\n    );\n\n    const removeLiquidityETH = useCallback(\n        async (token: Token, liquidity: ethers.BigNumber, amount: ethers.BigNumber, amountETH: ethers.BigNumber) => {\n            if (signer) {\n                const router = getContract(\"IUniswapV2Router02\", ROUTER, signer);\n                const deadline = `0x${(Math.floor(new Date().getTime() / 1000) + ttl).toString(16)}`;\n                const args = [\n                    token.address,\n                    liquidity,\n                    minAmount(amount, allowedSlippage),\n                    minAmount(amountETH, allowedSlippage),\n                    await signer.getAddress(),\n                    deadline\n                ];\n                const gasLimit = await router.estimateGas.removeLiquidityETH(...args);\n                const tx = await router.functions.removeLiquidityETH(...args, {\n                    gasLimit: gasLimit.mul(120).div(100)\n                });\n                return logTransaction(tx, \"UniswapV2Router02.removeLiquidityETH()\", ...args.map(arg => arg.toString()));\n            }\n        },\n        [signer]\n    );\n\n    const removeLiquidity = useCallback(\n        async (\n            fromToken: Token,\n            toToken: Token,\n            liquidity: ethers.BigNumber,\n            fromAmount: ethers.BigNumber,\n            toAmount: ethers.BigNumber\n        ) => {\n            if (signer) {\n                const router = getContract(\"IUniswapV2Router02\", ROUTER, signer);\n                const deadline = `0x${(Math.floor(new Date().getTime() / 1000) + ttl).toString(16)}`;\n                const args = [\n                    fromToken.address,\n                    toToken.address,\n                    liquidity,\n                    minAmount(fromAmount, allowedSlippage),\n                    minAmount(toAmount, allowedSlippage),\n                    await signer.getAddress(),\n                    deadline\n                ];\n                const gasLimit = await router.estimateGas.removeLiquidity(...args);\n                const tx = await router.functions.removeLiquidity(...args, {\n                    gasLimit: gasLimit.mul(120).div(100)\n                });\n                return logTransaction(tx, \"UniswapV2Router02.removeLiquidity()\", ...args.map(arg => arg.toString()));\n            }\n        },\n        [signer]\n    );\n\n    const addLiquidityETH = useCallback(\n        async (token: Token, amount: ethers.BigNumber, amountETH: ethers.BigNumber) => {\n            if (signer) {\n                const router = getContract(\"IUniswapV2Router02\", ROUTER, signer);\n                const deadline = `0x${(Math.floor(new Date().getTime() / 1000) + ttl).toString(16)}`;\n                const args = [\n                    token.address,\n                    amount,\n                    minAmount(amount, allowedSlippage),\n                    minAmount(amountETH, allowedSlippage),\n                    await signer.getAddress(),\n                    deadline\n                ];\n                const gasLimit = await router.estimateGas.addLiquidityETH(...args, {\n                    value: amountETH\n                });\n                const tx = await router.functions.addLiquidityETH(...args, {\n                    gasLimit: gasLimit.mul(120).div(100),\n                    value: amountETH\n                });\n                return logTransaction(tx, \"UniswapV2Router02.addLiquidityETH()\", ...args.map(arg => arg.toString()));\n            }\n        },\n        [signer]\n    );\n\n    const getExpectedSushiRewardPerBlock = useCallback(\n        async (token: LPToken) => {\n            if (signer) {\n                const masterChef = getContract(\"MasterChef\", MASTER_CHEF, signer);\n                const totalAllocPoint = await masterChef.totalAllocPoint();\n                const sushiPerBlock = await masterChef.sushiPerBlock();\n                const { allocPoint } = await masterChef.poolInfo(token.id);\n                return ethers.BigNumber.from(sushiPerBlock)\n                    .mul(allocPoint)\n                    .div(totalAllocPoint);\n            }\n        },\n        [signer]\n    );\n\n    const deposit = useCallback(\n        async (lpTokenId: number, amount: ethers.BigNumber) => {\n            if (signer) {\n                const masterChef = getContract(\"MasterChef\", MASTER_CHEF, signer);\n                const gasLimit = await masterChef.estimateGas.deposit(lpTokenId, amount);\n                const tx = await masterChef.deposit(lpTokenId, amount, {\n                    gasLimit: gasLimit.mul(120).div(100)\n                });\n                return logTransaction(tx, \"MasterChef.deposit()\", lpTokenId, amount.toString());\n            }\n        },\n        [signer]\n    );\n\n    const withdraw = useCallback(\n        async (lpTokenId: number, amount: ethers.BigNumber) => {\n            if (signer) {\n                const masterChef = getContract(\"MasterChef\", MASTER_CHEF, signer);\n                const gasLimit = await masterChef.estimateGas.withdraw(lpTokenId, amount);\n                const tx = await masterChef.withdraw(lpTokenId, amount, {\n                    gasLimit: gasLimit.mul(120).div(100)\n                });\n                return logTransaction(tx, \"MasterChef.withdraw()\", lpTokenId, amount.toString());\n            }\n        },\n        [signer]\n    );\n\n    const enterSushiBar = useCallback(\n        async (amount: ethers.BigNumber) => {\n            if (signer) {\n                const sushiBar = getContract(\"SushiBar\", SUSHI_BAR, signer);\n                const gasLimit = await sushiBar.estimateGas.enter(amount);\n                const tx = await sushiBar.enter(amount, {\n                    gasLimit: gasLimit.mul(120).div(100)\n                });\n                return logTransaction(tx, \"SushiBar.enter()\", amount.toString());\n            }\n        },\n        [signer]\n    );\n\n    const leaveSushiBar = useCallback(\n        async (amount: ethers.BigNumber) => {\n            if (signer) {\n                const sushiBar = getContract(\"SushiBar\", SUSHI_BAR, signer);\n                const gasLimit = await sushiBar.estimateGas.leave(amount);\n                const tx = await sushiBar.leave(amount, {\n                    gasLimit: gasLimit.mul(120).div(100)\n                });\n                return logTransaction(tx, \"SushiBar.leave()\", amount.toString());\n            }\n        },\n        [signer]\n    );\n\n    const migrate = useCallback(\n        async (lpToken: LPToken, amount: ethers.BigNumber) => {\n            if (signer) {\n                const migrator2 = getContract(\"Migrator2\", MIGRATOR2, signer);\n                const deadline = `0x${(Math.floor(new Date().getTime() / 1000) + ttl).toString(16)}`;\n                const args = [\n                    lpToken.tokenA.address,\n                    lpToken.tokenB.address,\n                    amount,\n                    ethers.constants.Zero,\n                    ethers.constants.Zero,\n                    deadline\n                ];\n                const gasLimit = await migrator2.estimateGas.migrate(...args);\n                const tx = await migrator2.migrate(...args, {\n                    gasLimit: gasLimit.mul(120).div(100)\n                });\n                return logTransaction(tx, \"Migrator2.migrate()\", ...args.map(arg => arg.toString()));\n            }\n        },\n        [signer]\n    );\n\n    const calculateFee = (fromAmount: ethers.BigNumber) => {\n        return fromAmount.mul(3).div(1000);\n    };\n\n    return {\n        allowedSlippage,\n        getTrade,\n        swap,\n        wrapETH,\n        unwrapETH,\n        getPair,\n        addLiquidity,\n        addLiquidityETH,\n        removeLiquidity,\n        removeLiquidityETH,\n        getExpectedSushiRewardPerBlock,\n        deposit,\n        withdraw,\n        enterSushiBar,\n        leaveSushiBar,\n        migrate,\n        calculateFee\n    };\n};\n\nconst minAmount = (amount: ethers.BigNumber, percent: Percent) => {\n    return amount.sub(amount.mul(percent.numerator.toString()).div(percent.denominator.toString()));\n};\n\nexport default useSDK;\n","import { useCallback, useContext, useEffect, useState } from \"react\";\n\nimport { ethers } from \"ethers\";\nimport useAsyncEffect from \"use-async-effect\";\nimport { ROUTER } from \"../constants/contracts\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport Token from \"../types/Token\";\nimport { parseBalance } from \"../utils\";\nimport useSDK from \"./useSDK\";\n\nexport interface TokenPairState {\n    fromSymbol: string;\n    setFromSymbol: (symbol: string) => void;\n    toSymbol: string;\n    setToSymbol: (symbol: string) => void;\n    fromToken?: Token;\n    toToken?: Token;\n    fromAmount: string;\n    setFromAmount: (amount: string) => void;\n    toAmount: string;\n    setToAmount: (amount: string) => void;\n    fromTokenAllowed: boolean;\n    setFromTokenAllowed: (allowed: boolean) => void;\n    toTokenAllowed: boolean;\n    setToTokenAllowed: (allowed: boolean) => void;\n    loading: boolean;\n    onWrap: () => Promise<void>;\n    wrapping: boolean;\n    onUnwrap: () => Promise<void>;\n    unwrapping: boolean;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst useTokenPairState: () => TokenPairState = () => {\n    const { provider, signer, address, tokens, updateTokens, getTokenAllowance } = useContext(EthersContext);\n    const { wrapETH, unwrapETH } = useSDK();\n    const [fromSymbol, setFromSymbol] = useState(\"\");\n    const [toSymbol, setToSymbol] = useState(\"\");\n    const [fromAmount, setFromAmount] = useState(\"\");\n    const [toAmount, setToAmount] = useState(\"\");\n    const [fromTokenAllowed, setFromTokenAllowed] = useState(false);\n    const [toTokenAllowed, setToTokenAllowed] = useState(false);\n    const [loading, setLoading] = useState(false);\n    const [wrapping, setWrapping] = useState(false);\n    const [unwrapping, setUnwrapping] = useState(false);\n\n    const fromToken = tokens.find(token => token.symbol === fromSymbol);\n    const toToken = tokens.find(token => token.symbol === toSymbol);\n\n    useEffect(() => {\n        if (fromSymbol === \"\") {\n            setToSymbol(\"\");\n        }\n        setFromAmount(\"\");\n        setToAmount(\"\");\n    }, [fromSymbol, toSymbol]);\n\n    useEffect(() => {\n        setFromSymbol(\"\");\n    }, [address]);\n\n    useAsyncEffect(async () => {\n        if (fromToken && toToken && provider && signer) {\n            setFromTokenAllowed(false);\n            setToTokenAllowed(false);\n            setLoading(true);\n            try {\n                const minAllowance = ethers.BigNumber.from(2)\n                    .pow(96)\n                    .sub(1);\n                if (fromToken.symbol !== \"ETH\") {\n                    const fromAllowance = await getTokenAllowance(fromToken.address, ROUTER);\n                    setFromTokenAllowed(ethers.BigNumber.from(fromAllowance).gte(minAllowance));\n                }\n                if (toToken.symbol !== \"ETH\") {\n                    const toAllowance = await getTokenAllowance(toToken.address, ROUTER);\n                    setToTokenAllowed(ethers.BigNumber.from(toAllowance).gte(minAllowance));\n                }\n            } finally {\n                setLoading(false);\n            }\n        }\n    }, [fromToken, toToken, provider, signer]);\n\n    const onWrap = useCallback(async () => {\n        if (fromAmount && signer) {\n            setWrapping(true);\n            try {\n                const tx = await wrapETH(parseBalance(fromAmount));\n                if (tx) {\n                    await tx.wait();\n                    await updateTokens();\n                    setFromSymbol(\"\");\n                }\n            } finally {\n                setWrapping(false);\n            }\n        }\n    }, [fromAmount, signer]);\n\n    const onUnwrap = useCallback(async () => {\n        if (fromAmount && signer) {\n            setUnwrapping(true);\n            try {\n                const tx = await unwrapETH(parseBalance(fromAmount));\n                if (tx) {\n                    await tx.wait();\n                    await updateTokens();\n                    setFromSymbol(\"\");\n                }\n            } finally {\n                setUnwrapping(false);\n            }\n        }\n    }, [fromAmount, signer]);\n\n    return {\n        fromSymbol,\n        setFromSymbol,\n        toSymbol,\n        setToSymbol,\n        fromToken,\n        toToken,\n        fromAmount,\n        setFromAmount,\n        toAmount,\n        setToAmount,\n        fromTokenAllowed,\n        setFromTokenAllowed,\n        toTokenAllowed,\n        setToTokenAllowed,\n        loading,\n        onWrap,\n        wrapping,\n        onUnwrap,\n        unwrapping\n    };\n};\n\nexport default useTokenPairState;\n","import { useContext, useEffect, useState } from \"react\";\n\nimport { Pair } from \"@sushiswap/sdk\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport useSDK from \"./useSDK\";\nimport useTokenPairState, { TokenPairState } from \"./useTokenPairState\";\n\nexport interface LiquidityState extends TokenPairState {\n    pair?: Pair;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst useLiquidityState: () => LiquidityState = () => {\n    const state = useTokenPairState();\n    const { provider, addOnBlockListener, removeOnBlockListener } = useContext(EthersContext);\n    const [loading, setLoading] = useState(false);\n    const [pair, setPair] = useState<Pair>();\n    const { getPair } = useSDK();\n\n    useEffect(() => {\n        if (state.fromSymbol && state.toSymbol) {\n            const updatePair = async () => {\n                if (state.fromToken && state.toToken && provider) {\n                    setPair(undefined);\n                    try {\n                        setPair(await getPair(state.fromToken, state.toToken));\n                    } catch (e) {\n                    } finally {\n                        setLoading(false);\n                    }\n                }\n            };\n\n            setLoading(true);\n            updatePair();\n            const name = \"updatePair(\" + state.fromSymbol + \",\" + state.toSymbol + \")\";\n\n            addOnBlockListener(name, updatePair);\n            return () => {\n                removeOnBlockListener(name);\n            };\n        }\n    }, [state.fromSymbol, state.toSymbol]);\n\n    return {\n        ...state,\n        loading: loading || state.loading,\n        pair\n    };\n};\n\nexport default useLiquidityState;\n","import { useContext, useEffect, useState } from \"react\";\n\nimport { EthersContext } from \"../context/EthersContext\";\nimport LPToken from \"../types/LPToken\";\nimport { fetchMyLPTokens, fetchMyUniswapLPTokens, fetchPools } from \"../utils/fetch-utils\";\nimport useLiquidityState, { LiquidityState } from \"./useLiquidityState\";\n\nexport interface LPTokensState extends LiquidityState {\n    lastTimeRefreshed: number;\n    updateLastTimeRefreshed: () => void;\n    lpTokens: LPToken[];\n    selectedLPToken?: LPToken;\n    setSelectedLPToken: (token?: LPToken) => void;\n    selectedLPTokenAllowed: boolean;\n    setSelectedLPTokenAllowed: (allowed: boolean) => void;\n    amount: string;\n    setAmount: (amount: string) => void;\n}\n\ntype Mode = \"pools\" | \"my-lp-tokens\" | \"my-uniswap-lp-tokens\";\n\n// tslint:disable-next-line:max-func-body-length\nconst useLPTokensState: (mode: Mode) => LPTokensState = mode => {\n    const state = useLiquidityState();\n    const { provider, signer, address, addOnBlockListener, removeOnBlockListener, tokens } = useContext(EthersContext);\n    const [lastTimeRefreshed, setLastTimeRefreshed] = useState(0);\n    const [loading, setLoading] = useState(true);\n    const [lpTokens, setLPTokens] = useState<LPToken[]>([]);\n    const [selectedLPToken, setSelectedLPToken] = useState<LPToken>();\n    const [selectedLPTokenAllowed, setSelectedLPTokenAllowed] = useState(false);\n    const [amount, setAmount] = useState(\"\");\n\n    const updateLPTokens = async () => {\n        try {\n            const data = await (mode === \"pools\"\n                ? fetchPools(provider, signer)\n                : mode === \"my-lp-tokens\"\n                ? fetchMyLPTokens(tokens, provider, signer)\n                : fetchMyUniswapLPTokens(tokens, provider, signer));\n            if (data) {\n                setLPTokens(data);\n            }\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    useEffect(() => {\n        if (!selectedLPToken) {\n            setAmount(\"\");\n        }\n    }, [selectedLPToken]);\n\n    useEffect(() => {\n        if (provider && signer && (mode === \"pools\" || tokens.length > 0)) {\n            setLoading(true);\n            updateLPTokens();\n\n            const name = \"updateLPTokens()\";\n            addOnBlockListener(name, updateLPTokens);\n            return () => {\n                removeOnBlockListener(name);\n            };\n        }\n    }, [provider, signer, tokens.length, address, lastTimeRefreshed]);\n\n    return {\n        ...state,\n        loading: state.loading || loading,\n        lastTimeRefreshed,\n        updateLastTimeRefreshed: () => {\n            setLastTimeRefreshed(Date.now());\n        },\n        lpTokens,\n        selectedLPToken,\n        setSelectedLPToken,\n        selectedLPTokenAllowed,\n        setSelectedLPTokenAllowed,\n        amount,\n        setAmount\n    };\n};\n\nexport default useLPTokensState;\n","import { useCallback, useContext, useEffect, useState } from \"react\";\n\nimport { ethers } from \"ethers\";\nimport useAsyncEffect from \"use-async-effect\";\nimport { LPTokenSelectFilter } from \"../components/LPTokenSelect\";\nimport { MASTER_CHEF } from \"../constants/contracts\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport { parseBalance } from \"../utils\";\nimport useLPTokensState, { LPTokensState } from \"./useLPTokensState\";\nimport useSDK from \"./useSDK\";\n\nexport interface FarmingState extends LPTokensState {\n    action?: Action;\n    setAction: (action?: Action) => void;\n    expectedSushiRewardPerBlock?: ethers.BigNumber;\n    filteredBy: LPTokenSelectFilter;\n    setFilteredBy: (filter: LPTokenSelectFilter) => void;\n    onDeposit: () => Promise<void>;\n    depositing: boolean;\n    onWithdraw: () => Promise<void>;\n    withdrawing: boolean;\n}\n\nexport type Action = \"deposit\" | \"withdraw\";\n\n// tslint:disable-next-line:max-func-body-length\nconst useFarmingState: () => FarmingState = () => {\n    const state = useLPTokensState(\"pools\");\n    const { provider, signer, getTokenAllowance } = useContext(EthersContext);\n    const { getExpectedSushiRewardPerBlock, deposit, withdraw } = useSDK();\n    const [filteredBy, setFilteredBy] = useState(\"\" as LPTokenSelectFilter);\n    const [action, setAction] = useState<Action>();\n    const [loading, setLoading] = useState(false);\n    const [expectedSushiRewardPerBlock, setExpectedSushiRewardPerBlock] = useState<ethers.BigNumber>();\n    const [depositing, setDepositing] = useState(false);\n    const [withdrawing, setWithdrawing] = useState(false);\n\n    useEffect(() => {\n        setFilteredBy(\"\");\n        setAction(undefined);\n        setLoading(false);\n        setDepositing(false);\n        setWithdrawing(false);\n        setExpectedSushiRewardPerBlock(undefined);\n    }, [state.selectedLPToken]);\n\n    useAsyncEffect(async () => {\n        if (signer && state.selectedLPToken) {\n            setLoading(true);\n            try {\n                setExpectedSushiRewardPerBlock(await getExpectedSushiRewardPerBlock(state.selectedLPToken));\n            } finally {\n                setLoading(false);\n            }\n        }\n    }, [signer, state.selectedLPToken]);\n\n    useAsyncEffect(async () => {\n        if (provider && signer && state.selectedLPToken) {\n            setLoading(true);\n            state.setSelectedLPTokenAllowed(false);\n            try {\n                const minAllowance = ethers.BigNumber.from(2)\n                    .pow(96)\n                    .sub(1);\n                const allowance = await getTokenAllowance(state.selectedLPToken.address, MASTER_CHEF);\n                state.setSelectedLPTokenAllowed(ethers.BigNumber.from(allowance).gte(minAllowance));\n            } finally {\n                setLoading(false);\n            }\n        }\n    }, [provider, signer, state.selectedLPToken]);\n\n    useEffect(() => {\n        state.setAmount(\"\");\n    }, [action]);\n\n    const onDeposit = useCallback(async () => {\n        if (state.selectedLPToken?.id && state.amount && signer) {\n            setDepositing(true);\n            try {\n                const amount = parseBalance(state.amount, state.selectedLPToken.decimals);\n                const tx = await deposit(state.selectedLPToken.id, amount);\n                await tx.wait();\n                state.setSelectedLPToken(undefined);\n                await state.updateLastTimeRefreshed();\n            } finally {\n                setDepositing(false);\n            }\n        }\n    }, [state.selectedLPToken, state.amount, signer]);\n\n    const onWithdraw = useCallback(async () => {\n        if (state.selectedLPToken?.id && state.amount && signer) {\n            setWithdrawing(true);\n            try {\n                const amount = parseBalance(state.amount, state.selectedLPToken.decimals);\n                const tx = await withdraw(state.selectedLPToken.id, amount);\n                await tx.wait();\n                state.setSelectedLPToken(undefined);\n                await state.updateLastTimeRefreshed();\n            } finally {\n                setWithdrawing(false);\n            }\n        }\n    }, [state.selectedLPToken, state.amount, signer]);\n\n    return {\n        ...state,\n        loading: state.loading || loading,\n        filteredBy,\n        setFilteredBy,\n        action,\n        setAction,\n        expectedSushiRewardPerBlock,\n        onDeposit,\n        depositing,\n        onWithdraw,\n        withdrawing\n    };\n};\n\nexport default useFarmingState;\n","import { useCallback } from \"react\";\nimport { Platform } from \"react-native\";\n\nimport { useNavigation } from \"@react-navigation/native\";\n\nconst useWebLinker = (path: string, route: string, target?: string) => {\n    return useCallback(() => {\n        window.open(path, target);\n    }, [path, target]);\n};\n\nconst useAppLinker = (path: string, route: string, _target?: string) => {\n    const { navigate } = useNavigation();\n    return useCallback(() => {\n        navigate(route);\n    }, [route]);\n};\n\nexport default Platform.OS === \"web\" ? useWebLinker : useAppLinker;\n","import React from \"react\";\nimport { View } from \"react-native\";\n\nimport { StatusBar } from \"expo-status-bar\";\n\nimport { HEADER_HEIGHT } from \"../../constants/dimension\";\nimport useColors from \"../../hooks/useColors\";\n\nconst AppHeader = () => {\n    const { background } = useColors();\n    return (\n        <View\n            style={{\n                width: \"100%\",\n                height: HEADER_HEIGHT,\n                backgroundColor: background\n            }}>\n            <StatusBar translucent={false} backgroundColor={background} />\n        </View>\n    );\n};\n\nexport default AppHeader;\n","import React, { useCallback, useContext } from \"react\";\nimport { Image, View } from \"react-native\";\n\nimport * as Linking from \"expo-linking\";\n\nimport { Spacing } from \"../../constants/dimension\";\nimport { GlobalContext } from \"../../context/GlobalContext\";\nimport Button from \"../Button\";\n\nconst ConnectWallet = () => {\n    const { darkMode } = useContext(GlobalContext);\n    const onPress = useCallback(async () => {\n        if (window.ethereum) {\n            await window.ethereum.enable();\n        } else {\n            await Linking.openURL(\"https://metamask.io/\");\n        }\n    }, [window.ethereum]);\n    const title = window.ethereum ? \"Connect\" : \"Install MetaMask\";\n    return (\n        <View style={{ flex: 1, alignItems: \"center\", justifyContent: \"center\" }}>\n            <Image\n                source={\n                    darkMode ? require(\"../../../assets/metamask-dark.png\") : require(\"../../../assets/metamask.png\")\n                }\n                style={{ width: 223, height: 183, marginBottom: Spacing.huge }}\n            />\n            <Button type={\"outline\"} size={\"large\"} onPress={onPress} title={title} containerStyle={{ width: 440 }} />\n        </View>\n    );\n};\nexport default ConnectWallet;\n","import React, { useCallback } from \"react\";\nimport { Image, View } from \"react-native\";\nimport { Icon, SocialIcon } from \"react-native-elements\";\n\nimport * as Linking from \"expo-linking\";\n\nimport { Spacing } from \"../../constants/dimension\";\nimport useColors from \"../../hooks/useColors\";\nimport FlexView from \"../FlexView\";\nimport Text from \"../Text\";\nimport { Title } from \"./WebHeader\";\n\nconst MobileNotSupported = () => {\n    const { background } = useColors();\n    return (\n        <View\n            style={{\n                justifyContent: \"center\",\n                alignItems: \"center\",\n                backgroundColor: background,\n                width: \"100%\",\n                minHeight: \"100%\",\n                padding: Spacing.normal\n            }}>\n            <Image\n                source={require(\"../../../assets/sushiswap.jpg\")}\n                style={{ width: 192, height: 192, marginBottom: Spacing.normal }}\n            />\n            <Title />\n            <Text style={{ marginTop: Spacing.normal }}>Mobile devices not supported yet.</Text>\n            <Social />\n        </View>\n    );\n};\n\nconst Social = () => {\n    const onPressTwitter = useCallback(() => Linking.openURL(\"https://twitter.com/LevxApp\"), []);\n    const onPressGithub = useCallback(() => Linking.openURL(\"https://github.com/sushiswap-community\"), []);\n    const onPressDiscord = useCallback(() => Linking.openURL(\"https://discord.gg/3QKsgf\"), []);\n    return (\n        <FlexView style={{ marginTop: Spacing.large, marginBottom: Spacing.huge, justifyContent: \"center\" }}>\n            <Icon\n                type={\"material-community\"}\n                name={\"github-face\"}\n                color={\"white\"}\n                reverseColor={\"black\"}\n                reverse={true}\n                raised={true}\n                onPress={onPressGithub}\n            />\n            <SocialIcon type=\"twitter\" onPress={onPressTwitter} />\n            <Icon\n                type={\"material-community\"}\n                name={\"discord\"}\n                color={\"#7289da\"}\n                reverse={true}\n                raised={true}\n                onPress={onPressDiscord}\n            />\n        </FlexView>\n    );\n};\n\nexport default MobileNotSupported;\n","import React, { useContext } from \"react\";\nimport { Platform, View } from \"react-native\";\n\nimport { AppLoading } from \"expo\";\nimport { DeviceType } from \"expo-device\";\n\nimport AppHeader from \"../components/app/AppHeader\";\nimport Text from \"../components/Text\";\nimport ConnectToWallet from \"../components/web/ConnectToWallet\";\nimport MobileNotSupported from \"../components/web/MobileNotSupported\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport { GlobalContext } from \"../context/GlobalContext\";\nimport useColors from \"../hooks/useColors\";\n\nconst Screen = props => {\n    const { deviceType } = useContext(GlobalContext);\n    const { address, chainId } = useContext(EthersContext);\n    const { background } = useColors();\n    if (!deviceType) {\n        return <AppLoading />;\n    }\n    if (Platform.OS === \"web\") {\n        if (deviceType === DeviceType.PHONE) return <MobileNotSupported />;\n        if (!address) return <ConnectToWallet />;\n        if (chainId !== 1)\n            return (\n                <View style={{ flex: 1, alignItems: \"center\", justifyContent: \"center\", backgroundColor: background }}>\n                    <Text light={true} style={{ textAlign: \"center\" }}>\n                        {\"Please switch network to\\n'Ethereum Mainnet'\"}\n                    </Text>\n                </View>\n            );\n        return <View {...props} style={[{ flex: 1 }, props.style]} />;\n    } else {\n        return (\n            <View style={{ width: \"100%\", height: \"100%\" }}>\n                <AppHeader />\n                <View {...props} style={[{ flex: 1 }, props.style]} />\n            </View>\n        );\n    }\n};\n\nexport default Screen;\n","import React, { FC, useCallback, useState } from \"react\";\nimport { Image, TouchableHighlight, View } from \"react-native\";\nimport { Icon } from \"react-native-elements\";\nimport { Hoverable } from \"react-native-web-hover\";\n\nimport { ethers } from \"ethers\";\nimport useAsyncEffect from \"use-async-effect\";\nimport ApproveButton from \"../components/ApproveButton\";\nimport Button from \"../components/Button\";\nimport ButtonGroup from \"../components/ButtonGroup\";\nimport CloseIcon from \"../components/CloseIcon\";\nimport Column from \"../components/Column\";\nimport Container from \"../components/Container\";\nimport Content from \"../components/Content\";\nimport ErrorMessage from \"../components/ErrorMessage\";\nimport FetchingButton from \"../components/FetchingButton\";\nimport FlexView from \"../components/FlexView\";\nimport InsufficientBalanceButton from \"../components/InsufficientBalanceButton\";\nimport LPTokenSelect, { LPTokenItemProps } from \"../components/LPTokenSelect\";\nimport Meta from \"../components/Meta\";\nimport Notice from \"../components/Notice\";\nimport SelectIcon from \"../components/SelectIcon\";\nimport Subtitle from \"../components/Subtitle\";\nimport Text from \"../components/Text\";\nimport TokenInput from \"../components/TokenInput\";\nimport { MASTER_CHEF } from \"../constants/contracts\";\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport useFarmingState, { Action, FarmingState } from \"../hooks/useFarmingState\";\nimport useLinker from \"../hooks/useLinker\";\nimport LPToken from \"../types/LPToken\";\nimport MetamaskError from \"../types/MetamaskError\";\nimport { formatBalance, isEmptyValue, parseBalance } from \"../utils\";\nimport Screen from \"./Screen\";\n\nconst Actions = [\"deposit\", \"withdraw\"];\n\nconst FarmingScreen = () => {\n    return (\n        <Screen>\n            <Container>\n                <Content>\n                    <View style={{ alignItems: \"center\", marginBottom: Spacing.large }}>\n                        <Farming />\n                    </View>\n                </Content>\n            </Container>\n        </Screen>\n    );\n};\n\nconst Farming = () => {\n    const state = useFarmingState();\n    const emptyText =\n        state.filteredBy === \"amountDeposited\"\n            ? \"You don't have any pool with deposit.\"\n            : state.filteredBy === \"balance\"\n            ? \"You don't have any pool with balance.\"\n            : \"Temporarily unable to load pools.\";\n    return (\n        <>\n            <Column>\n                <Text h4={true} style={{ textAlign: \"center\", marginBottom: Spacing.normal }}>\n                    🌾 Farming\n                </Text>\n            </Column>\n            <LPTokenSelect\n                state={state}\n                title={\"1. Select a pool for yield farming:\"}\n                emptyText={emptyText}\n                showFilter={!state.selectedLPToken}\n                filter={state.filteredBy}\n                onFilterChanged={state.setFilteredBy}\n                Item={TokenItem}\n            />\n            <ActionSelect state={state} />\n            <Deposit state={state} />\n            <Withdraw state={state} />\n        </>\n    );\n};\n\n// tslint:disable-next-line:max-func-body-length\nconst TokenItem: FC<LPTokenItemProps> = props => {\n    const { background, backgroundHovered, textMedium } = useColors();\n    const amount =\n        (props.filter === \"balance\"\n            ? props.token.balance\n            : props.filter === \"amountDeposited\"\n            ? props.token.amountDeposited\n            : props.token.totalDeposited) || \"0\";\n    const onPress = useCallback(() => {\n        props.onSelectToken(props.token);\n    }, [props.onSelectToken, props.token]);\n    const field =\n        props.filter === \"amountDeposited\" ? \"My Deposit\" : props.filter === \"balance\" ? \"My Balance\" : \"Total Deposit\";\n    return (\n        <Hoverable>\n            {({ hovered }) => (\n                <TouchableHighlight onPress={onPress}>\n                    <View style={{ backgroundColor: hovered ? backgroundHovered : background }}>\n                        <FlexView style={{ alignItems: \"center\", margin: Spacing.small }}>\n                            <View>\n                                <LogoSymbol token={props.token.tokenA} />\n                                <LogoSymbol token={props.token.tokenB} />\n                            </View>\n                            <View style={{ flex: 1 }}>\n                                <Text style={{ textAlign: \"right\", fontSize: 15 }}>{field}</Text>\n                                <Text light={true} style={{ textAlign: \"right\", fontSize: 22, color: textMedium }}>\n                                    {formatBalance(amount, props.token.decimals, 8)}\n                                </Text>\n                            </View>\n                            {props.selected ? <CloseIcon /> : <SelectIcon />}\n                        </FlexView>\n                    </View>\n                </TouchableHighlight>\n            )}\n        </Hoverable>\n    );\n};\n\nconst LogoSymbol = ({ token }) => {\n    const { textMedium } = useColors();\n    const [isEmpty, setIsEmpty] = useState(false);\n    const source = !token.logoURI || isEmpty ? require(\"../../assets/empty-token.png\") : { uri: token.logoURI };\n    return (\n        <FlexView style={{ alignItems: \"center\", marginBottom: Spacing.tiny }}>\n            <Image\n                source={source}\n                onError={() => setIsEmpty(true)}\n                style={{ width: 24, height: 24, backgroundColor: \"white\", borderRadius: 12 }}\n            />\n            <Text light={true} style={{ fontSize: 22, color: textMedium, marginLeft: Spacing.small }}>\n                {token.symbol.replace(/\\+/g, \"+\\n\")}\n            </Text>\n        </FlexView>\n    );\n};\n\nconst ActionSelect = ({ state }: { state: FarmingState }) => {\n    if (!state.selectedLPToken) {\n        return <Column noTopMargin={true} />;\n    }\n    const index = state.action ? Actions.indexOf(state.action) : null;\n    const onPress = useCallback((i: number) => {\n        state.setAction(Actions[i] as Action);\n    }, []);\n    const balance = formatBalance(state.selectedLPToken!.balance, state.selectedLPToken!.decimals);\n    const deposit = formatBalance(state.selectedLPToken.amountDeposited || \"0\", state.selectedLPToken!.decimals);\n    return (\n        <Column>\n            <Subtitle text={\"2. Do you want to DEPOSIT or WITHDRAW?\"} />\n            <View style={{ marginHorizontal: Spacing.small, marginBottom: Spacing.normal }}>\n                <Meta label={\"My Balance\"} text={balance} />\n                <Meta label={\"My Deposit\"} text={deposit} />\n            </View>\n            <ButtonGroup\n                selectedIndex={index}\n                onPress={onPress}\n                buttons={[{ element: DepositText }, { element: WithdrawText }]}\n                containerStyle={{ marginHorizontal: Spacing.small }}\n            />\n        </Column>\n    );\n};\n\nconst DepositText = () => {\n    return (\n        <FlexView style={{ alignItems: \"center\" }}>\n            <Text style={{ color: \"black\" }}>Deposit</Text>\n            <Icon\n                type={\"material-community\"}\n                name={\"chevron-right\"}\n                color={\"black\"}\n                style={{ marginLeft: Spacing.tiny, marginTop: 2 }}\n            />\n        </FlexView>\n    );\n};\n\nconst WithdrawText = () => {\n    return (\n        <FlexView style={{ alignItems: \"center\" }}>\n            <Text style={{ color: \"black\" }}>Withdraw</Text>\n            <Icon\n                type={\"material-community\"}\n                name={\"chevron-right\"}\n                color={\"black\"}\n                style={{ marginLeft: Spacing.tiny, marginTop: 2 }}\n            />\n        </FlexView>\n    );\n};\n\nconst Deposit = ({ state }: { state: FarmingState }) => {\n    if (!state.selectedLPToken || state.action !== \"deposit\") {\n        return <Column noTopMargin={true} />;\n    }\n    return (\n        <Column>\n            <AddLiquidityNotice state={state} />\n            <TokenInput\n                title={\"3. Amount of tokens to DEPOSIT:\"}\n                token={state.selectedLPToken}\n                hidden={state.selectedLPToken.balance.isZero()}\n                amount={state.amount}\n                onAmountChanged={state.setAmount}\n            />\n            <DepositInfo state={state} />\n            <DepositControls state={state} />\n        </Column>\n    );\n};\n\nconst AddLiquidityNotice = ({ state }: { state: FarmingState }) => {\n    const { green } = useColors();\n    if (!state.selectedLPToken!.balance.isZero()) {\n        return <Column noTopMargin={true} />;\n    }\n    return (\n        <>\n            <View style={{ marginHorizontal: Spacing.small }}>\n                <Notice\n                    color={green}\n                    text={\n                        \"You need some \" +\n                        state.selectedLPToken!.symbol +\n                        \" token to start farming. Add liquidity to get the LP token.\"\n                    }\n                />\n            </View>\n            <AddLiquidityButton />\n        </>\n    );\n};\n\nconst DepositInfo = ({ state }: { state: FarmingState }) => {\n    if (state.selectedLPToken!.balance.isZero()) {\n        return <Column noTopMargin={true} />;\n    }\n    const balance = formatBalance(state.selectedLPToken!.balance, state.selectedLPToken!.decimals);\n    const sushiReward =\n        state.expectedSushiRewardPerBlock && state.amount\n            ? formatBalance(\n                  state.expectedSushiRewardPerBlock\n                      .mul(parseBalance(state.amount, 18))\n                      .div(ethers.BigNumber.from(10).pow(18)),\n                  18\n              )\n            : null;\n    return (\n        <Column noTopMargin={true}>\n            <Meta label={\"My Balance\"} text={balance} />\n            {!isEmptyValue(state.amount) && <Meta label={\"SUSHI Reward per Block\"} text={sushiReward || \"…\"} />}\n        </Column>\n    );\n};\n\nconst DepositControls = ({ state }: { state: FarmingState }) => {\n    const [error, setError] = useState<MetamaskError>({});\n    useAsyncEffect(() => setError({}), [state.selectedLPToken]);\n    if (state.selectedLPToken!.balance.isZero()) {\n        return <Column noTopMargin={true} />;\n    }\n    const approveRequired = !state.selectedLPTokenAllowed;\n    const disabled = approveRequired || isEmptyValue(state.amount);\n    return (\n        <Column>\n            {parseBalance(state.amount, state.selectedLPToken!.decimals).gt(state.selectedLPToken!.balance) ? (\n                <InsufficientBalanceButton symbol={state.selectedLPToken!.symbol} />\n            ) : state.loading ? (\n                <FetchingButton />\n            ) : (\n                <>\n                    <ApproveButton\n                        token={state.selectedLPToken!}\n                        spender={MASTER_CHEF}\n                        onSuccess={() => state.setSelectedLPTokenAllowed(true)}\n                        onError={setError}\n                        hidden={isEmptyValue(state.amount) || !approveRequired}\n                    />\n                    <DepositButton state={state} onError={setError} disabled={disabled} />\n                </>\n            )}\n            {error.message && error.code !== 4001 && <ErrorMessage error={error} />}\n        </Column>\n    );\n};\n\nconst AddLiquidityButton = () => {\n    const { green } = useColors();\n    const onPress = useLinker(\"/liquidity\", \"Liquidity\");\n    return (\n        <Button\n            color={green}\n            title={\"Add Liquidity\"}\n            containerStyle={{ marginTop: Spacing.normal }}\n            onPress={onPress}\n        />\n    );\n};\n\nconst DepositButton = ({\n    state,\n    onError,\n    disabled\n}: {\n    state: FarmingState;\n    onError: (e) => void;\n    disabled: boolean;\n}) => {\n    const onPress = useCallback(() => {\n        onError({});\n        state.onDeposit().catch(onError);\n    }, [state.onDeposit, onError]);\n    return <Button size={\"large\"} title={\"Deposit\"} disabled={disabled} loading={state.depositing} onPress={onPress} />;\n};\n\nconst Withdraw = ({ state }: { state: FarmingState }) => {\n    if (!state.selectedLPToken || state.action !== \"withdraw\") {\n        return <Column noTopMargin={true} />;\n    }\n    const token: LPToken = {\n        ...state.selectedLPToken,\n        balance: state.selectedLPToken.amountDeposited || ethers.constants.Zero\n    };\n    return (\n        <Column>\n            <NoLPTokenNotice state={state} />\n            <TokenInput\n                title={\"3. Amount of tokens to WITHDRAW:\"}\n                token={token}\n                hidden={state.loading || state.selectedLPToken.amountDeposited?.isZero() || false}\n                amount={state.amount}\n                onAmountChanged={state.setAmount}\n            />\n            <WithdrawInfo state={state} />\n            <WithdrawControls state={state} />\n        </Column>\n    );\n};\n\nconst NoLPTokenNotice = ({ state }: { state: FarmingState }) => {\n    if (state.loading || !state.selectedLPToken || !state.selectedLPToken.amountDeposited?.isZero()) {\n        return <Column noTopMargin={true} />;\n    }\n    return (\n        <Column noTopMargin={true}>\n            <View style={{ marginHorizontal: Spacing.small }}>\n                <Notice\n                    text={\"You don't have any \" + state.selectedLPToken!.symbol + \" token deposited. Deposit it first.\"}\n                />\n            </View>\n        </Column>\n    );\n};\n\nconst WithdrawInfo = ({ state }: { state: FarmingState }) => {\n    if (\n        state.loading ||\n        !state.selectedLPToken ||\n        !state.selectedLPToken.amountDeposited ||\n        state.selectedLPToken.amountDeposited?.isZero() ||\n        !state.selectedLPToken.pendingSushi\n    ) {\n        return <Column noTopMargin={true} />;\n    }\n    const deposit = formatBalance(state.selectedLPToken.amountDeposited, state.selectedLPToken!.decimals);\n    const pendingSushi = formatBalance(\n        state.selectedLPToken.pendingSushi || ethers.constants.Zero,\n        state.selectedLPToken!.decimals\n    );\n    return (\n        <Column noTopMargin={true}>\n            <Meta label={\"My Deposit\"} text={deposit} />\n            <Meta label={\"Pending Sushi Reward\"} text={pendingSushi} />\n            <View style={{ marginTop: Spacing.normal, marginHorizontal: Spacing.small }}>\n                <Notice text={\"All pending sushi reward will be transferred to you if you withdraw.\"} />\n            </View>\n        </Column>\n    );\n};\n\nconst WithdrawControls = ({ state }: { state: FarmingState }) => {\n    const [error, setError] = useState<MetamaskError>({});\n    useAsyncEffect(() => setError({}), [state.selectedLPToken]);\n    if (state.loading) {\n        return (\n            <Column>\n                <FetchingButton />\n            </Column>\n        );\n    }\n    if (\n        !state.selectedLPToken ||\n        !state.selectedLPToken.amountDeposited ||\n        state.selectedLPToken.amountDeposited.isZero()\n    ) {\n        return <Column noTopMargin={true} />;\n    }\n    return (\n        <Column>\n            {parseBalance(state.amount, state.selectedLPToken!.decimals).gt(state.selectedLPToken.amountDeposited) ? (\n                <InsufficientBalanceButton symbol={state.selectedLPToken!.symbol} />\n            ) : (\n                <WithdrawButton state={state} onError={setError} disabled={isEmptyValue(state.amount)} />\n            )}\n            {error.message && error.code !== 4001 && <ErrorMessage error={error} />}\n        </Column>\n    );\n};\n\nconst WithdrawButton = ({\n    state,\n    onError,\n    disabled\n}: {\n    state: FarmingState;\n    onError: (e) => void;\n    disabled: boolean;\n}) => {\n    const onPress = useCallback(() => {\n        onError({});\n        state.onWithdraw().catch(onError);\n    }, [state.onWithdraw, onError]);\n    return (\n        <Button size={\"large\"} title={\"Withdraw\"} disabled={disabled} loading={state.withdrawing} onPress={onPress} />\n    );\n};\n\nexport default FarmingScreen;\n","import React, { FC, useCallback, useContext, useMemo, useState } from \"react\";\nimport { ActivityIndicator, FlatList, Image, TouchableHighlight, View } from \"react-native\";\nimport { Hoverable } from \"react-native-web-hover\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport useColors from \"../hooks/useColors\";\nimport Token from \"../types/Token\";\nimport { formatBalance } from \"../utils\";\nimport Border from \"./Border\";\nimport CloseIcon from \"./CloseIcon\";\nimport Column from \"./Column\";\nimport FlexView from \"./FlexView\";\nimport SelectIcon from \"./SelectIcon\";\nimport Subtitle from \"./Subtitle\";\nimport Text from \"./Text\";\n\ninterface TokenSelectProps {\n    title: string;\n    hidden: boolean;\n    symbol: string;\n    onChangeSymbol: (symbol: string) => void;\n    filterTokens: (token: Token) => boolean;\n}\n\nconst TokenSelect: FC<TokenSelectProps> = props => {\n    const { tokens } = useContext(EthersContext);\n    const token = tokens.find(t => t.symbol === props.symbol);\n    const onSelectToken = useCallback(\n        t => {\n            props.onChangeSymbol(t.symbol);\n        },\n        [props.onChangeSymbol]\n    );\n    const onUnselectToken = useCallback(() => {\n        props.onChangeSymbol(\"\");\n    }, [props.onChangeSymbol]);\n    if (/*!props.from && props.oppositeSymbol === \"\"*/ props.hidden) {\n        return <Column noTopMargin={true} />;\n    }\n    return (\n        <Column>\n            <Subtitle text={props.title} />\n            {token ? (\n                <TokenItem token={token} selected={true} onSelectToken={onUnselectToken} />\n            ) : (\n                <TokenList filterTokens={props.filterTokens} onSelectToken={onSelectToken} />\n            )}\n        </Column>\n    );\n};\n\n// tslint:disable-next-line:max-func-body-length\nconst TokenList = (props: { filterTokens: (token: Token) => boolean; onSelectToken: (token: Token) => void }) => {\n    const { loadingTokens, tokens } = useContext(EthersContext);\n    const renderItem = useCallback(\n        ({ item }) => {\n            return <TokenItem key={item.address} token={item} selected={false} onSelectToken={props.onSelectToken} />;\n        },\n        [props.onSelectToken]\n    );\n    const data = useMemo(\n        () =>\n            tokens\n                .filter(props.filterTokens)\n                .sort(\n                    (t1, t2) =>\n                        (t2.balance.isZero() ? 0 : 10000000000) -\n                        (t1.balance.isZero() ? 0 : 10000000000) +\n                        t1.symbol.localeCompare(t2.symbol)\n                ),\n        [tokens]\n    );\n    return loadingTokens ? (\n        <ActivityIndicator size={\"large\"} style={{ marginTop: Spacing.large }} />\n    ) : data.length === 0 ? (\n        <EmptyList />\n    ) : (\n        <FlatList\n            keyExtractor={item => JSON.stringify(item)}\n            data={data}\n            renderItem={renderItem}\n            ItemSeparatorComponent={Border}\n        />\n    );\n};\n\nconst EmptyList = () => {\n    return (\n        <View style={{ margin: Spacing.normal }}>\n            <Text light={true} style={{ textAlign: \"center\", width: \"100%\" }}>\n                {\"You don't have any token with balance.\\nTransfer tokens to your address first.\"}\n            </Text>\n        </View>\n    );\n};\n\nconst TokenItem = (props: { token: Token; selected: boolean; onSelectToken: (token: Token) => void }) => {\n    const { background, backgroundHovered, textMedium } = useColors();\n    const [isEmpty, setIsEmpty] = useState(false);\n    const onPress = useCallback(() => {\n        props.onSelectToken(props.token);\n    }, [props.onSelectToken, props.token]);\n    const source = isEmpty ? require(\"../../assets/empty-token.png\") : { uri: props.token.logoURI };\n    return (\n        <Hoverable>\n            {({ hovered }) => (\n                <TouchableHighlight onPress={onPress}>\n                    <View style={{ backgroundColor: hovered ? backgroundHovered : background }}>\n                        <FlexView style={{ alignItems: \"center\", margin: Spacing.small }}>\n                            <Image\n                                source={source}\n                                onError={() => setIsEmpty(true)}\n                                style={{ width: 24, height: 24, backgroundColor: \"white\", borderRadius: 12 }}\n                            />\n                            <Text light={true} style={{ marginLeft: Spacing.small, fontSize: 22, color: textMedium }}>\n                                {props.token.symbol}\n                            </Text>\n                            <Text light={true} style={{ flex: 1, textAlign: \"right\", fontSize: 22, color: textMedium }}>\n                                {formatBalance(props.token.balance, props.token.decimals, 8)}\n                            </Text>\n                            {props.selected ? <CloseIcon /> : <SelectIcon />}\n                        </FlexView>\n                    </View>\n                </TouchableHighlight>\n            )}\n        </Hoverable>\n    );\n};\n\nexport default TokenSelect;\n","import React from \"react\";\n\nimport { TokenPairState } from \"../hooks/useTokenPairState\";\nimport Button from \"./Button\";\n\nconst UnsupportedButton = ({ state }: { state: TokenPairState }) => {\n    return <Button size={\"large\"} title={state.fromSymbol + \"-\" + state.toSymbol + \" Not Supported\"} disabled={true} />;\n};\n\nexport default UnsupportedButton;\n","import React, { useCallback, useState } from \"react\";\n\nimport { ethers } from \"ethers\";\nimport useAsyncEffect from \"use-async-effect\";\nimport { ROUTER } from \"../constants/contracts\";\nimport { Spacing } from \"../constants/dimension\";\nimport { AddLiquidityState } from \"../hooks/useAddLiquidityState\";\nimport MetamaskError from \"../types/MetamaskError\";\nimport { convertAmount, convertToken, formatBalance, isEmptyValue, parseBalance } from \"../utils\";\nimport ApproveButton from \"./ApproveButton\";\nimport Button from \"./Button\";\nimport Column from \"./Column\";\nimport ErrorMessage from \"./ErrorMessage\";\nimport FetchingButton from \"./FetchingButton\";\nimport InsufficientBalanceButton from \"./InsufficientBalanceButton\";\nimport Meta from \"./Meta\";\nimport Notice from \"./Notice\";\nimport Text from \"./Text\";\nimport TokenInput from \"./TokenInput\";\nimport TokenSelect from \"./TokenSelect\";\nimport UnsupportedButton from \"./UnsupportedButton\";\n\nconst AddLiquidity = ({ state }: { state: AddLiquidityState }) => (\n    <>\n        <Column>\n            <Text h4={true} style={{ textAlign: \"center\", marginBottom: Spacing.normal }}>\n                🔥 Add Liquidity\n            </Text>\n        </Column>\n        <TokenSelect\n            title={\"1. Select the 1st token you want to ADD:\"}\n            hidden={false}\n            symbol={state.fromSymbol}\n            onChangeSymbol={state.setFromSymbol}\n            filterTokens={token => token.balance && !token.balance.isZero()}\n        />\n        <TokenSelect\n            title={\"2. Select the 2nd token you want to ADD:\"}\n            hidden={state.fromSymbol === \"\"}\n            symbol={state.toSymbol}\n            onChangeSymbol={state.setToSymbol}\n            filterTokens={token => token.symbol !== state.fromSymbol && token.balance && !token.balance.isZero()}\n        />\n        <FromTokenInput state={state} />\n        <ToTokenInput state={state} />\n        <PriceInfo state={state} />\n        <Controls state={state} />\n    </>\n);\n\nconst FromTokenInput = ({ state }: { state: AddLiquidityState }) => {\n    const onAmountChanged = useCallback(\n        (newAmount: string) => {\n            state.setFromAmount(newAmount);\n            if (state.pair && state.fromToken) {\n                const fromPrice = state.pair.priceOf(convertToken(state.fromToken));\n                state.setToAmount(fromPrice.quote(convertAmount(state.fromToken, newAmount)).toExact());\n            }\n        },\n        [state.pair, state.fromToken]\n    );\n    return (\n        <TokenInput\n            title={\"3. How many \" + state.fromSymbol + \"-\" + state.toSymbol + \" do you want to supply?\"}\n            token={state.fromToken}\n            hidden={!state.fromToken || !state.toToken}\n            amount={state.fromAmount}\n            onAmountChanged={onAmountChanged}\n        />\n    );\n};\n\nconst ToTokenInput = ({ state }: { state: AddLiquidityState }) => {\n    const onAmountChanged = useCallback(\n        (newAmount: string) => {\n            state.setToAmount(newAmount);\n            if (state.pair && state.toToken) {\n                const toPrice = state.pair.priceOf(convertToken(state.toToken));\n                state.setFromAmount(toPrice.quote(convertAmount(state.toToken, newAmount)).toExact());\n            }\n        },\n        [state.pair, state.toToken]\n    );\n    return (\n        <TokenInput\n            token={state.toToken}\n            hidden={!state.fromToken || !state.toToken}\n            amount={state.toAmount}\n            onAmountChanged={onAmountChanged}\n        />\n    );\n};\n\nconst PriceInfo = ({ state }: { state: AddLiquidityState }) => {\n    if (!isEmptyValue(state.fromAmount) && !state.loading && !state.pair) {\n        const initialPrice = formatBalance(\n            parseBalance(state.toAmount, state.toToken?.decimals)\n                .mul(ethers.BigNumber.from(10).pow(8))\n                .div(parseBalance(state.fromAmount, state.fromToken?.decimals)),\n            8\n        );\n        return (\n            <Column noTopMargin={true}>\n                <Notice\n                    text={\n                        \"You are the first liquidity provider.\\n\" +\n                        \"The ratio of tokens you add will set the price of this pool.\"\n                    }\n                />\n                {!!state.fromAmount && !!state.toAmount && (\n                    <Price price={initialPrice} fromSymbol={state.fromSymbol} toSymbol={state.toSymbol} />\n                )}\n            </Column>\n        );\n    }\n    if (!state.fromToken || !state.toToken) {\n        return <Column noTopMargin={true} />;\n    }\n    const price = state.pair ? state.pair.priceOf(convertToken(state.fromToken)).toSignificant(8) : \"…\";\n    return (\n        <Column noTopMargin={true}>\n            <Price price={price} fromSymbol={state.fromSymbol} toSymbol={state.toSymbol} />\n        </Column>\n    );\n};\n\nconst Price = ({ price, fromSymbol, toSymbol }) => (\n    <Meta label={\"Price\"} text={price + \" \" + toSymbol + \" = 1 \" + fromSymbol} />\n);\n\n// tslint:disable-next-line:max-func-body-length\nconst Controls = ({ state }: { state: AddLiquidityState }) => {\n    const [error, setError] = useState<MetamaskError>({});\n    useAsyncEffect(() => setError({}), [state.fromSymbol, state.toSymbol, state.fromAmount]);\n    if (!state.fromToken || !state.toToken) {\n        return <Column noTopMargin={true} />;\n    }\n    const insufficientFromToken = parseBalance(state.fromAmount, state.fromToken.decimals).gt(state.fromToken.balance);\n    const insufficientToToken = parseBalance(state.toAmount, state.toToken.decimals).gt(state.toToken.balance);\n    const fromApproveRequired = state.fromSymbol !== \"ETH\" && !state.fromTokenAllowed;\n    const toApproveRequired = state.toSymbol !== \"ETH\" && !state.toTokenAllowed;\n    const disabled =\n        fromApproveRequired || toApproveRequired || isEmptyValue(state.fromAmount) || isEmptyValue(state.toAmount);\n    return (\n        <Column>\n            {insufficientFromToken ? (\n                <InsufficientBalanceButton symbol={state.fromSymbol} />\n            ) : insufficientToToken ? (\n                <InsufficientBalanceButton symbol={state.toSymbol} />\n            ) : state.loading || !state.pair ? (\n                <FetchingButton />\n            ) : (state.fromSymbol === \"ETH\" && state.toSymbol === \"WETH\") ||\n              (state.fromSymbol === \"WETH\" && state.toSymbol === \"ETH\") ? (\n                <UnsupportedButton state={state} />\n            ) : (\n                <>\n                    <ApproveButton\n                        token={state.fromToken}\n                        spender={ROUTER}\n                        onSuccess={() => state.setFromTokenAllowed(true)}\n                        onError={setError}\n                        hidden={!fromApproveRequired}\n                    />\n                    <ApproveButton\n                        token={state.toToken}\n                        spender={ROUTER}\n                        onSuccess={() => state.setToTokenAllowed(true)}\n                        onError={setError}\n                        hidden={!toApproveRequired}\n                    />\n                    <SupplyButton state={state} onError={setError} disabled={disabled} />\n                </>\n            )}\n            {error.message && error.code !== 4001 && <ErrorMessage error={error} />}\n        </Column>\n    );\n};\n\nconst SupplyButton = ({\n    state,\n    onError,\n    disabled\n}: {\n    state: AddLiquidityState;\n    onError: (e) => void;\n    disabled: boolean;\n}) => {\n    const onPress = useCallback(() => {\n        onError({});\n        state.onAdd().catch(onError);\n    }, [state.onAdd, onError]);\n    return (\n        <Button\n            size={\"large\"}\n            title={\"Supply \" + state.fromSymbol + \"-\" + state.toSymbol}\n            disabled={disabled}\n            loading={state.adding}\n            onPress={onPress}\n        />\n    );\n};\n\nexport default AddLiquidity;\n","import React, { FC, useCallback, useState } from \"react\";\nimport { Image, TouchableHighlight, View } from \"react-native\";\nimport { Hoverable } from \"react-native-web-hover\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport { formatBalance } from \"../utils\";\nimport CloseIcon from \"./CloseIcon\";\nimport FlexView from \"./FlexView\";\nimport { LPTokenItemProps } from \"./LPTokenSelect\";\nimport SelectIcon from \"./SelectIcon\";\nimport Text from \"./Text\";\n\nconst LPTokenItem: FC<LPTokenItemProps> = props => {\n    const { background, backgroundHovered, textMedium } = useColors();\n    const balance = formatBalance(props.token.balance, props.token.decimals, 18);\n    const onPress = useCallback(() => {\n        props.onSelectToken(props.token);\n    }, [props.onSelectToken, props.token]);\n    return (\n        <Hoverable>\n            {({ hovered }) => (\n                <TouchableHighlight onPress={onPress}>\n                    <View style={{ backgroundColor: hovered ? backgroundHovered : background }}>\n                        <FlexView style={{ alignItems: \"center\", margin: Spacing.small }}>\n                            <View>\n                                <LogoSymbol token={props.token.tokenA} />\n                                <LogoSymbol token={props.token.tokenB} />\n                            </View>\n                            <View style={{ flex: 1 }}>\n                                <Text note={true} style={{ textAlign: \"right\" }}>\n                                    My Balance\n                                </Text>\n                                <Text light={true} style={{ textAlign: \"right\", fontSize: 22, color: textMedium }}>\n                                    {balance}\n                                </Text>\n                            </View>\n                            {props.selected ? <CloseIcon /> : <SelectIcon />}\n                        </FlexView>\n                    </View>\n                </TouchableHighlight>\n            )}\n        </Hoverable>\n    );\n};\n\nconst LogoSymbol = ({ token }) => {\n    const { textMedium } = useColors();\n    const [isEmpty, setIsEmpty] = useState(false);\n    const source = isEmpty ? require(\"../../assets/empty-token.png\") : { uri: token.logoURI };\n    return (\n        <FlexView style={{ alignItems: \"center\", marginBottom: Spacing.tiny }}>\n            <Image\n                source={source}\n                onError={() => setIsEmpty(true)}\n                style={{ width: 24, height: 24, backgroundColor: \"white\", borderRadius: 12 }}\n            />\n            <Text light={true} style={{ fontSize: 22, color: textMedium, marginLeft: Spacing.small }}>\n                {token.symbol.replace(/\\+/g, \"+\\n\")}\n            </Text>\n        </FlexView>\n    );\n};\n\nexport default LPTokenItem;\n","import React, { useCallback, useState } from \"react\";\nimport { Icon } from \"react-native-elements\";\n\nimport useAsyncEffect from \"use-async-effect\";\nimport { ROUTER } from \"../constants/contracts\";\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport { RemoveLiquidityState } from \"../hooks/useRemoveLiquidityState\";\nimport MetamaskError from \"../types/MetamaskError\";\nimport { isEmptyValue, parseBalance } from \"../utils\";\nimport ApproveButton from \"./ApproveButton\";\nimport Button from \"./Button\";\nimport Column from \"./Column\";\nimport ErrorMessage from \"./ErrorMessage\";\nimport FetchingButton from \"./FetchingButton\";\nimport InsufficientBalanceButton from \"./InsufficientBalanceButton\";\nimport LPTokenItem from \"./LPTokenItem\";\nimport LPTokenSelect from \"./LPTokenSelect\";\nimport Text from \"./Text\";\nimport TokenInput from \"./TokenInput\";\n\nconst RemoveLiquidity = ({ state }: { state: RemoveLiquidityState }) => (\n    <>\n        <Column>\n            <Text h4={true} style={{ textAlign: \"center\", marginBottom: Spacing.normal }}>\n                🎉 Remove Liquidity\n            </Text>\n        </Column>\n        <LPTokenSelect\n            state={state}\n            title={\"1. Select the pool to REMOVE liquidity from:\"}\n            emptyText={\"You don't have any liquidity.\"}\n            Item={LPTokenItem}\n        />\n        <TokenInput\n            title={\"2. How many tokens do you want to REMOVE?\"}\n            token={state.selectedLPToken}\n            hidden={!state.selectedLPToken}\n            amount={state.amount}\n            onAmountChanged={state.setAmount}\n        />\n        <AmountInfo state={state} />\n        <Controls state={state} />\n    </>\n);\n\nconst AmountInfo = ({ state }: { state: RemoveLiquidityState }) => {\n    if (!state.selectedLPToken || isEmptyValue(state.fromAmount) || isEmptyValue(state.toAmount)) {\n        return <Column noTopMargin={true} />;\n    }\n    return (\n        <Column noTopMargin={true}>\n            <ArrowDown />\n            <Amount amount={state.fromAmount} token={state.fromToken} />\n            <Amount amount={state.toAmount} token={state.toToken} />\n        </Column>\n    );\n};\n\nconst ArrowDown = () => {\n    const { textLight } = useColors();\n    return <Icon type={\"material-community\"} name={\"arrow-down\"} color={textLight} style={{ margin: Spacing.small }} />;\n};\n\nconst Amount = ({ amount, token }) => {\n    const symbol = token.symbol === \"WETH\" ? \"ETH\" : token.symbol;\n    return (\n        <Text style={{ fontSize: 22, textAlign: \"center\" }}>\n            {amount} {symbol}\n        </Text>\n    );\n};\n// tslint:disable-next-line:max-func-body-length\nconst Controls = ({ state }: { state: RemoveLiquidityState }) => {\n    const [error, setError] = useState<MetamaskError>({});\n    useAsyncEffect(() => setError({}), [state.fromSymbol, state.toSymbol, state.fromAmount]);\n    if (!state.selectedLPToken) {\n        return <Column noTopMargin={true} />;\n    }\n    const approveRequired = !state.selectedLPTokenAllowed;\n    const disabled = approveRequired || isEmptyValue(state.amount);\n    return (\n        <Column>\n            {parseBalance(state.amount, state.selectedLPToken.decimals).gt(state.selectedLPToken.balance) ? (\n                <InsufficientBalanceButton symbol={state.selectedLPToken.symbol} />\n            ) : state.loading || !state.pair ? (\n                <FetchingButton />\n            ) : (\n                <>\n                    <ApproveButton\n                        token={state.selectedLPToken}\n                        spender={ROUTER}\n                        onSuccess={() => state.setSelectedLPTokenAllowed(true)}\n                        onError={setError}\n                        hidden={!approveRequired}\n                    />\n                    <RemoveButton state={state} onError={setError} disabled={disabled} />\n                </>\n            )}\n            {error.message && error.code !== 4001 && <ErrorMessage error={error} />}\n        </Column>\n    );\n};\n\nconst RemoveButton = ({\n    state,\n    onError,\n    disabled\n}: {\n    state: RemoveLiquidityState;\n    onError: (e) => void;\n    disabled: boolean;\n}) => {\n    const onPress = useCallback(() => {\n        onError({});\n        state.onRemove().catch(onError);\n    }, [state.onRemove, onError]);\n    return <Button size={\"large\"} title={\"Remove\"} disabled={disabled} loading={state.removing} onPress={onPress} />;\n};\n\nexport default RemoveLiquidity;\n","import { useCallback, useContext, useState } from \"react\";\n\nimport { EthersContext } from \"../context/EthersContext\";\nimport { parseBalance } from \"../utils\";\nimport useLiquidityState, { LiquidityState } from \"./useLiquidityState\";\nimport useSDK from \"./useSDK\";\n\nexport interface AddLiquidityState extends LiquidityState {\n    onAdd: () => Promise<void>;\n    adding: boolean;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst useAddLiquidityState: () => AddLiquidityState = () => {\n    const state = useLiquidityState();\n    const { signer, updateTokens } = useContext(EthersContext);\n    const [adding, setAdding] = useState(false);\n    const { addLiquidity, addLiquidityETH } = useSDK();\n\n    const onAdd = useCallback(async () => {\n        if (state.fromToken && state.toToken && state.fromAmount && state.toAmount && signer) {\n            setAdding(true);\n            try {\n                const fromAmount = parseBalance(state.fromAmount, state.fromToken.decimals);\n                const toAmount = parseBalance(state.toAmount, state.toToken.decimals);\n                if (state.fromSymbol === \"ETH\" || state.toSymbol === \"ETH\") {\n                    const [token, amount, amountETH] =\n                        state.fromSymbol === \"ETH\"\n                            ? [state.toToken, toAmount, fromAmount]\n                            : [state.fromToken, fromAmount, toAmount];\n                    const tx = await addLiquidityETH(token, amount, amountETH);\n                    await tx.wait();\n                } else {\n                    const tx = await addLiquidity(state.fromToken, state.toToken, fromAmount, toAmount);\n                    await tx.wait();\n                }\n                await updateTokens();\n                state.setFromSymbol(\"\");\n            } finally {\n                setAdding(false);\n            }\n        }\n    }, [state.fromToken, state.toToken, state.fromAmount, state.toAmount, signer, updateTokens]);\n\n    return {\n        ...state,\n        onAdd,\n        adding\n    };\n};\n\nexport default useAddLiquidityState;\n","import { useCallback, useContext, useState } from \"react\";\n\nimport { ethers } from \"ethers\";\nimport useAsyncEffect from \"use-async-effect\";\nimport { ROUTER } from \"../constants/contracts\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport { convertToken, formatBalance, parseBalance, parseCurrencyAmount } from \"../utils\";\nimport useLPTokensState, { LPTokensState } from \"./useLPTokensState\";\nimport useSDK from \"./useSDK\";\n\nexport interface RemoveLiquidityState extends LPTokensState {\n    onRemove: () => Promise<void>;\n    removing: boolean;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst useRemoveLiquidityState: () => RemoveLiquidityState = () => {\n    const state = useLPTokensState(\"my-lp-tokens\");\n    const { provider, signer, updateTokens, getTokenAllowance } = useContext(EthersContext);\n    const { removeLiquidity, removeLiquidityETH } = useSDK();\n    const [loading, setLoading] = useState(false);\n    const [removing, setRemoving] = useState(false);\n\n    useAsyncEffect(async () => {\n        if (provider && signer && state.selectedLPToken) {\n            state.setFromSymbol(state.selectedLPToken.tokenA.symbol);\n            state.setToSymbol(state.selectedLPToken.tokenB.symbol);\n\n            setLoading(true);\n            state.setSelectedLPTokenAllowed(false);\n            try {\n                const minAllowance = ethers.BigNumber.from(2)\n                    .pow(96)\n                    .sub(1);\n                const allowance = await getTokenAllowance(state.selectedLPToken.address, ROUTER);\n                state.setSelectedLPTokenAllowed(ethers.BigNumber.from(allowance).gte(minAllowance));\n            } finally {\n                setLoading(false);\n            }\n        }\n    }, [provider, signer, state.selectedLPToken]);\n\n    // tslint:disable-next-line:max-func-body-length\n    useAsyncEffect(async () => {\n        if (\n            state.selectedLPToken &&\n            state.selectedLPToken.totalSupply &&\n            state.pair &&\n            state.fromToken &&\n            state.toToken\n        ) {\n            if (state.pair.liquidityToken.address === state.selectedLPToken.address) {\n                const fromReserve = parseCurrencyAmount(\n                    state.pair.reserveOf(convertToken(state.fromToken)),\n                    state.fromToken.decimals\n                );\n                const toReserve = parseCurrencyAmount(\n                    state.pair.reserveOf(convertToken(state.toToken)),\n                    state.toToken.decimals\n                );\n                state.setFromAmount(\n                    formatBalance(\n                        parseBalance(state.amount, state.selectedLPToken.decimals)\n                            .mul(fromReserve)\n                            .div(state.selectedLPToken.totalSupply)\n                            .toString(),\n                        state.selectedLPToken.tokenA.decimals\n                    )\n                );\n                state.setToAmount(\n                    formatBalance(\n                        parseBalance(state.amount, state.selectedLPToken.decimals)\n                            .mul(toReserve)\n                            .div(state.selectedLPToken.totalSupply)\n                            .toString(),\n                        state.selectedLPToken.tokenB.decimals\n                    )\n                );\n            }\n        }\n    }, [state.selectedLPToken, state.amount, state.pair, state.fromToken, state.toToken, signer]);\n\n    const onRemove = useCallback(async () => {\n        if (state.fromAmount && state.toAmount && state.selectedLPToken && state.amount && signer) {\n            setRemoving(true);\n            try {\n                const fromAmount = parseBalance(state.fromAmount, state.fromToken!.decimals);\n                const toAmount = parseBalance(state.toAmount, state.toToken!.decimals);\n                const liquidity = parseBalance(state.amount, state.selectedLPToken.decimals);\n                if (state.fromSymbol === \"WETH\" || state.toSymbol === \"WETH\") {\n                    const [token, amountToRemove, amountToRemoveETH] =\n                        state.fromSymbol === \"WETH\"\n                            ? [state.toToken!, toAmount, fromAmount]\n                            : [state.fromToken!, fromAmount, toAmount];\n                    const tx = await removeLiquidityETH(token, liquidity, amountToRemove, amountToRemoveETH);\n                    await tx.wait();\n                } else {\n                    const tx = await removeLiquidity(state.fromToken!, state.toToken!, liquidity, fromAmount, toAmount);\n                    await tx.wait();\n                }\n                await updateTokens();\n                state.setSelectedLPToken(undefined);\n            } finally {\n                setRemoving(false);\n            }\n        }\n    }, [state.fromAmount, state.toAmount, state.selectedLPToken, state.amount, signer, updateTokens]);\n\n    return {\n        ...state,\n        loading: state.loading || loading,\n        onRemove,\n        removing\n    };\n};\n\nexport default useRemoveLiquidityState;\n","import React from \"react\";\nimport { Platform, View } from \"react-native\";\n\nimport AddLiquidity from \"../components/AddLiquidity\";\nimport Column from \"../components/Column\";\nimport Container from \"../components/Container\";\nimport Content from \"../components/Content\";\nimport FlexView from \"../components/FlexView\";\nimport RemoveLiquidity from \"../components/RemoveLiquidity\";\nimport Text from \"../components/Text\";\nimport { Spacing } from \"../constants/dimension\";\nimport useAddLiquidityState from \"../hooks/useAddLiquidityState\";\nimport useColors from \"../hooks/useColors\";\nimport useRemoveLiquidityState from \"../hooks/useRemoveLiquidityState\";\nimport Screen from \"./Screen\";\n\nconst LiquidityScreen = () => {\n    const addLiquidityState = useAddLiquidityState();\n    const removeLiquidityState = useRemoveLiquidityState();\n    return (\n        <Screen>\n            <Container>\n                <Content>\n                    <View style={{ width: \"100%\", alignItems: \"center\", marginBottom: Spacing.huge * 2 }}>\n                        {!removeLiquidityState.selectedLPToken && <AddLiquidity state={addLiquidityState} />}\n                        {!removeLiquidityState.selectedLPToken && <OR />}\n                        <RemoveLiquidity state={removeLiquidityState} />\n                    </View>\n                </Content>\n            </Container>\n        </Screen>\n    );\n};\n\nconst OR = () => {\n    const { background } = useColors();\n    return (\n        <Column>\n            <FlexView\n                style={{\n                    width: \"100%\",\n                    paddingHorizontal: Spacing.small,\n                    paddingVertical: Platform.OS === \"web\" ? Spacing.huge : Spacing.normal,\n                    alignItems: \"center\"\n                }}>\n                <Line />\n                <Text\n                    light={true}\n                    style={{\n                        paddingHorizontal: Spacing.small,\n                        paddingBottom: Spacing.tiny,\n                        backgroundColor: background,\n                        fontSize: 26\n                    }}>\n                    or\n                </Text>\n                <Line />\n            </FlexView>\n        </Column>\n    );\n};\n\nconst Line = () => {\n    const { border } = useColors();\n    return <View style={{ height: 1, flex: 1, backgroundColor: border }} />;\n};\n\nexport default LiquidityScreen;\n","import { useCallback, useContext, useState } from \"react\";\n\nimport { ethers } from \"ethers\";\nimport useAsyncEffect from \"use-async-effect\";\nimport { MIGRATOR2 } from \"../constants/contracts\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport { parseBalance } from \"../utils\";\nimport useLPTokensState, { LPTokensState } from \"./useLPTokensState\";\nimport useSDK from \"./useSDK\";\n\nexport interface MigrateState extends LPTokensState {\n    onMigrate: () => Promise<void>;\n    migrating: boolean;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst useMigrateState: () => MigrateState = () => {\n    const state = useLPTokensState(\"my-uniswap-lp-tokens\");\n    const { provider, signer, getTokenAllowance, updateTokens } = useContext(EthersContext);\n    const { migrate } = useSDK();\n    const [loading, setLoading] = useState(false);\n    const [migrating, setMigrating] = useState(false);\n\n    useAsyncEffect(async () => {\n        if (provider && signer && state.selectedLPToken) {\n            setLoading(true);\n            state.setSelectedLPTokenAllowed(false);\n            try {\n                const minAllowance = ethers.BigNumber.from(2)\n                    .pow(96)\n                    .sub(1);\n                const allowance = await getTokenAllowance(state.selectedLPToken.address, MIGRATOR2);\n                state.setSelectedLPTokenAllowed(ethers.BigNumber.from(allowance).gte(minAllowance));\n            } finally {\n                setLoading(false);\n            }\n        }\n    }, [provider, signer, state.selectedLPToken]);\n\n    const onMigrate = useCallback(async () => {\n        if (state.selectedLPToken && state.amount && signer) {\n            setMigrating(true);\n            try {\n                const amount = parseBalance(state.amount, state.selectedLPToken.decimals);\n                const tx = await migrate(state.selectedLPToken, amount);\n                await tx.wait();\n                await updateTokens();\n                state.setSelectedLPToken(undefined);\n            } finally {\n                setMigrating(false);\n            }\n        }\n    }, [state.selectedLPToken, state.amount, signer, updateTokens]);\n\n    return {\n        ...state,\n        loading: state.loading || loading,\n        onMigrate,\n        migrating\n    };\n};\n\nexport default useMigrateState;\n","import React, { useCallback, useState } from \"react\";\nimport { View } from \"react-native\";\n\nimport useAsyncEffect from \"use-async-effect\";\nimport ApproveButton from \"../components/ApproveButton\";\nimport Button from \"../components/Button\";\nimport Column from \"../components/Column\";\nimport Container from \"../components/Container\";\nimport Content from \"../components/Content\";\nimport ErrorMessage from \"../components/ErrorMessage\";\nimport FetchingButton from \"../components/FetchingButton\";\nimport InsufficientBalanceButton from \"../components/InsufficientBalanceButton\";\nimport LPTokenItem from \"../components/LPTokenItem\";\nimport LPTokenSelect from \"../components/LPTokenSelect\";\nimport Notice from \"../components/Notice\";\nimport Text from \"../components/Text\";\nimport TokenInput from \"../components/TokenInput\";\nimport { MIGRATOR2 } from \"../constants/contracts\";\nimport { Spacing } from \"../constants/dimension\";\nimport useMigrateState, { MigrateState } from \"../hooks/useMigrateState\";\nimport MetamaskError from \"../types/MetamaskError\";\nimport { isEmptyValue, parseBalance } from \"../utils\";\nimport Screen from \"./Screen\";\n\nconst MigrateScreen = () => {\n    return (\n        <Screen>\n            <Container>\n                <Content>\n                    <Migrate />\n                </Content>\n            </Container>\n        </Screen>\n    );\n};\n\nconst Migrate = () => {\n    const state = useMigrateState();\n    return (\n        <View style={{ alignItems: \"center\", marginBottom: Spacing.huge * 2 }}>\n            <Column>\n                <Text h4={true} style={{ textAlign: \"center\", marginBottom: Spacing.normal }}>\n                    🦄️ Migrate from Uniswap\n                </Text>\n                <Notice\n                    text={\n                        \"This is an experimental feature that is using an unaudited contract: https://github.com/sushiswap-community/sushiswap-core/blob/master/contracts/Migrator2.sol. Read the contract and use it with caution.\"\n                    }\n                    color={\"orange\"}\n                />\n                <LPTokenSelect\n                    state={state}\n                    title={\"1. Select a uniswap pool to MIGRATE from:\"}\n                    emptyText={\"You don't have any liquidity on uniswap.\"}\n                    Item={LPTokenItem}\n                />\n                <TokenInput\n                    title={\"2. How many tokens would you MIGRATE?\"}\n                    token={state.selectedLPToken}\n                    hidden={!state.selectedLPToken}\n                    amount={state.amount}\n                    onAmountChanged={state.setAmount}\n                />\n                <Controls state={state} />\n            </Column>\n        </View>\n    );\n};\n\nconst Controls = ({ state }: { state: MigrateState }) => {\n    const [error, setError] = useState<MetamaskError>({});\n    useAsyncEffect(() => setError({}), [state.amount]);\n    if (!state.selectedLPToken || isEmptyValue(state.amount)) return <Column noTopMargin={true} />;\n    return (\n        <Column>\n            {parseBalance(state.amount, state.selectedLPToken.decimals).gt(state.selectedLPToken.balance) ? (\n                <InsufficientBalanceButton symbol={state.selectedLPToken.symbol} />\n            ) : state.loading ? (\n                <FetchingButton />\n            ) : (\n                <>\n                    <ApproveButton\n                        token={state.selectedLPToken}\n                        spender={MIGRATOR2}\n                        onSuccess={() => state.setSelectedLPTokenAllowed(true)}\n                        onError={setError}\n                        hidden={state.selectedLPTokenAllowed}\n                    />\n                    <MigrateButton state={state} onError={setError} disabled={!state.selectedLPTokenAllowed} />\n                </>\n            )}\n            {error.message && error.code !== 4001 && <ErrorMessage error={error} />}\n        </Column>\n    );\n};\n\nconst MigrateButton = ({\n    state,\n    onError,\n    disabled\n}: {\n    state: MigrateState;\n    onError: (e) => void;\n    disabled: boolean;\n}) => {\n    const onPress = useCallback(async () => {\n        onError({});\n        try {\n            await state.onMigrate();\n        } catch (e) {\n            onError(e);\n        }\n    }, []);\n    return <Button size={\"large\"} title={\"Migrate\"} loading={state.migrating} onPress={onPress} disabled={disabled} />;\n};\n\nexport default MigrateScreen;\n","import { useCallback, useContext, useEffect, useState } from \"react\";\n\nimport { ethers } from \"ethers\";\nimport useAsyncEffect from \"use-async-effect\";\nimport { SUSHI_BAR } from \"../constants/contracts\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport Token from \"../types/Token\";\nimport { getContract, parseBalance } from \"../utils\";\nimport useSDK from \"./useSDK\";\n\nexport type Action = \"enter\" | \"leave\";\n\nexport interface StakingState {\n    action?: Action;\n    setAction: (action?: Action) => void;\n    sushi?: Token;\n    xSushi?: Token;\n    sushiStaked?: ethers.BigNumber;\n    sushiSupply?: ethers.BigNumber;\n    xSushiSupply?: ethers.BigNumber;\n    amount: string;\n    setAmount: (amount: string) => void;\n    sushiAllowed: boolean;\n    setSushiAllowed: (allowed: boolean) => void;\n    xSushiAllowed: boolean;\n    setXSushiAllowed: (allowed: boolean) => void;\n    loading: boolean;\n    onEnter: () => Promise<void>;\n    entering: boolean;\n    onLeave: () => Promise<void>;\n    leaving: boolean;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst useStakingState: () => StakingState = () => {\n    const { provider, signer, address, getTokenAllowance, tokens, updateTokens } = useContext(EthersContext);\n    const { enterSushiBar, leaveSushiBar } = useSDK();\n    const [action, setAction] = useState<Action>();\n    const [sushiStaked, setSushiStaked] = useState<ethers.BigNumber>();\n    const [sushiSupply, setSushiSupply] = useState<ethers.BigNumber>();\n    const [xSushiSupply, setXSushiSupply] = useState<ethers.BigNumber>();\n    const [amount, setAmount] = useState(\"\");\n    const [sushiAllowed, setSushiAllowed] = useState(false);\n    const [xSushiAllowed, setXSushiAllowed] = useState(false);\n    const [loading, setLoading] = useState(false);\n    const [entering, setEntering] = useState(false);\n    const [leaving, setLeaving] = useState(false);\n\n    const sushi = tokens.find(token => token.symbol === \"SUSHI\");\n    const xSushi = tokens.find(token => token.symbol === \"xSUSHI\");\n\n    useEffect(() => {\n        setAmount(\"\");\n    }, [address, action]);\n\n    useAsyncEffect(async () => {\n        if (sushi && xSushi && provider && signer) {\n            setSushiAllowed(false);\n            setXSushiAllowed(false);\n            setLoading(true);\n            try {\n                const minAllowance = ethers.BigNumber.from(2)\n                    .pow(96)\n                    .sub(1);\n                const sushiAllowance = await getTokenAllowance(sushi.address, SUSHI_BAR);\n                setSushiAllowed(ethers.BigNumber.from(sushiAllowance).gte(minAllowance));\n                const xSushiAllowance = await getTokenAllowance(xSushi.address, SUSHI_BAR);\n                setXSushiAllowed(ethers.BigNumber.from(xSushiAllowance).gte(minAllowance));\n\n                const sushiContract = getContract(\"ERC20\", sushi.address, signer);\n                setSushiStaked(await sushiContract.balanceOf(SUSHI_BAR));\n                setSushiSupply(await sushiContract.totalSupply());\n                const xSushiContract = getContract(\"ERC20\", xSushi.address, signer);\n                setXSushiSupply(await xSushiContract.totalSupply());\n            } finally {\n                setLoading(false);\n            }\n        }\n    }, [sushi, xSushi, provider, signer]);\n\n    const onEnter = useCallback(async () => {\n        if (amount && signer) {\n            setEntering(true);\n            try {\n                const tx = await enterSushiBar(parseBalance(amount));\n                if (tx) {\n                    await tx.wait();\n                    await updateTokens();\n                    setAmount(\"\");\n                }\n            } finally {\n                setEntering(false);\n            }\n        }\n    }, [amount, signer]);\n\n    const onLeave = useCallback(async () => {\n        if (amount && signer) {\n            setLeaving(true);\n            try {\n                const tx = await leaveSushiBar(parseBalance(amount));\n                if (tx) {\n                    await tx.wait();\n                    await updateTokens();\n                    setAmount(\"\");\n                }\n            } finally {\n                setLeaving(false);\n            }\n        }\n    }, [amount, signer]);\n\n    return {\n        action,\n        setAction,\n        sushi,\n        xSushi,\n        sushiStaked,\n        sushiSupply,\n        xSushiSupply,\n        amount,\n        setAmount,\n        sushiAllowed,\n        setSushiAllowed,\n        xSushiAllowed,\n        setXSushiAllowed,\n        loading,\n        onEnter,\n        entering,\n        onLeave,\n        leaving\n    };\n};\n\nexport default useStakingState;\n","import React, { useCallback, useState } from \"react\";\nimport { ActivityIndicator, View } from \"react-native\";\nimport { Icon } from \"react-native-elements\";\n\nimport { ethers } from \"ethers\";\nimport useAsyncEffect from \"use-async-effect\";\nimport ApproveButton from \"../components/ApproveButton\";\nimport Button from \"../components/Button\";\nimport ButtonGroup from \"../components/ButtonGroup\";\nimport Column from \"../components/Column\";\nimport Container from \"../components/Container\";\nimport Content from \"../components/Content\";\nimport ErrorMessage from \"../components/ErrorMessage\";\nimport FetchingButton from \"../components/FetchingButton\";\nimport FlexView from \"../components/FlexView\";\nimport InsufficientBalanceButton from \"../components/InsufficientBalanceButton\";\nimport Meta from \"../components/Meta\";\nimport Notice from \"../components/Notice\";\nimport Subtitle from \"../components/Subtitle\";\nimport Text from \"../components/Text\";\nimport TokenInput from \"../components/TokenInput\";\nimport { SUSHI_BAR } from \"../constants/contracts\";\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport useStakingState, { Action, StakingState } from \"../hooks/useStakingState\";\nimport MetamaskError from \"../types/MetamaskError\";\nimport { formatBalance, isEmptyValue, parseBalance } from \"../utils\";\nimport Screen from \"./Screen\";\n\nconst Actions = [\"enter\", \"leave\"];\n\nconst StakingScreen = () => {\n    return (\n        <Screen>\n            <Container>\n                <Content>\n                    <Staking />\n                </Content>\n            </Container>\n        </Screen>\n    );\n};\n\nconst Staking = () => {\n    const state = useStakingState();\n    return (\n        <View style={{ alignItems: \"center\", marginBottom: Spacing.huge * 2 }}>\n            <Column>\n                <Text h4={true} style={{ textAlign: \"center\" }}>\n                    💰 Staking\n                </Text>\n            </Column>\n            <ActionSelect state={state} />\n            {state.action === \"enter\" && state.sushi && state.sushi.balance.isZero() && <NoSushiNotice />}\n            {state.action === \"leave\" && state.xSushi && state.xSushi.balance.isZero() && <NoXSushiNotice />}\n            <TokenInput\n                title={\"2. How many SUSHI do you want to STAKE?\"}\n                token={state.sushi}\n                hidden={state.action !== \"enter\" || !state.sushi || state.sushi.balance.isZero()}\n                amount={state.amount}\n                onAmountChanged={state.setAmount}\n            />\n            <TokenInput\n                title={\"2. How many xSUSHI do you want to UNSTAKE?\"}\n                token={state.xSushi}\n                hidden={state.action !== \"leave\" || !state.xSushi || state.xSushi.balance.isZero()}\n                amount={state.amount}\n                onAmountChanged={state.setAmount}\n            />\n            <StakeInfo state={state} />\n            <Controls state={state} />\n        </View>\n    );\n};\n\nconst ActionSelect = ({ state }: { state: StakingState }) => {\n    if (!state.sushi || !state.xSushi || !state.sushiStaked || !state.xSushiSupply) {\n        return (\n            <Column noTopMargin={true}>\n                <ActivityIndicator size={\"large\"} style={{ marginTop: Spacing.large }} />\n            </Column>\n        );\n    }\n    const index = state.action ? Actions.indexOf(state.action) : null;\n    const onPress = useCallback((i: number) => {\n        state.setAction(Actions[i] as Action);\n    }, []);\n    return (\n        <Column>\n            <Subtitle text={\"1. Do you want to STAKE or UNSTAKE?\"} />\n            <View style={{ marginHorizontal: Spacing.small, marginBottom: Spacing.normal }}>\n                <Meta label={\"Total SUSHI Staked\"} text={formatBalance(state.sushiStaked, state.sushi.decimals)} />\n                <Meta label={\"My SUSHI Balance\"} text={formatBalance(state.sushi.balance, state.sushi.decimals)} />\n                <Line />\n                <Meta label={\"Total xSUSHI Supply\"} text={formatBalance(state.xSushiSupply, state.xSushi.decimals)} />\n                <Meta label={\"My xSUSHI Balance\"} text={formatBalance(state.xSushi.balance, state.xSushi.decimals)} />\n            </View>\n            <ButtonGroup\n                selectedIndex={index}\n                onPress={onPress}\n                buttons={[{ element: StakeText }, { element: UnstakeText }]}\n                containerStyle={{ marginHorizontal: Spacing.small }}\n            />\n        </Column>\n    );\n};\n\nconst Line = () => {\n    const { border } = useColors();\n    return (\n        <View style={{ width: \"100%\", paddingHorizontal: Spacing.small }}>\n            <View\n                style={{\n                    height: 1,\n                    width: \"100%\",\n                    marginTop: Spacing.small,\n                    marginBottom: Spacing.tiny,\n                    backgroundColor: border\n                }}\n            />\n        </View>\n    );\n};\n\nconst StakeText = () => {\n    return (\n        <FlexView style={{ alignItems: \"center\" }}>\n            <Text style={{ color: \"black\" }}>Stake SUSHI</Text>\n            <Icon\n                type={\"material-community\"}\n                name={\"chevron-right\"}\n                color={\"black\"}\n                style={{ marginLeft: Spacing.tiny }}\n            />\n        </FlexView>\n    );\n};\n\nconst UnstakeText = () => {\n    return (\n        <FlexView style={{ alignItems: \"center\" }}>\n            <Text style={{ color: \"black\" }}>Unstake xSUSHI</Text>\n            <Icon\n                type={\"material-community\"}\n                name={\"chevron-right\"}\n                color={\"black\"}\n                style={{ marginLeft: Spacing.tiny }}\n            />\n        </FlexView>\n    );\n};\n\nconst NoSushiNotice = () => {\n    return (\n        <Column noTopMargin={true} style={{ padding: Spacing.small, marginTop: Spacing.small }}>\n            <Notice text={\"You don't have any SUSHI balance.\"} />\n        </Column>\n    );\n};\n\nconst NoXSushiNotice = () => {\n    return (\n        <Column noTopMargin={true} style={{ padding: Spacing.small, marginTop: Spacing.small }}>\n            <Notice text={\"You don't have any xSUSHI staked.\"} />\n        </Column>\n    );\n};\n\nconst StakeInfo = ({ state }: { state: StakingState }) => {\n    if (!state.sushi || !state.xSushi || !state.sushiSupply || !state.xSushiSupply || isEmptyValue(state.amount)) {\n        return <Column noTopMargin={true} />;\n    }\n    const amount = parseBalance(state.amount, state.sushi.decimals);\n    const xSushiAmount = amount.mul(state.xSushiSupply).div(state.sushiSupply);\n    const share = xSushiAmount.mul(ethers.BigNumber.from(10).pow(8)).div(state.xSushiSupply);\n    return (\n        <Column noTopMargin={true}>\n            <Meta label={\"xSUSHI Amount\"} text={formatBalance(xSushiAmount, state.xSushi.decimals)} />\n            <Meta label={\"xSUSHI Share\"} text={formatBalance(share, 8) + \"%\"} />\n        </Column>\n    );\n};\n\nconst Controls = ({ state }: { state: StakingState }) => {\n    const [error, setError] = useState<MetamaskError>({});\n    useAsyncEffect(() => setError({}), [state.action, state.amount]);\n    const token = state.action === \"leave\" ? state.xSushi : state.sushi;\n    if (!state.action || !token || isEmptyValue(state.amount)) return <Column noTopMargin={true} />;\n    return (\n        <Column>\n            {parseBalance(state.amount, token.decimals).gt(token.balance) ? (\n                <InsufficientBalanceButton symbol={token.symbol} />\n            ) : state.loading ? (\n                <FetchingButton />\n            ) : (\n                <>\n                    <ApproveButton\n                        token={token}\n                        spender={SUSHI_BAR}\n                        onSuccess={() => state.setSushiAllowed(true)}\n                        onError={setError}\n                        hidden={state.action === \"leave\" || state.sushiAllowed}\n                    />\n                    {state.action === \"leave\" ? (\n                        <UnstakeButton state={state} onError={setError} />\n                    ) : (\n                        <StakeButton state={state} onError={setError} disabled={!state.sushiAllowed} />\n                    )}\n                </>\n            )}\n            {error.message && error.code !== 4001 && <ErrorMessage error={error} />}\n        </Column>\n    );\n};\n\nconst StakeButton = ({\n    state,\n    onError,\n    disabled\n}: {\n    state: StakingState;\n    onError: (e) => void;\n    disabled: boolean;\n}) => {\n    const onPress = useCallback(async () => {\n        onError({});\n        try {\n            await state.onEnter();\n            state.setAction();\n        } catch (e) {\n            onError(e);\n        }\n    }, []);\n    return <Button size={\"large\"} title={\"Stake\"} loading={state.entering} onPress={onPress} disabled={disabled} />;\n};\n\nconst UnstakeButton = ({ state, onError }: { state: StakingState; onError: (e) => void }) => {\n    const onPress = useCallback(async () => {\n        onError({});\n        try {\n            await state.onLeave();\n            state.setAction();\n        } catch (e) {\n            onError(e);\n        }\n    }, []);\n    return <Button size={\"large\"} title={\"Unstake\"} loading={state.leaving} onPress={onPress} />;\n};\n\nexport default StakingScreen;\n","import { useCallback, useContext, useEffect, useState } from \"react\";\n\nimport { Trade } from \"@sushiswap/sdk\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport { parseBalance } from \"../utils\";\nimport useSDK from \"./useSDK\";\nimport useTokenPairState, { TokenPairState } from \"./useTokenPairState\";\n\nexport interface SwapState extends TokenPairState {\n    trade?: Trade;\n    unsupported: boolean;\n    onSwap: () => Promise<void>;\n    swapping: boolean;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst useSwapState: () => SwapState = () => {\n    const state = useTokenPairState();\n    const { provider, signer, addOnBlockListener, removeOnBlockListener, updateTokens } = useContext(EthersContext);\n    const { getTrade, swap } = useSDK();\n    const [loading, setLoading] = useState(true);\n    const [trade, setTrade] = useState<Trade>();\n    const [unsupported, setUnsupported] = useState(false);\n    const [swapping, setSwapping] = useState(false);\n\n    useEffect(() => {\n        if (state.fromSymbol && state.toSymbol && state.fromAmount) {\n            const updateTrade = async () => {\n                if (state.fromToken && state.toToken && state.fromAmount && provider) {\n                    const amount = parseBalance(state.fromAmount, state.fromToken.decimals);\n                    if (!amount.isZero()) {\n                        setTrade(undefined);\n                        setUnsupported(false);\n                        try {\n                            setTrade(await getTrade(state.fromToken, state.toToken, amount));\n                        } catch (e) {\n                            setUnsupported(true);\n                        } finally {\n                            setLoading(false);\n                        }\n                    }\n                }\n            };\n\n            setLoading(true);\n            updateTrade();\n            const name = \"updateTrade(\" + state.fromSymbol + \",\" + state.toSymbol + \",\" + state.fromAmount + \")\";\n\n            addOnBlockListener(name, updateTrade);\n            return () => {\n                removeOnBlockListener(name);\n            };\n        }\n    }, [state.fromSymbol, state.toSymbol, state.fromAmount]);\n\n    const onSwap = useCallback(async () => {\n        if (state.fromToken && state.toToken && state.fromAmount && signer && trade) {\n            setSwapping(true);\n            try {\n                const result = await swap(trade);\n                if (result) {\n                    await result.tx.wait();\n                    await updateTokens();\n                    state.setFromSymbol(\"\");\n                }\n            } finally {\n                setSwapping(false);\n            }\n        }\n    }, [state.fromToken, state.toToken, state.fromAmount, signer, trade]);\n\n    return {\n        ...state,\n        loading: loading || state.loading,\n        trade,\n        unsupported,\n        onSwap,\n        swapping\n    };\n};\n\nexport default useSwapState;\n","import React, { useCallback, useState } from \"react\";\nimport { Icon } from \"react-native-elements\";\n\nimport useAsyncEffect from \"use-async-effect\";\nimport ApproveButton from \"../components/ApproveButton\";\nimport Button from \"../components/Button\";\nimport Column from \"../components/Column\";\nimport Container from \"../components/Container\";\nimport Content from \"../components/Content\";\nimport ErrorMessage from \"../components/ErrorMessage\";\nimport FetchingButton from \"../components/FetchingButton\";\nimport InsufficientBalanceButton from \"../components/InsufficientBalanceButton\";\nimport Meta from \"../components/Meta\";\nimport Text from \"../components/Text\";\nimport TokenInput from \"../components/TokenInput\";\nimport TokenSelect from \"../components/TokenSelect\";\nimport UnsupportedButton from \"../components/UnsupportedButton\";\nimport { ROUTER } from \"../constants/contracts\";\nimport { Spacing } from \"../constants/dimension\";\nimport { ETH } from \"../constants/tokens\";\nimport useColors from \"../hooks/useColors\";\nimport useSDK from \"../hooks/useSDK\";\nimport useSwapState, { SwapState } from \"../hooks/useSwapState\";\nimport MetamaskError from \"../types/MetamaskError\";\nimport { formatBalance, isEmptyValue, parseBalance } from \"../utils\";\nimport Screen from \"./Screen\";\n\nconst SwapScreen = () => {\n    return (\n        <Screen>\n            <Container>\n                <Content>\n                    <Column style={{ alignItems: \"center\" }}>\n                        <Text h4={true} style={{ textAlign: \"center\", marginBottom: Spacing.normal }}>\n                            🍣 Swap Tokens\n                        </Text>\n                    </Column>\n                    <Swap />\n                </Content>\n            </Container>\n        </Screen>\n    );\n};\n\nconst Swap = () => {\n    const state = useSwapState();\n    return (\n        <>\n            <TokenSelect\n                title={\"1. Select the token you want to SELL:\"}\n                hidden={false}\n                symbol={state.fromSymbol}\n                onChangeSymbol={state.setFromSymbol}\n                filterTokens={token => token.balance && !token.balance.isZero()}\n            />\n            <TokenSelect\n                title={\"2. Select the token you want to BUY:\"}\n                hidden={state.fromSymbol === \"\"}\n                symbol={state.toSymbol}\n                onChangeSymbol={state.setToSymbol}\n                filterTokens={token => token.symbol !== state.fromSymbol}\n            />\n            <TokenInput\n                title={\"3. How many \" + (state.fromSymbol || \"tokens\") + \" do you want to SELL?\"}\n                token={state.fromToken}\n                hidden={!state.fromToken}\n                amount={state.fromAmount}\n                onAmountChanged={state.setFromAmount}\n            />\n            <TradeInfo state={state} />\n            <Controls state={state} />\n        </>\n    );\n};\n\nconst TradeInfo = ({ state }: { state: SwapState }) => {\n    if (\n        !isEmptyValue(state.fromAmount) &&\n        ((state.fromSymbol === \"ETH\" && state.toSymbol === \"WETH\") ||\n            (state.fromSymbol === \"WETH\" && state.toSymbol === \"ETH\"))\n    ) {\n        return <WrapInfo state={state} />;\n    }\n    if (state.fromSymbol === \"\" || state.toSymbol === \"\" || isEmptyValue(state.fromAmount)) {\n        return <Column noTopMargin={true} />;\n    }\n    return <SwapInfo state={state} />;\n};\n\nconst WrapInfo = ({ state }: { state: SwapState }) => {\n    return (\n        <Column noTopMargin={true}>\n            <ArrowDown />\n            <Text style={{ fontSize: 30, textAlign: \"center\" }}>\n                {state.fromAmount} {state.toSymbol}\n            </Text>\n        </Column>\n    );\n};\n\nconst SwapInfo = ({ state }: { state: SwapState }) => {\n    const { calculateFee } = useSDK();\n    const amount = state.trade?.outputAmount?.toSignificant(8);\n    const price = state.trade?.executionPrice?.toSignificant(8);\n    const impact = state.trade?.priceImpact?.toSignificant(2);\n    const fee = state.fromToken\n        ? formatBalance(\n              calculateFee(parseBalance(state.fromAmount, state.fromToken.decimals)),\n              state.fromToken.decimals,\n              8\n          )\n        : \"\";\n    return (\n        <Column noTopMargin={true}>\n            <ArrowDown />\n            <Text style={{ fontSize: 30, textAlign: \"center\", marginBottom: Spacing.normal }}>\n                {amount || \"…\"} {state.toSymbol}\n            </Text>\n            <Meta label={\"Price\"} text={price ? price + \" \" + state.toSymbol + \"  = 1 \" + state.fromSymbol : \"…\"} />\n            <Meta label={\"Price Impact\"} text={impact ? impact + \"%\" : \"…\"} />\n            <Meta label={\"Fee (0.30%)\"} text={fee ? fee + \" \" + state.fromSymbol : \"…\"} />\n        </Column>\n    );\n};\n\nconst ArrowDown = () => {\n    const { textLight } = useColors();\n    return <Icon type={\"material-community\"} name={\"arrow-down\"} color={textLight} style={{ margin: Spacing.tiny }} />;\n};\n\n// tslint:disable-next-line:max-func-body-length\nconst Controls = ({ state }: { state: SwapState }) => {\n    const [error, setError] = useState<MetamaskError>({});\n    useAsyncEffect(() => setError({}), [state.fromSymbol, state.toSymbol, state.fromAmount]);\n    if (state.toSymbol === \"\" || isEmptyValue(state.fromAmount) || !state.fromToken) {\n        return <Column noTopMargin={true} />;\n    }\n    const approveRequired = state.fromSymbol !== \"ETH\" && !state.fromTokenAllowed;\n    return (\n        <Column>\n            {parseBalance(state.fromAmount, state.fromToken.decimals).gt(state.fromToken.balance) ? (\n                <InsufficientBalanceButton symbol={state.fromSymbol} />\n            ) : state.fromSymbol === \"WETH\" && state.toSymbol === \"ETH\" ? (\n                <UnwrapButton state={state} onError={setError} />\n            ) : state.fromSymbol === \"ETH\" && state.toSymbol === \"WETH\" ? (\n                <WrapButton state={state} onError={setError} />\n            ) : state.unsupported ? (\n                <UnsupportedButton state={state} />\n            ) : state.loading || !state.trade ? (\n                <FetchingButton />\n            ) : (\n                <>\n                    <ApproveButton\n                        token={state.fromToken}\n                        spender={ROUTER}\n                        onSuccess={() => state.setFromTokenAllowed(true)}\n                        onError={setError}\n                        hidden={!approveRequired}\n                    />\n                    <SwapButton state={state} onError={setError} disabled={approveRequired} />\n                </>\n            )}\n            {error.message && error.code !== 4001 && <ErrorMessage error={error} />}\n        </Column>\n    );\n};\n\nconst SwapButton = ({ state, onError, disabled }: { state: SwapState; onError: (e) => void; disabled: boolean }) => {\n    const onPress = useCallback(() => {\n        onError({});\n        state.onSwap().catch(onError);\n    }, [state.onSwap, onError]);\n    return (\n        <Button\n            size={\"large\"}\n            title={\"Swap \" + state.fromSymbol + \"-\" + state.toSymbol}\n            disabled={disabled}\n            loading={state.swapping}\n            onPress={onPress}\n        />\n    );\n};\n\nconst WrapButton = ({ state, onError }: { state: SwapState; onError: (e) => void }) => {\n    const onPress = useCallback(async () => {\n        onError({});\n        state.onWrap().catch(onError);\n    }, []);\n    return <Button size={\"large\"} title={\"Wrap\"} loading={state.wrapping} onPress={onPress} />;\n};\n\nconst UnwrapButton = ({ state, onError }: { state: SwapState; onError: (e) => void }) => {\n    const onPress = useCallback(async () => {\n        onError({});\n        state.onUnwrap().catch(onError);\n    }, []);\n    return <Button size={\"large\"} title={\"Unwrap\"} loading={state.unwrapping} onPress={onPress} />;\n};\n\nexport default SwapScreen;\n","import React, { useContext } from \"react\";\nimport { Platform, View } from \"react-native\";\nimport { Icon } from \"react-native-elements\";\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\n\nimport { createBottomTabNavigator } from \"@react-navigation/bottom-tabs\";\nimport { DefaultTheme, NavigationContainer, Theme } from \"@react-navigation/native\";\nimport useAsyncEffect from \"use-async-effect\";\nimport WebFooter from \"../components/web/WebFooter\";\nimport WebHeader from \"../components/web/WebHeader\";\nimport WebStatus from \"../components/web/WebStatus\";\nimport { GlobalContext } from \"../context/GlobalContext\";\nimport useColors from \"../hooks/useColors\";\nimport FarmingScreen from \"./FarmingScreen\";\nimport LiquidityScreen from \"./LiquidityScreen\";\nimport MigrateScreen from \"./MigrateScreen\";\nimport StakingScreen from \"./StakingScreen\";\nimport SwapScreen from \"./SwapScreen\";\n\nexport const Screens = () => {\n    const { load } = useContext(GlobalContext);\n    useAsyncEffect(load, []);\n    return Platform.OS === \"web\" ? <WebScreens /> : <AppScreens />;\n};\n\nconst WebScreens = () => {\n    return (\n        <Router>\n            <View style={{ flex: 1 }}>\n                <Switch>\n                    <Route path={\"/liquidity\"}>\n                        <LiquidityScreen />\n                    </Route>\n                    <Route path={\"/farming\"}>\n                        <FarmingScreen />\n                    </Route>\n                    <Route path={\"/staking\"}>\n                        <StakingScreen />\n                    </Route>\n                    <Route path={\"/migrate\"}>\n                        <MigrateScreen />\n                    </Route>\n                    <Route path={\"/\"}>\n                        <SwapScreen />\n                    </Route>\n                </Switch>\n                <WebHeader />\n                <WebStatus />\n                <WebFooter />\n            </View>\n        </Router>\n    );\n};\n\nconst Tab = createBottomTabNavigator();\n\nconst AppScreens = () => {\n    const { darkMode } = useContext(GlobalContext);\n    const { primary, secondary, background, border, textDark, disabled } = useColors();\n    const theme: Theme = {\n        ...DefaultTheme,\n        dark: darkMode,\n        colors: {\n            primary,\n            background,\n            border,\n            card: background,\n            notification: background,\n            text: textDark\n        }\n    };\n    return (\n        <NavigationContainer theme={theme}>\n            <Tab.Navigator\n                tabBarOptions={{\n                    activeTintColor: darkMode ? secondary : primary,\n                    inactiveTintColor: disabled,\n                    labelStyle: { marginBottom: 4 }\n                }}>\n                <Tab.Screen name=\"Home\" component={SwapScreen} options={tabOptions(\"home\")} />\n                <Tab.Screen name=\"Liquidity\" component={LiquidityScreen} options={tabOptions(\"water\")} />\n                <Tab.Screen name=\"Farming\" component={FarmingScreen} options={tabOptions(\"leaf\")} />\n            </Tab.Navigator>\n        </NavigationContainer>\n    );\n};\n\nconst tabOptions = iconName => ({\n    tabBarIcon: ({ color }) => <Icon type={\"material-community\"} name={iconName} color={color} />\n});\n","/* tslint:disable:ordered-imports */\nimport \"./globals\";\nimport React from \"react\";\n\nimport { OpenSans_300Light, OpenSans_400Regular, OpenSans_700Bold } from \"@expo-google-fonts/open-sans\";\nimport { UnicaOne_400Regular } from \"@expo-google-fonts/unica-one\";\nimport { AppLoading } from \"expo\";\nimport { useFonts } from \"expo-font\";\n\nimport { ContextProvider } from \"./src/context\";\nimport { Screens } from \"./src/screens\";\nimport { YellowBox } from \"react-native\";\n\nif (__DEV__) {\n    YellowBox.ignoreWarnings([\"Setting a timer\", \"VirtualizedLists should never be nested\"]);\n}\n\nconst App = () => {\n    const [fontsLoaded] = useFonts({\n        title: UnicaOne_400Regular,\n        light: OpenSans_300Light,\n        regular: OpenSans_400Regular,\n        bold: OpenSans_700Bold\n    });\n    if (!fontsLoaded) {\n        return <AppLoading />;\n    }\n    return (\n        <ContextProvider>\n            <Screens />\n        </ContextProvider>\n    );\n};\n\nexport default App;\n","/* eslint-env browser */\n\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', function () {\n    navigator.serviceWorker\n      .register('/expo-service-worker.js', { scope: '/' })\n      .then(function (info) {\n        // console.info('Registered service-worker', info);\n      })\n      .catch(function (error) {\n        console.info('Failed to register service-worker', error);\n      });\n  });\n}\n","global.Buffer = require('buffer').Buffer;\n","module.exports = __webpack_public_path__ + \"static/media/levx-typography-dark.859ceaa3.png\";","module.exports = __webpack_public_path__ + \"static/media/levx-typography.5d37ed2a.png\";","module.exports = __webpack_public_path__ + \"static/media/metamask-dark.2137a831.png\";","module.exports = __webpack_public_path__ + \"static/media/metamask.15e22fef.png\";","module.exports = __webpack_public_path__ + \"static/media/sushiswap.ef005f32.jpg\";"],"sourceRoot":""}