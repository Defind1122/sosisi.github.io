{"version":3,"sources":["src/components/AmountMeta.tsx","src/components/InsufficientBalanceButton.tsx","src/components/ApproveButton.tsx","src/components/Notice.tsx","src/components/TokenSymbol.tsx","src/hooks/useDelayedEffect.tsx","src/components/TokenAmount.tsx","src/components/TokenName.tsx","src/components/Select.tsx","src/components/UnsupportedButton.tsx","src/components/TokenSearch.tsx","src/components/TokenSelect.tsx","src/components/ExperimentalNotice.tsx","src/hooks/useSwapState.tsx","src/screens/SwapScreen.tsx"],"names":["AmountMeta","props","useColors","textDark","textLight","placeholder","style","fontSize","IS_DESKTOP","marginBottom","Spacing","normal","color","disabled","amount","suffix","InsufficientBalanceButton","symbol","title","ApproveButton","approveToken","useContext","EthersContext","useState","loading","setLoading","onPress","useCallback","a","async","token","onError","address","spender","tx","wait","onSuccess","hidden","containerStyle","tiny","Notice","borderStyle","border","useStyles","clear","note","text","buttonText","onPressButton","type","size","fontWeight","titleStyle","buttonStyle","paddingHorizontal","paddingVertical","alignSelf","marginTop","TokenSymbol","medium","caption","marginLeft","handles","useDelayedEffect","effect","timeout","inputs","key","toString","useAsyncEffect","handle","setTimeout","clearTimeout","TokenAmount","formatBalance","balance","decimals","TokenName","numberOfLines","ellipsizeMode","small","width","name","Item","ITEM_SEPARATOR_HEIGHT","paddingLeft","paddingRight","selected","selectable","setOption","undefined","option","alignItems","flex","description","Select","expanded","onExpand","options","map","UnsupportedButton","state","fromSymbol","toSymbol","Loading","ActivityIndicator","position","right","bottom","TokenItem","accent","onSelectToken","Selectable","FlexView","TokenLogo","View","Button","duplicate","height","TokenSearch","provider","tokens","tokenToAdd","setTokenToAdd","findIndex","t","useEffect","trim","ethers","utils","isAddress","findOrFetchToken","Input","value","onChangeText","autoFocus","inputStyle","marginHorizontal","inputContainerStyle","borderBottomWidth","marginRight","labelStyle","paddingTop","paddingBottom","onAddToken","TokenList","loadingTokens","renderItem","item","data","useMemo","filter","sort","t1","t2","isZero","localeCompare","length","FlatList","keyExtractor","EmptyList","margin","Text","textAlign","CloseIcon","SelectIcon","TokenSelect","addCustomToken","search","setSearch","query","setQuery","find","toLowerCase","Expandable","onChangeSymbol","includes","ExperimentalNotice","onPressContract","useLinker","contractURL","marginVertical","useSwapState","useTokenPairState","chainId","signer","kovanSigner","updateTokens","getTrade","useSDK","useSwapRouter","swap","calculateSwapFee","useSettlement","calculateLimitOrderFee","calculateLimitOrderReturn","createOrder","orderType","setOrderType","priceInETH","setPriceInETH","trade","setTrade","unsupported","setUnsupported","swapFee","setSwapFee","limitOrderPrice","setLimitOrderPrice","limitOrderFee","setLimitOrderFee","limitOrderSwapFee","setLimitOrderSwapFee","limitOrderReturn","setLimitOrderReturn","swapping","setSwapping","creatingOrder","setCreatingOrder","setFromSymbol","fromToken","constants","WeiPerEther","Token","toToken","WETH","Fetcher","fetchPairData","pair","parseBalance","priceOf","toFixed","isEmptyValue","fromAmount","useDelayedOnBlockEffect","block","sub","onSwap","result","onCreateOrder","amountIn","Fraction","parse","apply","mul","pow10","div","limitOrderUnsupported","Swap","large","Border","OrderTypeSelect","FromTokenSelect","customTokens","Heading","ETH","ToTokenSelect","setToSymbol","AmountInput","TokenInput","onAmountChanged","setFromAmount","AmountNotice","lte","PriceInput","marketPrice","executionPrice","Zero","maxButtonText","LimitOrderUnsupportedNotice","NoPairNotice","TradeInfo","InfoBox","WrapInfo","SwapInfo","outputAmount","price","impact","priceImpact","Meta","label","SwapControls","error","setError","approveRequired","fromTokenAllowed","gt","FetchingButton","ROUTER","setFromTokenAllowed","message","code","ErrorMessage","SwapButton","catch","WrapButton","onWrap","wrapping","UnwrapButton","onUnwrap","unwrapping","LimitOrderInfo","d","LimitOrderControls","getTokenAllowance","allowed","setAllowed","SETTLEMENT","allowance","BigNumber","from","gte","PriceTooLowButton","PlaceOrderButton","goToLimitOrders","SwapScreen","Screen","Container","BackgroundImage","Content","Title","light","Platform","OS","WebFooter"],"mappings":"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","file":"static/js/11.cd2e5f63.chunk.js","sourcesContent":["import React, { FC } from \"react\";\n\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport Text from \"./Text\";\n\nexport interface AmountMetaProps {\n    amount?: string;\n    suffix?: string;\n    disabled?: boolean;\n}\n\nconst AmountMeta: FC<AmountMetaProps> = props => {\n    const { textDark, textLight, placeholder } = useColors();\n    return (\n        <Text\n            style={{\n                fontSize: IS_DESKTOP ? 28 : 20,\n                marginBottom: Spacing.normal,\n                color: props.disabled ? placeholder : props.amount ? textDark : textLight\n            }}>\n            {props.disabled ? \"N/A\" : props.amount ? props.amount + \" \" + (props.suffix || \"\") : \"Fetching…\"}\n        </Text>\n    );\n};\n\nexport default AmountMeta;\n","import React from \"react\";\n\nimport Button from \"./Button\";\n\nconst InsufficientBalanceButton = ({ symbol }: { symbol: string }) => {\n    return <Button title={\"Insufficient \" + (symbol ? symbol : \"Balance\")} disabled={true} />;\n};\nexport default InsufficientBalanceButton;\n","import React, { FC, useCallback, useContext, useState } from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport Token from \"../types/Token\";\nimport Button from \"./Button\";\n\nexport interface ApproveButtonProps {\n    token: Token;\n    spender: string;\n    onSuccess: () => void;\n    onError: (e) => void;\n    hidden?: boolean;\n}\n\nconst ApproveButton: FC<ApproveButtonProps> = props => {\n    const { approveToken } = useContext(EthersContext);\n    const [loading, setLoading] = useState(false);\n    const onPress = useCallback(async () => {\n        if (props.token) {\n            props.onError({});\n            setLoading(true);\n            try {\n                const tx = await approveToken(props.token.address, props.spender);\n                if (tx) {\n                    await tx.wait();\n                    props.onSuccess();\n                }\n            } catch (e) {\n                props.onError(e);\n            } finally {\n                setLoading(false);\n            }\n        }\n    }, [props.token]);\n    if (props.hidden) return <View />;\n    return (\n        <Button\n            title={\"Approve \" + (props.token?.symbol || \"\")}\n            onPress={onPress}\n            loading={loading}\n            containerStyle={{ marginBottom: Spacing.tiny }}\n        />\n    );\n};\n\nexport default ApproveButton;\n","import React from \"react\";\nimport { View, ViewStyle } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport useStyles from \"../hooks/useStyles\";\nimport Button from \"./Button\";\nimport Text from \"./Text\";\n\nexport interface NoticeProps {\n    text: string;\n    clear?: boolean;\n    color?: string;\n    buttonText?: string;\n    onPressButton?: () => void;\n    style?: ViewStyle;\n}\n\nconst Notice = (props: NoticeProps) => {\n    const { textLight } = useColors();\n    const { border } = useStyles();\n    const borderStyle = border({ color: props.color });\n    const color = props.color || textLight;\n    return (\n        <View style={[props.clear ? {} : borderStyle, props.style]}>\n            <Text note={true} style={{ color }}>\n                {props.text}\n            </Text>\n            {props.buttonText && props.onPressButton && (\n                <Button\n                    title={props.buttonText}\n                    type={\"clear\"}\n                    size={\"small\"}\n                    fontWeight={\"bold\"}\n                    onPress={props.onPressButton}\n                    titleStyle={{ color }}\n                    buttonStyle={{ paddingHorizontal: 0, paddingVertical: 0 }}\n                    style={{ alignSelf: \"flex-end\", marginTop: Spacing.tiny }}\n                />\n            )}\n        </View>\n    );\n};\n\nexport default Notice;\n","import React from \"react\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport Token from \"../types/Token\";\nimport Text from \"./Text\";\n\nconst TokenSymbol = (props: { token: Token; disabled?: boolean }) => (\n    <Text medium={true} caption={true} disabled={props.disabled} style={{ marginLeft: Spacing.tiny }}>\n        {props.token.symbol}\n    </Text>\n);\n\nexport default TokenSymbol;\n","import useAsyncEffect from \"use-async-effect\";\n\nconst handles = {};\n\nconst useDelayedEffect = (\n    effect: (isMounted: () => boolean) => unknown | Promise<unknown>,\n    timeout: number,\n    inputs?: any[]\n) => {\n    const key = effect.toString();\n    useAsyncEffect<number>(\n        () => {\n            const handle = setTimeout(effect, timeout);\n            handles[key] = handle;\n            return handle;\n        },\n        handle => {\n            clearTimeout(handle);\n        },\n        inputs\n    );\n};\nexport default useDelayedEffect;\n","import React from \"react\";\nimport { TextStyle } from \"react-native\";\n\nimport { ethers } from \"ethers\";\nimport { IS_DESKTOP } from \"../constants/dimension\";\nimport Token from \"../types/Token\";\nimport { formatBalance } from \"../utils\";\nimport Text from \"./Text\";\n\nconst TokenAmount = (props: { token: Token; amount?: ethers.BigNumber; disabled?: boolean; style?: TextStyle }) => (\n    <Text caption={IS_DESKTOP} disabled={props.disabled} style={props.style}>\n        {formatBalance(props.amount || props.token.balance, props.token.decimals, 8)}\n    </Text>\n);\n\nexport default TokenAmount;\n","import React from \"react\";\n\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport Token from \"../types/Token\";\nimport Text from \"./Text\";\n\nconst TokenName = (props: { token: Token; disabled?: boolean }) => (\n    <Text\n        caption={true}\n        numberOfLines={1}\n        ellipsizeMode={\"tail\"}\n        style={{ marginLeft: Spacing.small, width: 180 }}\n        disabled={props.disabled}>\n        {IS_DESKTOP ? props.token.name : props.token.symbol}\n    </Text>\n);\n\nexport default TokenName;\n","import React, { FC } from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport CloseIcon from \"./CloseIcon\";\nimport Expandable from \"./Expandable\";\nimport FlexView from \"./FlexView\";\nimport { ITEM_SEPARATOR_HEIGHT } from \"./ItemSeparator\";\nimport Selectable from \"./Selectable\";\nimport SelectIcon from \"./SelectIcon\";\nimport Text from \"./Text\";\n\nexport interface Option {\n    key: string;\n    title: string;\n    description: string;\n}\n\nexport interface SelectProps {\n    title: string;\n    options: Option[];\n    option?: Option;\n    setOption: (option?: Option) => void;\n}\n\nconst Select: FC<SelectProps> = props => {\n    return (\n        <View>\n            <Expandable title={props.title} expanded={!props.option} onExpand={() => props.setOption()}>\n                {props.options.map(option => (\n                    <Item\n                        key={option.key}\n                        option={option}\n                        setOption={props.setOption}\n                        selected={option.key === props.option?.key}\n                    />\n                ))}\n            </Expandable>\n            {props.option && (\n                <Item option={props.option} setOption={props.setOption} selected={true} selectable={false} />\n            )}\n        </View>\n    );\n};\n\nconst Item = (props: {\n    option: Option;\n    setOption?: (option?: Option) => void;\n    selected: boolean;\n    selectable?: boolean;\n}) => {\n    return (\n        <Selectable\n            containerStyle={{ marginBottom: ITEM_SEPARATOR_HEIGHT }}\n            style={{ paddingLeft: Spacing.small + Spacing.tiny, paddingRight: Spacing.small }}\n            selected={props.selected}\n            disabled={props.selectable}\n            onPress={() => props.setOption?.(props.selected ? undefined : props.option)}>\n            <FlexView style={{ alignItems: \"center\" }}>\n                <View style={{ flex: 1 }}>\n                    <Text fontWeight={\"regular\"}>{props.option.title}</Text>\n                    <Text note={true} style={{ marginTop: 4 }}>\n                        {props.option.description}\n                    </Text>\n                </View>\n                {props.selected ? <CloseIcon /> : <SelectIcon />}\n            </FlexView>\n        </Selectable>\n    );\n};\n\nexport default Select;\n","import React from \"react\";\n\nimport { TokenPairState } from \"../hooks/useTokenPairState\";\nimport Button from \"./Button\";\n\nconst UnsupportedButton = ({ state }: { state: TokenPairState }) => {\n    return <Button title={state.fromSymbol + \"-\" + state.toSymbol + \" Not Supported\"} disabled={true} />;\n};\n\nexport default UnsupportedButton;\n","import React, { FC, useCallback, useContext, useEffect, useState } from \"react\";\nimport { ActivityIndicator, View } from \"react-native\";\n\nimport { ethers } from \"ethers\";\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport useColors from \"../hooks/useColors\";\nimport useDelayedEffect from \"../hooks/useDelayedEffect\";\nimport useStyles from \"../hooks/useStyles\";\nimport Token from \"../types/Token\";\nimport { findOrFetchToken } from \"../utils/fetch-utils\";\nimport Button from \"./Button\";\nimport FlexView from \"./FlexView\";\nimport Input from \"./Input\";\nimport { ITEM_SEPARATOR_HEIGHT } from \"./ItemSeparator\";\nimport Selectable from \"./Selectable\";\nimport TokenLogo from \"./TokenLogo\";\nimport TokenName from \"./TokenName\";\n\nexport interface TokenSearchProps {\n    tokens?: Token[];\n    text: string;\n    onChangeText: (text: string) => void;\n    onAddToken?: (token: Token) => void;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst TokenSearch: FC<TokenSearchProps> = props => {\n    const { border } = useStyles();\n    const { provider, tokens } = useContext(EthersContext);\n    const [tokenToAdd, setTokenToAdd] = useState<Token>();\n    const [loading, setLoading] = useState(false);\n    const duplicate = !!tokenToAdd && tokens.findIndex(t => t.address === tokenToAdd.address) !== -1;\n    if (!props.tokens) return <View />;\n    useEffect(() => {\n        if (props.text === \"\") {\n            setLoading(false);\n            setTokenToAdd(undefined);\n        }\n    }, [props.text]);\n    useDelayedEffect(\n        async () => {\n            const address = props.text.trim();\n            if (provider && ethers.utils.isAddress(address)) {\n                setLoading(true);\n                try {\n                    const token = await findOrFetchToken(address, provider);\n                    if (token.name && token.symbol && token.decimals) {\n                        setTokenToAdd(token as Token);\n                    }\n                } finally {\n                    setLoading(false);\n                }\n            }\n        },\n        300,\n        [provider, props.text]\n    );\n    return (\n        <View>\n            <FlexView style={{ marginBottom: Spacing.small }}>\n                <Input\n                    value={props.text}\n                    onChangeText={props.onChangeText}\n                    placeholder={\"Token name, symbol or address\"}\n                    autoFocus={IS_DESKTOP}\n                    inputStyle={{ marginHorizontal: Spacing.tiny, fontSize: props.text ? 20 : 16 }}\n                    inputContainerStyle={{ borderBottomWidth: 0, marginRight: loading ? 32 : 0 }}\n                    labelStyle={{ height: 0 }}\n                    containerStyle={{\n                        ...border(),\n                        paddingHorizontal: Spacing.tiny,\n                        paddingTop: 12,\n                        paddingBottom: 0\n                    }}\n                />\n                {props.onAddToken && loading && <Loading />}\n            </FlexView>\n            {props.onAddToken && tokenToAdd && (\n                <TokenItem token={tokenToAdd} selected={true} onSelectToken={props.onAddToken} duplicate={duplicate} />\n            )}\n        </View>\n    );\n};\n\nconst Loading = () => <ActivityIndicator size={\"small\"} style={{ position: \"absolute\", right: 16, bottom: 16 }} />;\n\nconst TokenItem = (props: {\n    token: Token;\n    selected: boolean;\n    onSelectToken: (token: Token) => void;\n    duplicate: boolean;\n}) => {\n    const { accent } = useColors();\n    const onPress = useCallback(() => {\n        props.onSelectToken(props.token);\n    }, [props.onSelectToken, props.token]);\n    return (\n        <Selectable\n            selected={false}\n            disabled={true}\n            onPress={onPress}\n            containerStyle={{\n                marginBottom: ITEM_SEPARATOR_HEIGHT\n            }}>\n            <FlexView style={{ alignItems: \"center\" }}>\n                <TokenLogo token={props.token} />\n                <TokenName token={props.token} />\n                <View style={{ flex: 1 }} />\n                <Button\n                    type={\"clear\"}\n                    size={\"small\"}\n                    color={accent}\n                    title={props.duplicate ? \"Already Added\" : \"ADD \" + props.token.symbol}\n                    fontWeight={\"bold\"}\n                    onPress={onPress}\n                    disabled={props.duplicate}\n                    buttonStyle={{ paddingHorizontal: 4, height: 27 }}\n                />\n            </FlexView>\n        </Selectable>\n    );\n};\n\nexport default TokenSearch;\n","import React, { FC, useCallback, useContext, useEffect, useMemo, useState } from \"react\";\nimport { FlatList, View, ViewStyle } from \"react-native\";\n\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport useDelayedEffect from \"../hooks/useDelayedEffect\";\nimport Token from \"../types/Token\";\nimport CloseIcon from \"./CloseIcon\";\nimport Expandable from \"./Expandable\";\nimport FlexView from \"./FlexView\";\nimport { ITEM_SEPARATOR_HEIGHT } from \"./ItemSeparator\";\nimport Loading from \"./Loading\";\nimport Selectable from \"./Selectable\";\nimport SelectIcon from \"./SelectIcon\";\nimport Text from \"./Text\";\nimport TokenAmount from \"./TokenAmount\";\nimport TokenLogo from \"./TokenLogo\";\nimport TokenName from \"./TokenName\";\nimport TokenSearch from \"./TokenSearch\";\nimport TokenSymbol from \"./TokenSymbol\";\n\nexport interface TokenSelectProps {\n    title: string;\n    symbol: string;\n    onChangeSymbol: (symbol: string) => void;\n    disabled?: (token: Token) => boolean;\n    hidden?: (token: Token) => boolean;\n    style?: ViewStyle;\n}\n\nconst TokenSelect: FC<TokenSelectProps> = props => {\n    const { tokens, addCustomToken } = useContext(EthersContext);\n    const [search, setSearch] = useState(\"\");\n    const [query, setQuery] = useState(\"\");\n    const token = useMemo(() => tokens.find(t => t.symbol === props.symbol), [tokens, props.symbol]);\n    const onSelectToken = t => props.onChangeSymbol(t.symbol);\n    const onUnselectToken = () => props.onChangeSymbol(\"\");\n    const onAddToken = async (t: Token) => {\n        await addCustomToken(t);\n        setSearch(\"\");\n        setQuery(\"\");\n        props.onChangeSymbol(t.symbol);\n    };\n    const hidden = (t: Token) => {\n        if (query.length > 0) {\n            return !t.symbol.toLowerCase().includes(query) && !t.name.toLowerCase().includes(query);\n        }\n        return props.hidden?.(t) || false;\n    };\n    useEffect(() => setSearch(\"\"), [props.symbol]);\n    useDelayedEffect(() => setQuery(search.trim().toLowerCase()), 300, [search]);\n    return (\n        <View style={props.style}>\n            <Expandable title={props.title} expanded={!props.symbol} onExpand={() => props.onChangeSymbol(\"\")}>\n                <TokenSearch text={search} onChangeText={setSearch} tokens={tokens} onAddToken={onAddToken} />\n                <TokenList disabled={props.disabled} hidden={hidden} onSelectToken={onSelectToken} />\n            </Expandable>\n            {token && <TokenItem token={token} selected={true} onSelectToken={onUnselectToken} selectable={true} />}\n        </View>\n    );\n};\n\n// tslint:disable-next-line:max-func-body-length\nconst TokenList = (props: {\n    onSelectToken: (token: Token) => void;\n    disabled?: (token: Token) => boolean;\n    hidden?: (token: Token) => boolean;\n}) => {\n    const { loadingTokens, tokens } = useContext(EthersContext);\n    const renderItem = useCallback(\n        ({ item }) => {\n            return (\n                <TokenItem\n                    key={item.address}\n                    token={item}\n                    selected={false}\n                    onSelectToken={props.onSelectToken}\n                    disabled={props.disabled?.(item)}\n                />\n            );\n        },\n        [props.onSelectToken, props.disabled]\n    );\n    const data = useMemo(\n        () =>\n            tokens\n                .filter(token => (props.hidden ? !props.hidden(token) : true))\n                .sort(\n                    (t1, t2) =>\n                        (t2.balance.isZero() ? 0 : 10000000000) -\n                        (t1.balance.isZero() ? 0 : 10000000000) +\n                        t1.symbol.localeCompare(t2.symbol)\n                ),\n        [tokens, props.hidden]\n    );\n    return loadingTokens ? (\n        <Loading />\n    ) : data.length === 0 ? (\n        <EmptyList />\n    ) : (\n        <FlatList keyExtractor={item => item.address} data={data} renderItem={renderItem} />\n    );\n};\n\nconst EmptyList = () => {\n    return (\n        <View style={{ margin: Spacing.normal }}>\n            <Text disabled={true} style={{ textAlign: \"center\", width: \"100%\" }}>\n                {\"You don't have any matching tokens.\"}\n            </Text>\n        </View>\n    );\n};\n\nconst TokenItem = (props: {\n    token: Token;\n    selected: boolean;\n    onSelectToken: (token: Token) => void;\n    disabled?: boolean;\n    selectable?: boolean;\n}) => {\n    const onPress = useCallback(() => {\n        props.onSelectToken(props.token);\n    }, [props.onSelectToken, props.token]);\n    return (\n        <Selectable\n            selected={props.selected}\n            onPress={onPress}\n            disabled={props.disabled || props.selectable}\n            containerStyle={{\n                marginBottom: ITEM_SEPARATOR_HEIGHT\n            }}>\n            <FlexView style={{ alignItems: \"center\" }}>\n                <TokenLogo token={props.token} disabled={props.disabled} />\n                <TokenName token={props.token} disabled={props.disabled} />\n                <TokenAmount token={props.token} disabled={props.disabled} style={{ flex: 1, textAlign: \"right\" }} />\n                {IS_DESKTOP && <TokenSymbol token={props.token} disabled={props.disabled} />}\n                {props.selected ? <CloseIcon /> : <SelectIcon />}\n            </FlexView>\n        </Selectable>\n    );\n};\n\nexport default TokenSelect;\n","import React from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useLinker from \"../hooks/useLinker\";\nimport Notice from \"./Notice\";\n\nconst ExperimentalNotice = (props: { contractURL: string }) => {\n    const onPressContract = useLinker(props.contractURL, \"\", \"_blank\");\n    return (\n        <View style={{ marginVertical: Spacing.tiny }}>\n            <Notice\n                text={\n                    \"This feature is in beta and contracts are unaudited. Read the contract yourself and use it at your own risk.\"\n                }\n                color={\"orange\"}\n                buttonText={\"View Contract\"}\n                onPressButton={onPressContract}\n            />\n        </View>\n    );\n};\n\nexport default ExperimentalNotice;\n","import { useCallback, useContext, useEffect, useState } from \"react\";\n\nimport { Trade } from \"@sushiswap/sdk\";\nimport { Fetcher, Token, WETH } from \"@uniswap/sdk\";\nimport { ethers } from \"ethers\";\nimport useAsyncEffect from \"use-async-effect\";\nimport Fraction from \"../constants/Fraction\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport { formatBalance, isEmptyValue, parseBalance, pow10 } from \"../utils\";\nimport useDelayedEffect from \"./useDelayedEffect\";\nimport useDelayedOnBlockEffect from \"./useDelayedOnBlockEffect\";\nimport useSDK from \"./useSDK\";\nimport useSettlement from \"./useSettlement\";\nimport useSwapRouter from \"./useSwapRouter\";\nimport useTokenPairState, { TokenPairState } from \"./useTokenPairState\";\n\nexport type OrderType = \"market\" | \"limit\";\n\nexport interface SwapState extends TokenPairState {\n    orderType?: OrderType;\n    setOrderType: (orderType?: OrderType) => void;\n    priceInETH?: ethers.BigNumber | null;\n    trade?: Trade;\n    unsupported: boolean;\n    limitOrderUnsupported: boolean;\n    limitOrderPrice: string;\n    setLimitOrderPrice: (price: string) => void;\n    swapFee: string;\n    limitOrderFee: string;\n    limitOrderSwapFee: string;\n    limitOrderReturn: string;\n    onSwap: () => Promise<void>;\n    swapping: boolean;\n    onCreateOrder: () => Promise<void>;\n    creatingOrder: boolean;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst useSwapState: () => SwapState = () => {\n    const state = useTokenPairState();\n    const { chainId, provider, signer, kovanSigner, updateTokens } = useContext(EthersContext);\n    const { getTrade } = useSDK();\n    const { swap, calculateSwapFee } = useSwapRouter();\n    const { calculateLimitOrderFee, calculateLimitOrderReturn } = useSettlement();\n    const { createOrder } = useSettlement();\n    const [loading, setLoading] = useState(true);\n    const [orderType, setOrderType] = useState<OrderType>();\n    const [priceInETH, setPriceInETH] = useState<ethers.BigNumber | null>();\n    const [trade, setTrade] = useState<Trade>();\n    const [unsupported, setUnsupported] = useState(false);\n    const [swapFee, setSwapFee] = useState(\"\");\n    const [limitOrderPrice, setLimitOrderPrice] = useState<string>(\"\");\n    const [limitOrderFee, setLimitOrderFee] = useState(\"\");\n    const [limitOrderSwapFee, setLimitOrderSwapFee] = useState(\"\");\n    const [limitOrderReturn, setLimitOrderReturn] = useState(\"\");\n    const [swapping, setSwapping] = useState(false);\n    const [creatingOrder, setCreatingOrder] = useState(false);\n\n    useEffect(() => {\n        if (!orderType) {\n            state.setFromSymbol(\"\");\n        }\n        setLimitOrderPrice(\"\");\n    }, [orderType]);\n\n    useAsyncEffect(async () => {\n        setPriceInETH(undefined);\n        if (provider && state.fromToken) {\n            if (state.fromToken.symbol === \"WETH\") {\n                setPriceInETH(ethers.constants.WeiPerEther);\n            } else {\n                try {\n                    const fromToken = new Token(chainId, state.fromToken.address, state.fromToken.decimals);\n                    const toToken = WETH[chainId];\n                    const pair = await Fetcher.fetchPairData(fromToken, toToken, provider);\n                    setPriceInETH(parseBalance(pair.priceOf(toToken).toFixed(), fromToken.decimals));\n                } catch (e) {\n                    setPriceInETH(null);\n                }\n            }\n        }\n    }, [chainId, provider, state.fromToken]);\n\n    useDelayedEffect(\n        () => {\n            if (isEmptyValue(state.fromAmount)) {\n                setLimitOrderPrice(\"\");\n                setTrade(undefined);\n            }\n        },\n        300,\n        [state.fromAmount]\n    );\n\n    useDelayedOnBlockEffect(\n        async block => {\n            if (!block) {\n                setLoading(true);\n            }\n            if (state.fromToken && state.toToken && state.fromAmount && provider) {\n                const amount = parseBalance(state.fromAmount, state.fromToken.decimals);\n                if (!amount.isZero()) {\n                    setUnsupported(false);\n                    try {\n                        setTrade(await getTrade(state.fromToken, state.toToken, amount, provider));\n                    } catch (e) {\n                        setUnsupported(true);\n                    } finally {\n                        setLoading(false);\n                    }\n                }\n            }\n        },\n        () => \"getTrade(\" + state.fromSymbol + \",\" + state.toSymbol + \",\" + state.fromAmount + \")\",\n        [state.fromSymbol, state.toSymbol, state.fromAmount]\n    );\n\n    useAsyncEffect(() => {\n        if (trade && !isEmptyValue(state.fromAmount)) {\n            const fromAmount = parseBalance(state.fromAmount, state.fromToken!.decimals);\n            setSwapFee(formatBalance(calculateSwapFee(fromAmount), state.fromToken!.decimals, 8));\n            if (orderType === \"limit\") {\n                setLimitOrderFee(formatBalance(calculateLimitOrderFee(fromAmount), state.fromToken!.decimals, 8));\n                setLimitOrderSwapFee(\n                    formatBalance(\n                        calculateSwapFee(fromAmount.sub(calculateLimitOrderFee(fromAmount))),\n                        state.fromToken!.decimals,\n                        8\n                    )\n                );\n            }\n        }\n    }, [orderType, trade, state.fromAmount]);\n\n    useAsyncEffect(() => {\n        if (state.fromToken && state.toToken && !isEmptyValue(state.fromAmount) && !isEmptyValue(limitOrderPrice)) {\n            setLimitOrderReturn(\n                formatBalance(\n                    calculateLimitOrderReturn(\n                        state.fromToken,\n                        state.toToken,\n                        parseBalance(state.fromAmount, state.fromToken.decimals),\n                        limitOrderPrice\n                    ),\n                    state.toToken.decimals\n                )\n            );\n        }\n    }, [state.fromToken, state.toToken, state.fromAmount, limitOrderPrice]);\n\n    const onSwap = useCallback(async () => {\n        if (state.fromToken && state.toToken && state.fromAmount && signer && trade) {\n            setSwapping(true);\n            try {\n                const result = await swap(trade, signer);\n                if (result) {\n                    await result.tx.wait();\n                    await updateTokens();\n                    setTrade(undefined);\n                    setOrderType(undefined);\n                }\n            } finally {\n                setSwapping(false);\n            }\n        }\n    }, [state.fromToken, state.toToken, state.fromAmount, signer, trade]);\n\n    const onCreateOrder = useCallback(async () => {\n        if (\n            state.fromToken &&\n            state.toToken &&\n            state.fromAmount &&\n            !isEmptyValue(limitOrderPrice) &&\n            signer &&\n            kovanSigner\n        ) {\n            setCreatingOrder(true);\n            try {\n                const amountIn = parseBalance(state.fromAmount, state.fromToken.decimals);\n                const tx = await createOrder(\n                    state.fromToken,\n                    state.toToken,\n                    amountIn,\n                    Fraction.parse(limitOrderPrice)\n                        .apply(amountIn)\n                        .mul(pow10(state.toToken.decimals))\n                        .div(pow10(state.fromToken.decimals)),\n                    signer,\n                    kovanSigner\n                );\n                await tx.wait();\n                setTrade(undefined);\n                setOrderType(undefined);\n            } finally {\n                setCreatingOrder(false);\n            }\n        }\n    }, [state.fromToken, state.toToken, state.fromAmount, signer, kovanSigner, limitOrderPrice]);\n\n    return {\n        ...state,\n        loading: loading || state.loading,\n        orderType,\n        setOrderType,\n        priceInETH,\n        trade,\n        unsupported,\n        swapFee,\n        limitOrderPrice,\n        setLimitOrderPrice,\n        limitOrderFee,\n        limitOrderSwapFee,\n        limitOrderReturn,\n        onSwap,\n        swapping,\n        limitOrderUnsupported: orderType === \"limit\" && (state.fromSymbol === \"ETH\" || state.toSymbol === \"ETH\"),\n        onCreateOrder,\n        creatingOrder\n    };\n};\n\nexport default useSwapState;\n","import React, { useCallback, useContext, useState } from \"react\";\nimport { Platform, View } from \"react-native\";\n\nimport { ethers } from \"ethers\";\nimport useAsyncEffect from \"use-async-effect\";\nimport AmountMeta from \"../components/AmountMeta\";\nimport ApproveButton from \"../components/ApproveButton\";\nimport BackgroundImage from \"../components/BackgroundImage\";\nimport Border from \"../components/Border\";\nimport Button from \"../components/Button\";\nimport Container from \"../components/Container\";\nimport Content from \"../components/Content\";\nimport ErrorMessage from \"../components/ErrorMessage\";\nimport ExperimentalNotice from \"../components/ExperimentalNotice\";\nimport FetchingButton from \"../components/FetchingButton\";\nimport Heading from \"../components/Heading\";\nimport InfoBox from \"../components/InfoBox\";\nimport InsufficientBalanceButton from \"../components/InsufficientBalanceButton\";\nimport Meta from \"../components/Meta\";\nimport Notice from \"../components/Notice\";\nimport Select, { Option } from \"../components/Select\";\nimport Text from \"../components/Text\";\nimport Title from \"../components/Title\";\nimport TokenInput from \"../components/TokenInput\";\nimport TokenSelect from \"../components/TokenSelect\";\nimport UnsupportedButton from \"../components/UnsupportedButton\";\nimport WebFooter from \"../components/web/WebFooter\";\nimport { SwapSubMenu } from \"../components/web/WebSubMenu\";\nimport { ROUTER, SETTLEMENT } from \"../constants/contracts\";\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport Fraction from \"../constants/Fraction\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport useColors from \"../hooks/useColors\";\nimport useDelayedEffect from \"../hooks/useDelayedEffect\";\nimport useLinker from \"../hooks/useLinker\";\nimport useSwapState, { OrderType, SwapState } from \"../hooks/useSwapState\";\nimport MetamaskError from \"../types/MetamaskError\";\nimport Token from \"../types/Token\";\nimport { formatBalance, isEmptyValue, parseBalance } from \"../utils\";\nimport Screen from \"./Screen\";\n\nconst SwapScreen = () => {\n    return (\n        <Screen>\n            <Container>\n                <BackgroundImage />\n                <Content>\n                    <Title text={\"New Order\"} />\n                    <Text light={true}>Swap now or place a limit order with a desired price.</Text>\n                    <Swap />\n                </Content>\n                {Platform.OS === \"web\" && <WebFooter />}\n            </Container>\n            <SwapSubMenu />\n        </Screen>\n    );\n};\n\nconst Swap = () => {\n    const state = useSwapState();\n    return (\n        <View style={{ marginTop: Spacing.large }}>\n            <OrderTypeSelect state={state} />\n            <Border />\n            <FromTokenSelect state={state} />\n            <Border />\n            <ToTokenSelect state={state} />\n            <Border />\n            <AmountInput state={state} />\n            {state.orderType === \"limit\" && (\n                <View>\n                    <AmountNotice state={state} />\n                    <Border />\n                    <PriceInput state={state} />\n                </View>\n            )}\n            {!state.loading && !state.trade && <NoPairNotice state={state} />}\n            <TradeInfo state={state} />\n        </View>\n    );\n};\n\nconst OrderTypeSelect = ({ state }: { state: SwapState }) => {\n    const options: Option[] = [\n        { key: \"market\", title: \"Market Order\", description: \"Settle an order immediately\" },\n        { key: \"limit\", title: \"Limit Order\", description: \"Place an order with a desired price to be settled\" }\n    ];\n    return (\n        <View>\n            <Select\n                title={\"Order Type\"}\n                options={options}\n                option={options.find(option => option.key === state.orderType)}\n                setOption={option => state.setOrderType(option?.key as OrderType | undefined)}\n            />\n            {state.orderType === \"limit\" && (\n                <ExperimentalNotice\n                    contractURL={\n                        \"https://github.com/sushiswap/sushiswap-settlement/blob/master/contracts/Settlement.sol\"\n                    }\n                />\n            )}\n        </View>\n    );\n};\n\nconst FromTokenSelect = ({ state }: { state: SwapState }) => {\n    const { tokens, customTokens } = useContext(EthersContext);\n    if (!state.orderType) {\n        return <Heading text={\"Token To Sell\"} disabled={true} />;\n    }\n    const ETH = tokens ? tokens.find(token => token.symbol === \"ETH\") : null;\n    return (\n        <View>\n            <TokenSelect\n                title={\"Token To Sell\"}\n                symbol={state.fromSymbol}\n                onChangeSymbol={state.setFromSymbol}\n                hidden={token =>\n                    (!customTokens.find(t => t.address === token.address) && token.balance.isZero()) ||\n                    (state.orderType === \"limit\" && token.symbol === \"ETH\")\n                }\n            />\n            {state.orderType === \"limit\" && !state.fromSymbol && ETH && !ETH.balance.isZero() && (\n                <LimitOrderUnsupportedNotice />\n            )}\n        </View>\n    );\n};\n\nconst ToTokenSelect = ({ state }: { state: SwapState }) => {\n    if (!state.orderType || !state.fromSymbol) {\n        return <Heading text={\"Token To Buy\"} disabled={true} />;\n    }\n    return (\n        <View>\n            <TokenSelect\n                title={\"Token To Buy\"}\n                symbol={state.toSymbol}\n                onChangeSymbol={state.setToSymbol}\n                hidden={token =>\n                    token.symbol === state.fromSymbol || (state.orderType === \"limit\" && token.symbol === \"ETH\")\n                }\n            />\n            {state.orderType === \"limit\" && !state.toSymbol && <LimitOrderUnsupportedNotice />}\n        </View>\n    );\n};\n\nconst AmountInput = ({ state }: { state: SwapState }) => {\n    if (!state.fromSymbol || !state.toSymbol) {\n        return <Heading text={\"Amount\"} disabled={true} />;\n    }\n    return (\n        <View>\n            <Heading text={state.fromSymbol + \" Amount\"} />\n            <TokenInput\n                token={state.fromToken}\n                amount={state.fromAmount}\n                onAmountChanged={state.setFromAmount}\n                autoFocus={IS_DESKTOP}\n            />\n        </View>\n    );\n};\n\nconst AmountNotice = ({ state }: { state: SwapState }) => {\n    if (\n        state.priceInETH === undefined ||\n        isEmptyValue(state.fromAmount) ||\n        !state.fromToken ||\n        (state.priceInETH && parseBalance(state.fromAmount, state.fromToken.decimals).lte(state.priceInETH.mul(10)))\n    ) {\n        return <View />;\n    }\n    return (\n        <View style={{ marginTop: Spacing.small }}>\n            <Notice\n                text={\n                    state.priceInETH === null\n                        ? \"This token is not supported in beta.\"\n                        : \"Maximum allowed amount in beta is \" +\n                          formatBalance(state.priceInETH.mul(10), state.fromToken!.decimals) +\n                          \" \" +\n                          state.fromSymbol +\n                          \" (≈ 10 ETH).\"\n                }\n                color={\"red\"}\n            />\n        </View>\n    );\n};\n\nconst PriceInput = ({ state }: { state: SwapState }) => {\n    if (!state.fromSymbol || !state.toSymbol) {\n        return <Heading text={\"Minimum Price\"} disabled={true} />;\n    }\n    const marketPrice =\n        state.toToken && state.trade\n            ? parseBalance(state.trade.executionPrice.toFixed(state.toToken.decimals), state.toToken.decimals)\n            : ethers.constants.Zero;\n    return (\n        <TokenInput\n            title={\"Minimum Price (\" + state.toSymbol + \"/\" + state.fromSymbol + \")\"}\n            token={\n                {\n                    ...state.toToken,\n                    balance: marketPrice\n                } as Token\n            }\n            amount={state.limitOrderPrice}\n            onAmountChanged={state.setLimitOrderPrice}\n            maxButtonText={\"MARKET\"}\n        />\n    );\n};\n\nconst LimitOrderUnsupportedNotice = () => {\n    const { placeholder } = useColors();\n    return (\n        <Notice\n            text={\"⚠️ ETH not supported for limit orders. Use WETH instead.\"}\n            color={placeholder}\n            clear={true}\n            style={{ marginVertical: Spacing.small, marginHorizontal: Spacing.tiny }}\n        />\n    );\n};\n\nconst NoPairNotice = ({ state }: { state: SwapState }) => {\n    return (\n        <Notice\n            text={state.fromSymbol + \"-\" + state.toSymbol + \" pair hasn't been created yet.\"}\n            color={\"red\"}\n            style={{ marginTop: Spacing.normal }}\n        />\n    );\n};\n\nconst TradeInfo = ({ state }: { state: SwapState }) => {\n    if (\n        (state.fromSymbol === \"ETH\" && state.toSymbol === \"WETH\") ||\n        (state.fromSymbol === \"WETH\" && state.toSymbol === \"ETH\")\n    ) {\n        return <WrapInfo state={state} />;\n    }\n    const disabled =\n        state.fromSymbol === \"\" ||\n        state.toSymbol === \"\" ||\n        isEmptyValue(state.fromAmount) ||\n        (state.orderType === \"limit\" && state.fromSymbol === \"ETH\") ||\n        (!state.loading && !state.trade);\n    return (\n        <InfoBox>\n            {state.orderType === \"limit\" ? (\n                <LimitOrderInfo state={state} />\n            ) : (\n                <SwapInfo state={state} disabled={disabled} />\n            )}\n        </InfoBox>\n    );\n};\n\nconst WrapInfo = ({ state }: { state: SwapState }) => {\n    const disabled = isEmptyValue(state.fromAmount);\n    return (\n        <InfoBox>\n            <Text style={{ fontSize: 28, marginBottom: Spacing.normal }} disabled={disabled}>\n                {disabled ? \"N/A\" : state.fromAmount + \" \" + state.toSymbol}\n            </Text>\n            <SwapControls state={state} />\n        </InfoBox>\n    );\n};\n\nconst SwapInfo = ({ state, disabled }: { state: SwapState; disabled: boolean }) => {\n    const amount = state.trade?.outputAmount?.toFixed();\n    const price = state.trade?.executionPrice?.toFixed();\n    const impact = state.trade?.priceImpact?.toFixed(2);\n    return (\n        <View>\n            <AmountMeta amount={amount} suffix={state.toSymbol} disabled={disabled} />\n            <Meta\n                label={\"Price\"}\n                text={price}\n                suffix={state.toSymbol + \"  = 1 \" + state.fromSymbol}\n                disabled={disabled}\n            />\n            <Meta label={\"Price Impact\"} text={impact} suffix={\"%\"} disabled={disabled} />\n            <Meta label={\"Fee (0.30%)\"} text={state.swapFee} suffix={state.fromSymbol} disabled={disabled} />\n            <SwapControls state={state} />\n        </View>\n    );\n};\n\n// tslint:disable-next-line:max-func-body-length\nconst SwapControls = ({ state }: { state: SwapState }) => {\n    const [error, setError] = useState<MetamaskError>({});\n    useAsyncEffect(() => setError({}), [state.fromSymbol, state.toSymbol, state.fromAmount]);\n    const approveRequired = state.fromSymbol !== \"ETH\" && !state.fromTokenAllowed;\n    return (\n        <View style={{ marginTop: Spacing.normal }}>\n            {!state.fromToken ||\n            !state.toToken ||\n            isEmptyValue(state.fromAmount) ||\n            (!state.loading && !state.trade) ? (\n                <SwapButton state={state} onError={setError} disabled={true} />\n            ) : parseBalance(state.fromAmount, state.fromToken.decimals).gt(state.fromToken.balance) ? (\n                <InsufficientBalanceButton symbol={state.fromSymbol} />\n            ) : state.fromSymbol === \"WETH\" && state.toSymbol === \"ETH\" ? (\n                <UnwrapButton state={state} onError={setError} />\n            ) : state.fromSymbol === \"ETH\" && state.toSymbol === \"WETH\" ? (\n                <WrapButton state={state} onError={setError} />\n            ) : state.unsupported ? (\n                <UnsupportedButton state={state} />\n            ) : state.loading || !state.trade ? (\n                <FetchingButton />\n            ) : (\n                <>\n                    <ApproveButton\n                        token={state.fromToken}\n                        spender={ROUTER}\n                        onSuccess={() => state.setFromTokenAllowed(true)}\n                        onError={setError}\n                        hidden={!approveRequired}\n                    />\n                    <SwapButton state={state} onError={setError} disabled={approveRequired} />\n                </>\n            )}\n            {error.message && error.code !== 4001 && <ErrorMessage error={error} />}\n        </View>\n    );\n};\n\nconst SwapButton = ({ state, onError, disabled }: { state: SwapState; onError: (e) => void; disabled: boolean }) => {\n    const onPress = useCallback(() => {\n        onError({});\n        state.onSwap().catch(onError);\n    }, [state.onSwap, onError]);\n    return (\n        <Button\n            title={state.fromSymbol && state.toSymbol ? \"Swap \" + state.fromSymbol + \"-\" + state.toSymbol : \"Swap\"}\n            disabled={disabled}\n            loading={state.swapping}\n            onPress={onPress}\n        />\n    );\n};\n\nconst WrapButton = ({ state, onError }: { state: SwapState; onError: (e) => void }) => {\n    const onPress = useCallback(async () => {\n        onError({});\n        state.onWrap().catch(onError);\n    }, []);\n    return <Button title={\"Wrap\"} loading={state.wrapping} onPress={onPress} />;\n};\n\nconst UnwrapButton = ({ state, onError }: { state: SwapState; onError: (e) => void }) => {\n    const onPress = useCallback(async () => {\n        onError({});\n        state.onUnwrap().catch(onError);\n    }, []);\n    return <Button title={\"Unwrap\"} loading={state.unwrapping} onPress={onPress} />;\n};\n\nconst LimitOrderInfo = ({ state }: { state: SwapState }) => {\n    const d = !state.trade?.executionPrice;\n    return (\n        <View>\n            <Text\n                disabled={isEmptyValue(state.limitOrderReturn)}\n                style={{ fontSize: 28, marginBottom: Spacing.normal }}>\n                {isEmptyValue(state.limitOrderReturn) ? \"N/A\" : state.limitOrderReturn + \" \" + state.toSymbol}\n            </Text>\n            <Meta\n                label={\"Market Price\"}\n                text={state.trade?.executionPrice?.toFixed(8) || undefined}\n                suffix={state.toSymbol + \" / \" + state.fromSymbol + \"\"}\n                disabled={d}\n            />\n            <Meta label={\"Relayer Fee (0.20%)\"} text={state.limitOrderFee} suffix={state.fromSymbol} disabled={d} />\n            <Meta label={\"Swap Fee (0.30%)\"} text={state.limitOrderSwapFee} suffix={state.fromSymbol} disabled={d} />\n            <Meta label={\"Expiration\"} text={\"24 Hours From Now\"} disabled={d} />\n            <LimitOrderControls state={state} />\n        </View>\n    );\n};\n\n// tslint:disable-next-line:max-func-body-length\nconst LimitOrderControls = ({ state }: { state: SwapState }) => {\n    const { getTokenAllowance } = useContext(EthersContext);\n    const [error, setError] = useState<MetamaskError>({});\n    const [allowed, setAllowed] = useState<boolean>();\n    useAsyncEffect(() => setError({}), [state.fromSymbol, state.toSymbol, state.fromAmount]);\n    useDelayedEffect(\n        async () => {\n            if (state.fromToken && !isEmptyValue(state.fromAmount)) {\n                const fromAmount = parseBalance(state.fromAmount, state.fromToken.decimals);\n                const allowance = await getTokenAllowance(state.fromToken.address, SETTLEMENT);\n                setAllowed(ethers.BigNumber.from(allowance).gte(fromAmount));\n            }\n        },\n        500,\n        [state.fromToken, state.fromAmount]\n    );\n    const disabled =\n        state.orderType === \"market\" ||\n        state.toSymbol === \"\" ||\n        !state.fromToken ||\n        !state.toToken ||\n        isEmptyValue(state.fromAmount) ||\n        !state.priceInETH ||\n        parseBalance(state.fromAmount, state.fromToken!.decimals).gt(state.priceInETH.mul(10)) ||\n        !state.trade ||\n        isEmptyValue(state.limitOrderPrice);\n    return (\n        <View style={{ marginTop: Spacing.normal }}>\n            {disabled ? (\n                <PlaceOrderButton state={state} onError={setError} disabled={true} />\n            ) : parseBalance(state.fromAmount, state.fromToken!.decimals).gt(state.fromToken!.balance) ? (\n                <InsufficientBalanceButton symbol={state.fromSymbol} />\n            ) : !Fraction.parse(state.limitOrderPrice).gt(\n                  Fraction.parse(state.trade!.executionPrice.toFixed(state.toToken!.decimals))\n              ) ? (\n                <PriceTooLowButton />\n            ) : state.unsupported ? (\n                <UnsupportedButton state={state} />\n            ) : state.loading || !state.trade ? (\n                <FetchingButton />\n            ) : (\n                <>\n                    <ApproveButton\n                        token={state.fromToken!}\n                        spender={SETTLEMENT}\n                        onSuccess={() => setAllowed(true)}\n                        onError={setError}\n                        hidden={allowed}\n                    />\n                    <PlaceOrderButton state={state} onError={setError} disabled={!allowed} />\n                </>\n            )}\n            {error.message && error.code !== 4001 && <ErrorMessage error={error} />}\n        </View>\n    );\n};\n\nconst PriceTooLowButton = () => {\n    return <Button title={\"Set Price Greater Than Market\"} disabled={true} />;\n};\n\nconst PlaceOrderButton = ({\n    state,\n    onError,\n    disabled\n}: {\n    state: SwapState;\n    onError: (e) => void;\n    disabled: boolean;\n}) => {\n    const goToLimitOrders = useLinker(\"/swap/my-orders\", \"LimitOrders\");\n    const onPress = useCallback(async () => {\n        onError({});\n        try {\n            await state.onCreateOrder();\n            goToLimitOrders();\n        } catch (e) {\n            onError(e);\n        }\n    }, [state.onCreateOrder, goToLimitOrders, onError]);\n    return <Button title={\"Place Limit Order\"} disabled={disabled} loading={state.creatingOrder} onPress={onPress} />;\n};\n\nexport default SwapScreen;\n"],"sourceRoot":""}